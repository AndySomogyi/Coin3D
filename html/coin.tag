<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>barrier.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>barrier_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_barrier *</type>
      <name>cc_barrier_construct</name>
      <anchorfile>barrier_8h.html</anchorfile>
      <anchor>a08b3fa4e3a37add61b05759033d4de1b</anchor>
      <arglist>(unsigned int numthreads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_barrier_destruct</name>
      <anchorfile>barrier_8h.html</anchorfile>
      <anchor>aadab0c4cb10481f3e272885a84a4709d</anchor>
      <arglist>(cc_barrier *barrier)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_barrier_enter</name>
      <anchorfile>barrier_8h.html</anchorfile>
      <anchor>acb9ec6cb444608a16d1bed98a55949ae</anchor>
      <arglist>(cc_barrier *barrier)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>common_8h</filename>
    <member kind="typedef">
      <type>struct cc_sched</type>
      <name>cc_sched</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a42acbbf50baecd447dfbc76305b4bafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_wpool</type>
      <name>cc_wpool</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a5cd98b5d28446124b569ac260b1ca774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_worker</type>
      <name>cc_worker</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a256d99f9f55c522f7b478a5e091a7aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_thread</type>
      <name>cc_thread</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a125b0ce154c9b9ead0a92df5abdbed70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_mutex</type>
      <name>cc_mutex</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a480e847013035e71e32afbb8f8470626</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_rwmutex</type>
      <name>cc_rwmutex</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a2aeb009bcdf2e26aa2bb3275e09422cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_condvar</type>
      <name>cc_condvar</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a4009ed32241ef5637806e8526c9061db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_storage</type>
      <name>cc_storage</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a39bad19f9e36be7b7ec7c498e1a7254a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_fifo</type>
      <name>cc_fifo</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a7d996ed6e701d03f8e9480b55a540828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_barrier</type>
      <name>cc_barrier</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a697b4c8e006ee21aacf099a7377a8ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_recmutex</type>
      <name>cc_recmutex</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a33e7e331036f7b76a8b14ad03a226969</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>cc_precedence</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a8fee93200a830bf8d695dc1ad90284bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>cc_threads_implementation</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a8aea26903d4582f3645184059e50e25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>cc_retval</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>afb1e455fcfc68469973c055b20999d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_thread_implementation</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>a135759144d479fdfc6346eb99bd6a91f</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>condvar.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>condvar_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_condvar *</type>
      <name>cc_condvar_construct</name>
      <anchorfile>condvar_8h.html</anchorfile>
      <anchor>af43cd24911db044ca2481fdccde7a1f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_condvar_destruct</name>
      <anchorfile>condvar_8h.html</anchorfile>
      <anchor>afb0209d8ddc637437fe467c14d407832</anchor>
      <arglist>(cc_condvar *condvar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_condvar_wait</name>
      <anchorfile>condvar_8h.html</anchorfile>
      <anchor>aef8501afbc406efd662e8175546edd14</anchor>
      <arglist>(cc_condvar *condvar, cc_mutex *mutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_condvar_timed_wait</name>
      <anchorfile>condvar_8h.html</anchorfile>
      <anchor>aa52ad3084323b1619ab73d5eaf6fbb88</anchor>
      <arglist>(cc_condvar *condvar, cc_mutex *mutex, cc_time period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_condvar_wake_one</name>
      <anchorfile>condvar_8h.html</anchorfile>
      <anchor>a07daf12565da74c1c8adc7a3023468a5</anchor>
      <arglist>(cc_condvar *condvar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_condvar_wake_all</name>
      <anchorfile>condvar_8h.html</anchorfile>
      <anchor>aa0855441ff36d1ad59ec4e576ff85e0d</anchor>
      <arglist>(cc_condvar *condvar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debugerror.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/errors/</path>
    <filename>debugerror_8h</filename>
    <includes id="error_8h" name="error.h" local="no" imported="no">Inventor/C/errors/error.h</includes>
    <member kind="typedef">
      <type>struct cc_debugerror</type>
      <name>cc_debugerror</name>
      <anchorfile>group__errors.html</anchorfile>
      <anchor>ga98981b5dfb3a50dba80de1fdf6aa9109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>cc_debugerror_cb</name>
      <anchorfile>debugerror_8h.html</anchorfile>
      <anchor>a1d3f377f90c7732d23b13dc8fd80c7e3</anchor>
      <arglist>(const cc_debugerror *err, void *data)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CC_DEBUGERROR_SEVERITY</name>
      <anchorfile>debugerror_8h.html</anchorfile>
      <anchor>a6f1bb3b059794d3c57998471a0dc33e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CC_DEBUGERROR_ERROR</name>
      <anchorfile>debugerror_8h.html</anchorfile>
      <anchor>a6f1bb3b059794d3c57998471a0dc33e3a7f3503747456ebd36e35051d2b5cd09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CC_DEBUGERROR_WARNING</name>
      <anchorfile>debugerror_8h.html</anchorfile>
      <anchor>a6f1bb3b059794d3c57998471a0dc33e3a60b297f683404656a5c76db3feab4eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CC_DEBUGERROR_INFO</name>
      <anchorfile>debugerror_8h.html</anchorfile>
      <anchor>a6f1bb3b059794d3c57998471a0dc33e3a3b48d0a938231b85aee9d4a58d8f0f56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>error.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/errors/</path>
    <filename>error_8h</filename>
    <includes id="string_8h" name="string.h" local="no" imported="no">Inventor/C/base/string.h</includes>
    <member kind="typedef">
      <type>struct cc_error</type>
      <name>cc_error</name>
      <anchorfile>group__errors.html</anchorfile>
      <anchor>ga1fb56dcbdf4946c4519c715b92caca14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>cc_error_cb</name>
      <anchorfile>error_8h.html</anchorfile>
      <anchor>ac4504cffc1a4f2f2bc889178d3818f75</anchor>
      <arglist>(const cc_error *err, void *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fifo.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>fifo_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_fifo *</type>
      <name>cc_fifo_new</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>a4e4fcdd2972f0f1bb11b2d4745079191</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_fifo_delete</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>aef1a8b82445d1674f0d9806e4e86ab4b</anchor>
      <arglist>(cc_fifo *fifo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_fifo_assign</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>a4b59b38f87481efc2041bb7bc2c8a13c</anchor>
      <arglist>(cc_fifo *fifo, void *ptr, uint32_t type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_fifo_retrieve</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>ae22cfbc1394df9c68a2518d00b33f406</anchor>
      <arglist>(cc_fifo *fifo, void **ptr, uint32_t *type)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_fifo_try_retrieve</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>aecd1aa4e9efb711dbbba929fcf23c17b</anchor>
      <arglist>(cc_fifo *fifo, void **ptr, uint32_t *type)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cc_fifo_size</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>a3cf31898a7217a97ef00324cc0d6e0c5</anchor>
      <arglist>(cc_fifo *fifo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_fifo_lock</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>a654abc1b5249b4b8348f4aebb52bd900</anchor>
      <arglist>(cc_fifo *fifo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_fifo_unlock</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>a97d46b795994d8e6d7237d99393d8d94</anchor>
      <arglist>(cc_fifo *fifo)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_fifo_peek</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>a254a1a966ae1da0153f884e9b1df2c92</anchor>
      <arglist>(cc_fifo *fifo, void **item, uint32_t *type)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_fifo_contains</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>af9f1a63db8598d795a3b5f07fcca52f4</anchor>
      <arglist>(cc_fifo *fifo, void *item)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_fifo_reclaim</name>
      <anchorfile>fifo_8h.html</anchorfile>
      <anchor>ab43246ce53fc777cfefcd85407e08e83</anchor>
      <arglist>(cc_fifo *fifo, void *item)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/base/</path>
    <filename>hash_8h</filename>
    <member kind="typedef">
      <type>uintptr_t</type>
      <name>cc_hash_key</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>af06662abf2e6f6f516b00673cba5969b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_hash</type>
      <name>cc_hash</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a727fda23295414ad0fc28e16be55f8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cc_hash_key</type>
      <name>cc_hash_func</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a4898219b43dabf39e47a1d061c440277</anchor>
      <arglist>(const cc_hash_key key)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>cc_hash_apply_func</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>ac1fff00729b2bb34f90bfbd4121a2e61</anchor>
      <arglist>(cc_hash_key key, void *val, void *closure)</arglist>
    </member>
    <member kind="function">
      <type>cc_hash *</type>
      <name>cc_hash_construct</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a5ddc99f3996de4a625ff68a415fe597b</anchor>
      <arglist>(unsigned int size, float loadfactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_hash_destruct</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>aec73575d34a0ef54ae43d36ff056ddd9</anchor>
      <arglist>(cc_hash *ht)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_hash_clear</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a7f7571eab4742e08fe4a0290dc97369a</anchor>
      <arglist>(cc_hash *ht)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_hash_put</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>af7f9e79d9d42b55093cdf2eb6dd380d8</anchor>
      <arglist>(cc_hash *ht, cc_hash_key key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_hash_get</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>ae48139859990f932d46bfd311e9e5612</anchor>
      <arglist>(cc_hash *ht, cc_hash_key key, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_hash_remove</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>ac935a65f1170c7fcd2a5bb2f739ae5fd</anchor>
      <arglist>(cc_hash *ht, cc_hash_key key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_hash_apply</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a012b0962e9368b8eadd3f579511e04bf</anchor>
      <arglist>(cc_hash *ht, cc_hash_apply_func *func, void *closure)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cc_hash_get_num_elements</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a7c5f67dc300bcfa466d9658749186ff9</anchor>
      <arglist>(cc_hash *ht)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_hash_set_hash_func</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a7d83ee3b50d24b6c614d824f466a5f7a</anchor>
      <arglist>(cc_hash *ht, cc_hash_func *func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_hash_print_stat</name>
      <anchorfile>hash_8h.html</anchorfile>
      <anchor>a9f2f3e61fd5a5ca79329d43ac4812474</anchor>
      <arglist>(cc_hash *ht)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>heap.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/base/</path>
    <filename>heap_8h</filename>
    <member kind="typedef">
      <type>int</type>
      <name>cc_heap_compare_cb</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a47f3785a4735870bb7386a9e0a334625</anchor>
      <arglist>(void *o1, void *o2)</arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_heap</type>
      <name>cc_heap</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a3cfe921d58e2792362b8c28cc74c2637</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cc_heap *</type>
      <name>cc_heap_construct</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a9be3b026a6ef0c5d78fffd46ac3b3b8c</anchor>
      <arglist>(unsigned int size, cc_heap_compare_cb *comparecb, SbBool support_remove)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_heap_destruct</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a0288a01e95c1a24413645d0623a82166</anchor>
      <arglist>(cc_heap *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_heap_clear</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a71e9aa42386f736864042e72ee7ad0ca</anchor>
      <arglist>(cc_heap *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_heap_add</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>aefa3ba63b7ace7b1cc0d774d54576a4f</anchor>
      <arglist>(cc_heap *h, void *o)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>cc_heap_get_top</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>aa3173f1d3d5a0f8518380a7b713a952a</anchor>
      <arglist>(cc_heap *h)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>cc_heap_extract_top</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>aa253e04784df1765ae4769fe80b28cea</anchor>
      <arglist>(cc_heap *h)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_heap_remove</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a088aeb698e4df777529b702e3f523235</anchor>
      <arglist>(cc_heap *h, void *o)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cc_heap_elements</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>aae0cabf2363726f31257dfbbfef3765f</anchor>
      <arglist>(cc_heap *h)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_heap_empty</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>ade2be8b0679dbb5d9be8c6ac486a84f8</anchor>
      <arglist>(cc_heap *h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memalloc.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/base/</path>
    <filename>memalloc_8h</filename>
    <member kind="typedef">
      <type>struct cc_memalloc</type>
      <name>cc_memalloc</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>ae3c740f22f57a7a7d7a05b1cce58c451</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>cc_memalloc_strategy_cb</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>abc5453b97baa2e9a66c2a1130270cc15</anchor>
      <arglist>(const int numunits_allocated)</arglist>
    </member>
    <member kind="function">
      <type>cc_memalloc *</type>
      <name>cc_memalloc_construct</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>ac9ed08ff8666e9dac4c2060f4b5ea7ca</anchor>
      <arglist>(const unsigned int unitsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_memalloc_destruct</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>a12e3bbd5b1a9771b5af9a0becf7642dc</anchor>
      <arglist>(cc_memalloc *allocator)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>cc_memalloc_allocate</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>ab51b6af04b140b1107b08187f3b57237</anchor>
      <arglist>(cc_memalloc *allocator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_memalloc_deallocate</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>a90bd1bc461b30fc15280b1da65007c3a</anchor>
      <arglist>(cc_memalloc *allocator, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_memalloc_clear</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>a5161cb02bd23ce15d6103960f4591d55</anchor>
      <arglist>(cc_memalloc *allocator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_memalloc_set_strategy</name>
      <anchorfile>memalloc_8h.html</anchorfile>
      <anchor>a3de013b2bf9a5c6dfd24fea80ed9f59c</anchor>
      <arglist>(cc_memalloc *allocator, cc_memalloc_strategy_cb *cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mutex.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>mutex_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_mutex *</type>
      <name>cc_mutex_construct</name>
      <anchorfile>mutex_8h.html</anchorfile>
      <anchor>a67514cef4b9e1d00b0b0351e8cc2f3e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_mutex_destruct</name>
      <anchorfile>mutex_8h.html</anchorfile>
      <anchor>ae7c298016280a87354ee7f53f9774104</anchor>
      <arglist>(cc_mutex *mutex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_mutex_lock</name>
      <anchorfile>mutex_8h.html</anchorfile>
      <anchor>ab68ff1ae48b2a4e79c2e80920efb464a</anchor>
      <arglist>(cc_mutex *mutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_mutex_try_lock</name>
      <anchorfile>mutex_8h.html</anchorfile>
      <anchor>ad82cc2b3ffa50695c8b311c9312e1316</anchor>
      <arglist>(cc_mutex *mutex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_mutex_unlock</name>
      <anchorfile>mutex_8h.html</anchorfile>
      <anchor>a958bb509f74af082422fe35a11984cfd</anchor>
      <arglist>(cc_mutex *mutex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbptree.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/base/</path>
    <filename>rbptree_8h</filename>
    <member kind="typedef">
      <type>struct cc_rbptree_node</type>
      <name>cc_rbptree_node</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>a5209167b68ccfcbe6d068b16057102ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_rbptree</type>
      <name>cc_rbptree</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>ab09eebdf9578e3f9aa6a2e6c852c76ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>cc_rbptree_traversecb</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>a48571686e40c3566ebf3e9458b2aaa17</anchor>
      <arglist>(void *p, void *data, void *closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_rbptree_init</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>af09e13486f87122b6d6f096960415c8b</anchor>
      <arglist>(cc_rbptree *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_rbptree_clean</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>aa6d7161d1c7b096a40e4ade32414867c</anchor>
      <arglist>(cc_rbptree *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_rbptree_insert</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>a84a326595b5d2def77f6727a666a00ba</anchor>
      <arglist>(cc_rbptree *t, void *p, void *data)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_rbptree_remove</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>a77937a81bb8d88f04a23bab29d614194</anchor>
      <arglist>(cc_rbptree *t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>cc_rbptree_size</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>a2806ddfd9cf98ae83ff39154572886d2</anchor>
      <arglist>(const cc_rbptree *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_rbptree_traverse</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>abf647ec6e901c359427cf7c868ca9db0</anchor>
      <arglist>(const cc_rbptree *t, cc_rbptree_traversecb *func, void *closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_rbptree_debug</name>
      <anchorfile>rbptree_8h.html</anchorfile>
      <anchor>aaea2989fd3afd6b7cf29e7407a544c00</anchor>
      <arglist>(const cc_rbptree *t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>recmutex.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>recmutex_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_recmutex *</type>
      <name>cc_recmutex_construct</name>
      <anchorfile>recmutex_8h.html</anchorfile>
      <anchor>ac104959a6bd31cca7d271fb1a90145d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_recmutex_destruct</name>
      <anchorfile>recmutex_8h.html</anchorfile>
      <anchor>ad2cbeae6e909c185748ffe0a62daf7f1</anchor>
      <arglist>(cc_recmutex *recmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_recmutex_lock</name>
      <anchorfile>recmutex_8h.html</anchorfile>
      <anchor>a236f7a2dbc904f55231186cbde2828f0</anchor>
      <arglist>(cc_recmutex *recmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_recmutex_unlock</name>
      <anchorfile>recmutex_8h.html</anchorfile>
      <anchor>ac19c670433c86270d18513b35bc186c4</anchor>
      <arglist>(cc_recmutex *recmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_recmutex_try_lock</name>
      <anchorfile>recmutex_8h.html</anchorfile>
      <anchor>aa6b36adf80a064ce584f0474bc3cfb91</anchor>
      <arglist>(cc_recmutex *recmutex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rwmutex.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>rwmutex_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_rwmutex *</type>
      <name>cc_rwmutex_construct</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>af66434284d47f7ec42a2e3e039c7ab3f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>cc_rwmutex *</type>
      <name>cc_rwmutex_construct_etc</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>a77b0f32aa4a12f3b96417f689e4d6fe1</anchor>
      <arglist>(cc_precedence policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_rwmutex_destruct</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>a00629d8116bd7783e5fcd94bc790aee8</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_rwmutex_write_lock</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>a6d095f0878e5ab4a7baf55d20e13c6a9</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_rwmutex_write_try_lock</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>a4276fa164bdddde7ab8a589145879398</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_rwmutex_write_unlock</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>ac42b9d7e4dc8fb6bab15cfc335f6356a</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_rwmutex_read_lock</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>abd167fb3395d37f0ccbd6e17c5a91c13</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_rwmutex_read_try_lock</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>a29505e11963df28bd489b008e9cac00f</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_rwmutex_read_unlock</name>
      <anchorfile>rwmutex_8h.html</anchorfile>
      <anchor>abaf5ab58f3d51204ea8bc2bf0bd18f9e</anchor>
      <arglist>(cc_rwmutex *rwmutex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SbClip.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SbClip_8h</filename>
    <class kind="class">SbClip</class>
    <member kind="typedef">
      <type>void *</type>
      <name>SbClipCallback</name>
      <anchorfile>SbClip_8h.html</anchorfile>
      <anchor>a7b99637988652ddb53ced29ce010e18e</anchor>
      <arglist>(const SbVec3f &amp;v0, void *vdata0, const SbVec3f &amp;v1, void *vdata1, const SbVec3f &amp;newvertex, void *userdata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SbDict.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SbDict_8h</filename>
    <class kind="class">SbDict</class>
    <member kind="typedef">
      <type>uintptr_t</type>
      <name>SbDictKeyType</name>
      <anchorfile>SbDict_8h.html</anchorfile>
      <anchor>acb82d07bb08c0b99aaf953617f4212fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>SbDictApplyFunc</name>
      <anchorfile>SbDict_8h.html</anchorfile>
      <anchor>aff41e28ec4b46527fe4c91be4616eca9</anchor>
      <arglist>(SbDictKeyType key, void *value)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>SbDictApplyDataFunc</name>
      <anchorfile>SbDict_8h.html</anchorfile>
      <anchor>a42154327d573d825af27f7b67e82846c</anchor>
      <arglist>(SbDictKeyType key, void *value, void *data)</arglist>
    </member>
    <member kind="typedef">
      <type>SbDictKeyType</type>
      <name>SbDictHashingFunc</name>
      <anchorfile>SbDict_8h.html</anchorfile>
      <anchor>a68895d232bbc01b1edc40809de2db5d6</anchor>
      <arglist>(const SbDictKeyType key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SbImage.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SbImage_8h</filename>
    <class kind="class">SbImage</class>
    <member kind="typedef">
      <type>SbBool</type>
      <name>SbImageScheduleReadCB</name>
      <anchorfile>SbImage_8h.html</anchorfile>
      <anchor>aec75901f7cf7231e18a9319c8c93027d</anchor>
      <arglist>(const SbString &amp;, SbImage *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>SbBool</type>
      <name>SbImageReadImageCB</name>
      <anchorfile>SbImage_8h.html</anchorfile>
      <anchor>a749e25189202ba72003c04cc9e591045</anchor>
      <arglist>(const SbString &amp;, SbImage *, void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SbProfilingData.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/</path>
    <filename>SbProfilingData_8h</filename>
    <includes id="SoType_8h" name="SoType.h" local="no" imported="no">Inventor/SoType.h</includes>
    <class kind="class">SbProfilingData</class>
    <member kind="typedef">
      <type>void *</type>
      <name>SbProfilingNodeKey</name>
      <anchorfile>SbProfilingData_8h.html</anchorfile>
      <anchor>ab504be724d5409b88c9735f92c9d2e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>SbProfilingNodeTypeKey</name>
      <anchorfile>SbProfilingData_8h.html</anchorfile>
      <anchor>a050c3662b04c5000d45cfcf792ce40db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const char *</type>
      <name>SbProfilingNodeNameKey</name>
      <anchorfile>SbProfilingData_8h.html</anchorfile>
      <anchor>a766ecc81c4a94c10db9f1282a9eaeb4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SbTesselator.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SbTesselator_8h</filename>
    <class kind="class">SbTesselator</class>
    <member kind="typedef">
      <type>void</type>
      <name>SbTesselatorCB</name>
      <anchorfile>SbTesselator_8h.html</anchorfile>
      <anchor>a7f7d2fcfc589decba0aab9eb3f253b90</anchor>
      <arglist>(void *v0, void *v1, void *v2, void *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sched.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>sched_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="typedef">
      <type>void</type>
      <name>cc_sched_f</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>a76544dc5c498d7b827403cb313051dab</anchor>
      <arglist>(void *closure)</arglist>
    </member>
    <member kind="function">
      <type>cc_sched *</type>
      <name>cc_sched_construct</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>aa6708ee2026420e559ebfac7a59ffa18</anchor>
      <arglist>(int numthreads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_sched_destruct</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>ad3970d66c72d7c3600a4512a0e6f10ac</anchor>
      <arglist>(cc_sched *sched)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_sched_set_num_threads</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>aa32ed8dd1ca6f5d31f6c177c919827d9</anchor>
      <arglist>(cc_sched *sched, int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_sched_get_num_threads</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>a9727b730645317fc320923e756a675c9</anchor>
      <arglist>(cc_sched *sched)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>cc_sched_schedule</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>a6fdaca4dd411f6baf4b6635f7879064b</anchor>
      <arglist>(cc_sched *sched, cc_sched_f *workfunc, void *closure, float priority)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_sched_unschedule</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>a7675245f822e5d88c1b2a38766aa794c</anchor>
      <arglist>(cc_sched *sched, uint32_t schedid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_sched_wait_all</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>af37556dd26772e72f650f3378bf99ffd</anchor>
      <arglist>(cc_sched *sched)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_sched_get_num_remaining</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>a9c269e9d5c97530f4a5b51df5272c776</anchor>
      <arglist>(cc_sched *sched)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_sched_set_num_allowed</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>ab32995a3067e56acbd21b362ca9be7d2</anchor>
      <arglist>(cc_sched *sched, int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_sched_change_priority</name>
      <anchorfile>sched_8h.html</anchorfile>
      <anchor>ae0a097a0cd951009b75dd7be2c16871d</anchor>
      <arglist>(cc_sched *sched, uint32_t schedid, float priority)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScXMLStateMachine.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/scxml/</path>
    <filename>ScXMLStateMachine_8h</filename>
    <class kind="class">ScXMLStateMachine</class>
    <member kind="typedef">
      <type>void</type>
      <name>ScXMLStateMachineDeleteCB</name>
      <anchorfile>ScXMLStateMachine_8h.html</anchorfile>
      <anchor>ae034fd3855c0742ad9ee1cf922ae9a93</anchor>
      <arglist>(void *userdata, ScXMLStateMachine *statemachine)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>ScXMLStateChangeCB</name>
      <anchorfile>ScXMLStateMachine_8h.html</anchorfile>
      <anchor>a382ec530b26743dc815f7cb832ce00a4</anchor>
      <arglist>(void *userdata, ScXMLStateMachine *statemachine, const char *stateidentifier, SbBool enterstate, SbBool success)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>ScXMLParallelStateChangeCB</name>
      <anchorfile>ScXMLStateMachine_8h.html</anchorfile>
      <anchor>abb78f2e452e7fe8ca2587c25c15097cf</anchor>
      <arglist>(void *userdata, ScXMLStateMachine *statemachine, int numstates, const char **stateidentifiers, SbBool enterstate, SbBool success)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoActionMethodList.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/lists/</path>
    <filename>SoActionMethodList_8h</filename>
    <includes id="SoType_8h" name="SoType.h" local="no" imported="no">Inventor/SoType.h</includes>
    <class kind="class">SoActionMethodList</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>SoActionMethod</name>
      <anchorfile>SoActionMethodList_8h.html</anchorfile>
      <anchor>a20da48d2b340cf58ff0fca763fcf1577</anchor>
      <arglist>)(SoAction *, SoNode *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoCallback.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoCallback_8h</filename>
    <class kind="class">SoCallback</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoCallbackCB</name>
      <anchorfile>SoCallback_8h.html</anchorfile>
      <anchor>ad9451945b593767f377104fab4bb2035</anchor>
      <arglist>(void *userdata, SoAction *action)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoCallbackAction.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/actions/</path>
    <filename>SoCallbackAction_8h</filename>
    <class kind="class">SoCallbackAction</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoTriangleCB</name>
      <anchorfile>SoCallbackAction_8h.html</anchorfile>
      <anchor>a38c75c113e2ddebb11872737e22de036</anchor>
      <arglist>(void *userdata, SoCallbackAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>SoLineSegmentCB</name>
      <anchorfile>SoCallbackAction_8h.html</anchorfile>
      <anchor>a6e4ebc8a54b96078d4a70b552d8a1f86</anchor>
      <arglist>(void *userdata, SoCallbackAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>SoPointCB</name>
      <anchorfile>SoCallbackAction_8h.html</anchorfile>
      <anchor>a404627c51c9d7daaae5351ca11fd815d</anchor>
      <arglist>(void *userdata, SoCallbackAction *action, const SoPrimitiveVertex *v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoCallbackList.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/lists/</path>
    <filename>SoCallbackList_8h</filename>
    <class kind="class">SoCallbackList</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoCallbackListCB</name>
      <anchorfile>SoCallbackList_8h.html</anchorfile>
      <anchor>af2e448a2584c8740fc2735ec3972c49e</anchor>
      <arglist>(void *userdata, void *callbackdata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoContextHandler.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/misc/</path>
    <filename>SoContextHandler_8h</filename>
    <class kind="class">SoContextHandler</class>
  </compound>
  <compound kind="file">
    <name>SoDB.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SoDB_8h</filename>
    <includes id="SoType_8h" name="SoType.h" local="no" imported="no">Inventor/SoType.h</includes>
    <class kind="class">SoDB</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoDBHeaderCB</name>
      <anchorfile>SoDB_8h.html</anchorfile>
      <anchor>adfef9190f2aba6f35abf08374dffc68a</anchor>
      <arglist>(void *data, SoInput *input)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoDragger.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/draggers/</path>
    <filename>SoDragger_8h</filename>
    <includes id="SoCallbackList_8h" name="SoCallbackList.h" local="no" imported="no">Inventor/lists/SoCallbackList.h</includes>
    <class kind="class">SoDragger</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoDraggerCB</name>
      <anchorfile>SoDragger_8h.html</anchorfile>
      <anchor>aee66fa82a01dba5b1b7b72c13cec68fc</anchor>
      <arglist>(void *data, SoDragger *dragger)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoEventCallback.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoEventCallback_8h</filename>
    <class kind="class">SoEventCallback</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoEventCallbackCB</name>
      <anchorfile>SoEventCallback_8h.html</anchorfile>
      <anchor>a6e0dbb53c95cc1225c031e027c7bc7b1</anchor>
      <arglist>(void *userdata, SoEventCallback *node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoExtSelection.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoExtSelection_8h</filename>
    <includes id="SoSelection_8h" name="SoSelection.h" local="no" imported="no">Inventor/nodes/SoSelection.h</includes>
    <includes id="SoCallbackAction_8h" name="SoCallbackAction.h" local="no" imported="no">Inventor/actions/SoCallbackAction.h</includes>
    <class kind="class">SoExtSelection</class>
  </compound>
  <compound kind="file">
    <name>SoForeignFileKit.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/ForeignFiles/</path>
    <filename>SoForeignFileKit_8h</filename>
    <class kind="class">SoForeignFileKit</class>
  </compound>
  <compound kind="file">
    <name>SoGLCacheContextElement.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/elements/</path>
    <filename>SoGLCacheContextElement_8h</filename>
    <class kind="class">SoGLCacheContextElement</class>
  </compound>
  <compound kind="file">
    <name>SoGLImage.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/misc/</path>
    <filename>SoGLImage_8h</filename>
    <includes id="SoType_8h" name="SoType.h" local="no" imported="no">Inventor/SoType.h</includes>
    <class kind="class">SoGLImage</class>
  </compound>
  <compound kind="file">
    <name>SoGLMultiTextureCoordinateElement.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/elements/</path>
    <filename>SoGLMultiTextureCoordinateElement_8h</filename>
    <includes id="SoMultiTextureCoordinateElement_8h" name="SoMultiTextureCoordinateElement.h" local="no" imported="no">Inventor/elements/SoMultiTextureCoordinateElement.h</includes>
    <class kind="class">SoGLMultiTextureCoordinateElement</class>
  </compound>
  <compound kind="file">
    <name>SoGLRenderAction.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/actions/</path>
    <filename>SoGLRenderAction_8h</filename>
    <class kind="class">SoGLRenderAction</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoGLRenderPassCB</name>
      <anchorfile>SoGLRenderAction_8h.html</anchorfile>
      <anchor>a53d49957c78db1408e769922d160cc0d</anchor>
      <arglist>(void *userdata)</arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>SoGLSortedObjectOrderCB</name>
      <anchorfile>SoGLRenderAction_8h.html</anchorfile>
      <anchor>a4ad9050a0255e669ec9714b2ae789d24</anchor>
      <arglist>(void *userdata, SoGLRenderAction *action)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoIntersectionDetectionAction.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/collision/</path>
    <filename>SoIntersectionDetectionAction_8h</filename>
    <includes id="SoCallbackAction_8h" name="SoCallbackAction.h" local="no" imported="no">Inventor/actions/SoCallbackAction.h</includes>
    <class kind="struct">SoIntersectingPrimitive</class>
    <class kind="class">SoIntersectionDetectionAction</class>
  </compound>
  <compound kind="file">
    <name>SoMultiTextureCoordinateElement.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/elements/</path>
    <filename>SoMultiTextureCoordinateElement_8h</filename>
    <class kind="class">SoMultiTextureCoordinateElement</class>
  </compound>
  <compound kind="file">
    <name>SoOutput.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SoOutput_8h</filename>
    <class kind="class">SoOutput</class>
  </compound>
  <compound kind="file">
    <name>SoProfilingReportGenerator.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/utils/</path>
    <filename>SoProfilingReportGenerator_8h</filename>
    <class kind="class">SoProfilingReportGenerator</class>
  </compound>
  <compound kind="file">
    <name>SoProto.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/misc/</path>
    <filename>SoProto_8h</filename>
    <class kind="class">SoProto</class>
  </compound>
  <compound kind="file">
    <name>SoRenderManager.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SoRenderManager_8h</filename>
    <includes id="SoGLRenderAction_8h" name="SoGLRenderAction.h" local="no" imported="no">Inventor/actions/SoGLRenderAction.h</includes>
    <class kind="class">SoRenderManager</class>
  </compound>
  <compound kind="file">
    <name>SoSceneManager.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SoSceneManager_8h</filename>
    <class kind="class">SoSceneManager</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoSceneManagerRenderCB</name>
      <anchorfile>SoSceneManager_8h.html</anchorfile>
      <anchor>abada319f5f2375442afabf9d7d61e726</anchor>
      <arglist>(void *userdata, class SoSceneManager *mgr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoScXMLNavigationTarget.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/navigation/</path>
    <filename>SoScXMLNavigationTarget_8h</filename>
    <class kind="class">SoScXMLNavigationTarget</class>
  </compound>
  <compound kind="file">
    <name>SoSelection.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoSelection_8h</filename>
    <class kind="class">SoSelection</class>
    <member kind="typedef">
      <type>SoPath *</type>
      <name>SoSelectionPickCB</name>
      <anchorfile>SoSelection_8h.html</anchorfile>
      <anchor>abdc320e66f9b345540a490491c618ecb</anchor>
      <arglist>(void *data, const SoPickedPoint *pick)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoSensor.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/sensors/</path>
    <filename>SoSensor_8h</filename>
    <class kind="class">SoSensor</class>
    <member kind="typedef">
      <type>void</type>
      <name>SoSensorCB</name>
      <anchorfile>SoSensor_8h.html</anchorfile>
      <anchor>a0e20257319c3430fe1cee699ef6e3420</anchor>
      <arglist>(void *data, SoSensor *sensor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoShaderProgram.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoShaderProgram_8h</filename>
    <class kind="class">SoShaderProgram</class>
  </compound>
  <compound kind="file">
    <name>SoType.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>SoType_8h</filename>
    <includes id="SbDict_8h" name="SbDict.h" local="no" imported="no">Inventor/SbDict.h</includes>
    <class kind="class">SbList</class>
    <class kind="class">SoType</class>
  </compound>
  <compound kind="file">
    <name>SoVertexAttributeElement.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/elements/</path>
    <filename>SoVertexAttributeElement_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoVRMLAnchor.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/VRMLnodes/</path>
    <filename>SoVRMLAnchor_8h</filename>
    <class kind="class">SoVRMLAnchor</class>
  </compound>
  <compound kind="file">
    <name>SoVRMLAudioClip.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/VRMLnodes/</path>
    <filename>SoVRMLAudioClip_8h</filename>
    <class kind="class">SoVRMLAudioClip</class>
  </compound>
  <compound kind="file">
    <name>SoVRMLImageTexture.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/VRMLnodes/</path>
    <filename>SoVRMLImageTexture_8h</filename>
    <includes id="SbImage_8h" name="SbImage.h" local="no" imported="no">Inventor/SbImage.h</includes>
    <class kind="class">SoVRMLImageTexture</class>
  </compound>
  <compound kind="file">
    <name>SoVRMLInline.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/VRMLnodes/</path>
    <filename>SoVRMLInline_8h</filename>
    <includes id="SoCallbackAction_8h" name="SoCallbackAction.h" local="no" imported="no">Inventor/actions/SoCallbackAction.h</includes>
    <class kind="class">SoVRMLInline</class>
  </compound>
  <compound kind="file">
    <name>SoVRMLScript.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/VRMLnodes/</path>
    <filename>SoVRMLScript_8h</filename>
    <class kind="class">SoVRMLScript</class>
  </compound>
  <compound kind="file">
    <name>SoWWWAnchor.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoWWWAnchor_8h</filename>
    <class kind="class">SoWWWAnchor</class>
  </compound>
  <compound kind="file">
    <name>SoWWWInline.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>SoWWWInline_8h</filename>
    <includes id="SoCallbackAction_8h" name="SoCallbackAction.h" local="no" imported="no">Inventor/actions/SoCallbackAction.h</includes>
    <class kind="class">SoWWWInline</class>
  </compound>
  <compound kind="file">
    <name>spidermonkey.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/glue/</path>
    <filename>spidermonkey_8h</filename>
  </compound>
  <compound kind="file">
    <name>storage.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>storage_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
  </compound>
  <compound kind="file">
    <name>string.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/base/</path>
    <filename>string_8h</filename>
    <class kind="struct">cc_string</class>
  </compound>
  <compound kind="file">
    <name>thread.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>thread_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
  </compound>
  <compound kind="file">
    <name>tidbits.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/</path>
    <filename>tidbits_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>cc_coin_atexit_static_internal</name>
      <anchorfile>tidbits_8h.html</anchorfile>
      <anchor>a543c2c5b6e2507250ab773f1838105ec</anchor>
      <arglist>(coin_atexit_f *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/XML/</path>
    <filename>types_8h</filename>
    <member kind="typedef">
      <type>struct cc_xml_doc</type>
      <name>cc_xml_doc</name>
      <anchorfile>group__XML.html</anchorfile>
      <anchor>ga4668bec10f4a41c447ba1c9d42721a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cc_xml_filter_choice</type>
      <name>cc_xml_filter_cb</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>af2b6235c6da1a1a26b0073741cee8d78</anchor>
      <arglist>(void *userdata, cc_xml_doc *doc, cc_xml_elt *elt, int pushing)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>worker.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>worker_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>cc_worker_destruct</name>
      <anchorfile>worker_8h.html</anchorfile>
      <anchor>abab35ee0bc4d8daa85f92e543c1282fd</anchor>
      <arglist>(cc_worker *worker)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_worker_start</name>
      <anchorfile>worker_8h.html</anchorfile>
      <anchor>ac5c05ca84a6b98e22b80c92e4c483f3e</anchor>
      <arglist>(cc_worker *worker, cc_worker_f *workfunc, void *closure)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wpool.h</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>wpool_8h</filename>
    <includes id="common_8h" name="common.h" local="no" imported="no">Inventor/C/threads/common.h</includes>
    <member kind="function">
      <type>cc_wpool *</type>
      <name>cc_wpool_construct</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>a9550e19fd66501b2d8f04ae3d1567e0d</anchor>
      <arglist>(int numworkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_wpool_destruct</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>a3a88eb052e62c806ad1ba3baa7a9a267</anchor>
      <arglist>(cc_wpool *pool)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cc_wpool_get_num_workers</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>a4dcdd6841fcde116c5db4110512ac349</anchor>
      <arglist>(cc_wpool *pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_wpool_set_num_workers</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>aa8dd9d5e8efbbd3bfc6868437eb1dde1</anchor>
      <arglist>(cc_wpool *pool, int newnum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_wpool_wait_all</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>aa72a4d47ebc25bde285eda7e92ab1d60</anchor>
      <arglist>(cc_wpool *pool)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>cc_wpool_try_begin</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>a124e8b13ad6d891464464faf1dc06720</anchor>
      <arglist>(cc_wpool *pool, int numworkersneeded)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_wpool_begin</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>af74a596c25276cf64940945ced3e1aac</anchor>
      <arglist>(cc_wpool *pool, int numworkersneeded)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_wpool_start_worker</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>ab6520bc3ada9718920816fda16fe345f</anchor>
      <arglist>(cc_wpool *pool, cc_wpool_f *workfunc, void *closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_wpool_end</name>
      <anchorfile>wpool_8h.html</anchorfile>
      <anchor>aee918e25fac8bb394789c70c3501a522</anchor>
      <arglist>(cc_wpool *pool)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>coin300</name>
    <title>New Features in Coin v3.0.0</title>
    <filename>coin300</filename>
  </compound>
  <compound kind="page">
    <name>coin250</name>
    <title>New Features in Coin v2.5.0</title>
    <filename>coin250</filename>
    <docanchor file="coin250" title="Geographical Data Support">geonodes</docanchor>
    <docanchor file="coin250" title="Generic GLSL Shader Support">shadernodes</docanchor>
    <docanchor file="coin250" title="Generic Shadow Rendering Functionality">shadownodes</docanchor>
    <docanchor file="coin250" title="Vertex Buffer Object (VBO) Usage">vborendering</docanchor>
    <docanchor file="coin250" title="Expanded Sb* Class Collection">sbclasses</docanchor>
    <docanchor file="coin250" title="Expanded Field Class Collection">fieldclasses</docanchor>
    <docanchor file="coin250" title="SoFrustumCamera node">frustumcamera</docanchor>
    <docanchor file="coin250" title="Miscellaneous">misc250</docanchor>
    <docanchor file="coin250" title="SoSearchAction on SoFile nodes">sofile</docanchor>
    <docanchor file="coin250" title="SbTypeInfo&lt;T&gt; template type information library">sbtypeinfo</docanchor>
    <docanchor file="coin250" title="Visual Studio Projects">vcprojects</docanchor>
  </compound>
  <compound kind="page">
    <name>coin240</name>
    <title>New Features in Coin v2.4.0</title>
    <filename>coin240</filename>
  </compound>
  <compound kind="page">
    <name>coin230</name>
    <title>New Features in Coin v2.3.0</title>
    <filename>coin230</filename>
    <docanchor file="coin230" title="More Multi-Texturing">multitexturing230</docanchor>
    <docanchor file="coin230" title="Texture coordinate mapping nodes">texcoordmaps</docanchor>
  </compound>
  <compound kind="page">
    <name>coin220</name>
    <title>New Features in Coin v2.2.0</title>
    <filename>coin220</filename>
    <docanchor file="coin220" title="Multi-Texturing">multitexturing220</docanchor>
    <docanchor file="coin220" title="Bump-Mapping">bumpmapping</docanchor>
    <docanchor file="coin220" title="Better Font Support">fontsupport</docanchor>
    <docanchor file="coin220" title="Render To Texture Support">scenetexture</docanchor>
    <docanchor file="coin220" title="Misc">misc</docanchor>
  </compound>
  <compound kind="page">
    <name>coin210</name>
    <title>New Features in Coin v2.1.0</title>
    <filename>coin210</filename>
    <docanchor file="coin210" title="HardCopy Support">hardcopy</docanchor>
    <docanchor file="coin210" title="FreeType and Win32 TrueType Font Support">fonts</docanchor>
    <docanchor file="coin210" title="Intersection Detection">intersectiondetection</docanchor>
    <docanchor file="coin210" title="SoLineHighlightRenderAction/SoBoxHighlightRenderAction and Multiple SoSelection Nodes">soselectionhighlight</docanchor>
    <docanchor file="coin210" title="Misc">misc210</docanchor>
    <docanchor file="coin210" title="Compressed File I/O Support">compressedio</docanchor>
    <docanchor file="coin210" title="Additional Convenience Functions">convenience</docanchor>
    <docanchor file="coin210" title="NO_COPY SoSFImage CopyPolicy">copypolicy</docanchor>
  </compound>
  <compound kind="page">
    <name>coin200</name>
    <title>New Features in Coin v2.0.0</title>
    <filename>coin200</filename>
    <docanchor file="coin200" title="Big-Image Support">bigimage</docanchor>
    <docanchor file="coin200" title="3D Textures Support">textures3d</docanchor>
    <docanchor file="coin200" title="3D Sound Support">sound3d</docanchor>
    <docanchor file="coin200" title="VRML97 Support">vrml97</docanchor>
    <docanchor file="coin200" title="Mac OS X Support">macosx</docanchor>
    <docanchor file="coin200" title="Multi-Pipe Rendering Support">multipipe</docanchor>
  </compound>
  <compound kind="page">
    <name>vbo_rendering</name>
    <title>Vertex array and VBO rendering in Coin</title>
    <filename>vbo_rendering</filename>
  </compound>
  <compound kind="page">
    <name>Coin_books</name>
    <title>Books Related to Open Inventor / Coin</title>
    <filename>Coin_books</filename>
    <docanchor file="Coin_books" title="The Inventor Mentor">mentorbook</docanchor>
    <docanchor file="Coin_books" title="The Inventor Toolmaker">toolmakerbook</docanchor>
    <docanchor file="Coin_books" title="The Annotated VRML2.0 Reference Manual">vrml2refbook</docanchor>
    <docanchor file="Coin_books" title="The Open GL Programming Manual">openglbook</docanchor>
    <docanchor file="Coin_books" title="The Open Inventor C++ Reference Manual">oirefbook</docanchor>
  </compound>
  <compound kind="page">
    <name>Coin_environment_variables</name>
    <title>Environment variables</title>
    <filename>Coin_environment_variables</filename>
  </compound>
  <compound kind="page">
    <name>foreignfilesupport</name>
    <title>Foreign File Format Support</title>
    <filename>foreignfilesupport</filename>
  </compound>
  <compound kind="page">
    <name>libraries</name>
    <title>Coin use of 3rd party libraries.</title>
    <filename>libraries</filename>
    <docanchor file="libraries" title="The simage library">simage</docanchor>
  </compound>
  <compound kind="page">
    <name>compression_overview</name>
    <title>File compression</title>
    <filename>compression_overview</filename>
  </compound>
  <compound kind="page">
    <name>dynload_overview</name>
    <title>Dynamic Loading of Extension Nodes</title>
    <filename>dynload_overview</filename>
  </compound>
  <compound kind="page">
    <name>coin_shaders</name>
    <title>Shaders in Coin</title>
    <filename>coin_shaders</filename>
  </compound>
  <compound kind="page">
    <name>multithreading_support</name>
    <title>Multithreading Support in Coin</title>
    <filename>multithreading_support</filename>
  </compound>
  <compound kind="page">
    <name>xmlparsing</name>
    <title>XML Parsing with Coin</title>
    <filename>xmlparsing</filename>
  </compound>
  <compound kind="group">
    <name>actions</name>
    <title>Action Classes</title>
    <filename>group__actions.html</filename>
    <class kind="class">SoAction</class>
    <class kind="class">SoAudioRenderAction</class>
    <class kind="class">SoBoxHighlightRenderAction</class>
    <class kind="class">SoCallbackAction</class>
    <class kind="class">SoGetBoundingBoxAction</class>
    <class kind="class">SoGetMatrixAction</class>
    <class kind="class">SoGetPrimitiveCountAction</class>
    <class kind="class">SoGLRenderAction</class>
    <class kind="class">SoHandleEventAction</class>
    <class kind="class">SoLineHighlightRenderAction</class>
    <class kind="class">SoPickAction</class>
    <class kind="class">SoRayPickAction</class>
    <class kind="class">SoReorganizeAction</class>
    <class kind="class">SoSearchAction</class>
    <class kind="class">SoToVRML2Action</class>
    <class kind="class">SoToVRMLAction</class>
    <class kind="class">SoWriteAction</class>
    <class kind="class">SoIntersectionDetectionAction</class>
    <class kind="class">SoActionMethodList</class>
    <class kind="class">SoEnabledElementsList</class>
  </compound>
  <compound kind="group">
    <name>base</name>
    <title>Base Classes</title>
    <filename>group__base.html</filename>
    <class kind="class">SbBox2d</class>
    <class kind="class">SbBox2f</class>
    <class kind="class">SbBox2i32</class>
    <class kind="class">SbBox2s</class>
    <class kind="class">SbBox3d</class>
    <class kind="class">SbBox3f</class>
    <class kind="class">SbBox3s</class>
    <class kind="class">SbBSPTree</class>
    <class kind="class">SbClip</class>
    <class kind="class">SbColor4f</class>
    <class kind="class">SbColor</class>
    <class kind="class">SbCylinder</class>
    <class kind="class">SbDict</class>
    <class kind="class">SbDPLine</class>
    <class kind="class">SbDPMatrix</class>
    <class kind="class">SbDPPlane</class>
    <class kind="class">SbDPRotation</class>
    <class kind="class">SbDPViewVolume</class>
    <class kind="class">SbHeap</class>
    <class kind="class">SbImage</class>
    <class kind="class">SbLine</class>
    <class kind="class">SbMatrix</class>
    <class kind="class">SbName</class>
    <class kind="class">SbOctTree</class>
    <class kind="class">SbPlane</class>
    <class kind="class">SbRotation</class>
    <class kind="class">SbSphere</class>
    <class kind="class">SbString</class>
    <class kind="class">SbTesselator</class>
    <class kind="class">SbTime</class>
    <class kind="class">SbVec2d</class>
    <class kind="class">SbVec2f</class>
    <class kind="class">SbVec2i32</class>
    <class kind="class">SbVec2s</class>
    <class kind="class">SbVec3d</class>
    <class kind="class">SbVec3f</class>
    <class kind="class">SbVec3s</class>
    <class kind="class">SbVec4d</class>
    <class kind="class">SbVec4f</class>
    <class kind="class">SbViewportRegion</class>
    <class kind="class">SbViewVolume</class>
    <class kind="class">SbXfBox3d</class>
    <class kind="class">SbXfBox3f</class>
    <class kind="struct">cc_string</class>
    <class kind="class">SbTri3f</class>
    <class kind="class">SbIntList</class>
    <class kind="class">SbList</class>
    <class kind="class">SbPList</class>
    <class kind="class">SbStringList</class>
    <class kind="class">SbVec3fList</class>
  </compound>
  <compound kind="group">
    <name>bundles</name>
    <title>Bundle Classes</title>
    <filename>group__bundles.html</filename>
    <class kind="class">SoBundle</class>
    <class kind="class">SoMaterialBundle</class>
    <class kind="class">SoNormalBundle</class>
    <class kind="class">SoTextureCoordinateBundle</class>
    <class kind="class">SoVertexAttributeBundle</class>
    <page>group__bundles</page>
  </compound>
  <compound kind="group">
    <name>caches</name>
    <title>Cache Classes</title>
    <filename>group__caches.html</filename>
    <class kind="class">SoBoundingBoxCache</class>
    <class kind="class">SoCache</class>
    <class kind="class">SoConvexDataCache</class>
    <class kind="class">SoGLCacheList</class>
    <class kind="class">SoGLRenderCache</class>
    <class kind="class">SoNormalCache</class>
    <class kind="class">SoShaderProgramCache</class>
    <page>group__caches</page>
  </compound>
  <compound kind="group">
    <name>details</name>
    <title>Detail Classes</title>
    <filename>group__details.html</filename>
    <class kind="class">SoConeDetail</class>
    <class kind="class">SoCubeDetail</class>
    <class kind="class">SoCylinderDetail</class>
    <class kind="class">SoDetail</class>
    <class kind="class">SoFaceDetail</class>
    <class kind="class">SoLineDetail</class>
    <class kind="class">SoNodeKitDetail</class>
    <class kind="class">SoPointDetail</class>
    <class kind="class">SoTextDetail</class>
    <class kind="class">SoDetailList</class>
  </compound>
  <compound kind="group">
    <name>draggers</name>
    <title>Dragger Classes</title>
    <filename>group__draggers.html</filename>
    <class kind="class">SoCenterballDragger</class>
    <class kind="class">SoDirectionalLightDragger</class>
    <class kind="class">SoDragger</class>
    <class kind="class">SoDragPointDragger</class>
    <class kind="class">SoHandleBoxDragger</class>
    <class kind="class">SoJackDragger</class>
    <class kind="class">SoPointLightDragger</class>
    <class kind="class">SoRotateCylindricalDragger</class>
    <class kind="class">SoRotateDiscDragger</class>
    <class kind="class">SoRotateSphericalDragger</class>
    <class kind="class">SoScale1Dragger</class>
    <class kind="class">SoScale2Dragger</class>
    <class kind="class">SoScale2UniformDragger</class>
    <class kind="class">SoScaleUniformDragger</class>
    <class kind="class">SoSpotLightDragger</class>
    <class kind="class">SoTabBoxDragger</class>
    <class kind="class">SoTabPlaneDragger</class>
    <class kind="class">SoTrackballDragger</class>
    <class kind="class">SoTransformBoxDragger</class>
    <class kind="class">SoTransformerDragger</class>
    <class kind="class">SoTranslate1Dragger</class>
    <class kind="class">SoTranslate2Dragger</class>
  </compound>
  <compound kind="group">
    <name>elements</name>
    <title>Element Classes</title>
    <filename>group__elements.html</filename>
    <class kind="class">SoGLCacheContextElement</class>
    <class kind="class">SoGLClipPlaneElement</class>
    <class kind="class">SoGLColorIndexElement</class>
    <class kind="class">SoGLCoordinateElement</class>
    <class kind="class">SoGLDepthBufferElement</class>
    <class kind="class">SoGLDisplayList</class>
    <class kind="class">SoGLDrawStyleElement</class>
    <class kind="class">SoGLEnvironmentElement</class>
    <class kind="class">SoGLLazyElement</class>
    <class kind="class">SoGLLightIdElement</class>
    <class kind="class">SoGLLinePatternElement</class>
    <class kind="class">SoGLLineWidthElement</class>
    <class kind="class">SoGLModelMatrixElement</class>
    <class kind="class">SoGLMultiTextureCoordinateElement</class>
    <class kind="class">SoGLMultiTextureImageElement</class>
    <class kind="class">SoGLMultiTextureMatrixElement</class>
    <class kind="class">SoGLNormalElement</class>
    <class kind="class">SoGLPointSizeElement</class>
    <class kind="class">SoGLPolygonOffsetElement</class>
    <class kind="class">SoGLProjectionMatrixElement</class>
    <class kind="class">SoGLRenderPassElement</class>
    <class kind="class">SoGLShapeHintsElement</class>
    <class kind="class">SoGLUpdateAreaElement</class>
    <class kind="class">SoGLVBOElement</class>
    <class kind="class">SoGLViewingMatrixElement</class>
    <class kind="class">SoGLViewportRegionElement</class>
    <class kind="class">SoAccumulatedElement</class>
    <class kind="class">SoAmbientColorElement</class>
    <class kind="class">SoAnnoText3CharOrientElement</class>
    <class kind="class">SoAnnoText3FontSizeHintElement</class>
    <class kind="class">SoAnnoText3RenderPrintElement</class>
    <class kind="class">SoBBoxModelMatrixElement</class>
    <class kind="class">SoBumpMapCoordinateElement</class>
    <class kind="class">SoBumpMapElement</class>
    <class kind="class">SoBumpMapMatrixElement</class>
    <class kind="class">SoCacheElement</class>
    <class kind="class">SoClipPlaneElement</class>
    <class kind="class">SoComplexityElement</class>
    <class kind="class">SoComplexityTypeElement</class>
    <class kind="class">SoCoordinateElement</class>
    <class kind="class">SoCreaseAngleElement</class>
    <class kind="class">SoCullElement</class>
    <class kind="class">SoDecimationPercentageElement</class>
    <class kind="class">SoDecimationTypeElement</class>
    <class kind="class">SoDepthBufferElement</class>
    <class kind="class">SoDiffuseColorElement</class>
    <class kind="class">SoDrawStyleElement</class>
    <class kind="class">SoElement</class>
    <class kind="class">SoEmissiveColorElement</class>
    <class kind="class">SoEnvironmentElement</class>
    <class kind="class">SoFloatElement</class>
    <class kind="class">SoFocalDistanceElement</class>
    <class kind="class">SoFontNameElement</class>
    <class kind="class">SoFontSizeElement</class>
    <class kind="class">SoInt32Element</class>
    <class kind="class">SoLazyElement</class>
    <class kind="class">SoLightAttenuationElement</class>
    <class kind="class">SoLightElement</class>
    <class kind="class">SoLightModelElement</class>
    <class kind="class">SoLinePatternElement</class>
    <class kind="class">SoLineWidthElement</class>
    <class kind="class">SoListenerDopplerElement</class>
    <class kind="class">SoListenerGainElement</class>
    <class kind="class">SoListenerOrientationElement</class>
    <class kind="class">SoListenerPositionElement</class>
    <class kind="class">SoLocalBBoxMatrixElement</class>
    <class kind="class">SoMaterialBindingElement</class>
    <class kind="class">SoModelMatrixElement</class>
    <class kind="class">SoMultiTextureCoordinateElement</class>
    <class kind="class">SoMultiTextureEnabledElement</class>
    <class kind="class">SoMultiTextureImageElement</class>
    <class kind="class">SoMultiTextureMatrixElement</class>
    <class kind="class">SoNormalBindingElement</class>
    <class kind="class">SoNormalElement</class>
    <class kind="class">SoOverrideElement</class>
    <class kind="class">SoPickRayElement</class>
    <class kind="class">SoPickStyleElement</class>
    <class kind="class">SoPointSizeElement</class>
    <class kind="class">SoPolygonOffsetElement</class>
    <class kind="class">SoProfileCoordinateElement</class>
    <class kind="class">SoProfileElement</class>
    <class kind="class">SoReplacedElement</class>
    <class kind="class">SoShapeStyleElement</class>
    <class kind="class">SoShininessElement</class>
    <class kind="class">SoSoundElement</class>
    <class kind="class">SoSpecularColorElement</class>
    <class kind="class">SoSwitchElement</class>
    <class kind="class">SoTextOutlineEnabledElement</class>
    <class kind="class">SoTextureCombineElement</class>
    <class kind="class">SoTextureCoordinateBindingElement</class>
    <class kind="class">SoTextureOverrideElement</class>
    <class kind="class">SoTextureQualityElement</class>
    <class kind="class">SoTextureScalePolicyElement</class>
    <class kind="class">SoTextureScaleQualityElement</class>
    <class kind="class">SoTextureUnitElement</class>
    <class kind="class">SoTransparencyElement</class>
    <class kind="class">SoUnitsElement</class>
    <class kind="class">SoVertexAttributeBindingElement</class>
    <class kind="class">SoViewingMatrixElement</class>
    <class kind="class">SoViewportRegionElement</class>
    <class kind="class">SoViewVolumeElement</class>
    <class kind="class">SoWindowElement</class>
    <class kind="class">SoGeoElement</class>
    <class kind="class">SoGLShadowCullingElement</class>
    <class kind="class">SoShadowStyleElement</class>
    <page>group__elements</page>
  </compound>
  <compound kind="group">
    <name>engines</name>
    <title>Engine Classes</title>
    <filename>group__engines.html</filename>
    <class kind="class">SoBoolOperation</class>
    <class kind="class">SoCalculator</class>
    <class kind="class">SoComposeMatrix</class>
    <class kind="class">SoComposeRotation</class>
    <class kind="class">SoComposeRotationFromTo</class>
    <class kind="class">SoComposeVec2f</class>
    <class kind="class">SoComposeVec3f</class>
    <class kind="class">SoComposeVec4f</class>
    <class kind="class">SoComputeBoundingBox</class>
    <class kind="class">SoConcatenate</class>
    <class kind="class">SoCounter</class>
    <class kind="class">SoDecomposeMatrix</class>
    <class kind="class">SoDecomposeRotation</class>
    <class kind="class">SoDecomposeVec2f</class>
    <class kind="class">SoDecomposeVec3f</class>
    <class kind="class">SoDecomposeVec4f</class>
    <class kind="class">SoElapsedTime</class>
    <class kind="class">SoEngine</class>
    <class kind="class">SoEngineOutput</class>
    <class kind="class">SoFieldConverter</class>
    <class kind="class">SoGate</class>
    <class kind="class">SoHeightMapToNormalMap</class>
    <class kind="class">SoInterpolate</class>
    <class kind="class">SoInterpolateFloat</class>
    <class kind="class">SoInterpolateRotation</class>
    <class kind="class">SoInterpolateVec2f</class>
    <class kind="class">SoInterpolateVec3f</class>
    <class kind="class">SoInterpolateVec4f</class>
    <class kind="class">SoNodeEngine</class>
    <class kind="class">SoOneShot</class>
    <class kind="class">SoOnOff</class>
    <class kind="class">SoEngineOutputData</class>
    <class kind="class">SoSelectOne</class>
    <class kind="class">SoTexture2Convert</class>
    <class kind="class">SoTimeCounter</class>
    <class kind="class">SoTransformVec3f</class>
    <class kind="class">SoTriggerAny</class>
    <class kind="class">SoEngineList</class>
    <class kind="class">SoEngineOutputList</class>
  </compound>
  <compound kind="group">
    <name>errors</name>
    <title>Error Handling Classes</title>
    <filename>group__errors.html</filename>
    <class kind="class">SoDebugError</class>
    <class kind="class">SoError</class>
    <class kind="class">SoMemoryError</class>
    <class kind="class">SoReadError</class>
    <member kind="typedef">
      <type>struct cc_debugerror</type>
      <name>cc_debugerror</name>
      <anchorfile>group__errors.html</anchorfile>
      <anchor>ga98981b5dfb3a50dba80de1fdf6aa9109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cc_error</type>
      <name>cc_error</name>
      <anchorfile>group__errors.html</anchorfile>
      <anchor>ga1fb56dcbdf4946c4519c715b92caca14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>events</name>
    <title>Event Classes</title>
    <filename>group__events.html</filename>
    <class kind="class">SoButtonEvent</class>
    <class kind="class">SoEvent</class>
    <class kind="class">SoKeyboardEvent</class>
    <class kind="class">SoLocation2Event</class>
    <class kind="class">SoMotion3Event</class>
    <class kind="class">SoMouseButtonEvent</class>
    <class kind="class">SoSpaceballButtonEvent</class>
  </compound>
  <compound kind="group">
    <name>fields</name>
    <title>Field Classes</title>
    <filename>group__fields.html</filename>
    <class kind="class">SoField</class>
    <class kind="class">SoFieldData</class>
    <class kind="class">SoMFBitMask</class>
    <class kind="class">SoMFBool</class>
    <class kind="class">SoMFColor</class>
    <class kind="class">SoMFColorRGBA</class>
    <class kind="class">SoMFDouble</class>
    <class kind="class">SoMFEngine</class>
    <class kind="class">SoMFEnum</class>
    <class kind="class">SoMFFloat</class>
    <class kind="class">SoMField</class>
    <class kind="class">SoMFInt32</class>
    <class kind="class">SoMFMatrix</class>
    <class kind="class">SoMFName</class>
    <class kind="class">SoMFNode</class>
    <class kind="class">SoMFPath</class>
    <class kind="class">SoMFPlane</class>
    <class kind="class">SoMFRotation</class>
    <class kind="class">SoMFShort</class>
    <class kind="class">SoMFString</class>
    <class kind="class">SoMFTime</class>
    <class kind="class">SoMFUInt32</class>
    <class kind="class">SoMFUShort</class>
    <class kind="class">SoMFVec2b</class>
    <class kind="class">SoMFVec2d</class>
    <class kind="class">SoMFVec2f</class>
    <class kind="class">SoMFVec2i32</class>
    <class kind="class">SoMFVec2s</class>
    <class kind="class">SoMFVec3b</class>
    <class kind="class">SoMFVec3d</class>
    <class kind="class">SoMFVec3f</class>
    <class kind="class">SoMFVec3i32</class>
    <class kind="class">SoMFVec3s</class>
    <class kind="class">SoMFVec4b</class>
    <class kind="class">SoMFVec4d</class>
    <class kind="class">SoMFVec4f</class>
    <class kind="class">SoMFVec4i32</class>
    <class kind="class">SoMFVec4s</class>
    <class kind="class">SoMFVec4ub</class>
    <class kind="class">SoMFVec4ui32</class>
    <class kind="class">SoMFVec4us</class>
    <class kind="class">SoSFBitMask</class>
    <class kind="class">SoSFBool</class>
    <class kind="class">SoSFBox2d</class>
    <class kind="class">SoSFBox2f</class>
    <class kind="class">SoSFBox2i32</class>
    <class kind="class">SoSFBox2s</class>
    <class kind="class">SoSFBox3d</class>
    <class kind="class">SoSFBox3f</class>
    <class kind="class">SoSFBox3i32</class>
    <class kind="class">SoSFBox3s</class>
    <class kind="class">SoSFColor</class>
    <class kind="class">SoSFColorRGBA</class>
    <class kind="class">SoSFDouble</class>
    <class kind="class">SoSFEngine</class>
    <class kind="class">SoSFEnum</class>
    <class kind="class">SoSFFloat</class>
    <class kind="class">SoSField</class>
    <class kind="class">SoSFImage3</class>
    <class kind="class">SoSFImage</class>
    <class kind="class">SoSFInt32</class>
    <class kind="class">SoSFMatrix</class>
    <class kind="class">SoSFName</class>
    <class kind="class">SoSFNode</class>
    <class kind="class">SoSFPath</class>
    <class kind="class">SoSFPlane</class>
    <class kind="class">SoSFRotation</class>
    <class kind="class">SoSFShort</class>
    <class kind="class">SoSFString</class>
    <class kind="class">SoSFTime</class>
    <class kind="class">SoSFTrigger</class>
    <class kind="class">SoSFUInt32</class>
    <class kind="class">SoSFUShort</class>
    <class kind="class">SoSFVec2b</class>
    <class kind="class">SoSFVec2d</class>
    <class kind="class">SoSFVec2f</class>
    <class kind="class">SoSFVec2i32</class>
    <class kind="class">SoSFVec2s</class>
    <class kind="class">SoSFVec3b</class>
    <class kind="class">SoSFVec3d</class>
    <class kind="class">SoSFVec3f</class>
    <class kind="class">SoSFVec3i32</class>
    <class kind="class">SoSFVec3s</class>
    <class kind="class">SoSFVec4b</class>
    <class kind="class">SoSFVec4d</class>
    <class kind="class">SoSFVec4f</class>
    <class kind="class">SoSFVec4i32</class>
    <class kind="class">SoSFVec4s</class>
    <class kind="class">SoSFVec4ub</class>
    <class kind="class">SoSFVec4ui32</class>
    <class kind="class">SoSFVec4us</class>
    <class kind="class">SoFieldList</class>
  </compound>
  <compound kind="group">
    <name>general</name>
    <title>Miscellaneous Classes</title>
    <filename>group__general.html</filename>
    <class kind="class">SoFieldContainer</class>
    <class kind="class">SoInput</class>
    <class kind="class">SoOutput</class>
    <class kind="class">SoAuditorList</class>
    <class kind="class">SoBaseList</class>
    <class kind="class">SoCallbackList</class>
    <class kind="class">SoPathList</class>
    <class kind="class">SoPickedPointList</class>
    <class kind="class">SoTypeList</class>
    <class kind="class">SoAudioDevice</class>
    <class kind="class">SoBase</class>
    <class kind="class">SoChildList</class>
    <class kind="class">SoContextHandler</class>
    <class kind="class">SoDB</class>
    <class kind="class">SoFullPath</class>
    <class kind="class">SoInteraction</class>
    <class kind="class">SoLightPath</class>
    <class kind="class">SoLockManager</class>
    <class kind="class">SoNormalGenerator</class>
    <class kind="class">SoNotList</class>
    <class kind="class">SoNotRec</class>
    <class kind="class">SoPath</class>
    <class kind="class">SoPickedPoint</class>
    <class kind="class">SoPrimitiveVertex</class>
    <class kind="class">SoSceneManager</class>
    <class kind="class">SoState</class>
    <class kind="class">SoTempPath</class>
    <class kind="class">SoType</class>
    <class kind="class">SoOffscreenRenderer</class>
  </compound>
  <compound kind="group">
    <name>manips</name>
    <title>Manipulator Classes</title>
    <filename>group__manips.html</filename>
    <class kind="class">SoCenterballManip</class>
    <class kind="class">SoClipPlaneManip</class>
    <class kind="class">SoDirectionalLightManip</class>
    <class kind="class">SoHandleBoxManip</class>
    <class kind="class">SoJackManip</class>
    <class kind="class">SoPointLightManip</class>
    <class kind="class">SoSpotLightManip</class>
    <class kind="class">SoTabBoxManip</class>
    <class kind="class">SoTrackballManip</class>
    <class kind="class">SoTransformBoxManip</class>
    <class kind="class">SoTransformerManip</class>
    <class kind="class">SoTransformManip</class>
  </compound>
  <compound kind="group">
    <name>navigation</name>
    <title>Navigation Classes</title>
    <filename>group__navigation.html</filename>
    <class kind="class">SoScXMLDollyTarget</class>
    <class kind="class">SoScXMLFlightControlTarget</class>
    <class kind="class">SoScXMLMiscTarget</class>
    <class kind="class">SoScXMLMotionTarget</class>
    <class kind="class">SoScXMLNavigation</class>
    <class kind="class">SoScXMLNavigationTarget</class>
    <class kind="class">SoScXMLPanTarget</class>
    <class kind="class">SoScXMLRotateTarget</class>
    <class kind="class">SoScXMLSeekTarget</class>
    <class kind="class">SoScXMLSpinTarget</class>
    <class kind="class">SoScXMLZoomTarget</class>
  </compound>
  <compound kind="group">
    <name>nodekits</name>
    <title>NodeKit Classes</title>
    <filename>group__nodekits.html</filename>
    <class kind="class">SoAppearanceKit</class>
    <class kind="class">SoBaseKit</class>
    <class kind="class">SoCameraKit</class>
    <class kind="class">SoInteractionKit</class>
    <class kind="class">SoLightKit</class>
    <class kind="class">SoNodekitCatalog</class>
    <class kind="class">SoNodeKit</class>
    <class kind="class">SoNodeKitListPart</class>
    <class kind="class">SoNodeKitPath</class>
    <class kind="class">SoSceneKit</class>
    <class kind="class">SoSeparatorKit</class>
    <class kind="class">SoShapeKit</class>
    <class kind="class">SoWrapperKit</class>
  </compound>
  <compound kind="group">
    <name>nodes</name>
    <title>Node Classes</title>
    <filename>group__nodes.html</filename>
    <class kind="class">SoGeoCoordinate</class>
    <class kind="class">SoGeoLocation</class>
    <class kind="class">SoGeoOrigin</class>
    <class kind="class">SoGeoSeparator</class>
    <class kind="class">SoAlphaTest</class>
    <class kind="class">SoAnnotation</class>
    <class kind="class">SoAntiSquish</class>
    <class kind="class">SoArray</class>
    <class kind="class">SoBaseColor</class>
    <class kind="class">SoBlinker</class>
    <class kind="class">SoBumpMapCoordinate</class>
    <class kind="class">SoBumpMap</class>
    <class kind="class">SoBumpMapTransform</class>
    <class kind="class">SoCacheHint</class>
    <class kind="class">SoCallback</class>
    <class kind="class">SoCamera</class>
    <class kind="class">SoClipPlane</class>
    <class kind="class">SoColorIndex</class>
    <class kind="class">SoComplexity</class>
    <class kind="class">SoCoordinate3</class>
    <class kind="class">SoCoordinate4</class>
    <class kind="class">SoDepthBuffer</class>
    <class kind="class">SoDirectionalLight</class>
    <class kind="class">SoDrawStyle</class>
    <class kind="class">SoEnvironment</class>
    <class kind="class">SoEventCallback</class>
    <class kind="class">SoExtSelection</class>
    <class kind="class">SoFile</class>
    <class kind="class">SoFont</class>
    <class kind="class">SoFontStyle</class>
    <class kind="class">SoFrustumCamera</class>
    <class kind="class">SoGroup</class>
    <class kind="class">SoInfo</class>
    <class kind="class">SoLabel</class>
    <class kind="class">SoLevelOfDetail</class>
    <class kind="class">SoLight</class>
    <class kind="class">SoLightModel</class>
    <class kind="class">SoLinearProfile</class>
    <class kind="class">SoListener</class>
    <class kind="class">SoLocateHighlight</class>
    <class kind="class">SoLOD</class>
    <class kind="class">SoMaterialBinding</class>
    <class kind="class">SoMaterial</class>
    <class kind="class">SoMatrixTransform</class>
    <class kind="class">SoMultipleCopy</class>
    <class kind="class">SoNode</class>
    <class kind="class">SoNormalBinding</class>
    <class kind="class">SoNormal</class>
    <class kind="class">SoNurbsProfile</class>
    <class kind="class">SoOrthographicCamera</class>
    <class kind="class">SoPackedColor</class>
    <class kind="class">SoPathSwitch</class>
    <class kind="class">SoPendulum</class>
    <class kind="class">SoPerspectiveCamera</class>
    <class kind="class">SoPickStyle</class>
    <class kind="class">SoPointLight</class>
    <class kind="class">SoPolygonOffset</class>
    <class kind="class">SoProfileCoordinate2</class>
    <class kind="class">SoProfileCoordinate3</class>
    <class kind="class">SoProfile</class>
    <class kind="class">SoResetTransform</class>
    <class kind="class">SoRotation</class>
    <class kind="class">SoRotationXYZ</class>
    <class kind="class">SoRotor</class>
    <class kind="class">SoScale</class>
    <class kind="class">SoSceneTexture2</class>
    <class kind="class">SoSceneTextureCubeMap</class>
    <class kind="class">SoSelection</class>
    <class kind="class">SoSeparator</class>
    <class kind="class">SoShapeHints</class>
    <class kind="class">SoShuttle</class>
    <class kind="class">SoSpotLight</class>
    <class kind="class">SoSurroundScale</class>
    <class kind="class">SoSwitch</class>
    <class kind="class">SoTexture2</class>
    <class kind="class">SoTexture2Transform</class>
    <class kind="class">SoTexture3</class>
    <class kind="class">SoTexture3Transform</class>
    <class kind="class">SoTextureCombine</class>
    <class kind="class">SoTextureCoordinate2</class>
    <class kind="class">SoTextureCoordinate3</class>
    <class kind="class">SoTextureCoordinateBinding</class>
    <class kind="class">SoTextureCoordinateCube</class>
    <class kind="class">SoTextureCoordinateCylinder</class>
    <class kind="class">SoTextureCoordinateDefault</class>
    <class kind="class">SoTextureCoordinateEnvironment</class>
    <class kind="class">SoTextureCoordinateFunction</class>
    <class kind="class">SoTextureCoordinateNormalMap</class>
    <class kind="class">SoTextureCoordinateObject</class>
    <class kind="class">SoTextureCoordinatePlane</class>
    <class kind="class">SoTextureCoordinateReflectionMap</class>
    <class kind="class">SoTextureCoordinateSphere</class>
    <class kind="class">SoTextureCubeMap</class>
    <class kind="class">SoTextureMatrixTransform</class>
    <class kind="class">SoTextureScalePolicy</class>
    <class kind="class">SoTextureUnit</class>
    <class kind="class">SoTransformation</class>
    <class kind="class">SoTransform</class>
    <class kind="class">SoTransformSeparator</class>
    <class kind="class">SoTranslation</class>
    <class kind="class">SoTransparencyType</class>
    <class kind="class">SoUnits</class>
    <class kind="class">SoVertexProperty</class>
    <class kind="class">SoWWWAnchor</class>
    <class kind="class">SoWWWInline</class>
    <class kind="class">SoFragmentShader</class>
    <class kind="class">SoGeometryShader</class>
    <class kind="class">SoVertexShader</class>
    <class kind="class">SoShadowCulling</class>
    <class kind="class">SoShadowSpotLight</class>
    <class kind="class">SoShadowStyle</class>
    <class kind="class">SoAsciiText</class>
    <class kind="class">SoCone</class>
    <class kind="class">SoCube</class>
    <class kind="class">SoCylinder</class>
    <class kind="class">SoFaceSet</class>
    <class kind="class">SoImage</class>
    <class kind="class">SoIndexedFaceSet</class>
    <class kind="class">SoIndexedLineSet</class>
    <class kind="class">SoIndexedMarkerSet</class>
    <class kind="class">SoIndexedNurbsCurve</class>
    <class kind="class">SoIndexedNurbsSurface</class>
    <class kind="class">SoIndexedPointSet</class>
    <class kind="class">SoIndexedShape</class>
    <class kind="class">SoIndexedTriangleStripSet</class>
    <class kind="class">SoLineSet</class>
    <class kind="class">SoMarkerSet</class>
    <class kind="class">SoNonIndexedShape</class>
    <class kind="class">SoNurbsCurve</class>
    <class kind="class">SoNurbsSurface</class>
    <class kind="class">SoPointSet</class>
    <class kind="class">SoQuadMesh</class>
    <class kind="class">SoShape</class>
    <class kind="class">SoSphere</class>
    <class kind="class">SoText2</class>
    <class kind="class">SoText3</class>
    <class kind="class">SoTriangleStripSet</class>
    <class kind="class">SoVertexShape</class>
    <class kind="class">SoPackedColorV20</class>
    <class kind="class">SoShapeHintsV10</class>
    <class kind="class">SoUpgrader</class>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_HEADER</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga2c4d8b776be8aac5d22cf94b7b92235e</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_ABSTRACT_HEADER</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga2bb0ff232b768799a8f33832780e23b0</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_INIT_CLASS</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga3498e0cf3179332511a984d81b6bbd62</anchor>
      <arglist>(classname, parentclass, parentname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_INIT_ABSTRACT_CLASS</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>gab7e402b0a82fae1a3abdd4d9afe833cc</anchor>
      <arglist>(classname, parentclass, parentname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_SOURCE</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga0c812aee96f40bd1b759f8c5a9d09b48</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_ABSTRACT_SOURCE</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga687f9e5e91d6cec3bb4f8aac7a753473</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_CONSTRUCTOR</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga5aa0e28f57bbf350f271c1550156281f</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_IS_FIRST_INSTANCE</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga7342238d25c2224535918b8e5b3f8bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_ADD_FIELD</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>gaba48e7967e2d337365375343dc650c45</anchor>
      <arglist>(field, defaultvalue)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_NODE_DEFINE_ENUM_VALUE</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga1c28d883c32ef2ac0e5b758d6061fcb2</anchor>
      <arglist>(enumname, enumvalue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>group__nodes.html</anchorfile>
      <anchor>ga9513de738f5681eeae4bb9f8ff5e7500</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>projectors</name>
    <title>Projector Classes</title>
    <filename>group__projectors.html</filename>
    <class kind="class">SbCylinderPlaneProjector</class>
    <class kind="class">SbCylinderProjector</class>
    <class kind="class">SbCylinderSectionProjector</class>
    <class kind="class">SbCylinderSheetProjector</class>
    <class kind="class">SbLineProjector</class>
    <class kind="class">SbPlaneProjector</class>
    <class kind="class">SbProjector</class>
    <class kind="class">SbSpherePlaneProjector</class>
    <class kind="class">SbSphereProjector</class>
    <class kind="class">SbSphereSectionProjector</class>
    <class kind="class">SbSphereSheetProjector</class>
  </compound>
  <compound kind="group">
    <name>sensors</name>
    <title>Sensor Classes</title>
    <filename>group__sensors.html</filename>
    <class kind="class">SoAlarmSensor</class>
    <class kind="class">SoDataSensor</class>
    <class kind="class">SoDelayQueueSensor</class>
    <class kind="class">SoFieldSensor</class>
    <class kind="class">SoIdleSensor</class>
    <class kind="class">SoNodeSensor</class>
    <class kind="class">SoOneShotSensor</class>
    <class kind="class">SoPathSensor</class>
    <class kind="class">SoSensor</class>
    <class kind="class">SoSensorManager</class>
    <class kind="class">SoTimerQueueSensor</class>
    <class kind="class">SoTimerSensor</class>
  </compound>
  <compound kind="group">
    <name>shaders</name>
    <title>Shader Classes</title>
    <filename>group__shaders.html</filename>
    <class kind="class">SoVertexAttributeBinding</class>
    <class kind="class">SoVertexAttribute</class>
    <class kind="class">SoShaderObject</class>
    <class kind="class">SoShaderProgram</class>
  </compound>
  <compound kind="group">
    <name>soscxml</name>
    <title>Coin specific State Chart XML Classes</title>
    <filename>group__soscxml.html</filename>
    <class kind="class">ScXMLCoinEvaluator</class>
    <class kind="class">SoScXMLEvent</class>
    <class kind="class">SoScXMLStateMachine</class>
  </compound>
  <compound kind="group">
    <name>sound</name>
    <title>3D Sound Support Classes</title>
    <filename>group__sound.html</filename>
    <class kind="class">SoAudioDevice</class>
    <class kind="class">SoListener</class>
    <class kind="class">SoVRMLAudioClip</class>
    <class kind="class">SoVRMLSound</class>
  </compound>
  <compound kind="group">
    <name>scxml</name>
    <title>State Chart XML Classes</title>
    <filename>group__scxml.html</filename>
    <class kind="class">ScXMLAbstractStateElt</class>
    <class kind="class">ScXMLAnchorElt</class>
    <class kind="class">ScXMLAssignElt</class>
    <class kind="class">ScXMLContentElt</class>
    <class kind="class">ScXML</class>
    <class kind="class">ScXMLDataElt</class>
    <class kind="class">ScXMLDataModelElt</class>
    <class kind="class">ScXMLECMAScriptEvaluator</class>
    <class kind="class">ScXMLElseElt</class>
    <class kind="class">ScXMLElseIfElt</class>
    <class kind="class">ScXMLElt</class>
    <class kind="class">ScXMLEltReader</class>
    <class kind="class">ScXMLEvaluator</class>
    <class kind="class">ScXMLDataObj</class>
    <class kind="class">ScXMLConstantDataObj</class>
    <class kind="class">ScXMLReferenceDataObj</class>
    <class kind="class">ScXMLAndOpExprDataObj</class>
    <class kind="class">ScXMLEvent</class>
    <class kind="class">ScXMLEventElt</class>
    <class kind="class">ScXMLEventTarget</class>
    <class kind="class">ScXMLExecutableElt</class>
    <class kind="class">ScXMLFinalElt</class>
    <class kind="class">ScXMLFinalizeElt</class>
    <class kind="class">ScXMLHistoryElt</class>
    <class kind="class">ScXMLIfElt</class>
    <class kind="class">ScXMLInitialElt</class>
    <class kind="class">ScXMLInvokeElt</class>
    <class kind="class">ScXMLLogElt</class>
    <class kind="class">ScXMLMinimumExprDataObj</class>
    <class kind="class">ScXMLMinimumEvaluator</class>
    <class kind="class">ScXMLObject</class>
    <class kind="class">ScXMLOnEntryElt</class>
    <class kind="class">ScXMLOnExitElt</class>
    <class kind="class">ScXMLParallelElt</class>
    <class kind="class">ScXMLParamElt</class>
    <class kind="class">ScXMLScriptElt</class>
    <class kind="class">ScXMLScxmlElt</class>
    <class kind="class">ScXMLSendElt</class>
    <class kind="class">ScXMLStateElt</class>
    <class kind="class">ScXMLStateMachine</class>
    <class kind="class">ScXMLTransitionElt</class>
    <class kind="class">ScXMLValidateElt</class>
    <class kind="class">ScXMLXPathEvaluator</class>
    <page>group__scxml</page>
  </compound>
  <compound kind="group">
    <name>threads</name>
    <title>Portable Threads Abstraction Classes</title>
    <filename>group__threads.html</filename>
  </compound>
  <compound kind="group">
    <name>VRMLnodes</name>
    <title>VRML97 Classes</title>
    <filename>group__VRMLnodes.html</filename>
    <class kind="class">SoVRMLAnchor</class>
    <class kind="class">SoVRMLAppearance</class>
    <class kind="class">SoVRMLAudioClip</class>
    <class kind="class">SoVRMLBackground</class>
    <class kind="class">SoVRMLBillboard</class>
    <class kind="class">SoVRMLBox</class>
    <class kind="class">SoVRMLCollision</class>
    <class kind="class">SoVRMLColor</class>
    <class kind="class">SoVRMLColorInterpolator</class>
    <class kind="class">SoVRMLCone</class>
    <class kind="class">SoVRMLCoordinate</class>
    <class kind="class">SoVRMLCoordinateInterpolator</class>
    <class kind="class">SoVRMLCylinder</class>
    <class kind="class">SoVRMLCylinderSensor</class>
    <class kind="class">SoVRMLDirectionalLight</class>
    <class kind="class">SoVRMLElevationGrid</class>
    <class kind="class">SoVRMLExtrusion</class>
    <class kind="class">SoVRMLFog</class>
    <class kind="class">SoVRMLFontStyle</class>
    <class kind="class">SoVRMLGroup</class>
    <class kind="class">SoVRMLImageTexture</class>
    <class kind="class">SoVRMLIndexedFaceSet</class>
    <class kind="class">SoVRMLIndexedLine</class>
    <class kind="class">SoVRMLIndexedLineSet</class>
    <class kind="class">SoVRMLInline</class>
    <class kind="class">SoVRMLLOD</class>
    <class kind="class">SoVRMLMaterial</class>
    <class kind="class">SoVRMLMovieTexture</class>
    <class kind="class">SoVRMLNavigationInfo</class>
    <class kind="class">SoVRMLNormal</class>
    <class kind="class">SoVRMLNormalInterpolator</class>
    <class kind="class">SoVRMLOrientationInterpolator</class>
    <class kind="class">SoVRMLPixelTexture</class>
    <class kind="class">SoVRMLPlaneSensor</class>
    <class kind="class">SoVRMLPointLight</class>
    <class kind="class">SoVRMLPointSet</class>
    <class kind="class">SoVRMLPositionInterpolator</class>
    <class kind="class">SoVRMLProximitySensor</class>
    <class kind="class">SoVRMLScalarInterpolator</class>
    <class kind="class">SoVRMLScript</class>
    <class kind="class">SoVRMLShape</class>
    <class kind="class">SoVRMLSound</class>
    <class kind="class">SoVRMLSphere</class>
    <class kind="class">SoVRMLSphereSensor</class>
    <class kind="class">SoVRMLSpotLight</class>
    <class kind="class">SoVRMLSwitch</class>
    <class kind="class">SoVRMLText</class>
    <class kind="class">SoVRMLTextureCoordinate</class>
    <class kind="class">SoVRMLTextureTransform</class>
    <class kind="class">SoVRMLTimeSensor</class>
    <class kind="class">SoVRMLTouchSensor</class>
    <class kind="class">SoVRMLTransform</class>
    <class kind="class">SoVRMLViewpoint</class>
    <class kind="class">SoVRMLVisibilitySensor</class>
    <class kind="class">SoVRMLWorldInfo</class>
  </compound>
  <compound kind="group">
    <name>hardcopy</name>
    <title>Vectorized Printing Classes</title>
    <filename>group__hardcopy.html</filename>
    <class kind="class">SoHardCopy</class>
    <class kind="class">SoPSVectorOutput</class>
    <class kind="class">SoVectorizeAction</class>
    <class kind="class">SoVectorizePSAction</class>
    <class kind="class">SoVectorOutput</class>
    <page>group__hardcopy</page>
  </compound>
  <compound kind="group">
    <name>XML</name>
    <title>XML related functions and objects</title>
    <filename>group__XML.html</filename>
    <member kind="typedef">
      <type>struct cc_xml_doc</type>
      <name>cc_xml_doc</name>
      <anchorfile>group__XML.html</anchorfile>
      <anchor>ga4668bec10f4a41c447ba1c9d42721a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cc_xml_doc *</type>
      <name>cc_xml_doc_new</name>
      <anchorfile>group__XML.html</anchorfile>
      <anchor>gafe56d78ac5013d52bcde44c50832e003</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_xml_doc_delete_x</name>
      <anchorfile>group__XML.html</anchorfile>
      <anchor>ga2c3f2733691b7d1e60765c4c691433ee</anchor>
      <arglist>(cc_xml_doc *doc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_xml_doc_set_filter_cb_x</name>
      <anchorfile>group__XML.html</anchorfile>
      <anchor>ga80383244e73c1e8bebe041d60a04fc26</anchor>
      <arglist>(cc_xml_doc *doc, cc_xml_filter_cb *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cc_xml_doc_get_filter_cb</name>
      <anchorfile>group__XML.html</anchorfile>
      <anchor>gaf233557263433cc126ab09e3d1f214da</anchor>
      <arglist>(const cc_xml_doc *doc, cc_xml_filter_cb *&amp;cb, void *&amp;userdata)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>profiler</name>
    <title>Scene Graph Profiling</title>
    <filename>group__profiler.html</filename>
    <class kind="class">SbProfilingData</class>
    <class kind="class">SoProfiler</class>
    <class kind="class">SoProfilerElement</class>
    <class kind="class">SoProfilerStats</class>
    <class kind="class">SoProfilingReportGenerator</class>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_PROFILER</name>
      <anchorfile>group__profiler.html</anchorfile>
      <anchor>gaa961552d7a272cffa96986008e4559ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_PROFILER_OVERLAY</name>
      <anchorfile>group__profiler.html</anchorfile>
      <anchor>ga7a452448717da283f227a6e0372d98e1</anchor>
      <arglist></arglist>
    </member>
    <page>group__profiler</page>
  </compound>
  <compound kind="group">
    <name>macros</name>
    <title>Miscellaneous Macros</title>
    <filename>group__macros.html</filename>
    <page>group__macros</page>
  </compound>
  <compound kind="group">
    <name>envvars</name>
    <title>Miscellaneous Environment Variables</title>
    <filename>group__envvars.html</filename>
    <member kind="variable">
      <type>typedef</type>
      <name>EnvironmentVariable</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga160f0493fab38338b2f643e503f42c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_GLU_INFO</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gac471927112b8114e3ff80638a0c41186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_GLU_VERSION</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaa0c7252d566d12794c50afe2c949e26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_FONTSUPPORT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaaab43c306c49c92e8cc7837fbe98ebc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_3DS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaaef79266d00c91619db6970261283019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_AUDIO</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga096cfb4c1b2af14362f0143706eb6e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_BREAK</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gadc1f729d9eba031babda1b1e5956d2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_CACHING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga1273bb807ef53967c55921ce1cc66557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_DL</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga6be7e716a13ad32f259283561d621791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_IMPORT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8abcb9727bec09662a67bb2cb9c18beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_LISTMODULES</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaf5d7ce55f98908f97b1808319a5c2c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SOINPUT_FINDFILE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gafb8e1b4dad5ff10c6f0a06bef219175c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SOOFFSCREENRENDERER</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaf16ac7d963c63f0eadf747e84b75b84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_WRITEREFS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gae5ea9aff6622fd1236f2e74690fab1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_RANDOMIZE_RENDER_CACHING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga46b8021248b01518f74e5df4f3c2bb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FREETYPE2_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga731b0e30e1939bd3abebe6b96680efb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FORCE_FREETYPE_OFF</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gacd5a3b63f91864450781ebeb03f4b893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FORCE_WIN32FONTS_OFF</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga08232d335b7fc29b5e0cee626c045f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FONT_PATH</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga0aa96a2c671bb3c9d80fbbb617024dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DISABLE_UTF8</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gacc8788192252e09ed3f717b1eeb4a16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GLBBOX</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaebfb3f48ce42f98cf97cebda2fc8de7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GLU_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gace7293f684f5a8226303a30b356bcc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AGLGLUE_NO_PBUFFERS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaed99424a50e132d6d22e55ff257e3e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SIMAGE_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga61addf80a3f7ad56c9df060afda037f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GLXGLUE_NO_GLX13_PBUFFERS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga993070d4e52f9c51f4996f2f301ee52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GLXGLUE_NO_PBUFFERS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga5258d9404c2bf90474f9be0d4da8f7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_ZLIB_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga58c4d2cf2da06b9e7ff1d28c558a3b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_BZIP2_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaccfa9bd01bec3355ec87015e4110b3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_WGLGLUE_NO_PBUFFERS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga70f080dfebc739f7c9743be051e8f514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DONT_MANGLE_OUTPUT_NAMES</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gab314494bb3ca81e80c64aeb0fef8940c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_EXTSELECTION_SAVE_OFFSCREENBUFFER</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaa49b5e6b3aa71be0bc74a835d5b08cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FORCE_TILED_OFFSCREENRENDERING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8ae1212fb971402447280627d0f4aee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GLERROR_DEBUGGING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga189bff7fbefd8c698889694d3a492cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_IDA_DEBUG</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaee3fb64ca33c7bef5936ae4be9f57245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OFFSCREENRENDERER_MAX_TILESIZE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga76c76e6c84bafaafae15b8173c684a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OFFSCREENRENDERER_TILEHEIGHT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga78a40fec5d1ba802d0768769fc6423fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OFFSCREENRENDERER_TILEWIDTH</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gae95acf0bc238fdf2c7ce3dc285f007a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OLDSTYLE_FORMATTING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaaca199dac7fb359e3fdc6741ab9bd872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SEPARATE_DIFFUSE_TRANSPARENCY_OVERRIDE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8c8c8b0022fc3d2badd4c5c7bac82fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOINPUT_SEARCH_GLOBAL_DICT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga5f815c4bd3e73423097eb410c530c604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOOFFSCREENRENDERER_TILEPREFIX</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gafa944ee0f96ff8ad92867e1869e3c31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SORTED_LAYERS_USE_NVIDIA_RC</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga91e3e56e17045991d6b8e4a7afe2f056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_BUFFER_LENGTH</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga68e0a11c1fb3765f5f2513f7d71cf273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_DISABLE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga31b4b9e855837945ed7263bdcaa3307e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_DRIVER_NAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaca77175c26f048fc7a56abea73c7a570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_ENABLE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gabc1642132634e56bcab3a54cdf552eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_INTRO_PAUSE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga3e2c52fc742c67a698efd763976ab3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_NUM_BUFFERS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga7bdb8c1d7d7b80adc7a68a7dec828488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOUND_THREAD_SLEEP_TIME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga45691a7924c93b53f1e812a1e32c8a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OPENAL_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga36ca646a5704c19038a5fc8b3b01ee12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_LINEAR_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga185320717d5b7f2d13916760b8c5e045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_LINEAR_MIPMAP_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga5c2d9df7b36ef9582ae011056f9bfb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_MIPMAP_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gacf02c7b3e3a234c707c2da8692aff1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_SCALEUP_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga37c3053a7d2e969fedbabc869b0dfad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_USE_GLTEXSUBIMAGE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga3877be7fd2ef906a7946909577281c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_MAXIMUM_TEXTURE2_SIZE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga83ce1001456f60648a778cc64e82d1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_MAXIMUM_TEXTURE3_SIZE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaa5f9d6372d10298e698a7a17e7c4a4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_USE_GL_VERTEX_ARRAYS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gacf0e6a30c525f548a29d9e8366d0f47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_NORMALIZATION_CUBEMAP_SIZE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8ca3d1ee345ec75836f520539b699f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>OIV_NUM_SORTED_LAYERS_PASSES</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga0aeab0bd809f7e5cdc64f6b67ec1a9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_MAX_VBO_MEMORY</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gad387103012a6f22ca8f5b7a0294f454c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_NUM_SORTED_LAYERS_PASSES</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaa6a3b1230da972797b4d774786345082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_QUADMESH_PRECISE_LIGHTING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gadc08a2ed84e40e44d6eb805349bfdb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_ENABLE_CONFORMANT_GL_CLAMP</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gacc3ec6854a39775eff0c8eab3f1a9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>IV_SEPARATOR_MAX_CACHES</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga68bb6f654e01bed206d40bedee84e756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AUTOCACHE_LOCAL_MAX</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gad6001c165dd6a19447f7c9cb9cef8134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AUTOCACHE_LOCAL_MIN</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gae0e14afa32d5ffcf2a6d1cc55aaac462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AUTOCACHE_REMOTE_MAX</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga57e557edf508c6f196b62b753312cae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AUTOCACHE_REMOTE_MIN</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8008e2e4b71d235c550b2a1e188f4412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AUTO_CACHING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gae5b82c8a059f77d2c8e6bbc3f7da6062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_ENABLE_VBO</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga25235c1cdc3c0286344c1eefdfe0e1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_VBO</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga09298eef78a1fa87fd394142b93c78f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_VBO_MAX_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga49c2d0f121c9621b0a22dd2e801a3f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_VBO_MIN_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gae490c79818e5b740fa4c0d70a0a3ce44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SOOFFSCREENRENDERER_ALLOW_RESOURCEHOG</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga3dd5609f80b099f4b86ee280a477292f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>SO_DRAGGER_DIR</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga55da7b788a9a910ce2ddfebad2a74c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>SO_SHADER_DIR</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaa94c258a246eff7b6e4d36a01c786031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COINDIR</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga242bc75fbc202307ad1fb3ae0b8b316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_ALLOW_SPIDERMONKEY</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga4c89fd2b9ddf4a6b63e2880891093f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_AUTOCACHE_VBO_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga0db997be15a8e8cb4e176f1a5950d141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_CALCULATE_NURBS_NORMALS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gab02553d033733fc89b976850d958df7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_CGLGLUE_NO_PBUFFERS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga4203b8bae9a614eb7f62c3405b0d09ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_CG_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga163b4bee09739c7dba6e445cadde2f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_ASSERT_SOBASE_SETNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8876240dd54921d0383450be383d0fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_BINARY_INPUT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga91de9e91fc3bc34e259d9d415799b7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_CLEANUP</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga377903ed55fa1f8d0a8e0d2b43c7c447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_EXTRA</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gafb7d9a7f53267772a8917f799783e51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_FLATTEN_NODEKITS_ON_WRITE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga98356c3ca0074918440a09b2fdf2204c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_GLRENDER_TRAVERSAL</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga7b535e23af93e5e4a885e4d5321d5708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_GLUNURBSSURFACE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga29a24548846897fba18074098b242ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_INTERSECTIONDETECTIONACTION</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaef2e81d0e905622b24946f6fb9906c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_MUTEXLOCK_MAXTIME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga0f3dec2e8867223f549730f6c85016c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_MUTEXLOCK_TIMING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga7d98e4e0dc3c2546fe6fa4f6bc2ffe74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_MUTEX_COUNT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga63be89e95dc4d5439662fc426e8b23f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_NORMALIZE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga6ec48b180882fd2359264bd67a6de5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_NPRINTF</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gab88c648bca11e634df126a6d76785b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_NURBS_COMPLEXITY</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga6da066644fe988322d4574b0078e82b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_ROOT_NOTIFICATIONS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gac5cc3ed62995b02c71abe08a9fa39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SIMAGE</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga9c1f39ff63f06e2254efb230830450a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SOEXTSELECTION</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga26044abce8cbe4888b6ded4c9faae61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SOFILE_READ</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gad651e8252160322c989f48ad06579aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SOOFFSCREENRENDERER_TILEPREFIX</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga069aef2c8faa2ecb5d70e224c19d0fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_SPIDERMONKEY_BINDING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaa24faeaeabed94bc9ff732669b879a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_STRING_GROW</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga6d847145f404a75f9f073f93331fb41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_TRACK_SOBASE_INSTANCES</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gadbcb0e2a26353d9156bc97e87f51df63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_VBO</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga4c5d8f0cbc7641fa9ebe2be351498075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_DEBUG_VRMLSCRIPT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga3f4905c7632cae1ecf879f2524f7a9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FONTCONFIG_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga204481c1d7cf268007bf6984c5ad5f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FORCE_AGL</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga933bff42283f134e529902b01a972225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_FORCE_FONTCONFIG_OFF</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga4257e1826f35d3e05faeaba07e9c4c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GLU_SILENCE_TESS_COMBINE_WARNING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gadef74b6ad69768ef63db05eaee034341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GL_DISABLE_VBO</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaf5eed218d9d54e605f70cac6450384a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_GL_NO_CURRENT_CONTEXT_CHECK</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga7a624f62c581524264eacb8a7f770071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_HANDLE_STACK_OVERFLOW</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga742145dc4b01b8a113e418b0a6ddee9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_NESTED_CACHING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga7283d138f95dc54c2d69b5520dcb5500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_NOT_STRICT_VRML97</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga10737573873c9079b67bd66ba84175f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_NO_NVIDIA_COLOR_PER_FACE_BUG_WORKAROUND</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga8c89a53ce2a0d1e3857ea3540ff3b358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_NO_SOTYPE_DYNLOAD</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga9e117ec4223842e36e8d950b51697c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OFFSCREEN_STENCIL_BITS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga2676124ca3ab75d2bc09ce1a1dec97fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_OLD_NURBS_COMPLEXITY</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gad475a1075ec8665f3000c2b8f9682f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_PREFER_GLU_TESSELLATOR</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gabf5caa8df0f1e1dffc16540f6a0f2d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_REDUCE_LINEAR_NURBS_STEPS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga165feb145cfd7f49df3cd6a97071c26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SMART_CACHING</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga117718249c07a559316a5ab06ee2d3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_SPIDERMONKEY_LIBNAME</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga3186e3287f274b3af87e6d60e29d6ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_ANISOTROPIC_LIMIT</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga20f9cc473f3572486af7e18e2da0ef76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_TEX2_USE_SGIS_GENERATE_MIPMAP</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaded751af564b7687a3137f5dcf0026b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_VERTEX_ARRAYS</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gafff36f9cad1322e147739161279022dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>COIN_VIEWUP</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>ga1a8a23c9700aba9d269fc5d13a728c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnvironmentVariable</type>
      <name>WINDIR</name>
      <anchorfile>group__envvars.html</anchorfile>
      <anchor>gaeb1dcdafd3fe5f8f015d07406747698c</anchor>
      <arglist></arglist>
    </member>
    <page>group__envvars</page>
  </compound>
  <compound kind="struct">
    <name>cc_sched</name>
    <filename>structcc__sched.html</filename>
    <member kind="variable">
      <type>cc_mutex *</type>
      <name>mutex</name>
      <anchorfile>structcc__sched.html</anchorfile>
      <anchor>a6da30980570afd16c135de426ba4e18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cc_heap *</type>
      <name>itemheap</name>
      <anchorfile>structcc__sched.html</anchorfile>
      <anchor>a3d6b3e3f5c1f60b9b90b7aa2f455ebcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cc_memalloc *</type>
      <name>itemalloc</name>
      <anchorfile>structcc__sched.html</anchorfile>
      <anchor>acb961ec417d5ee2aafd228c8c04940c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>schedid_counter</name>
      <anchorfile>structcc__sched.html</anchorfile>
      <anchor>a82393fb885f0b7140902a6504e5b1cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numallowed</name>
      <anchorfile>structcc__sched.html</anchorfile>
      <anchor>a173fa179764cab8517e51354562060ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SbBool</type>
      <name>iswaitingall</name>
      <anchorfile>structcc__sched.html</anchorfile>
      <anchor>a068eac36eaf28bdd77c488b802a83ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cc_string</name>
    <filename>structcc__string.html</filename>
  </compound>
  <compound kind="class">
    <name>SbBox2d</name>
    <filename>classSbBox2d.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox2d</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ab5d433a13b536b2935830e6e0e81bbcf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2d</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ab35a9df21fe541e6d26f1d9bdb18001b</anchor>
      <arglist>(double xmin, double ymin, double xmax, double ymax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2d</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a47551f0655643ba2556d56dc137e2aa3</anchor>
      <arglist>(const SbVec2d &amp;minpoint, const SbVec2d &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ac95c2f308fed44c6bb399e61a50a9f70</anchor>
      <arglist>(double xmin, double ymin, double xmax, double ymax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a28504f92d8e1af08da2f841883b8a839</anchor>
      <arglist>(const SbVec2d &amp;minpoint, const SbVec2d &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a9911fcb3302faad2b6778a20bc7f2509</anchor>
      <arglist>(const SbBox2f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a2c86872d0aea6b849904f1714174f307</anchor>
      <arglist>(const SbBox2s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a52d1f9128dd2d5068b936f0dfbeee3a8</anchor>
      <arglist>(const SbBox2i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a234cb25edb09f55cbcd2214f06f6e6ed</anchor>
      <arglist>(double &amp;xmin, double &amp;ymin, double &amp;xmax, double &amp;ymax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a1f20170a2b0418efa77f321e935f15f5</anchor>
      <arglist>(SbVec2d &amp;minpoint, SbVec2d &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2d &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a07e1d73e574c837502f77ddfd0550073</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a68745130b47973a8cbb4c96d6bb75035</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2d &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ae15e40202deab6d4db29c7740b11c460</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a136376a27439d712e88e3624a6e5b70c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a579b3a3ce2297998dda39f036ad1caf3</anchor>
      <arglist>(const SbVec2d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>aeab99592f3ed491da6ea1e23ea1b94e7</anchor>
      <arglist>(const SbBox2d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a61a1cb11326fc2a0a4d16a0851fdbda5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isEmpty</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a2ed1a822e48a2ccd7d739a7c6ef0b69d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasArea</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a619ffbd12248becb50fd654e5ddb82d5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ab0b3eeacb8e310670640504a9ac8db72</anchor>
      <arglist>(const SbVec2d &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a9769d3bfaa165eb19a662f132370e156</anchor>
      <arglist>(const SbBox2d &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>getClosestPoint</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ab1086ccdb9db97b52434e613651f370b</anchor>
      <arglist>(const SbVec2d &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>findIntersection</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>af352d83227b49a421dd0929cfeb83429</anchor>
      <arglist>(const SbVec2d &amp;a, const SbVec2d &amp;b, SbVec2d &amp;ia, SbVec2d &amp;ib) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>getCenter</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a944514ea38673a674b67b4f05a56a966</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a424c0fd9dfdbbdd374f62615d09553b1</anchor>
      <arglist>(double &amp;originX, double &amp;originY) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a621c694a5e0dfa63376b9f7103532101</anchor>
      <arglist>(double &amp;sizeX, double &amp;sizeY) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAspectRatio</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a3ed9685d595181df1213f3953dd69ed5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>ab6de355aab03179a741038c6856378bd</anchor>
      <arglist>(const SbBox2d &amp;b1, const SbBox2d &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox2d.html</anchorfile>
      <anchor>a420c973f766c0f9cb2e8c7ec1aa6e03d</anchor>
      <arglist>(const SbBox2d &amp;b1, const SbBox2d &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBox2f</name>
    <filename>classSbBox2f.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox2f</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>af60e9222058dbdcd867cbb048c721b03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2f</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a488cf3016af1093b2189a19cc9087fc6</anchor>
      <arglist>(float xmin, float ymin, float xmax, float ymax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2f</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a9ec2e3cb95df5dbcf3f331aed736f1b7</anchor>
      <arglist>(const SbVec2f &amp;minpoint, const SbVec2f &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a36c09cc65b4a63013bc31dea68a7b6e1</anchor>
      <arglist>(float xmin, float ymin, float xmax, float ymax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>af3a9b1d9fd5ff0af88a6a77f44e00878</anchor>
      <arglist>(const SbVec2f &amp;minpoint, const SbVec2f &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>af4abc503bb458358536c5b4e5454bd85</anchor>
      <arglist>(const SbBox2d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a95232a587c8a3c42c4d0c128f7582a01</anchor>
      <arglist>(const SbBox2s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>ad97a22a8df3411c4bdbb267aaa41da78</anchor>
      <arglist>(const SbBox2i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a45e11f6106b3897c55777cca63a2e70d</anchor>
      <arglist>(float &amp;xmin, float &amp;ymin, float &amp;xmax, float &amp;ymax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a17d12a72cb94b999b5133e8e6e9a8ea1</anchor>
      <arglist>(SbVec2f &amp;minpoint, SbVec2f &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a4c3f5237eab11eb573ad5dd197dddf69</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a87381f189b356411c3bb009334f14eeb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>adef18ca6285056b08d44138c3d1ee37e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>ae2e64a1f974668066070f8b85256cc1e</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a2d6c817d8fde53380e5bd1fa68b22f08</anchor>
      <arglist>(const SbBox2f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a8a53357d402331b2433a190182c055dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isEmpty</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a374158ced7a6565ba21f2cdaa2cb2366</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasArea</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a6d2a7c6a1859f2d1ef32a05039340695</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>acfd1639fbf4df552c0058cbc7477646b</anchor>
      <arglist>(const SbVec2f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a7401884a79096c9ed0955f0e0018eee7</anchor>
      <arglist>(const SbBox2f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>getClosestPoint</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a7817d0a9d943d0f68844d1c3aab1ed6e</anchor>
      <arglist>(const SbVec2f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>getCenter</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>aba253f3e70bff6c93e175dfba6f54e6c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a93d21c5df92d6b620ded73dd11e62be8</anchor>
      <arglist>(float &amp;originX, float &amp;originY) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>afa20c0897b2bdb6d38176a209a404c57</anchor>
      <arglist>(float &amp;sizeX, float &amp;sizeY) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a3bb2a9743b41994cf27ed9ebc23d6c54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>a44f45d9426e170bec8f85b0fd82033d8</anchor>
      <arglist>(const SbBox2f &amp;b1, const SbBox2f &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox2f.html</anchorfile>
      <anchor>aca1673211be6ce175bc5ac0c795feaa3</anchor>
      <arglist>(const SbBox2f &amp;b1, const SbBox2f &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBox2i32</name>
    <filename>classSbBox2i32.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox2i32</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a00a108df9578449c28a71e82df2e3425</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2i32</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a3f3b707dd61816ec42977710045a80eb</anchor>
      <arglist>(int32_t xmin, int32_t ymin, int32_t xmax, int32_t ymax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2i32</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a3ccb05c485c28ffe37a0b006bdaa7b73</anchor>
      <arglist>(const SbVec2i32 &amp;minpoint, const SbVec2i32 &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2i32 &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a07b5e5d4d93577e76196c787b241af7a</anchor>
      <arglist>(int32_t xmin, int32_t ymin, int32_t xmax, int32_t ymax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2i32 &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>af968faf7abaa4a340f9a51f1d5f41d36</anchor>
      <arglist>(const SbVec2i32 &amp;minpoint, const SbVec2i32 &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2i32 &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a50cf910454ea88f88a9183d0a8a88a70</anchor>
      <arglist>(const SbBox2s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2i32 &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>ad6b3a830d99a9134c2c094dc2bf1eb96</anchor>
      <arglist>(const SbBox2f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2i32 &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>abb51acdad3cd319cec4a5c1e81d5ed62</anchor>
      <arglist>(const SbBox2d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>ae94dbc7e63c352dc56cbc94e62f51433</anchor>
      <arglist>(int32_t &amp;xmin, int32_t &amp;ymin, int32_t &amp;xmax, int32_t &amp;ymax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a0fedf55243c89c2eea73f1e865419526</anchor>
      <arglist>(SbVec2i32 &amp;minpoint, SbVec2i32 &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2i32 &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a361a0932a370bf9c832452d11fe10859</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2i32 &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a990604edbbc198d7c9d424da8c766f50</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a8bafd6a3bee621e012315639c107d239</anchor>
      <arglist>(const SbVec2i32 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a351aac1810159af0755a5f338ddc9628</anchor>
      <arglist>(const SbBox2i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>acecabbd2c9355ec12504aab11b5a2819</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a97fd0d39afa98b0ee03d3fdbc13f69b3</anchor>
      <arglist>(const SbVec2i32 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>ade2117edc5a383e297c28130342ffaf4</anchor>
      <arglist>(const SbBox2i32 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a547cad66d589a58d199e6fbd815e973b</anchor>
      <arglist>(int32_t &amp;originX, int32_t &amp;originY) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a8b526798ae0e7a74d3f8afe1bb09813c</anchor>
      <arglist>(int32_t &amp;sizeX, int32_t &amp;sizeY) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>a5c310b514c13efb4d72ef52d1301e7de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>aab3f8be9fe431ab0554ee51e7ed15142</anchor>
      <arglist>(const SbBox2i32 &amp;b1, const SbBox2i32 &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox2i32.html</anchorfile>
      <anchor>ac8a1e71eb6cb04c5529b0fb0f1e151c6</anchor>
      <arglist>(const SbBox2i32 &amp;b1, const SbBox2i32 &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBox2s</name>
    <filename>classSbBox2s.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox2s</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a9c89d2e09b48756623200f573d3d8c32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2s</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>adc4b8796c9228ef325f6c7e63ecb3442</anchor>
      <arglist>(short xmin, short ymin, short xmax, short ymax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox2s</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>aae69b105fdcb01d3a4e9482de5f55271</anchor>
      <arglist>(const SbVec2s &amp;minpoint, const SbVec2s &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a45e3b9b59d7e4d62e4a38d54743aff2b</anchor>
      <arglist>(short xmin, short ymin, short xmax, short ymax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>ae63d6210915c86cd2cb87b5e303ed3ab</anchor>
      <arglist>(const SbVec2s &amp;minpoint, const SbVec2s &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a2127e685bab4548cac5ba22ec7605e42</anchor>
      <arglist>(const SbBox2i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a93f392204a9df6e72745f203b8ad09f1</anchor>
      <arglist>(const SbBox2f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox2s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a22d4c407102514013fcb8e506a9b5b85</anchor>
      <arglist>(const SbBox2d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a4d926e9b29187c9d478c4393d061b648</anchor>
      <arglist>(short &amp;xmin, short &amp;ymin, short &amp;xmax, short &amp;ymax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a3b87582c6906c5e9487214838be7018c</anchor>
      <arglist>(SbVec2s &amp;minpoint, SbVec2s &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a91a1e049c92a5b2fdd13d019a627e0cf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a2968325960913e67bee599cc10687882</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a1dca266f470c5a66671ee6cab151ad3f</anchor>
      <arglist>(const SbVec2s &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>af04182b3564b7e62eeda4ab6d5f36de6</anchor>
      <arglist>(const SbBox2s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>aa22e56acd95b2ffdc76ddf77ee0c6bcb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a4b9b4b852219efec3734aa94ce4c6c70</anchor>
      <arglist>(const SbVec2s &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a56ba599429cb7882e499f97508c02dd2</anchor>
      <arglist>(const SbBox2s &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a0adb3836750e29ea6dc135fcc4c49a05</anchor>
      <arglist>(short &amp;originX, short &amp;originY) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a1acda6274210fc28351d8fb99d666cce</anchor>
      <arglist>(short &amp;sizeX, short &amp;sizeY) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a241be4815b5fcc2a2b0ff00f4788edf6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a1042a3532734ad78f25483c2f1305458</anchor>
      <arglist>(const SbBox2s &amp;b1, const SbBox2s &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox2s.html</anchorfile>
      <anchor>a56b6a6b0eb776ef2ad99e78bc27993d7</anchor>
      <arglist>(const SbBox2s &amp;b1, const SbBox2s &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBox3d</name>
    <filename>classSbBox3d.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox3d</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a45ea275b28082f1ee978041b7a0ca6a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox3d</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ab70192aeedddd65122a5fc352c4dfe1c</anchor>
      <arglist>(double xmin, double ymin, double zmin, double xmax, double ymax, double zmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox3d</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ab90fc4d7004dfdfe6c9d09c359df61a2</anchor>
      <arglist>(const SbVec3d &amp;minpoint, const SbVec3d &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a43a4b2b558e8a21d33648b1bda85f789</anchor>
      <arglist>(double xmin, double ymin, double zmin, double xmax, double ymax, double zmax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a650b55c2c282cdcfc4ab2115b6ecaa0e</anchor>
      <arglist>(const SbVec3d &amp;minpoint, const SbVec3d &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>aa88a95e250520e098a655bf263a20d13</anchor>
      <arglist>(const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a9bceea65b321021e97decbf346002b73</anchor>
      <arglist>(const SbBox3s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3d &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a637c1cace5e460cf431bf930e809603e</anchor>
      <arglist>(const SbBox3i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ac8e19a7801269ebd51478d4200cf603c</anchor>
      <arglist>(double &amp;xmin, double &amp;ymin, double &amp;zmin, double &amp;xmax, double &amp;ymax, double &amp;zmax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a937f9b9cff639ad270f6fdaa3c42a3b3</anchor>
      <arglist>(SbVec3d &amp;minpoint, SbVec3d &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a7299b3288cfe389fb83008f45006a389</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a54dd241796af5a3b58300856e1e3f4b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>aa217bf5822e7370f8cca17196409132d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a9efbd7394f969d498fd82720803a05a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ac893a7e396c4e3e52c3167419bab3a1b</anchor>
      <arglist>(const SbVec3d &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a573d9e294173cee3cbe859bcd3d6246f</anchor>
      <arglist>(const SbBox3d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a962b54989a51435308b1ea93e523b319</anchor>
      <arglist>(const SbDPMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a026528f81ff09aa8120c03b42d88ebc3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isEmpty</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a54aacc32b9847c9d29478ee942a4eca5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasVolume</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a4a74318453685999701759d29ad96e9c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVolume</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a71c8c10233f233794ca68364f11b0514</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ae729692ebea9df8918a35a3eaeef5c3f</anchor>
      <arglist>(const SbVec3d &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a03fb2447e6bf398f279f5cde48b5ff88</anchor>
      <arglist>(const SbBox3d &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getClosestPoint</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>adf9dd8bd1e7da863e0cad8e8cbf30d22</anchor>
      <arglist>(const SbVec3d &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>outside</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>aba043028044bdd311ac6c0c3f4ab6f90</anchor>
      <arglist>(const SbDPMatrix &amp;mvp, int &amp;cullbits) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getCenter</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a425d984108e4c1fd7bae6da90c290104</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a9ce815e8fbfa02396b64d3224f9c0c35</anchor>
      <arglist>(double &amp;origoX, double &amp;origoY, double &amp;origoZ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a166f5825a2195a863fb21308137e29f0</anchor>
      <arglist>(double &amp;sizeX, double &amp;sizeY, double &amp;sizeZ) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getSize</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a8ff67f0490a0cd66afad1462aa49baf6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSpan</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>aa07cd614e6fa03736082c6a0c884fead</anchor>
      <arglist>(const SbVec3d &amp;dir, double &amp;dmin, double &amp;dmax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>a721b6f1ee22969f38a9c8516f7c500c2</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ab4a51a09147360c5bc153f0db3a7ee92</anchor>
      <arglist>(const SbBox3d &amp;b1, const SbBox3d &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox3d.html</anchorfile>
      <anchor>ac649125547a086c55bbf67ee25a9222c</anchor>
      <arglist>(const SbBox3d &amp;b1, const SbBox3d &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBox3f</name>
    <filename>classSbBox3f.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox3f</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>acda68a85f93e1c8756d2f1804e1fab4e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox3f</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ae9b4d556bd2445c2245ad28b28e21d00</anchor>
      <arglist>(float xmin, float ymin, float zmin, float xmax, float ymax, float zmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox3f</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ad190f9a9eae99d4d498443d1cf7a81db</anchor>
      <arglist>(const SbVec3f &amp;minpoint, const SbVec3f &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a2d834ff650b6b13dfd031391548b7a54</anchor>
      <arglist>(float xmin, float ymin, float zmin, float xmax, float ymax, float zmax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a401fe84bbd869ebcf4e0239cdb341085</anchor>
      <arglist>(const SbVec3f &amp;minpoint, const SbVec3f &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>aaeb8955f8a8e15f2929f9b14d59aabee</anchor>
      <arglist>(const SbBox3d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a72d624cf6e21ea8140db50f20b70776d</anchor>
      <arglist>(const SbBox3s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3f &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a2a2f27fd6b76e6557a2b9de0d209e178</anchor>
      <arglist>(const SbBox3i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a530b02ef338d45ffd874a665ce8ade45</anchor>
      <arglist>(float &amp;xmin, float &amp;ymin, float &amp;zmin, float &amp;xmax, float &amp;ymax, float &amp;zmax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a49017e945b2fb6051791b29f9f6f63ad</anchor>
      <arglist>(SbVec3f &amp;minpoint, SbVec3f &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ac8dc8307c75142946783dd2b457859b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a19ba3e3cd73083cfe9a099813616c4cc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ac69fd7a029fdef8683639ebd95c94e2d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a6957d8a5bd2296ff6174885b79ad7acf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>af34b9c76920737d7791f88c090a22634</anchor>
      <arglist>(const SbVec3f &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ae81199b5fe1786b8f621d794a153c20a</anchor>
      <arglist>(const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>aef13d65bf2de3ce2f3bc963b6d1bda7e</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a5ef7fe06e8ceb456f75fc2762a9b50aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isEmpty</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a1a6b29cab6d14c8a4175ed23940ae638</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasVolume</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>afe4b5cdcd2b3a92177545fb69f9b5a93</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a4b2c392aabd479a6b4b2063ad09ca344</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a832e6cbf2690063618f24d1985d52a74</anchor>
      <arglist>(const SbVec3f &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a10a1a38f8b2a7a35d93b45e9b398c274</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getClosestPoint</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a2bcd8de27983faebb08bb61d328a7307</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>outside</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ab93b10d14f5eb5b8f5ea4d67bf5de334</anchor>
      <arglist>(const SbMatrix &amp;mvp, int &amp;cullbits) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getCenter</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a2423226714e3d49db4b6b8ee1e6e5cc6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a918dc86a611c03c1e915dfbc5616c10d</anchor>
      <arglist>(float &amp;originX, float &amp;originY, float &amp;originZ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>aa62d6629c6d76046b00ebab4fe64d10a</anchor>
      <arglist>(float &amp;sizeX, float &amp;sizeY, float &amp;sizeZ) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getSize</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>af0e66bd7cb388dc70ca76adc378bbae4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSpan</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a70176c1cbf01656d4b5951f0270ee83e</anchor>
      <arglist>(const SbVec3f &amp;dir, float &amp;dmin, float &amp;dmax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ac7921bece2465caaae2b2c407bfc0655</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>ab8d0c8d5fad634d9067c36c06c5427fc</anchor>
      <arglist>(const SbBox3f &amp;b1, const SbBox3f &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox3f.html</anchorfile>
      <anchor>a445f1b0feaacc059e3d63e03641f5ee0</anchor>
      <arglist>(const SbBox3f &amp;b1, const SbBox3f &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBox3s</name>
    <filename>classSbBox3s.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBox3s</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>af34ced593533a18d9744eda71fe932f7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox3s</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>ae563f1b8d0fe6397dbe2db8d2f6634f3</anchor>
      <arglist>(short xmin, short ymin, short zmin, short xmax, short ymax, short zmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbBox3s</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a060ac9e7fa6d50e26a70dfe67503ba8c</anchor>
      <arglist>(const SbVec3s &amp;minpoint, const SbVec3s &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a2c477237d4a0e162a8118092a58c51ee</anchor>
      <arglist>(short xmin, short ymin, short zmin, short xmax, short ymax, short zmax)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a3c9080831e46e5719873beddab6e9f82</anchor>
      <arglist>(const SbVec3s &amp;minpoint, const SbVec3s &amp;maxpoint)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>ae8d2fa61d7f88aba9ca027008eb2d5ee</anchor>
      <arglist>(const SbBox3i32 &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a56964bf82750b50608ebf6d049b092a1</anchor>
      <arglist>(const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBox3s &amp;</type>
      <name>setBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>ac4648044180760e079b576d7bc281fb0</anchor>
      <arglist>(const SbBox3d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a2a3f6ad05fbb0c58a45b55fbc3db2c99</anchor>
      <arglist>(short &amp;xmin, short &amp;ymin, short &amp;zmin, short &amp;xmax, short &amp;ymax, short &amp;zmax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>afa7695ba77e64b44302e0e7696920fa5</anchor>
      <arglist>(SbVec3s &amp;minpoint, SbVec3s &amp;maxpoint) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3s &amp;</type>
      <name>getMin</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a24160f4b13f39cc43730bb308140e2fc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3s &amp;</type>
      <name>getMax</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>ad2196a1c83df1a9c47c25b57ff941208</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a68ef880438212a29e6a7254a55a5fe10</anchor>
      <arglist>(const SbVec3s &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>acc8678e70b1802613f1ba2a4cdbc6b66</anchor>
      <arglist>(const SbBox3s &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a57664b65dd1ff57ee18c14a1c44f23ca</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a64ca69ea3e97c842b0f2fe7dcf193b0d</anchor>
      <arglist>(const SbVec3s &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>add9507c9acba4a435df851596a1220df</anchor>
      <arglist>(const SbBox3s &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOrigin</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a4458952c2aa8674841f06766141e3809</anchor>
      <arglist>(short &amp;originX, short &amp;originY, short &amp;originZ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSize</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a2b5baad7cbe8f688c69c543a8167f79b</anchor>
      <arglist>(short &amp;sizeX, short &amp;sizeY, short &amp;sizeZ) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a8947d1fa6e0badfc158e309139b23d90</anchor>
      <arglist>(const SbBox3s &amp;b1, const SbBox3s &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbBox3s.html</anchorfile>
      <anchor>a9a916e95490b2e6483d1b5d29502df96</anchor>
      <arglist>(const SbBox3s &amp;b1, const SbBox3s &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbBSPTree</name>
    <filename>classSbBSPTree.html</filename>
    <member kind="function">
      <type></type>
      <name>SbBSPTree</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a81cd11e722bd4d8782c9b2617e0e3907</anchor>
      <arglist>(const int maxnodepts=64, const int initsize=4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbBSPTree</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a20b5c9fe452abb73582520f2503f302e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPoints</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>acabe1a2ce55abf7bd81d7189370b940d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getPoint</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>ae7b02a0ced518b5cf5ba4ea9e248325b</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPoint</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a9ec6294a48cdd6f578387d03d86886b1</anchor>
      <arglist>(const int idx, SbVec3f &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a76173717bb73ad3985689e213e426d4d</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a3e0dc00d4b8a12821f8cf6995fd9620e</anchor>
      <arglist>(const int idx, void *const data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPoint</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a94c0936113aecbd1089f5692965cdde6</anchor>
      <arglist>(const SbVec3f &amp;pt, void *const userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>removePoint</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>abe40262d6438a4228b4acc9ff944b9b3</anchor>
      <arglist>(const SbVec3f &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePoint</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a7c352323ca873a56b2dafc4e1022ec07</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findPoint</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a2c5b590a42feeaa07404e33187cbd6c5</anchor>
      <arglist>(const SbVec3f &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findClosest</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a976e48d9573af9c661dbc7c07ff705eb</anchor>
      <arglist>(const SbVec3f &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>ae2d8a472cce88969ad72455554f25842</anchor>
      <arglist>(const int initsize=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPoints</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a5a42133555ca189a93348b7b15c9c721</anchor>
      <arglist>(const SbSphere &amp;sphere, SbIntList &amp;array) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findClosest</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a30241b721d474f107510837c6fe8ff3f</anchor>
      <arglist>(const SbSphere &amp;sphere, SbIntList &amp;array) const </arglist>
    </member>
    <member kind="function">
      <type>const SbBox3f &amp;</type>
      <name>getBBox</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>ad12878eb4e012cb869560e168ad488d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getPointsArrayPtr</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a44f0f2af2000a791d814cc1618e135d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPoints</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a7a2860d3095b13a0caff048ecba1a6ce</anchor>
      <arglist>(const SbSphere &amp;sphere, SbList&lt; int &gt; &amp;array) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findClosest</name>
      <anchorfile>classSbBSPTree.html</anchorfile>
      <anchor>a61bcf839b193be178f471fa7e1e5cf33</anchor>
      <arglist>(const SbSphere &amp;sphere, SbList&lt; int &gt; &amp;array) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbClip</name>
    <filename>classSbClip.html</filename>
    <member kind="function">
      <type></type>
      <name>SbClip</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>ad84357d002b55482d098de8d44ff7d3e</anchor>
      <arglist>(SbClipCallback *callback=NULL, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>a341c5e4129ebef7f8447d408350ae98a</anchor>
      <arglist>(const SbVec3f &amp;v, void *vdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>a0f4196a57e40383c33d04e9e19d2d5fc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clip</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>adb59533f96dbca4e433fa8194e69677a</anchor>
      <arglist>(const SbPlane &amp;plane)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVertices</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>ac370e148fa6838c46f83409bec65840f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVertex</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>ac9c8f0b50c8db80ced3063eabb6be9f4</anchor>
      <arglist>(const int idx, SbVec3f &amp;v, void **vdata=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getVertexData</name>
      <anchorfile>classSbClip.html</anchorfile>
      <anchor>a3107cb450b83fe492b7dbf4b4c78db88</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbColor</name>
    <filename>classSbColor.html</filename>
    <base>SbVec3f</base>
    <member kind="function">
      <type></type>
      <name>SbColor</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>a57b97220a4686bf7f16c9a7daa81e995</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>ad505d11c8d16b471e41d35a0f19bad6f</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>a8c13fdb8bb612dc9050af5fee374cc2d</anchor>
      <arglist>(const float *const rgb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>af4c539e5b646684bd3687a529d66ad8a</anchor>
      <arglist>(const float r, const float g, const float b)</arglist>
    </member>
    <member kind="function">
      <type>SbColor &amp;</type>
      <name>setHSVValue</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>ab0e0b257d9e44ccfeb0361e060dfc7ee</anchor>
      <arglist>(float h, float s, float v)</arglist>
    </member>
    <member kind="function">
      <type>SbColor &amp;</type>
      <name>setHSVValue</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>a06585db40ed0e0e3ad8ad9f0426acf49</anchor>
      <arglist>(const float hsv[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHSVValue</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>ae6ff17e35f2e3054d34806cb8189b0f7</anchor>
      <arglist>(float &amp;h, float &amp;s, float &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHSVValue</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>a94c675166c62eb52768bac743d5ee372</anchor>
      <arglist>(float hsv[3]) const </arglist>
    </member>
    <member kind="function">
      <type>SbColor &amp;</type>
      <name>setPackedValue</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>aea92d5997a1ac924c9bf68c9c9c23ecb</anchor>
      <arglist>(const uint32_t rgba, float &amp;transparency)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getPackedValue</name>
      <anchorfile>classSbColor.html</anchorfile>
      <anchor>a690a376d590c60393d1a9e31bcc3a3bb</anchor>
      <arglist>(const float transparency=0.0f) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aa76258aca6004c0bc187eb1bb6ad8920</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a5d493a03bcc39dd578d10fb16a9880b0</anchor>
      <arglist>(const float v[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ab1b1809e180447f9543c568fe1797afe</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a361be6b8e470fcd78a751d9e903c77d1</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a407499b4811c6d58fd869b9b7ac968ba</anchor>
      <arglist>(const SbVec3b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a7bd67c1129f1b91537b630b75882773e</anchor>
      <arglist>(const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ae46cd083167fe597aec88d0756b99133</anchor>
      <arglist>(const SbVec3i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3f</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aa3f9d152a6c12807db97f06f8a6a882d</anchor>
      <arglist>(const SbPlane &amp;p0, const SbPlane &amp;p1, const SbPlane &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a441b6c1a81cb3a144aea083d273e0fba</anchor>
      <arglist>(const float v[3])</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>acbd4bc205e738596a07798c3fa066f7f</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a398f573712c5fe396171acbcc350c1b7</anchor>
      <arglist>(const SbVec3f &amp;barycentric, const SbVec3f &amp;v0, const SbVec3f &amp;v1, const SbVec3f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a01a8dba4f91c56a4f7fd8a1c2fe0b74f</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ae861ee2e14544a07526edac9f8ab56b8</anchor>
      <arglist>(const SbVec3b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a9c0650859153a39b3d0214ccb804d66f</anchor>
      <arglist>(const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a8197f09226440885ae0ca0cb19f48ad9</anchor>
      <arglist>(const SbVec3i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a7706fc4599b5d6ecca4783bfc7345a5b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a6c1b1415cdae844f2a2a02a489b5e25a</anchor>
      <arglist>(float &amp;x, float &amp;y, float &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>afaa7c9c8e280f703bd46b4701817f6ae</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a5a25adcfa62c8e771d4a47311766dcd0</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ad44ff53aee4ad077228cf614ac4d4e38</anchor>
      <arglist>(const SbVec3f &amp;v, float tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>cross</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a1d8d558618c7e5dca35b19b817ab3ca6</anchor>
      <arglist>(const SbVec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aceb5ad1cb652c99b0fa5e9769fd7ab81</anchor>
      <arglist>(const SbVec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getClosestAxis</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aeaaaaf4dd7cf6c0e9acc16973cf5d8d1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>length</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a450de33397f52427bf9870f6ecf3c91e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sqrLength</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ac7c60a3962e92614377f803612a4c364</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>normalize</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ac0d97d3db797a7a849d4f28c3a2436f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a93022b11a182eba2bb4bd334ee243d43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aff19f4a93eef8f249c007ee879d0b5c6</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a1f312a6caf3ecd58fc4adfaa9cc76708</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a047dd8714e8aa6c0877742e8984465be</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aa42684f487f3b3d449e077e1bfe06391</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>operator-</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a505ad1e2c216bcb0a49c383431777419</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>toString</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ad18661fd400bc3514295c51b7174336c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fromString</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ac905cbd501030b50597f35d4092a0a02</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a7170fa390bee7c8be559c23ec99518a4</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>vec</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a47474608ef4d1d3724b2bfad52a60dd2</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>operator*</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>aa03aed703688d6b2760baa8f16ac2792</anchor>
      <arglist>(const SbVec3f &amp;v, float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>operator*</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ac6a0bb153d74282d1d13070d850bb4e9</anchor>
      <arglist>(float d, const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>operator/</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>ab7e6292b2c255bdbd92e36f93cba6120</anchor>
      <arglist>(const SbVec3f &amp;v, float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>operator+</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a4a0d56698007ef9dced0e01822984034</anchor>
      <arglist>(const SbVec3f &amp;v1, const SbVec3f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>operator-</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a6c05f978707fca7bcd7df43d9ee12f33</anchor>
      <arglist>(const SbVec3f &amp;v1, const SbVec3f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a75471273e406ad2f2df577bb83e02986</anchor>
      <arglist>(const SbVec3f &amp;v1, const SbVec3f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec3f.html</anchorfile>
      <anchor>a64345dd21abc88550089caa1860ecc45</anchor>
      <arglist>(const SbVec3f &amp;v1, const SbVec3f &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbColor4f</name>
    <filename>classSbColor4f.html</filename>
    <base>SbVec4f</base>
    <member kind="function">
      <type></type>
      <name>SbColor4f</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>abf2300514eb7df2d08870e181f2fc4d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor4f</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a53e7fc28bfa7153848582f9bff90fdf4</anchor>
      <arglist>(const SbColor &amp;rgb, const float alpha=1.0f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor4f</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>aee7803324174c72f1c50185c97007aa5</anchor>
      <arglist>(const SbVec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor4f</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ae76a933cb041ea3717fe2a565de13b2b</anchor>
      <arglist>(const float *const rgba)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbColor4f</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ad1a3fec4de9db97cd1ebd48e81810f27</anchor>
      <arglist>(const float r, const float g, const float b, const float a=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a4b4894afb2bb85d3398b1ee18e3087d4</anchor>
      <arglist>(const float r, const float g, const float b, const float a=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a800bec94d1e9de045f9c274ad256d913</anchor>
      <arglist>(const float col[4])</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a715af0da049d60bfd307c62d899b828d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a6a8d80bc0b6c99f22de3ec3c709c0dfb</anchor>
      <arglist>(float &amp;r, float &amp;g, float &amp;b, float &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>setRGB</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a734808c688beb9359623a13dc0d5f010</anchor>
      <arglist>(const SbColor &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRGB</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a973c01d8c620d3003e6bdd538d0b3360</anchor>
      <arglist>(SbColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>setHSVValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a18d2536de1a547cb257aadc6e50dd88f</anchor>
      <arglist>(float h, float s, float v, float a=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>setHSVValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a04e5474068c768e2fc4eb6850b50237a</anchor>
      <arglist>(const float hsv[3], float alpha=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHSVValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a240dccc38d73379abc757bf074fa7820</anchor>
      <arglist>(float &amp;h, float &amp;s, float &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHSVValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a4c41a43e085132a314c087e4bbac542a</anchor>
      <arglist>(float hsv[3]) const </arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>setPackedValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a22e7a117d0bf23c0ac65575fa25bd677</anchor>
      <arglist>(const uint32_t rgba)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getPackedValue</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a52629067a54c01dfa70a11fd02da3da0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator[]</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a276f5de9641d3972f43617649c561f67</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ae8a3bdb9100bf8dce49cdaf2328b759c</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ae31222f52097bddb749f79ab4d47d118</anchor>
      <arglist>(const float d)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ab257bf4d02b46088c6b1f2d3a06c7d23</anchor>
      <arglist>(const float d)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a26329aa5fe3dda3ee1d3f3146bc33b96</anchor>
      <arglist>(const SbColor4f &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>afe4e215e3f77dc75b6e33323baeddc30</anchor>
      <arglist>(const SbColor4f &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a8906e1c6054ce209d1f6d77a21515e44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>ad731535c83725d6bdc900b9a30ab4c92</anchor>
      <arglist>(const float v[4])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>adf498d940df41d8a89e34bffcb3cf2b8</anchor>
      <arglist>(float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a8545647ed869389186e93b47b7e2d52e</anchor>
      <arglist>(const SbVec4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a98e08f627dac939645bb52580db3c4aa</anchor>
      <arglist>(const SbVec4b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a254dd416048917eee27af0b8463fbd48</anchor>
      <arglist>(const SbVec4s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4f</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>ac83cc2c568738c8781fcee9b2fde8cf8</anchor>
      <arglist>(const SbVec4i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a5a641bc3d9805f860ed2c5d2b635389e</anchor>
      <arglist>(const float v[4])</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aa064707268b43ad1df00633375e7e092</anchor>
      <arglist>(float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a9c1937f4c3d7b1148957a0ac6d67b72f</anchor>
      <arglist>(const SbVec4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aee85f8205cddc571831987e400c4775e</anchor>
      <arglist>(const SbVec4b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a2cb09fafbc258b541f6cd85c7e0a6b04</anchor>
      <arglist>(const SbVec4s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a6122ce3070d5e7ee16db5cb9ef89b173</anchor>
      <arglist>(const SbVec4i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a88b6add43c67f4711a2c327df8a4a4d0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a05298e0798e51c1e66e686a9069345f7</anchor>
      <arglist>(float &amp;x, float &amp;y, float &amp;z, float &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aec83ad2e3162654f8d072404f8a10fd3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a23a56952ae4ffcdc921ae9a1a78e97a1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aa189954da7227667ccb1bb342c51d362</anchor>
      <arglist>(const SbVec4f &amp;v, float tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>ab34395948ac0e4ed013003056bae3b13</anchor>
      <arglist>(const SbVec4f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getReal</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a741cad8de0f09ea5518814d3f0ad20f3</anchor>
      <arglist>(SbVec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>length</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>ad7c1ade932e4896ddb06bf7e09f6ba1b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sqrLength</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aab32ba1dec469c4f77ae2c336b944033</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>ac87c676afcddcdd4c4a8e4dfacaaf81e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>normalize</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aee89703dbbd922b7c3df9084787af3bd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a6edff39216ff55da920bb1a10363e7a0</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a386fce6ce83b627ec4fe352241301ad0</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>abe309edc1357ce93eb1f218c6eb1e1ba</anchor>
      <arglist>(const SbVec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a0fa3416e87b398acfb9fdf0fc26b3a61</anchor>
      <arglist>(const SbVec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>operator-</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a604c1b9929a75b6f41e9faa9c1d670ca</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aea5573a058fb5a76724790c834e9c1d3</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="friend">
      <type>friend SbColor4f</type>
      <name>operator*</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>acbb7294a2d7e5e10c6807da2a422f847</anchor>
      <arglist>(const SbColor4f &amp;c, const float d)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbColor4f</type>
      <name>operator*</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ab9a7c90da47b08a148fccd7030c42834</anchor>
      <arglist>(const float d, const SbColor4f &amp;c)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbColor4f</type>
      <name>operator/</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>ae48a713a98060ce1409e185c9a79bb3c</anchor>
      <arglist>(const SbColor4f &amp;c, const float d)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbColor4f</type>
      <name>operator+</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a7681baa1f2aca9f602b8ca4141a30ccb</anchor>
      <arglist>(const SbColor4f &amp;v1, const SbColor4f &amp;v2)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbColor4f</type>
      <name>operator-</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a555100ee71c33ba2ec63cdad33d42110</anchor>
      <arglist>(const SbColor4f &amp;v1, const SbColor4f &amp;v2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>a3fff3adfe14963774875fd2d5116aa31</anchor>
      <arglist>(const SbColor4f &amp;v1, const SbColor4f &amp;v2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbColor4f.html</anchorfile>
      <anchor>aab73e3db4033c10a001e6c08feb26015</anchor>
      <arglist>(const SbColor4f &amp;v1, const SbColor4f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>operator*</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a92a3a4750b0fa4407f48db6adc22a9ca</anchor>
      <arglist>(const SbVec4f &amp;v, float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>operator*</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>abd05dad2218ea2be75c970bb965f0fed</anchor>
      <arglist>(float d, const SbVec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>operator/</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>af0c94dc96d51452294649791712c142a</anchor>
      <arglist>(const SbVec4f &amp;v, float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>operator+</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>abc1db057a8df5be3eb7f5d19f90b0e58</anchor>
      <arglist>(const SbVec4f &amp;v1, const SbVec4f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>operator-</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aeb503e55d6b40b30f6306f6689fb37b8</anchor>
      <arglist>(const SbVec4f &amp;v1, const SbVec4f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>aaaeee53660c883978e3ab2b0cfc27a77</anchor>
      <arglist>(const SbVec4f &amp;v1, const SbVec4f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec4f.html</anchorfile>
      <anchor>a63873557b254683d8b5313b0615dc061</anchor>
      <arglist>(const SbVec4f &amp;v1, const SbVec4f &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbCylinder</name>
    <filename>classSbCylinder.html</filename>
    <member kind="function">
      <type></type>
      <name>SbCylinder</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>ab268ab24f22bd16e48cf39208af2ecc2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbCylinder</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>a8fddfda354f81860438fb87545cfc345</anchor>
      <arglist>(const SbLine &amp;a, const float r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>af90337238a8ab3a5db63e0a69c5e9d71</anchor>
      <arglist>(const SbLine &amp;a, const float r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>a67bbd92c4b5d74aa76c795c44a50a003</anchor>
      <arglist>(const SbLine &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>a03a31659f75d8da21d426051bc2bf9b1</anchor>
      <arglist>(const float r)</arglist>
    </member>
    <member kind="function">
      <type>const SbLine &amp;</type>
      <name>getAxis</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>addfae1b302c037f56574b7b6362bb4bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>a02a8d5b7a192889abe798962d1ab5d53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>a3342f6f716873e1ec71907aa167ba970</anchor>
      <arglist>(const SbLine &amp;l, SbVec3f &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>ac69c116097c43eaa4fe1e64d71550000</anchor>
      <arglist>(const SbLine &amp;l, SbVec3f &amp;enter, SbVec3f &amp;exit) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbCylinder.html</anchorfile>
      <anchor>ab42dc00c9f080d0f307e89739c75d5b2</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbCylinderPlaneProjector</name>
    <filename>classSbCylinderPlaneProjector.html</filename>
    <base>SbCylinderSectionProjector</base>
    <member kind="function">
      <type></type>
      <name>SbCylinderPlaneProjector</name>
      <anchorfile>classSbCylinderPlaneProjector.html</anchorfile>
      <anchor>a08fd132904bbd02f023a9828343042cc</anchor>
      <arglist>(const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbCylinderPlaneProjector</name>
      <anchorfile>classSbCylinderPlaneProjector.html</anchorfile>
      <anchor>abdc129cdfa4dd62899ee4aee8b6db575</anchor>
      <arglist>(const SbCylinder &amp;cyl, const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbCylinderPlaneProjector.html</anchorfile>
      <anchor>adb328b12149ab9c8f3a172d7fc78040c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbCylinderPlaneProjector.html</anchorfile>
      <anchor>afb1bc7a499cfab6096c991dfb14ee569</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbCylinderPlaneProjector.html</anchorfile>
      <anchor>aca777eb280e6dec53fdfe4df92248799</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbCylinderSectionProjector</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a372620eae35a518562eaa71ec623ca88</anchor>
      <arglist>(const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbCylinderSectionProjector</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>ad55f8fc72cd86d3153ed5a929277622d</anchor>
      <arglist>(const SbCylinder &amp;cyl, const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a5d62015051b829b7af812d98fd0303be</anchor>
      <arglist>(const float edgetol)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTolerance</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a7c83b84a42f126133e4d9b6ce13e1c89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isWithinTolerance</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a901871f080a352cdaec49f13a0ccce13</anchor>
      <arglist>(const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>projectAndGetRotation</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a8c299f86e571141f3cdaa07c222b7b07</anchor>
      <arglist>(const SbVec2f &amp;point, SbRotation &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCylinder</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>ac4c6c87f8bc0656f781b9281d9c37294</anchor>
      <arglist>(const SbCylinder &amp;cyl)</arglist>
    </member>
    <member kind="function">
      <type>const SbCylinder &amp;</type>
      <name>getCylinder</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a35df77d446b36e2c374f9ab78e853196</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientToEye</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a366afa63e637a639ed16ee34374d7073</anchor>
      <arglist>(const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOrientToEye</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>ab8427c0e6d749b739728b7af507d7d3c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFront</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a3a66f1c989709170b78c07cf172293ae</anchor>
      <arglist>(const SbBool infront)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isFront</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a013b148faf20892010ea0184860170f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPointInFront</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a73f1f508e65589e63f18a79b3b076e6d</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorkingSpace</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a67017820b22d21be5008a09517cad5d9</anchor>
      <arglist>(const SbMatrix &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setViewVolume</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a31e07b5d3f93e5be01f1945536e74a18</anchor>
      <arglist>(const SbViewVolume &amp;vol)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewVolume &amp;</type>
      <name>getViewVolume</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>af9c675566ac78be97e2c5f8dfde640e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getWorkingSpace</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a0c8973e3b20cea311ab0067ef45c7820</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>tryProject</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a1912d859fd6a18d253706c9fdd40b5e0</anchor>
      <arglist>(const SbVec2f &amp;point, const float epsilon, SbVec3f &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbCylinderPlaneProjector.html</anchorfile>
      <anchor>a4aba339a4a76f500347952d5c901fbc7</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbBool tol1, const SbVec3f &amp;point2, const SbBool tol2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupTolerance</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>abbed8e29371e9d9b76e5341883bfdd7c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SbCylinderProjector</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a6dd2e2729ca64533ad3f6e46c5a04226</anchor>
      <arglist>(const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SbCylinderProjector</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a0c3291f74209ce8faed25c9074ec10f9</anchor>
      <arglist>(const SbCylinder &amp;cylinder, const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>intersectCylinderFront</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a11b8f0cd7a7d1f7946e10283aa0fb394</anchor>
      <arglist>(const SbLine &amp;line, SbVec3f &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SbProjector</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>af5e966f3ff29a796d35c7a1e0c6284e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SbProjector</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a6414ffa4d6d0635f1261b71a5df81ea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbLine</type>
      <name>getWorkingLine</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a0383142c3d4e1e69d13af75884905c9e</anchor>
      <arglist>(const SbVec2f &amp;point) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float</type>
      <name>findVanishingDistance</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>ad0157c8540c59a47168fcb0d4a62af58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>verifyProjection</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>ac501fd419478c1cdad459d218d44d75f</anchor>
      <arglist>(const SbVec3f &amp;projpt) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>tolerance</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>aefc718ff69cf2e490fd9de532a9b43ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>tolDist</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a798cc0c751300b98aa20d6381994a802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>planeDir</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a6c1a2f3bba580766b888672dfdfd6834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbLine</type>
      <name>planeLine</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a989430109a1f431e9a6a60a75e47cef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>planeDist</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>aa1a721305a73dc62e97aff7be3b3e5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlane</type>
      <name>tolPlane</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a5d8b4276b37a9b596458366615506ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>intersectFront</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a6040babe44b89117f1cb3bc0cdffc377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbCylinder</type>
      <name>cylinder</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>aa3debf12deff6aa74807637383eacd77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>orientToEye</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>afed152233dd402a2376f300c34adfa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>needSetup</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>af4238e26836efac6c8d10a8579a7ec70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>lastPoint</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>af2e2f91ad80b06fa7072bad5bdd78647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbViewVolume</type>
      <name>viewVol</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>af87ecfa2c2a1f99472327b7721eca310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>worldToWorking</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a9320194b4e872c21a2f6b04a2ff9d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>workingToWorld</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a9cb662f372bcc9d01a7b392cde75e8e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbCylinderProjector</name>
    <filename>classSbCylinderProjector.html</filename>
    <base>SbProjector</base>
    <member kind="function" virtualness="pure">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>a0932d5f18d746906ef42ab363d8913be</anchor>
      <arglist>(const SbVec2f &amp;point)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbCylinderProjector.html</anchorfile>
      <anchor>aa5dd6c4bc18a40ed5706b22beedcee58</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>aa33a37be8140f93ccad65e06a1f5c88b</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbCylinderSectionProjector</name>
    <filename>classSbCylinderSectionProjector.html</filename>
    <base>SbCylinderProjector</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a3385ed8d4720d5db3d028c4b6b7e5b10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a1559a388a0fdcd3de1ef8a2fe1066388</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbCylinderSectionProjector.html</anchorfile>
      <anchor>a520520c707d304d80d4e6a8dd7f0374f</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbCylinderSheetProjector</name>
    <filename>classSbCylinderSheetProjector.html</filename>
    <base>SbCylinderProjector</base>
    <member kind="function">
      <type></type>
      <name>SbCylinderSheetProjector</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>a5cd81d6b119f6a77a4901d21c601339c</anchor>
      <arglist>(const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbCylinderSheetProjector</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>aad3e95afc70fc70876845988f856205b</anchor>
      <arglist>(const SbCylinder &amp;cyl, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>a637eed19f250bb485cae830aeec43e9f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>ac37ca81fe5dd8d1e7ecb176b692c8697</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>a69a4e33d14b05a51533f45e977116bbe</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupPlane</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>af48ce18494eb4209176f1f6aab916d0d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>workingProjPoint</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>a00ea3600bebe862c80d4cf120eaa184f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>planeDir</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>af431cab97204963a160c156e04d103ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlane</type>
      <name>tolPlane</name>
      <anchorfile>classSbCylinderSheetProjector.html</anchorfile>
      <anchor>aba60a9c4f3431342af1a621f31179ddb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbDict</name>
    <filename>classSbDict.html</filename>
    <member kind="function">
      <type></type>
      <name>SbDict</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>a92792a27e53f730d81c3f545ea1aeb66</anchor>
      <arglist>(const int entries=251)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDict</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>adc2e06721f4e751e6c4b128eaed92b1c</anchor>
      <arglist>(const SbDict &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbDict</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>abc0830ad6fc3f118ef9364193b488bd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbDict &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>a79d4f48693dedcc4e643b7e65beecca3</anchor>
      <arglist>(const SbDict &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToAll</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>ab4c534180e79f149150418ce8e93e7d0</anchor>
      <arglist>(SbDictApplyFunc *rtn) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyToAll</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>aac6330a331057cd9aac365090cd8d919</anchor>
      <arglist>(SbDictApplyDataFunc *rtn, void *data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>a7a685b879d51576ad1719b9beca0b03b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>enter</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>a0bba31f23e0a1d50cd3167b27b3398e0</anchor>
      <arglist>(const Key key, void *const value)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>find</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>ad2958e8376cefa3be704ac0986daab0d</anchor>
      <arglist>(const Key key, void *&amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makePList</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>a7899d71e83dc06751a2f84a6e47945f5</anchor>
      <arglist>(SbPList &amp;keys, SbPList &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>remove</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>a99399bd0d0a2400d2050acad0f944853</anchor>
      <arglist>(const Key key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHashingFunction</name>
      <anchorfile>classSbDict.html</anchorfile>
      <anchor>acb8a122d624bbb4c70236f1e8998e6b0</anchor>
      <arglist>(SbDictHashingFunc *func)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbDPLine</name>
    <filename>classSbDPLine.html</filename>
    <member kind="function">
      <type></type>
      <name>SbDPLine</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>acd891c0ec98d97dbd7875444eb15d728</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPLine</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>abeb8525f59026c04f1bfc9e5f9384af4</anchor>
      <arglist>(const SbVec3d &amp;p0, const SbVec3d &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a2bbe6dd0ab4145e4443d5a3d1c2ee268</anchor>
      <arglist>(const SbVec3d &amp;p0, const SbVec3d &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosDir</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a577cfe7776c15483c5d1a8adc2c29cfc</anchor>
      <arglist>(const SbVec3d &amp;position, const SbVec3d &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getClosestPoints</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a355e0a4a1f22ae2f750051b9e9094fbc</anchor>
      <arglist>(const SbDPLine &amp;line2, SbVec3d &amp;ptOnThis, SbVec3d &amp;ptOnLine2) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getClosestPoint</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a049140acbac918165aa821ca85d35bf6</anchor>
      <arglist>(const SbVec3d &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getPosition</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a643fe9cb3f4dd3f9fe17ee283b86650b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getDirection</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a3376b619ce25fc9506c2771a1e23b30b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbDPLine.html</anchorfile>
      <anchor>a3476ce5ea28fc8e4c9b88c79028742a6</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbDPMatrix</name>
    <filename>classSbDPMatrix.html</filename>
    <member kind="function">
      <type></type>
      <name>SbDPMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a128a211a7842030be0e1c041f471f991</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a8cde278900f7f4c9685958e5c788ba2b</anchor>
      <arglist>(const double a11, const double a12, const double a13, const double a14, const double a21, const double a22, const double a23, const double a24, const double a31, const double a32, const double a33, const double a34, const double a41, const double a42, const double a43, const double a44)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a26d2933f7ff756a6c11c2696bf7c8603</anchor>
      <arglist>(const SbDPMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>afa1e0f29be6a11a565f221f96076ba87</anchor>
      <arglist>(const SbDPMat *matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ab7b2feaf256ebcc815c7b4148a50449f</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbDPMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a98f02d5633413ffbdeb4044eb4552248</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a47126c746af49b0bf8b700a8b99fe09e</anchor>
      <arglist>(const SbDPMat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>aea0f76b23ee126dbd9d92d66b77f3ebd</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a7039941aa193a375d440923e93580619</anchor>
      <arglist>(const double *pMat)</arglist>
    </member>
    <member kind="function">
      <type>const SbDPMat &amp;</type>
      <name>getValue</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a2102d0cd7239bba1558b2d9500f9e4b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeIdentity</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a5ebe71e85bd73734f391f3c7736a6a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotate</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>aecb5ac77f13d3041efab4239f496b024</anchor>
      <arglist>(const SbDPRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix</type>
      <name>inverse</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a16928f3c478a92adb9f1617324317fa9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>det3</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a4380f394be7aa7f0156a22fa35586f7c</anchor>
      <arglist>(int r1, int r2, int r3, int c1, int c2, int c3) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>det3</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ab90006b1d1a779a14dd49e70a2795c0a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>det4</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ae74f3f4a0212f3159eaba0e3f1d9d93a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a41410cfd05478e098b8f7446b712f5e5</anchor>
      <arglist>(const SbDPMatrix &amp;m, double tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>af997385ce8dffb28c38acc9df3a91aef</anchor>
      <arglist>(SbDPMat &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a965c24d5efbdbbd0ec34ee327a063073</anchor>
      <arglist>(const double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>aa6d94a40b76407b8feb94b8a4cc409ee</anchor>
      <arglist>(const SbVec3d &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslate</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ab74a0f653f57e888074078748031faca</anchor>
      <arglist>(const SbVec3d &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>abde926c18b54a0d8666130918c744e88</anchor>
      <arglist>(const SbVec3d &amp;t, const SbDPRotation &amp;r, const SbVec3d &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>aec1c06558a7c4deed0093102308ff384</anchor>
      <arglist>(const SbVec3d &amp;t, const SbDPRotation &amp;r, const SbVec3d &amp;s, const SbDPRotation &amp;so)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>abfd3f938b5145dc09a81b5b381cd39b8</anchor>
      <arglist>(const SbVec3d &amp;translation, const SbDPRotation &amp;rotation, const SbVec3d &amp;scaleFactor, const SbDPRotation &amp;scaleOrientation, const SbVec3d &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransform</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a5a6c1a6de8bfcfbec8d40fdf86746e9b</anchor>
      <arglist>(SbVec3d &amp;t, SbDPRotation &amp;r, SbVec3d &amp;s, SbDPRotation &amp;so) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransform</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a7130fb0618edbc93d0dcb6e35bb1a6aa</anchor>
      <arglist>(SbVec3d &amp;translation, SbDPRotation &amp;rotation, SbVec3d &amp;scaleFactor, SbDPRotation &amp;scaleOrientation, const SbVec3d &amp;center) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>factor</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>abf2e53bbe1cfae3a6e6942b94c7fe23b</anchor>
      <arglist>(SbDPMatrix &amp;r, SbVec3d &amp;s, SbDPMatrix &amp;u, SbVec3d &amp;t, SbDPMatrix &amp;proj)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>LUDecomposition</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ae2a77b2e48bdfcf31d1ccc2c357dfdaa</anchor>
      <arglist>(int index[4], double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUBackSubstitution</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ae6462895224c68c394b6e7554a7cd476</anchor>
      <arglist>(int index[4], double b[4]) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix</type>
      <name>transpose</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a8fa9bbf1ea7c5776c9e6d30963397d99</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix &amp;</type>
      <name>multRight</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a94cfe014d9ff734715d95528594f0dab</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix &amp;</type>
      <name>multLeft</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ad460ff02e7cbb1d936924860c2597f07</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multMatrixVec</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a587eab95805eb41f15cd0a94f4e7e1a3</anchor>
      <arglist>(const SbVec3d &amp;src, SbVec3d &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multVecMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a92985ed3d10b79b1dc2175389450e0b0</anchor>
      <arglist>(const SbVec3d &amp;src, SbVec3d &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multDirMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a9e01f23afa9a41db717cd4283307c024</anchor>
      <arglist>(const SbVec3d &amp;src, SbVec3d &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multLineMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a6784286f5833eb2ca81227ec4b3d14c6</anchor>
      <arglist>(const SbDPLine &amp;src, SbDPLine &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multVecMatrix</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a96f5a847637003e527dd1b22e0fbfce4</anchor>
      <arglist>(const SbVec4d &amp;src, SbVec4d &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>adca41af3835ba425687b343bf5ea211f</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double *</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ad050e634a24d8b5d8cd116e80316e74f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator SbDPMat &amp;</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a7e631132127dd962adc8ae686f414efb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>operator[]</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a3e9db2cc1e28ca32f45465b9e01a12fe</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>operator[]</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>af4f27f62e5a13c62662eee52eb179feb</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ab4bf47329bd286320f889bc267027b8a</anchor>
      <arglist>(const SbDPMat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>acb80ec05f96b34bef20434d629ede014</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a1dbd777cd44b861cbecd64ec1da2204f</anchor>
      <arglist>(const SbDPRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a5d1cd09332b55cff37b6bb7a2f980918</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbDPMatrix</type>
      <name>identity</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a77c852c30e49dea81679efbb9eeb71b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbDPMatrix</type>
      <name>operator*</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>ad0c5a82f0b6100292f78322850978234</anchor>
      <arglist>(const SbDPMatrix &amp;m1, const SbDPMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a728375812e131ac66d696b78a720985a</anchor>
      <arglist>(const SbDPMatrix &amp;m1, const SbDPMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbDPMatrix.html</anchorfile>
      <anchor>a4a3d456e61e7addad0f5e3f81987146a</anchor>
      <arglist>(const SbDPMatrix &amp;m1, const SbDPMatrix &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbDPPlane</name>
    <filename>classSbDPPlane.html</filename>
    <member kind="function">
      <type></type>
      <name>SbDPPlane</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a19743ddaf4a384d3cba5a4e6f9a5a3ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPPlane</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a45410d9d067acdb90601e54d893579c5</anchor>
      <arglist>(const SbVec3d &amp;normal, const double D)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPPlane</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>ae8b10470c878267cd3762cd89104db83</anchor>
      <arglist>(const SbVec3d &amp;p0, const SbVec3d &amp;p1, const SbVec3d &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPPlane</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>acc7c2504435602ca952768e1c9cffa13</anchor>
      <arglist>(const SbVec3d &amp;normal, const SbVec3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a87d41a81065603b897e0f2c284ef6cdc</anchor>
      <arglist>(const double d)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a1d87db21d7aaf66094777d1aa3b68ef5</anchor>
      <arglist>(const SbDPLine &amp;l, SbVec3d &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a71e39eb1f846b916e17780b013d9e5a8</anchor>
      <arglist>(const SbDPMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isInHalfSpace</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>abe3d3a38c1f5f5160c0d385748cc789e</anchor>
      <arglist>(const SbVec3d &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistance</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a2a0cc1f549ad08a6311d96e63b43e8dc</anchor>
      <arglist>(const SbVec3d &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>af7c17d2b6c6f42ddbfe7fe3234ca4fc4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceFromOrigin</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>aec49f5ebae3498aedf497f3a8139d05e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a0d879fe36a4658cff22d74d6993dc980</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>ada15f11208993d05fb67efe1e3ee6fdc</anchor>
      <arglist>(const SbDPPlane &amp;pl, SbDPLine &amp;line) const </arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>ae782368c6d9fae2120c18c92230c8d89</anchor>
      <arglist>(const SbDPPlane &amp;p1, const SbDPPlane &amp;p2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbDPPlane.html</anchorfile>
      <anchor>a649768b36ed267dd12e76a5795d4e096</anchor>
      <arglist>(const SbDPPlane &amp;p1, const SbDPPlane &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbDPRotation</name>
    <filename>classSbDPRotation.html</filename>
    <member kind="function">
      <type></type>
      <name>SbDPRotation</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a75e95ae9852ea9bbc637e2620b1e94f9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPRotation</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>ac0780b9ba075f24437a86aa1423ad5ed</anchor>
      <arglist>(const SbVec3d &amp;axis, const double radians)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPRotation</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a526858027f32f228658c698e9dd8d430</anchor>
      <arglist>(const double q[4])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPRotation</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a2f4eb6b6904cbf232a616aced527fec9</anchor>
      <arglist>(const double q0, const double q1, const double q2, const double q3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPRotation</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a26323e59933868a9aee01f90f97fae39</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPRotation</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>aa722c5954dfabfd29a44466ba70e4e3f</anchor>
      <arglist>(const SbVec3d &amp;rotateFrom, const SbVec3d &amp;rotateTo)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>aecccfdd66370eab41116e5d5e23b734d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a839115811d7fd455ecdc8a120f991b9e</anchor>
      <arglist>(double &amp;q0, double &amp;q1, double &amp;q2, double &amp;q3) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a79f13ce745916c9793ae37aee6ed4d2a</anchor>
      <arglist>(const double q0, const double q1, const double q2, const double q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>ad35092ed386bb6cb7edc1d80160f01c0</anchor>
      <arglist>(SbVec3d &amp;axis, double &amp;radians) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a302ae3c115349b2fae090498bee12812</anchor>
      <arglist>(SbDPMatrix &amp;matrix) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>invert</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a404861abbf42a5c66445738fe5275003</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation</type>
      <name>inverse</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a4cbd2c6dbbe6e1ad18a32c987caecc2e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a523b33d8acfb38b8b34dc3f08cb47425</anchor>
      <arglist>(const double q[4])</arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a159abdcd77b50ceda59b4a0592778af1</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a6859b5db7a7d0c688397583cc87da55f</anchor>
      <arglist>(const SbVec3d &amp;axis, const double radians)</arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a62330c9ee7c08b3d0aca25cce1f77195</anchor>
      <arglist>(const SbVec3d &amp;rotateFrom, const SbVec3d &amp;rotateTo)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a3f62b83779628666e74f3eabbc1dbb5a</anchor>
      <arglist>(const SbDPRotation &amp;r, double tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multVec</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a78f9a415856b14cce91691cbc35d68af</anchor>
      <arglist>(const SbVec3d &amp;src, SbVec3d &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleAngle</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a43fd701a0941cc47f940f5b62692602a</anchor>
      <arglist>(const double scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>abd18c0a49dcb073f285b266c2464305e</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a1c52b9f857e1bf35813b46274c89a569</anchor>
      <arglist>(const SbDPRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>af3e6b1e1d66b79c71d7d51f97e75a502</anchor>
      <arglist>(const double s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbDPRotation</type>
      <name>slerp</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a1653228819abaf8d9b2353fc22584331</anchor>
      <arglist>(const SbDPRotation &amp;rot0, const SbDPRotation &amp;rot1, double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbDPRotation</type>
      <name>identity</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>aa6dd1f0167071e01c72c61f292ddf9f5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a456c673216e5fe96d0919d36f37c78a1</anchor>
      <arglist>(const SbDPRotation &amp;q1, const SbDPRotation &amp;q2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>ad518f0072406b2b16a7104a3da13e83f</anchor>
      <arglist>(const SbDPRotation &amp;q1, const SbDPRotation &amp;q2)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbDPRotation</type>
      <name>operator*</name>
      <anchorfile>classSbDPRotation.html</anchorfile>
      <anchor>a5152cc6241a0bcfd01ee2862dcb6bd58</anchor>
      <arglist>(const SbDPRotation &amp;q1, const SbDPRotation &amp;q2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbDPViewVolume</name>
    <filename>classSbDPViewVolume.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ProjectionType</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a6e291b38723761fefa5f4d548656f02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORTHOGRAPHIC</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a6e291b38723761fefa5f4d548656f02daba5f0b8714367d2d4f3fc89d827dad01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERSPECTIVE</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a6e291b38723761fefa5f4d548656f02daf82dddc9bfb5b1bc708b4d0831a2fa08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbDPViewVolume</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a6a9df3bca0f7d4224f6d9f87fbcfc0b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbDPViewVolume</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a2fcb214d160096d3f035c3a7aeec3407</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMatrices</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a5e4d0ef235cc4a16a4dc40e9519d3ff6</anchor>
      <arglist>(SbDPMatrix &amp;affine, SbDPMatrix &amp;proj) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix</type>
      <name>getMatrix</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a087ecaaf8f01b8e0df6641fec148eaea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPMatrix</type>
      <name>getCameraSpaceMatrix</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>ae5624a4e6f27e726be19e73541e46bb3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectPointToLine</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>ab70cc4d29ec989fefcd77bf4c293d8a4</anchor>
      <arglist>(const SbVec2d &amp;pt, SbDPLine &amp;line) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectPointToLine</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a41c45c6a71305d3ebb0325e34b97006a</anchor>
      <arglist>(const SbVec2d &amp;pt, SbVec3d &amp;line0, SbVec3d &amp;line1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectToScreen</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a0b24ce1372dab7be4211ccc95020b2e2</anchor>
      <arglist>(const SbVec3d &amp;src, SbVec3d &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>SbPlane</type>
      <name>getPlane</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>ac53fde4fac62a058d2fdeee83248e511</anchor>
      <arglist>(const double distFromEye) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getSightPoint</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>aeaf93f694ba927c01331fc733c7850c8</anchor>
      <arglist>(const double distFromEye) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getPlanePoint</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a2bd4d56e10d3d0bdde2afe3c0f09b646</anchor>
      <arglist>(const double distFromEye, const SbVec2d &amp;normPoint) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPRotation</type>
      <name>getAlignRotation</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a416f3c5f8ae8386dc967ed30c6bcd480</anchor>
      <arglist>(SbBool rightAngleOnly=FALSE) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWorldToScreenScale</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a1ff755b170530b5f02ba511df3574abf</anchor>
      <arglist>(const SbVec3d &amp;worldCenter, double normRadius) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>projectBox</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>abe0de2b057ffe859a38e7ed8cf28668a</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPViewVolume</type>
      <name>narrow</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a7729c1e052b8f3f33dc5a350695f09c1</anchor>
      <arglist>(double left, double bottom, double right, double top) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPViewVolume</type>
      <name>narrow</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a2a33d2299b611e4ae9abc63d976e389e</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ortho</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a5b1ae06d0a994807f8b7b03591390af6</anchor>
      <arglist>(double left, double right, double bottom, double top, double nearval, double farval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perspective</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a79b16609b4bb4ea993d2dc0abb1e9372</anchor>
      <arglist>(double fovy, double aspect, double nearval, double farval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frustum</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a5a1a8270a5c8a792b4baaa0f0db9718c</anchor>
      <arglist>(double left, double right, double bottom, double top, double nearval, double farval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateCamera</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a67b021bbbc5a24853825d464444a8377</anchor>
      <arglist>(const SbDPRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateCamera</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a56e666557e3a6cd38ab28b803ee2fdd4</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>zVector</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a671550e1c0b702ae25a09f7ef8bfc278</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbDPViewVolume</type>
      <name>zNarrow</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a20607fc2a782816c12e3c6e6f436c73b</anchor>
      <arglist>(double nearval, double farval) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a3dc5c5e4cd6a2d0ae9059811dc80e5ad</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleWidth</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a417df19943bcf1c2bdaeaf8336386ee7</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleHeight</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a999e189bd9500c74c4af3a0bc4ad94de</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>ProjectionType</type>
      <name>getProjectionType</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a819c02e9ce96fede96d846ac4de81fc7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getProjectionPoint</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>ad9f29ab6a2ec2d445a15a1e63245902f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d &amp;</type>
      <name>getProjectionDirection</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a7bc7dbdc50b23e2ba0e758e3547af345</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNearDist</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>af7dacec031c3325fd0e459b16a980846</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidth</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a548fc09e3466071a4bcef967f5f62c45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeight</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>aa88d09ef77cdf2a91b2b6be7b3f982c1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDepth</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>abe6919a344c6307f02dd239caed9eb37</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a7f86cf3fa69f7d2de129860cd7a8e682</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getViewVolumePlanes</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a4fe16dc06a5c67d4ac710e061dd2972f</anchor>
      <arglist>(SbPlane planes[6]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>aaa31bc923afc5064b7cfc0317291dd8c</anchor>
      <arglist>(const SbDPMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getViewUp</name>
      <anchorfile>classSbDPViewVolume.html</anchorfile>
      <anchor>a8c71e7df9cfb7093274061d7fccb51a6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbHeap</name>
    <filename>classSbHeap.html</filename>
    <member kind="function">
      <type></type>
      <name>SbHeap</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>ac2992274d2b95a4fc4c9e596a43fa810</anchor>
      <arglist>(const SbHeapFuncs &amp;SbHeapFuncs, const int initsize=1024)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbHeap</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a82d70ed3e4e280473261ecd68e5f89cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyHeap</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a90933aaa6cf97fe3770944cc7b949c1b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a8664a6ca3ee93e78bcd5f55edaecf93c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a391497a9c15341877e0139696e36488e</anchor>
      <arglist>(void *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a8a7e532b4747e84aa5de3892e484a08f</anchor>
      <arglist>(const int pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>ab9441203bdf007b2ad839cb66f894111</anchor>
      <arglist>(void *obj)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>extractMin</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>ac9ca75ef3d29b357807660859c7ff9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getMin</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a8e16f8b087f872d7b3d78009c8a2c9f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator[]</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>ac6e4b8b6a82325634d3223c02ab286b4</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newWeight</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a48c0b4f7e527bb6dbe4139ab88c9e6ba</anchor>
      <arglist>(void *obj, int hpos=-1)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>buildHeap</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a26fcc520108e1f46e04a3a9513ab0fcb</anchor>
      <arglist>(SbBool(*progresscb)(float percentage, void *data)=NULL, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>traverseHeap</name>
      <anchorfile>classSbHeap.html</anchorfile>
      <anchor>a584bda2162966815974bbfe6ec291d6c</anchor>
      <arglist>(SbBool(*func)(void *, void *), void *userdata) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SbHeapFuncs</name>
    <filename>structSbHeapFuncs.html</filename>
    <member kind="variable">
      <type>float(*</type>
      <name>eval_func</name>
      <anchorfile>structSbHeapFuncs.html</anchorfile>
      <anchor>a5c73f24b66111ee54c8f54c478ee133e</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>get_index_func</name>
      <anchorfile>structSbHeapFuncs.html</anchorfile>
      <anchor>af35c5326d7d98064539f2474cfe054e5</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>set_index_func</name>
      <anchorfile>structSbHeapFuncs.html</anchorfile>
      <anchor>a52baccb47c85e89e17c422fc18881e8e</anchor>
      <arglist>)(void *, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbImage</name>
    <filename>classSbImage.html</filename>
    <member kind="function">
      <type></type>
      <name>SbImage</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a550b12717f54edaea466e959d2980d89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbImage</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a778084cf728861bd8d0914ea2fcba96e</anchor>
      <arglist>(const unsigned char *bytes, const SbVec2s &amp;size, const int bytesperpixel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbImage</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a3c65278b7e9875b5b3b96cd5f40811ec</anchor>
      <arglist>(const unsigned char *bytes, const SbVec3s &amp;size, const int bytesperpixel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbImage</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a32a64d8424b7754e4f870e8afb7757fa</anchor>
      <arglist>(const SbImage &amp;image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbImage</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a79f9dcc12b3fe1c11f2d4fc289610f1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a8c119ce77ae392580d3f4776adeb72ce</anchor>
      <arglist>(const SbVec2s &amp;size, const int bytesperpixel, const unsigned char *bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a1d234ffdf7ae23b249cd9978044c7e69</anchor>
      <arglist>(const SbVec3s &amp;size, const int bytesperpixel, const unsigned char *bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValuePtr</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a5393d25e565e123ebc889055612592bf</anchor>
      <arglist>(const SbVec2s &amp;size, const int bytesperpixel, const unsigned char *bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValuePtr</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a4cdc0f3a01dc4651a4aa9794d58357d2</anchor>
      <arglist>(const SbVec3s &amp;size, const int bytesperpixel, const unsigned char *bytes)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getValue</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>acb2f388d0b8578c5404c4bf1dd5fffd9</anchor>
      <arglist>(SbVec2s &amp;size, int &amp;bytesperpixel) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getValue</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>aba15636b7fa4e247ac28d3d5117ffb94</anchor>
      <arglist>(SbVec3s &amp;size, int &amp;bytesperpixel) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>getSize</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a71bb34fa531a99feda2afbd471451f5a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>readFile</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a869f0fa0bfe5b58bf31e8c00bc0dc6c0</anchor>
      <arglist>(const SbString &amp;filename, const SbString *const *searchdirectories=NULL, const int numdirectories=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>ac55f4c3fc5de35ac845092d5c8100f39</anchor>
      <arglist>(const SbImage &amp;image) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a6e2bbeae4c05a1d6246b7adf5ccb3500</anchor>
      <arglist>(const SbImage &amp;image) const </arglist>
    </member>
    <member kind="function">
      <type>SbImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a5f21488a4af52f41f22015396315f6e8</anchor>
      <arglist>(const SbImage &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasData</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a8de2c2de07a2a77896943adf637e49f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLock</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a53e32fee8d919ea93694cc057901b9e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnlock</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a05425d2892c309c392a5287aac4ade46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>scheduleReadFile</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>aeb76fecd85ad2b627f4b3bd247e1df3a</anchor>
      <arglist>(SbImageScheduleReadCB *cb, void *closure, const SbString &amp;filename, const SbString *const *searchdirectories=NULL, const int numdirectories=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addReadImageCB</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a24b1dd5bb0bfa78a89db2363f822561c</anchor>
      <arglist>(SbImageReadImageCB *cb, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeReadImageCB</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a57f25c820e03b12c28e2775a69ccebea</anchor>
      <arglist>(SbImageReadImageCB *cb, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>searchForFile</name>
      <anchorfile>classSbImage.html</anchorfile>
      <anchor>a1155f75c7b9aa27fcd0b004bde938704</anchor>
      <arglist>(const SbString &amp;basename, const SbString *const *dirlist, const int numdirs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbIntList</name>
    <filename>classSbIntList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SbIntList</name>
      <anchorfile>classSbIntList.html</anchorfile>
      <anchor>a77787425ccf57683a584e891c16f783b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbIntList</name>
      <anchorfile>classSbIntList.html</anchorfile>
      <anchor>afca9c9369d5fe31414c0b068772fe0bf</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSbIntList.html</anchorfile>
      <anchor>aa7c78267d6164e2e3d9550e7c1c023c0</anchor>
      <arglist>(const int item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSbIntList.html</anchorfile>
      <anchor>a8c36ff744a7dc5749699447d696f77bc</anchor>
      <arglist>(const int item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSbIntList.html</anchorfile>
      <anchor>a832e8fa620c7101da392b1a77c3bb9bf</anchor>
      <arglist>(const int item, const int addbefore)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbIntList.html</anchorfile>
      <anchor>ae439fa049157086bd96326ae5d698bc1</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbPList</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>aa7f2d079fc9b7f79159c52bfc84c1903</anchor>
      <arglist>(const int sizehint=DEFAULTSIZE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbPList</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>af811d0ca4b528e41ded787620a098302</anchor>
      <arglist>(const SbPList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbPList</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>abd1d6b798ff7e7ca94a2c0cd421a99b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>afde90b2b3d0a9f12bdf0525bc6f8dd95</anchor>
      <arglist>(const SbPList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>SbPList &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>aebfa0b8e1ecc80d7fa4b290bcc0a63d4</anchor>
      <arglist>(const SbPList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a74b60d94666a2e26bfd8d594093171b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a61404440e153af0870eac6183d09fc04</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a2a1636490324dc243990114af901d656</anchor>
      <arglist>(void *item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>af500b13baee20036c51b7746c9b046b0</anchor>
      <arglist>(void *item, const int insertbefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a4e876aa0634c39c25d6492a70691341d</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a6a4deead2d652da76afce4a6d6cbf755</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFast</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a85f37433e030fb1845a1f210098b805d</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>accb7298ca284c3e7bb2a7bff3706c9a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>ac32c857e4308dd6b638275d90ea6fc60</anchor>
      <arglist>(const int length, const int fit=0)</arglist>
    </member>
    <member kind="function">
      <type>void **</type>
      <name>getArrayPtr</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>ab29c4fcd0c37d4356fa8d776ee3dc506</anchor>
      <arglist>(const int start=0) const </arglist>
    </member>
    <member kind="function">
      <type>void *&amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a9b4d944db89e8d9faaadcdc86a20970d</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a00666511202c8b820dd86b102230d9da</anchor>
      <arglist>(const SbPList &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a0d9b46c3f7278629cf2a01d57e1e1912</anchor>
      <arglist>(const SbPList &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>aa426c733e4fe6caf207f8e744d0ccd79</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a2594a4326065d15ec4bcb3104b4e74b6</anchor>
      <arglist>(const int index, void *item)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a28744f335b05d2e87bbc000f39a9e241</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getArraySize</name>
      <anchorfile>classSbPList.html</anchorfile>
      <anchor>a26537c96975f9cc9d781ea8cc5f68b4a</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbLine</name>
    <filename>classSbLine.html</filename>
    <member kind="function">
      <type></type>
      <name>SbLine</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>aa8db4c11f19c63d8431002d34edaa515</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbLine</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>a5ab86e886ad329357c68bbb67c92d53c</anchor>
      <arglist>(const SbVec3f &amp;origin, const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>a6beb09e9ca8cf702ddcf0b2a56793a1d</anchor>
      <arglist>(const SbVec3f &amp;origin, const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosDir</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>ab4910d8a37e4e80c80eabc4caee321e6</anchor>
      <arglist>(const SbVec3f &amp;position, const SbVec3f &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getClosestPoints</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>a23f8cd0d0f777342689530b43ed37bc4</anchor>
      <arglist>(const SbLine &amp;line2, SbVec3f &amp;ptOnThis, SbVec3f &amp;ptOnLine2) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getClosestPoint</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>afc49eedb145ef1991c44f28b5917bcd0</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getPosition</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>a0443fe92e89186972fdc2d373bb14985</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getDirection</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>aa7fd52fea972cb036d0143b40343c4e2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbLine.html</anchorfile>
      <anchor>a9cd8e3b4c988f491a1b4df3857dcb993</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbLineProjector</name>
    <filename>classSbLineProjector.html</filename>
    <base>SbProjector</base>
    <member kind="function">
      <type></type>
      <name>SbLineProjector</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a62208e6694d0c49d5f5f2285253dd2c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a0e27b2257ff05292cf44c0ad5fff8798</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a37d1853c90acf15a9f1b89f5ce916328</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>tryProject</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a30d31ed062b21ede8aba6d6efb7cabcd</anchor>
      <arglist>(const SbVec2f &amp;point, const float epsilon, SbVec3f &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLine</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a67f4544fb46670d4a5a1f7d19f07a3c9</anchor>
      <arglist>(const SbLine &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>const SbLine &amp;</type>
      <name>getLine</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a9cbcedfbc8a50fae937f50c5ea58d230</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>getVector</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a0ac417f0ecb8ba48885eb38797cd8cb0</anchor>
      <arglist>(const SbVec2f &amp;viewpos1, const SbVec2f &amp;viewpos2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>getVector</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a69cdc927750e6a129219255de434f535</anchor>
      <arglist>(const SbVec2f &amp;viewpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPosition</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a1a5e94503de9afdc59070e6c2e3da3fc</anchor>
      <arglist>(const SbVec2f &amp;viewpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPosition</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>ad03cee2f1c3908b186d9373dd320b6c5</anchor>
      <arglist>(const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorkingSpace</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>acc11d72e261a3a27304377d673e48b21</anchor>
      <arglist>(const SbMatrix &amp;space)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbLine</type>
      <name>line</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a941a98593075b2dd72aefe27389675dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>lastPoint</name>
      <anchorfile>classSbLineProjector.html</anchorfile>
      <anchor>a933b480d6eee70fa3dea6a5fcf4aae5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbList</name>
    <filename>classSbList.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type></type>
      <name>SbList</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ab18cad4eb2d06030cd564917a8c331f4</anchor>
      <arglist>(const int sizehint=DEFAULTSIZE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbList</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a189665fb116eed3812bad8a2da247d3d</anchor>
      <arglist>(const SbList&lt; Type &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbList</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ae7c20239e83b64aec15b53273622618d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ad35a42495f3ecb04a19a387dc468ce92</anchor>
      <arglist>(const SbList&lt; Type &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>SbList&lt; Type &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a54522df5b70fac1df3c4eaa8808ccbc6</anchor>
      <arglist>(const SbList&lt; Type &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ad92621e814796448b9fe0990bdb959ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ae98b0264bc9a47902cb36386dde1341c</anchor>
      <arglist>(const Type item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a965b16dcd3df1052b9926312905f87ae</anchor>
      <arglist>(const Type item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ada8fe73c9935bd004fc2b9c07bc68638</anchor>
      <arglist>(const Type item, const int insertbefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ab4817441dd2125c7dc22b7b6d3d84155</anchor>
      <arglist>(const Type item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>aa3ca1bc32dde2755b354dd250fbed1da</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFast</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a5c53be30fa6d84a05676128ff4f1e4b3</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a8527386d48de36971b2460f61e4873e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a0dc149facedb4f0ac8c1ccb2d628ed1d</anchor>
      <arglist>(const int length, const int dofit=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>af8b64ab9fa5562d1ae179a2ba3c825fe</anchor>
      <arglist>(const Type item)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>pop</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a23a3b993144dfe304eee41cb555549f7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Type *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ab28a59b1a848e2e553f18ecd08527a58</anchor>
      <arglist>(const int start=0) const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator[]</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>ae520560666e824264137d148e824243e</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>Type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a61f700e59d16e5d793d9ba97f071e822</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a974b3f9163c9c6b7960d1c73ee2dc4e8</anchor>
      <arglist>(const SbList&lt; Type &gt; &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>afcd87df8458e16206ff4c7d5c5ce303e</anchor>
      <arglist>(const SbList&lt; Type &gt; &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureCapacity</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>af046ab4c15fea0db879ed5e8388b9156</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>aed7f50965b7b3a655b8013c440313980</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getArraySize</name>
      <anchorfile>classSbList.html</anchorfile>
      <anchor>a528ac3389f454a8206bca3b166d2a5f8</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbMatrix</name>
    <filename>classSbMatrix.html</filename>
    <member kind="function">
      <type></type>
      <name>SbMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>aa9c543c99277c8efe81ecaa27d2977a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>af4f62a6e3d63538dc5660b59592f3559</anchor>
      <arglist>(const float a11, const float a12, const float a13, const float a14, const float a21, const float a22, const float a23, const float a24, const float a31, const float a32, const float a33, const float a34, const float a41, const float a42, const float a43, const float a44)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a11cc61c8a398ca99f727c24e9dac5145</anchor>
      <arglist>(const SbMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a14a38bb0c23bd9899b73e1cf6d42674f</anchor>
      <arglist>(const SbMat *matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a8e36c51695b7f881e6527a0171e4b59b</anchor>
      <arglist>(const SbDPMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a56c2af917e531b6a2c689277da0e5e40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a823e51aa6487c9445f08520664bb0f24</anchor>
      <arglist>(const SbMat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a336dcb30ce4faaac2f0ad661b3c611d4</anchor>
      <arglist>(const SbDPMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a64f74a53cfa9fa179febed9c526a5e5a</anchor>
      <arglist>(const float *pMat)</arglist>
    </member>
    <member kind="function">
      <type>const SbMat &amp;</type>
      <name>getValue</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a985e8cd7ac8771a0fc4da0579932d19c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeIdentity</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>aa3932a07fef33751bea1d2afad98dd80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotate</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ad980a0a21520443af5f27ad2c3a0ac4d</anchor>
      <arglist>(const SbRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix</type>
      <name>inverse</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a4e99f030b83ae08e885ed43558a1b9b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>det3</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a39aa5544c14e36f3090be4284a3ba2a6</anchor>
      <arglist>(int r1, int r2, int r3, int c1, int c2, int c3) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>det3</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a8f7fddeb6c22a4e8b3170b4400e4512d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>det4</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ae5de806e797f203628e8fae31a653c32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a69ddc3035f28bcce3457c49b886f75f5</anchor>
      <arglist>(const SbMatrix &amp;m, float tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ad5b9d0fc68e6657036e34cf941768adb</anchor>
      <arglist>(SbMat &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ac3fe68df7dff290a61a29ee3494559fb</anchor>
      <arglist>(const float s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a20666edc6bd3449c8121213504e2d779</anchor>
      <arglist>(const SbVec3f &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslate</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a9e7499122cfa98b5e3eec4832248343d</anchor>
      <arglist>(const SbVec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ab213f7106629056c14f92d7cca1b0e40</anchor>
      <arglist>(const SbVec3f &amp;t, const SbRotation &amp;r, const SbVec3f &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a35048991968e198707e5186ac9c12c68</anchor>
      <arglist>(const SbVec3f &amp;t, const SbRotation &amp;r, const SbVec3f &amp;s, const SbRotation &amp;so)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>aaa26b5ff6e108f1ad44552320dec9375</anchor>
      <arglist>(const SbVec3f &amp;translation, const SbRotation &amp;rotation, const SbVec3f &amp;scaleFactor, const SbRotation &amp;scaleOrientation, const SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransform</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a2ab231640a3a3211716de76c07606e70</anchor>
      <arglist>(SbVec3f &amp;t, SbRotation &amp;r, SbVec3f &amp;s, SbRotation &amp;so) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransform</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a3ddfbb7b43f8d347717cc6621d5457d1</anchor>
      <arglist>(SbVec3f &amp;translation, SbRotation &amp;rotation, SbVec3f &amp;scaleFactor, SbRotation &amp;scaleOrientation, const SbVec3f &amp;center) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>factor</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>aefdcc23eccf6de5cbf7eafd230f206cc</anchor>
      <arglist>(SbMatrix &amp;r, SbVec3f &amp;s, SbMatrix &amp;u, SbVec3f &amp;t, SbMatrix &amp;proj)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>LUDecomposition</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a44442a984a6db189e521b8e599187eb3</anchor>
      <arglist>(int index[4], float &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUBackSubstitution</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ad680536320c79d550eeb1e9b4ce8a90d</anchor>
      <arglist>(int index[4], float b[4]) const </arglist>
    </member>
    <member kind="function">
      <type>SbMatrix</type>
      <name>transpose</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>aa0ef21dc210ce541751d3dd389be6074</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>multRight</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a95c83d6772896a1c592d9f02ef9b9b73</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>multLeft</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a9fb67deb0eba537ad84e4a7064ced20d</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multMatrixVec</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ad96d19c79f60edf82502db778af0c10e</anchor>
      <arglist>(const SbVec3f &amp;src, SbVec3f &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multVecMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>af7fb9a0687aefbc3a853b87923bb538d</anchor>
      <arglist>(const SbVec3f &amp;src, SbVec3f &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multDirMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ad29df20d6916d82dbf90290a83a7d9a4</anchor>
      <arglist>(const SbVec3f &amp;src, SbVec3f &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multLineMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a8ee6706c8ddadca45266b6217bec8ab4</anchor>
      <arglist>(const SbLine &amp;src, SbLine &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multVecMatrix</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a725fdbc6bb273e222544ec4f242912e5</anchor>
      <arglist>(const SbVec4f &amp;src, SbVec4f &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a2170946f1261bb3cb3e43dbc07a7d965</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float *</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a2e9cb965db606983daab26f713cd85bd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator SbMat &amp;</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a68ebdb48cc42675a9608de80ac995b03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>operator[]</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ad01011ae53be487a1a5951ee501d81f7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>operator[]</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ac568d42a060b5b72a35d6f8795279161</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>ab923719276439757ba9c351af0d48645</anchor>
      <arglist>(const SbMat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a53b9da1c1ed8a4aabe50962719b16f21</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a2f48f009fcc63c5ccb7a7c49bc80d03a</anchor>
      <arglist>(const SbRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a2cde5f5b6c11272d146b8684a4c87823</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>identity</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>adc24591ea5071d7d8f18eee7066c36e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbMatrix</type>
      <name>operator*</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>af6ee85af9ea51cca2e159b777aeafacc</anchor>
      <arglist>(const SbMatrix &amp;m1, const SbMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>abf8843860b5e03a0061ebe2ec9d8a9ad</anchor>
      <arglist>(const SbMatrix &amp;m1, const SbMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbMatrix.html</anchorfile>
      <anchor>a00563ae0cae392aefedeb3a6f77ce9f4</anchor>
      <arglist>(const SbMatrix &amp;m1, const SbMatrix &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbName</name>
    <filename>classSbName.html</filename>
    <member kind="function">
      <type></type>
      <name>SbName</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>ad6a4c7d4f516d74b22a0f054065c4d1b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbName</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>ab724be41e08ba30cbe70bca6bb0f6920</anchor>
      <arglist>(const char *namestring)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbName</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>ab523d9d8a9ebe1a7e7d7206579cba24f</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbName</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a29e5b8239dd822004d5a332bfecec96e</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbName</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a727ed1c947b2f9a7f00216489af3fa5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getString</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a3b56356c5c5f8e3fabc0dbc47c6499fe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a8922348ac9a89bd418ec7cc580d7b037</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a4dd95424ad0fc82a5dd7ea7b3e13738e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a11223b37f380585bc94e490ff300091f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isIdentStartChar</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a8542c60491baad59191fa04c8f05c7ff</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isIdentChar</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a3f201ffe519350d5ae06f31fc30ed9c9</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isBaseNameStartChar</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>ab4e8fb488f254fda26e22055223ecf0e</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isBaseNameChar</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>ad4c80d5dd355792ef2406f09d47b42de</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>empty</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a20587288b45a68e953a08428640afcc9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a1a9e2e87224f997e7b85ea4270f31491</anchor>
      <arglist>(const SbName &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a11b92ad49c0bd13adc4cfa5bbaa4ff0d</anchor>
      <arglist>(const char *lhs, const SbName &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>af664e0fe96b220633d87506098c586ff</anchor>
      <arglist>(const SbName &amp;lhs, const SbName &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a817a20561fe7a7cc170a871975806296</anchor>
      <arglist>(const SbName &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>aed52cb7e045ed247aba2ca9e0715c031</anchor>
      <arglist>(const char *lhs, const SbName &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbName.html</anchorfile>
      <anchor>a29000d9ba142f3ad44fb42b0c9b9baf3</anchor>
      <arglist>(const SbName &amp;lhs, const SbName &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbOctTree</name>
    <filename>classSbOctTree.html</filename>
    <member kind="function">
      <type></type>
      <name>SbOctTree</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>add70351f00eacc285ac91c8394af6f84</anchor>
      <arglist>(const SbBox3f &amp;bbox, const SbOctTreeFuncs &amp;itemfuncs, const int maxitemspernode=64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbOctTree</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>ab9a58a484f6eacacce9b5d91943abd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>abe0d819501c3e600783942cffb2b157f</anchor>
      <arglist>(void *const item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>a0960def43c29ed624d0da49241db7d77</anchor>
      <arglist>(void *const item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findItems</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>a10d23e833a1d3a1c45eee2ec7808fef0</anchor>
      <arglist>(const SbVec3f &amp;pos, SbList&lt; void * &gt; &amp;destarray, const SbBool removeduplicates=TRUE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findItems</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>ac7ab5ad89d43d84fc0b222b83813bb60</anchor>
      <arglist>(const SbBox3f &amp;box, SbList&lt; void * &gt; &amp;destarray, const SbBool removeduplicates=TRUE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findItems</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>a666126ccabc9c9b144d8134c708eea9c</anchor>
      <arglist>(const SbSphere &amp;sphere, SbList&lt; void * &gt; &amp;destarray, const SbBool removeduplicates=TRUE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findItems</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>a74610e46f323032c732ce889537071e9</anchor>
      <arglist>(const SbPlane *const planes, const int numplanes, SbList&lt; void * &gt; &amp;destarray, const SbBool removeduplicates=TRUE) const </arglist>
    </member>
    <member kind="function">
      <type>const SbBox3f &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>a88265002b10b254686e652d04369f9aa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSbOctTree.html</anchorfile>
      <anchor>a40ce23dda004f6b4a6c97a488286b0c7</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SbOctTreeFuncs</name>
    <filename>structSbOctTreeFuncs.html</filename>
    <member kind="variable">
      <type>SbBool(*</type>
      <name>ptinsidefunc</name>
      <anchorfile>structSbOctTreeFuncs.html</anchorfile>
      <anchor>a5450fad1a556bcb0788817e5a39fc16e</anchor>
      <arglist>)(void *const item, const SbVec3f &amp;pt)</arglist>
    </member>
    <member kind="variable">
      <type>SbBool(*</type>
      <name>insideboxfunc</name>
      <anchorfile>structSbOctTreeFuncs.html</anchorfile>
      <anchor>a19dbec3e9e9c84894d8cad53143af732</anchor>
      <arglist>)(void *const item, const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="variable">
      <type>SbBool(*</type>
      <name>insidespherefunc</name>
      <anchorfile>structSbOctTreeFuncs.html</anchorfile>
      <anchor>a39db96f6e92c0ca5734f0ae3158a75a7</anchor>
      <arglist>)(void *const item, const SbSphere &amp;sphere)</arglist>
    </member>
    <member kind="variable">
      <type>SbBool(*</type>
      <name>insideplanesfunc</name>
      <anchorfile>structSbOctTreeFuncs.html</anchorfile>
      <anchor>a755d9f3c5dcab3bfbaf8ac46c17c537f</anchor>
      <arglist>)(void *const item, const SbPlane *const planes, const int numplanes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbPlane</name>
    <filename>classSbPlane.html</filename>
    <member kind="function">
      <type></type>
      <name>SbPlane</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a1db5bae636297d29cc50435cd2f85cde</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbPlane</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a9d318bb4c7e48e81dfee4248048b3c0b</anchor>
      <arglist>(const SbVec3f &amp;normal, const float D)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbPlane</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>acb9fc24accebfae55bc56cd1deda2aa7</anchor>
      <arglist>(const SbVec3f &amp;p0, const SbVec3f &amp;p1, const SbVec3f &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbPlane</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>aed3e3d54f30693e031efd3373f35a25c</anchor>
      <arglist>(const SbVec3f &amp;normal, const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a324e8467ece2b14d3cd993d471862a6e</anchor>
      <arglist>(const float d)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a3fdc7674d58978e6084aeaa9904bc45b</anchor>
      <arglist>(const SbLine &amp;l, SbVec3f &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a383bc77412bbf7173e96a8e14e5a3325</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isInHalfSpace</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a06ed999695986b64637e7259ed08e025</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistance</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>ac0edd1b836dc4a1b82b30e2022c96af4</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a406e0a08d2cf669cdb6d46985451e0c3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistanceFromOrigin</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a866c4110060e528e8c97a1bc68c87942</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>ae2473004750eecc7ad898be2683d13f3</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>ad1c37626dab205b1adcfcd17d7383f48</anchor>
      <arglist>(const SbPlane &amp;pl, SbLine &amp;line) const </arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a8830930d3c1f38ec5d41cc9b5416a142</anchor>
      <arglist>(const SbPlane &amp;p1, const SbPlane &amp;p2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbPlane.html</anchorfile>
      <anchor>a45b6be8ea7abb92fa999a67e5724bd4b</anchor>
      <arglist>(const SbPlane &amp;p1, const SbPlane &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbPlaneProjector</name>
    <filename>classSbPlaneProjector.html</filename>
    <base>SbProjector</base>
    <member kind="function">
      <type></type>
      <name>SbPlaneProjector</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a17fb773d8a14e7c0a2099cf062f41f44</anchor>
      <arglist>(const SbBool orient=FALSE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbPlaneProjector</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a3ef8017b79f7ddb0114cf1b4ac2cdcdc</anchor>
      <arglist>(const SbPlane &amp;plane, const SbBool orient=FALSE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>ae3f3b295ffcddc449ed87884696cc22a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>af53fe67381ccac9b29de56c243ab5243</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>tryProject</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a56924db7500b49c135112a478e0544ba</anchor>
      <arglist>(const SbVec2f &amp;point, const float epsilon, SbVec3f &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlane</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a87b6cc3c0b0081f6794283c08bf6a815</anchor>
      <arglist>(const SbPlane &amp;plane)</arglist>
    </member>
    <member kind="function">
      <type>const SbPlane &amp;</type>
      <name>getPlane</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>ae1631081487749e1d59d50f5d7421577</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientToEye</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a338c5c92203c71af31467f53e7ca067e</anchor>
      <arglist>(const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOrientToEye</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a67f83822957c8b8bc0d242bb0e16dee0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>getVector</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a71bff22fade60bab1dff0712fc9c1b09</anchor>
      <arglist>(const SbVec2f &amp;viewpos1, const SbVec2f &amp;viewpos2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>getVector</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a4078f3a50298f318235dd7385db0c82c</anchor>
      <arglist>(const SbVec2f &amp;viewpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPosition</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a313f157900e6b80cee0bcb7247966d9a</anchor>
      <arglist>(const SbVec2f &amp;viewpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPosition</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a2b9100b73f90134a2f178ea73b5d2a57</anchor>
      <arglist>(const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupPlane</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a688bfaa1b95d749458ffb137314c5703</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlane</type>
      <name>plane</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a285bd75831659701d3be8e67233d9b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlane</type>
      <name>nonOrientPlane</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a1306a57449db989650f04758486d3951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>orientToEye</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>a217fdecb25351d4f4b83ebbf061e52a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>needSetup</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>aca42872fdc02d9914112c9d9c85c6a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>lastPoint</name>
      <anchorfile>classSbPlaneProjector.html</anchorfile>
      <anchor>afbd27c654699465a946209f344b94d72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbPList</name>
    <filename>classSbPList.html</filename>
  </compound>
  <compound kind="class">
    <name>SbProfilingData</name>
    <filename>classSbProfilingData.html</filename>
    <member kind="function">
      <type></type>
      <name>SbProfilingData</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a488aacafe6ca7807896ac31343667978</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbProfilingData</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a846e722d1391ba5c86952478ee04b923</anchor>
      <arglist>(const SbProfilingData &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbProfilingData</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>abd2766243e5524aded127cd6d45a0074</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActionType</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>ae18037eb4ed6aee87bd05e511ee33f55</anchor>
      <arglist>(SoType actiontype)</arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getActionType</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a8fee8cfcb0ea11f6b39c61f4b23c1a75</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActionStartTime</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>afedc0010bd7aac22f3191acfaafb4d73</anchor>
      <arglist>(SbTime starttime)</arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>getActionStartTime</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>af81ea04bbb250ad845ab09842a3bacab</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActionStopTime</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>acfa2223276b957082882eca43b9464c2</anchor>
      <arglist>(SbTime stoptime)</arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>getActionStopTime</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>aa61ac387d00dca469744778b173a53c0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>getActionDuration</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>aed43aca0a6bc52249ad57288a0f2adad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeTiming</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a27e4e5f78b5e5c1d0e90f040f3835a6a</anchor>
      <arglist>(const SoPath *path, SbTime timing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeTiming</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a05fd61b8921339389b1c5079a82e45fa</anchor>
      <arglist>(int idx, SbTime timing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preOffsetNodeTiming</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>af20d7eb46b40fd5e6085479bf8d55181</anchor>
      <arglist>(int idx, SbTime timing)</arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>getNodeTiming</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>ae286da3c7216ff41f377f028ee1dfe38</anchor>
      <arglist>(const SoPath *path, unsigned int queryflags=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>aecb6beb0a686cc503b2dfabf086aa396</anchor>
      <arglist>(const SoPath *path, SbBool create=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentIndex</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a37985e2a40de405bc1655d32a1439b65</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a40251e3b831483c7a8d591fdc8ef8afe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbProfilingData &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>ac341fadcf59bdd94cd51c2cd4ef7e41d</anchor>
      <arglist>(const SbProfilingData &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SbProfilingData &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>ad569c820296171fe6c2798403c7cb508</anchor>
      <arglist>(const SbProfilingData &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getProfilingDataSize</name>
      <anchorfile>classSbProfilingData.html</anchorfile>
      <anchor>a03f58491dc5544dce791c269cf327287</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbProjector</name>
    <filename>classSbProjector.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbProjector.html</anchorfile>
      <anchor>a10aa00e733aae551b5e813bce2e52d2d</anchor>
      <arglist>(const SbVec2f &amp;point)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbRotation</name>
    <filename>classSbRotation.html</filename>
    <member kind="function">
      <type></type>
      <name>SbRotation</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>af7b34a3688cd8e1bfc3482bddb997b82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbRotation</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>aabdc5a912bc0a6690dd47083a8b3f39f</anchor>
      <arglist>(const SbVec3f &amp;axis, const float radians)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbRotation</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>ae048a5c82d3f01f275f6223c8e180092</anchor>
      <arglist>(const float q[4])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbRotation</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>ab86e1cbd8aec00ea9006be02649fa93f</anchor>
      <arglist>(const float q0, const float q1, const float q2, const float q3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbRotation</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>ac42b51c454f31c7e4427801097cfda1f</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbRotation</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a5a71d62e68580ed900c071b3cf605b56</anchor>
      <arglist>(const SbVec3f &amp;rotateFrom, const SbVec3f &amp;rotateTo)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a56ceb5d89693bb481816cef1aa6888cb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a3a23df52b8445707f0b2f7af62b46193</anchor>
      <arglist>(float &amp;q0, float &amp;q1, float &amp;q2, float &amp;q3) const </arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a341d6be6f5b7207edb5eb4f118f4e352</anchor>
      <arglist>(const float q0, const float q1, const float q2, const float q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a2ffaac1ce15b20631d9b7a207e70354f</anchor>
      <arglist>(SbVec3f &amp;axis, float &amp;radians) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a2e724099b40235538bf2d950aefc4c27</anchor>
      <arglist>(SbMatrix &amp;matrix) const </arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>invert</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a60bf4c2709c944b64bef644375250d88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbRotation</type>
      <name>inverse</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>ab4ccde92fa0e3a49ba7253572495d0ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a3f7dfa32c2ab80fc0e6808ca1940512d</anchor>
      <arglist>(const float q[4])</arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a39efcb6f3651bea7b194f2e56cfb910f</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a0346dd919d996967cb7d1b907214f0ab</anchor>
      <arglist>(const SbVec3f &amp;axis, const float radians)</arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a0e4f23004de7569337960d7e5011e63d</anchor>
      <arglist>(const SbVec3f &amp;rotateFrom, const SbVec3f &amp;rotateTo)</arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a466a7aae8799516373a99a0e3da290aa</anchor>
      <arglist>(const SbRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>SbRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a36daec8ca173721537b21146d7bb9a64</anchor>
      <arglist>(const float s)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator[]</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>afa8ec3a17f2107882ef71a135d1e94b5</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>ad981c09219f1db9a60e3a9d1aa157f16</anchor>
      <arglist>(const SbRotation &amp;r, float tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multVec</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a7bf8bae2e9ae953e50769fad99689be5</anchor>
      <arglist>(const SbVec3f &amp;src, SbVec3f &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleAngle</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>aecf5befb7013da43f9c459ee86a81e80</anchor>
      <arglist>(const float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>toString</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a46624fd51f3907355e1497aa62aaf448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fromString</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>abe4d493f5ad74a6c30135f62c0e36df6</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>aac469a8233c886ca5236f984e704429e</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbRotation</type>
      <name>slerp</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a04650493010ed066c2d055596f38c6f4</anchor>
      <arglist>(const SbRotation &amp;rot0, const SbRotation &amp;rot1, float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbRotation</type>
      <name>identity</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a185e88e106dbba29d4bb8339ff28c4ac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a083b52d28a5b2c848ec051b051383816</anchor>
      <arglist>(const SbRotation &amp;q1, const SbRotation &amp;q2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a5fb0f927ad287d0913505d7f7ac04429</anchor>
      <arglist>(const SbRotation &amp;q1, const SbRotation &amp;q2)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbRotation</type>
      <name>operator*</name>
      <anchorfile>classSbRotation.html</anchorfile>
      <anchor>a6bded4a443b38c90962ada7ce35996a7</anchor>
      <arglist>(const SbRotation &amp;q1, const SbRotation &amp;q2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbSphere</name>
    <filename>classSbSphere.html</filename>
    <member kind="function">
      <type></type>
      <name>SbSphere</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a73387572407620a899681cb05af33cd0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbSphere</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a10410586031d8b3c9b5bc55876f3b1c9</anchor>
      <arglist>(const SbVec3f &amp;center, const float radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a906782620b3e8bdb004ba314e9f90cbe</anchor>
      <arglist>(const SbVec3f &amp;center, const float radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a4b7d11065b77b3d1ea4308880a6b0574</anchor>
      <arglist>(const SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a27485e86fea83dff472e6042eab71ed3</anchor>
      <arglist>(const float radius)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getCenter</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a51899824c3284da57977780d4197ad6a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>ab0baed9c052cd61025e0ce6f592494b4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circumscribe</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a57d815c498ead420cfe4b480fd4a6aa2</anchor>
      <arglist>(const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a8d5150f1558437d3df085a99148b2da6</anchor>
      <arglist>(const SbLine &amp;l, SbVec3f &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a19ce686c2aa73243e226c4f6248cebc2</anchor>
      <arglist>(const SbLine &amp;l, SbVec3f &amp;enter, SbVec3f &amp;exit) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>pointInside</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>aabe23950f304691ffe483d5204c110de</anchor>
      <arglist>(const SbVec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbSphere.html</anchorfile>
      <anchor>a90637cee3bd8473e4b99ed8ab0fcb009</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbSpherePlaneProjector</name>
    <filename>classSbSpherePlaneProjector.html</filename>
    <base>SbSphereSectionProjector</base>
    <member kind="function">
      <type></type>
      <name>SbSpherePlaneProjector</name>
      <anchorfile>classSbSpherePlaneProjector.html</anchorfile>
      <anchor>a3042ff531eb61c7cbc3b9d4c5a6f3b19</anchor>
      <arglist>(const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbSpherePlaneProjector</name>
      <anchorfile>classSbSpherePlaneProjector.html</anchorfile>
      <anchor>a85c71f491a82ea4e698bda6611365bf2</anchor>
      <arglist>(const SbSphere &amp;sph, const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbSpherePlaneProjector.html</anchorfile>
      <anchor>a979ad6f81c3272af5fb4e011b6144e0b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbSpherePlaneProjector.html</anchorfile>
      <anchor>affe7047c1f8ef6c2bcf2032d76bd73c4</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbSpherePlaneProjector.html</anchorfile>
      <anchor>ab0010e8222fbf7f4a86b8a18260e45e1</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbSphereSectionProjector</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a9090a203bc67b74149a825fc5df14c42</anchor>
      <arglist>(const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbSphereSectionProjector</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a048b76c7d97b33c9576c2e870ea9a502</anchor>
      <arglist>(const SbSphere &amp;sph, const float edgetol=0.9f, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>ab54f9887c3ba8b10ca0154d3049688b3</anchor>
      <arglist>(const float edgetol)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTolerance</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a9948856bbb657386faa06e89f63563d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialFactor</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>aa089532afabe3ba67335ce603a7c879b</anchor>
      <arglist>(const float rad=0.0f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadialFactor</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>ab761d04897f2ddb3a848ae9884f9a28b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isWithinTolerance</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>ac5f2c7751c2eda4828cf891a39509b8f</anchor>
      <arglist>(const SbVec3f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>projectAndGetRotation</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>ac38482c976e0d9054e794a034abcf79e</anchor>
      <arglist>(const SbVec2f &amp;point, SbRotation &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSphere</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>ace6896e5966432ac44d86c04d1e4eb61</anchor>
      <arglist>(const SbSphere &amp;sph)</arglist>
    </member>
    <member kind="function">
      <type>const SbSphere &amp;</type>
      <name>getSphere</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a04cedf93a2991d4c01cf62d682bfb410</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientToEye</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>ac4d069b1a39639e6700a63d659c7236f</anchor>
      <arglist>(const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOrientToEye</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a21c3eb49a33a231fd5029313839716de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFront</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a071532046e8c7319df2a29befe5903e2</anchor>
      <arglist>(const SbBool infront)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isFront</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a4a3d6320e55c3ce61d70279418336bfc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPointInFront</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>acba3d30ad794463d201f395cefc05125</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorkingSpace</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>afe1519305c87d7726dc40b9daaa59764</anchor>
      <arglist>(const SbMatrix &amp;space)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbSpherePlaneProjector.html</anchorfile>
      <anchor>a8fb39b306183be8e6353e43df6bfc349</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbBool tol1, const SbVec3f &amp;point2, const SbBool tol2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupTolerance</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a482a9ff7c5301f9ae5bca606f3f5d345</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SbSphereProjector</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a868f57ebec32957883b1321b0adf955b</anchor>
      <arglist>(const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SbSphereProjector</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a378cd6b9ec089b03a78251e433d57758</anchor>
      <arglist>(const SbSphere &amp;s, const SbBool orienttoeye)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>intersectSphereFront</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>ab08294fd4cac38679167e552e4940ab0</anchor>
      <arglist>(const SbLine &amp;l, SbVec3f &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>tolerance</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a7428f52b5d33e7c256361c1bfccf9b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>tolDist</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a8680e19ea7232b1f972fbc5c17478bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>radialFactor</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>ab221449da9bff16c2ffc0a7cd3e4f26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>planePoint</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a9d54fc42f4321c46a2cc8ff4b074e0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>planeDir</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>af31156dbf1e400fb807ab9754bcd13c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>planeDist</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>ad6d329c6cdc0645d91226668351118e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlane</type>
      <name>tolPlane</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a1607bd15508d9d1f93a3371f8f31b460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>intersectFront</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>af53c03608a41fad58f82856113d20f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbSphere</type>
      <name>sphere</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>ab0ba051f5995c4924989789b99ca818f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>orientToEye</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a0883b57c43eb641b44359f5caeb977fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>needSetup</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a136681b3e872e38473160fe0fde0352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>lastPoint</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a23eb381f2626c24f4c2fa378e89412b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbSphereProjector</name>
    <filename>classSbSphereProjector.html</filename>
    <base>SbProjector</base>
    <member kind="function" virtualness="pure">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbSphereProjector.html</anchorfile>
      <anchor>a9c4d57571349f6233e78e351b949a7b9</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbSphereSectionProjector</name>
    <filename>classSbSphereSectionProjector.html</filename>
    <base>SbSphereProjector</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>a029c0ba8ce899c0767cca58f8bd1daae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>ae9bd7709409cf32532354b67bb0cb8f9</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbSphereSectionProjector.html</anchorfile>
      <anchor>acb939b44f139674396cfb9304a2fa686</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbSphereSheetProjector</name>
    <filename>classSbSphereSheetProjector.html</filename>
    <base>SbSphereProjector</base>
    <member kind="function">
      <type></type>
      <name>SbSphereSheetProjector</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a8356658bb33977f1787120b0c9d40af3</anchor>
      <arglist>(const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbSphereSheetProjector</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a26219758d2f787d0386fcec538289895</anchor>
      <arglist>(const SbSphere &amp;sph, const SbBool orienttoeye=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbProjector *</type>
      <name>copy</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a78b0fb44dc547a05cd624f4ccb1bd00e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec3f</type>
      <name>project</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a0bcb1b01105408906699823d85f8990c</anchor>
      <arglist>(const SbVec2f &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>ae98f637b246b3defc53a8db8c228d5b0</anchor>
      <arglist>(const SbVec3f &amp;point1, const SbVec3f &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupPlane</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a9e7eea331df3c3fd6197b9d308c444c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>workingProjPoint</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a1e15498d6b5eec4688af05be0e980815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>planePoint</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a82db4e1ef68eecc7d51b3d88f1178b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>planeDir</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>ab262ce8024b732bb3533c5b78b2ec862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>planeDist</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>a6e28d2fee1faf1f50d41f3185826c5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlane</type>
      <name>tolPlane</name>
      <anchorfile>classSbSphereSheetProjector.html</anchorfile>
      <anchor>ac4f5bcfe4f3032b8cba40d94572a1e82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbString</name>
    <filename>classSbString.html</filename>
    <member kind="function">
      <type></type>
      <name>SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ad8bd7fd681ed31cae3c2165b9575e65d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a3100d87da8215cf09b4386cb500ad464</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a7dee6217016462d0a27715917fa2644b</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a5107e4772f6e2088d256d34da1e30730</anchor>
      <arglist>(const char *s, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a4aa2a3f963edba4e22746393f82d5855</anchor>
      <arglist>(const SbString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a39c40a499231bc125b14b802c0b85f70</anchor>
      <arglist>(const int digits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a33b47eab7803f9d9cec6db6862ab2120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>hash</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a8fe69cd2307f145cd8579e78623f2770</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a40ff62a8a6b3c2279e41a40c4d90d987</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeEmpty</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ade6800edca5eb14538b266a61fede1e4</anchor>
      <arglist>(SbBool freeold=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a36c93f1212c84f3c509bab21befcaf9e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>getSubString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>aa0a2e1d9447be4508e70f0438e2047d7</anchor>
      <arglist>(int startidx, int endidx=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSubString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a7d14b085ab8efac7bf5ee5a3b4a88e4f</anchor>
      <arglist>(int startidx, int endidx=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIntString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ac371e6d216d1f29b15b0fe6bd7023e99</anchor>
      <arglist>(const int value)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a504691fd9edb039ce9a81b80fd5c6e25</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>aff8574febe670eb6ed208c38ef9a530f</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>operator=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a48e6dd186644cb4248fa467873bda3bb</anchor>
      <arglist>(const SbString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a7b4907e540abc08f9e966105ed9f20a9</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a876f50865efc300930a7b242a1417a4b</anchor>
      <arglist>(const SbString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a45c3f7f9f4c2b8798f2cb44ccf16dc17</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a12ace3d31334950a73c0034afa5727e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareSubString</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ac2abacbc36a4e80da68e3efb2d378762</anchor>
      <arglist>(const char *text, int offset=0) const </arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>sprintf</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a5b8b394310de686b49033d6e5ef16280</anchor>
      <arglist>(const char *formatstr,...)</arglist>
    </member>
    <member kind="function">
      <type>SbString &amp;</type>
      <name>vsprintf</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>af55ef20fed88bf7dbb8cb1eaf2457af3</anchor>
      <arglist>(const char *formatstr, va_list args)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a1187400f9d3f0c458475c0882fa25a68</anchor>
      <arglist>(const SbString &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>findAll</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a503482650e525fc7c75887ee2c80602c</anchor>
      <arglist>(const SbString &amp;s, SbIntList &amp;found) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>lower</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>afddda19e7e3c6485778322f7dd7f7c84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>upper</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a27374fbca91b0aae370a06a30332c10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ae1c15177a1a67ff07c0899b29f60f0b6</anchor>
      <arglist>(std::FILE *fp) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>hash</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>aeb40745b411a8d8efb71f1c738e3df8d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>acb6753b1515604ca971a1a87aff2f428</anchor>
      <arglist>(const SbString &amp;sbstr, const char *s)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ac9b65d4d28f6c30992fea63ddd7cf2b9</anchor>
      <arglist>(const char *s, const SbString &amp;sbstr)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a678e767b7619480700a63bc39c567734</anchor>
      <arglist>(const SbString &amp;str1, const SbString &amp;str2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>aea9790c709cb18bdb1d696b322dbf1cf</anchor>
      <arglist>(const SbString &amp;sbstr, const char *s)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a65681d9c628370051ef61439f119bf17</anchor>
      <arglist>(const char *s, const SbString &amp;sbstr)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>ac7482060b03b437119ecae06d3986178</anchor>
      <arglist>(const SbString &amp;str1, const SbString &amp;str2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator&lt;</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a6ed1cb37360a4ca12c90f1c7cb27db6b</anchor>
      <arglist>(const SbString &amp;sbstr, const char *s)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator&lt;</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a9072e7b323d65c64110af3fff813b4d1</anchor>
      <arglist>(const char *s, const SbString &amp;sbstr)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator&lt;</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a94ed21c674ca5fc0100e0babf1a680cb</anchor>
      <arglist>(const SbString &amp;str1, const SbString &amp;str2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator&gt;</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a4ec0654b3fe5c53bfc65b10746731d7f</anchor>
      <arglist>(const SbString &amp;sbstr, const char *s)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator&gt;</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a46bc605c66301db6ecb77e923fec9a91</anchor>
      <arglist>(const char *s, const SbString &amp;sbstr)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator&gt;</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>af52285d09146696f46c923e786a6ad02</anchor>
      <arglist>(const SbString &amp;str1, const SbString &amp;str2)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SbString</type>
      <name>operator+</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a9eaa950edece45dbdf394a3b39744c5d</anchor>
      <arglist>(const SbString &amp;str1, const SbString &amp;str2)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SbString</type>
      <name>operator+</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a8c85f017ad0d4f843049a0c0f5026fa8</anchor>
      <arglist>(const SbString &amp;sbstr, const char *s)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SbString</type>
      <name>operator+</name>
      <anchorfile>classSbString.html</anchorfile>
      <anchor>a54b38460b412035516ce1dca74affbec</anchor>
      <arglist>(const char *s, const SbString &amp;sbstr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbStringList</name>
    <filename>classSbStringList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SbStringList</name>
      <anchorfile>classSbStringList.html</anchorfile>
      <anchor>a5f9e3315b61678d13d6f2360cc0e8c98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbStringList</name>
      <anchorfile>classSbStringList.html</anchorfile>
      <anchor>ae66cdc3f06175aff254fd055db619b82</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSbStringList.html</anchorfile>
      <anchor>a417f2e12fef8f50b0b9c52b9cddcb304</anchor>
      <arglist>(SbString *string) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSbStringList.html</anchorfile>
      <anchor>ad3242b4d563ab18cf2ec232865490e35</anchor>
      <arglist>(SbString *string, int insertbefore)</arglist>
    </member>
    <member kind="function">
      <type>SbString *&amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbStringList.html</anchorfile>
      <anchor>a08fcc3f1c87d5dfc984efb7a0ff9da06</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>const SbString **</type>
      <name>getArrayPtr</name>
      <anchorfile>classSbStringList.html</anchorfile>
      <anchor>a81212f126cbb620500693d8109e3c5a6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbTesselator</name>
    <filename>classSbTesselator.html</filename>
    <member kind="function">
      <type></type>
      <name>SbTesselator</name>
      <anchorfile>classSbTesselator.html</anchorfile>
      <anchor>af364565888f0def8e1665f223adb8d61</anchor>
      <arglist>(SbTesselatorCB *func=NULL, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbTesselator</name>
      <anchorfile>classSbTesselator.html</anchorfile>
      <anchor>a635c1016d1bcde86146bb86b04ccb17e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPolygon</name>
      <anchorfile>classSbTesselator.html</anchorfile>
      <anchor>a8092c3ca8ca4539e18fff6ff7552c828</anchor>
      <arglist>(SbBool keepVertices=FALSE, const SbVec3f &amp;normal=SbVec3f(0.0f, 0.0f, 0.0f))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classSbTesselator.html</anchorfile>
      <anchor>aefa3b7a22e769602fae46054725d7a0b</anchor>
      <arglist>(const SbVec3f &amp;v, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPolygon</name>
      <anchorfile>classSbTesselator.html</anchorfile>
      <anchor>a904c2f4eb454771851a600fce8957385</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>classSbTesselator.html</anchorfile>
      <anchor>ab6937880e7f06cecadd8efd95a7c469f</anchor>
      <arglist>(SbTesselatorCB *func, void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbTime</name>
    <filename>classSbTime.html</filename>
    <member kind="function">
      <type></type>
      <name>SbTime</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a9f7c034551e616cadd327ddef6310484</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbTime</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a3579ba1742a3827a42f5a6d34b3d8de5</anchor>
      <arglist>(const double sec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbTime</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a43c176cc2f6d54eb4d0bdb57d9cea8c7</anchor>
      <arglist>(const int32_t sec, const long usec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbTime</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a7b1d561c19cc78f7e061fc50c9b0021f</anchor>
      <arglist>(const struct timeval *const tv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToTimeOfDay</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>aeae606e00a26076aeaccca2e0b077aac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a8f695933fe3cc2722eb8bdd75aa99c69</anchor>
      <arglist>(const double sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a2fcad96f5a9be55efbe29574a1de172b</anchor>
      <arglist>(const int32_t sec, const long usec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ab38f422af390a3eb5f9141be0ca41a72</anchor>
      <arglist>(const struct timeval *const tv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMsecValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a675520e49045fd8a1cf419a3f761c26e</anchor>
      <arglist>(const unsigned long msec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a1e3b3352c6e1e3330bc973722b31b0a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a25850c444ca5546ad930762d84fbd785</anchor>
      <arglist>(time_t &amp;sec, long &amp;usec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a3656a0fdcb99666e28b2d529a154b136</anchor>
      <arglist>(struct timeval *tv) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getMsecValue</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a53242079bebcf638575a503580fea12f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>format</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a805ee471c1515b79e25a492fabb7ff52</anchor>
      <arglist>(const char *const fmt=&quot;%S.%i&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>formatDate</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>aee559ca25b0c21ecf46e66a53a1a4ba8</anchor>
      <arglist>(const char *const fmt=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>parsedate</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ac5f6ad3aabca3582cc14dfa1ac9c4092</anchor>
      <arglist>(const char *const date)</arglist>
    </member>
    <member kind="function">
      <type>SbTime &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a644fc261ef8d20ad27e54bbda017c8ec</anchor>
      <arglist>(const SbTime &amp;tm)</arglist>
    </member>
    <member kind="function">
      <type>SbTime &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a3b3141c403d383780d9ac61d2ebe0b1e</anchor>
      <arglist>(const SbTime &amp;tm)</arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>operator-</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ada704b7d227b1a3455b92d04f37dbd4d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbTime &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a6b1b1bd6b756ea34fa61d968a0f45b48</anchor>
      <arglist>(const double s)</arglist>
    </member>
    <member kind="function">
      <type>SbTime &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a50011d50a5a86f86fe27e48ca2d8ddd3</anchor>
      <arglist>(const double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator/</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a0b9af8e86b6f73f3c0957c0178b4c494</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>operator%</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ac7567255fdd8ffb5163db976f4d4fd10</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ae016c412bb33f25e8545fb8a1f975100</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>acb03f6e006ed42ca3ab0aef34a7c76d0</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&lt;</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>acd5d13a6e3b1e05dd6046ceb7bf351bc</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&gt;</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a871a6382f5c855cbd87d2b923a14a104</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>aa8523e0a101e6e8d75fc6d133b897532</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ad2660348eaf285d16a71f35a8a9500c2</anchor>
      <arglist>(const SbTime &amp;tm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a216dcb16368240c1ede20813f4aab9a3</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbTime</type>
      <name>getTimeOfDay</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a6a24da27d9ba83fc848b860f164d00fc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbTime</type>
      <name>zero</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>aa43feadef19a055eb17bf244605f9972</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbTime</type>
      <name>max</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a43279740f6f03fc3333a2165f4e75322</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbTime</type>
      <name>maxTime</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a8c4c29b97fef8d0f9a373fdf10e303e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sleep</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a1c47c0ca8049cd2129c39ba393d52595</anchor>
      <arglist>(int msec)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbTime</type>
      <name>operator+</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a83f13bc9e9d38624d8b33200dbbb55d9</anchor>
      <arglist>(const SbTime &amp;t0, const SbTime &amp;t1)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbTime</type>
      <name>operator-</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>afbc8605f18ff122b2fd97f6e913b8959</anchor>
      <arglist>(const SbTime &amp;t0, const SbTime &amp;t1)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbTime</type>
      <name>operator*</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>aca6723ed67e401c11550c29b548b2128</anchor>
      <arglist>(const double s, const SbTime &amp;tm)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbTime</type>
      <name>operator*</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>a424088174b4e476e6feaf414fd9fd1c9</anchor>
      <arglist>(const SbTime &amp;tm, const double s)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbTime</type>
      <name>operator/</name>
      <anchorfile>classSbTime.html</anchorfile>
      <anchor>ac30cf5c325aca8e6f924ac03e28b571c</anchor>
      <arglist>(const SbTime &amp;tm, const double s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbTri3f</name>
    <filename>classSbTri3f.html</filename>
    <member kind="function">
      <type>float</type>
      <name>getDistance</name>
      <anchorfile>classSbTri3f.html</anchorfile>
      <anchor>a572f57f80105d18f96c5ecdd8e56d622</anchor>
      <arglist>(const SbTri3f &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistance</name>
      <anchorfile>classSbTri3f.html</anchorfile>
      <anchor>a1bb7b2e08618b8876eefdafe64d90730</anchor>
      <arglist>(const SbVec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistance</name>
      <anchorfile>classSbTri3f.html</anchorfile>
      <anchor>ac1c7af7583616f4e765db99ef626356b</anchor>
      <arglist>(const SbVec3f &amp;p1, const SbVec3f &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>const SbBox3f</type>
      <name>getBoundingBox</name>
      <anchorfile>classSbTri3f.html</anchorfile>
      <anchor>ab32817843cf5175dd0ba6fbc53e8d1c1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDistance</name>
      <anchorfile>classSbTri3f.html</anchorfile>
      <anchor>a937567ef2f6dbc2eae693d8ab3e62e7a</anchor>
      <arglist>(const SbVec3f &amp;p, const SbVec3f &amp;p1, const SbVec3f &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sqrDistance</name>
      <anchorfile>classSbTri3f.html</anchorfile>
      <anchor>ab3b3f482d2834535d889576dfca7d0cc</anchor>
      <arglist>(const SbVec3f &amp;a1, const SbVec3f &amp;a2, const SbVec3f &amp;b1, const SbVec3f &amp;b2, float *linP0, float *linP1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbTypeInfo</name>
    <filename>structSbTypeInfo.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SbVec2b</name>
    <filename>classSbVec2b.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec2d</name>
    <filename>classSbVec2d.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ac63dd0791c0095c9144f9bb9a6607eea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a8db1b8fa814457c661fd9d3883fe339b</anchor>
      <arglist>(const double v[2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a49f6c2e309736dc6150b5c5da97d7712</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ad5b47009527e6d47db0bbde7d901b7d3</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a38d93efca3bd30cfc4dc4a39c772920a</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>aa27005c1f3b6621801122a8110a983cb</anchor>
      <arglist>(const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2d</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a55d2f7e0c108ff0a57d76661627c84df</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a497a600ee7dd4324a62f344b34927b57</anchor>
      <arglist>(const double v[2])</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>aa714b79f7d7157f3f782f223fdb17e23</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ac6bf0143ec4cf44f744d2629c1ff88a5</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a8ba5a744c6e52bdc183584f796fbdd38</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>aef24e59ed4eb153b229737938b362f2f</anchor>
      <arglist>(const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ad303b770569dff5d0e017cdc9fd707f8</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a8196fd627e54beab9ad70eccb59a532e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ade6f3f6f9ef8b69436556d94aa669419</anchor>
      <arglist>(double &amp;x, double &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a306d9694244216f16a1ee8157547fdb9</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ab578b7a8f6277d21d6f99fda12d3909c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ac72a9b3a91a8eb5df3fbeb9fcba5ebca</anchor>
      <arglist>(const SbVec2d &amp;v, double tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>aa11e9576aead3dc3fec725e8e3bae493</anchor>
      <arglist>(const SbVec2d &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>af31b639d6b7418ac2e20bd993102da32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normalize</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a50bd14d8fd33c214eed8dc712b62441a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a0e540f28f7a2332dbd186e38ca066c82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a260c4188f947b9f403d6218db8c31ae1</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a6d0c4645c6758f2b561730371118d2e6</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a5eb83d7686ad695253070e6526f1aba5</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>aab3e960580edf05188ae53192d300bc6</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>operator-</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ae4139bac70ce43eae04d01ea201cf26a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a3da99134f1188978f82e8b9ea489688f</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>operator*</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a7e3711363bfc17138c74285ef7489c98</anchor>
      <arglist>(const SbVec2d &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>operator*</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ada5a6cdd907178159235471c7a87a983</anchor>
      <arglist>(double d, const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>operator/</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a1bf50012c612e4cba25faf4c43b35fdd</anchor>
      <arglist>(const SbVec2d &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>operator+</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>aca58910afc203e37d3130116b194c4f6</anchor>
      <arglist>(const SbVec2d &amp;v1, const SbVec2d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2d</type>
      <name>operator-</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a5fca9f72a94995260ff026f8f96031fa</anchor>
      <arglist>(const SbVec2d &amp;v1, const SbVec2d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>ac385222f5fba67dd4681703b68203fb5</anchor>
      <arglist>(const SbVec2d &amp;v1, const SbVec2d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec2d.html</anchorfile>
      <anchor>a024224408ed78d7a0978b7e544021780</anchor>
      <arglist>(const SbVec2d &amp;v1, const SbVec2d &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec2f</name>
    <filename>classSbVec2f.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a1346ce09a8a9385f9c006cc5d63fcbf6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>af3a6d469ba3a49ddc779aba017d3bb6b</anchor>
      <arglist>(const float v[2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>ab304ea742290b959eccc883bdae04e21</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a86d660046ca1cd6d23db075dc558a02c</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>aa2ecac9cb0488503e03f7155df51d3ed</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>acac859226bb926bed1e2f05698897f2a</anchor>
      <arglist>(const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2f</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a0aad8c6cd9c4811851bb86fd771ad039</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>aa1e22cf35a2b1d95069161eb89b09421</anchor>
      <arglist>(const float v[2])</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a186ed3c323758b75395a9b3f4e39ce25</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a1c47c2a19edb3d862f3315652cdd76b4</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>af75f570bfdd582e34e840ecd96a8a1cf</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a6b8d3b85044489347f3fa474f4fb8d4d</anchor>
      <arglist>(const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a8ee69f0bab7c511656ed566aa87d78d7</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>aa0dc4fb6e6f4c8e5335b78b7e778bb0f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a3797e1005a46fd2e7ae96b1f1205f346</anchor>
      <arglist>(float &amp;x, float &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a100bbbce7a35d7a2e5e1490896fdb729</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>abcace420148bd42d78dfbeff58ee9b51</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a2be3a84c07f75c4598225fa9b2efbfdb</anchor>
      <arglist>(const SbVec2f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a1fd0f02a12897e4312ad5cd1d265d5e3</anchor>
      <arglist>(const SbVec2f &amp;v, float tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>length</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>af57d1ca34479d2650173fea20272c202</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sqrLength</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a1cf0f7c5388427c78a331fc38dac684e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a3d337eaf4ba60a986ca315dbdc0a8316</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>normalize</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a5391fa1b1910a636d8344e6981711f54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a41946e80ae85d1b2e6c2a27d1ef3b0a2</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a485f2867b40967c4d75f2c2369bdc982</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>acfa72ec47271a175e83aa4ea3de95cc0</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>ae142bb7c371783d7ad7f69c3d4193560</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>operator-</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a91922cc9cd9fb7f713ff290792fbd286</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>toString</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a5774ff5c9f0a33121cdd310e9e7e965a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fromString</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a5b8c2115eded5cbd4009a451e81b6466</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a68f630c43b88431884124295d7158575</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>operator*</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>af85a55a861e50ed5ad7d65c4e832d2b5</anchor>
      <arglist>(const SbVec2f &amp;v, float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>operator*</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a140633ec6be9373641446923dcad1c23</anchor>
      <arglist>(float d, const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>operator/</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>ae241274f86f09257c43312082f79c11e</anchor>
      <arglist>(const SbVec2f &amp;v, float d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>operator+</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a833644ab1c9540c85936d53902343dbc</anchor>
      <arglist>(const SbVec2f &amp;v1, const SbVec2f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>operator-</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>ad7705425b46b63001e60b15ac5a7e609</anchor>
      <arglist>(const SbVec2f &amp;v1, const SbVec2f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>afc60d5b71be030e65e2b48b777fe2f04</anchor>
      <arglist>(const SbVec2f &amp;v1, const SbVec2f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec2f.html</anchorfile>
      <anchor>a486b82cdb61e5ebe1c55040425257f63</anchor>
      <arglist>(const SbVec2f &amp;v1, const SbVec2f &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec2i32</name>
    <filename>classSbVec2i32.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a61e4389eec4df5c60d8a2541a53dad61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ad59bbb7800e85102cd79ab426a2cca7e</anchor>
      <arglist>(const int32_t v[2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a63207a149dd902f2fd4efa6ed344ff0d</anchor>
      <arglist>(int32_t x, int32_t y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aa6ae02dc4997eb8b8733f8058973b86c</anchor>
      <arglist>(const SbVec2ui32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>afcd070a1d22281da4ac07c475fe39cf7</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a5c0bce7d90fca72b17032fd674c58ed6</anchor>
      <arglist>(const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a60131c056aa7c115e2513257412ba168</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2i32</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aa43fbef9688c1eb7a5e60c5e09c617ce</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a8b97efa83369d7bf3d8deb0bcff7fe50</anchor>
      <arglist>(const int32_t v[2])</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ad49d532be08ccf4d9ffefdb198b73055</anchor>
      <arglist>(int32_t x, int32_t y)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a52e224026a651fdd3ed21aa078ff30c0</anchor>
      <arglist>(const SbVec2ui32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aa1791190f26a7336931c0a7d660be05e</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a37fe9378a81cd3ebc6ae4a23fba34b0f</anchor>
      <arglist>(const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ac5cb93e79d042c64c45094f7b56d643c</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aff9883884b8de7439fba08700679678f</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aaaa3b2880e0833dc63c180cf97db6817</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aa22ee9b640806424e831791539007550</anchor>
      <arglist>(int32_t &amp;x, int32_t &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a9cb52ebe0108572eb79141b2cb2bd347</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const int32_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a66f3b50a93ca28e0ebc8374724e0ffbc</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>dot</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ad1f6e8ecd1ddd78d90e69406e3319436</anchor>
      <arglist>(const SbVec2i32 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a8375dc369919c84c71c8dc890353a93a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a69f3a02de524b32ae9093895fefe4137</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ae72687d6fd9bf9ab916937e3df71e438</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a56e63433419e83d2032e186be949faba</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a0371eb39aaf87ea431621c900914a8e2</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>acd086b0892a1e4db6a455d7de07de539</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a1886ed6e73f786043aee2a2c5661d321</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator-</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a0139e533c26f3c1e176726065505efd8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>af1d14c194142f91e7f6ef98154ca57d8</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator*</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>add94a0d66b3532a8caab83bbb5f9b3b1</anchor>
      <arglist>(const SbVec2i32 &amp;v, int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator*</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a1711661c6358b10a93ecbcde9382d960</anchor>
      <arglist>(const SbVec2i32 &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator*</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a704de48696f1392dd9e0f688db7ea4fb</anchor>
      <arglist>(int d, const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator*</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>aa0b5803367782d4a783504fc729deff9</anchor>
      <arglist>(double d, const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator/</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ac56ca284a16ec1723a03ce26c4c5f682</anchor>
      <arglist>(const SbVec2i32 &amp;v, int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator/</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a17b0be4cc751a41ff8423359ed754c03</anchor>
      <arglist>(const SbVec2i32 &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator+</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ac0679ae7383def6697ac3e649e8fbfe5</anchor>
      <arglist>(const SbVec2i32 &amp;v1, const SbVec2i32 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2i32</type>
      <name>operator-</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a31768d5c34d39849be6586176dae6f85</anchor>
      <arglist>(const SbVec2i32 &amp;v1, const SbVec2i32 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>ab90407c32069ca2fed431d5db3633771</anchor>
      <arglist>(const SbVec2i32 &amp;v1, const SbVec2i32 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec2i32.html</anchorfile>
      <anchor>a9eec58ef56baf761ade75e659ab6dabe</anchor>
      <arglist>(const SbVec2i32 &amp;v1, const SbVec2i32 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec2s</name>
    <filename>classSbVec2s.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a949d11f0e5baf23139d37077d86c8668</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a81a132782d39edfd8aa9637551d9cab1</anchor>
      <arglist>(const short v[2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a164465f376cdb9154aaa07fda5419efa</anchor>
      <arglist>(short x, short y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>af847eda487ca16d780c0150144e1154d</anchor>
      <arglist>(const SbVec2us &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a1e4b9ff96307591762b7c5b3e7e2c214</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a5287c7f1a1a8c5ca4bad9ada3f79da3a</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a8365abe07d53394660dba57b699d36a9</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec2s</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>aa4e1abdb20854f571736e316de7cc683</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a749320fbf358f1101ba7c25a1ba1a3b8</anchor>
      <arglist>(const short v[2])</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a7cf9b71b29cb2e8e959d231f5832f85e</anchor>
      <arglist>(short x, short y)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a94dbeefccf4638ac09a5d739d1c96c0b</anchor>
      <arglist>(const SbVec2us &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ac36f7b2d4621000432abf7b1a7c7419c</anchor>
      <arglist>(const SbVec2b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a9079068a737e916a72b475e970922156</anchor>
      <arglist>(const SbVec2i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a57e93cf652fab9f7d970386dccd41d50</anchor>
      <arglist>(const SbVec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a8527511481b416340acede23b547bb4a</anchor>
      <arglist>(const SbVec2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const short *</type>
      <name>getValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>af0b03b94fb74fe27e19eedaac45f3c4b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ace4d7b62486aec23623e3e1a9d2e61d2</anchor>
      <arglist>(short &amp;x, short &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>short &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ae587f3baf9a51d5a27f5749ef1250ec1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const short &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>aafd87817fc4726dfd7bb82377c4b104e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>dot</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a4107393b7353b5ea585caba6e4c3cb3c</anchor>
      <arglist>(SbVec2s v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ab1a9e1cdd67a4ca519e91c60ab4cb477</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>adb491459cb1087ec53f77ec81d5c19c7</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a620828c4fb519e299eecfc0c5a2c2153</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ac5864539fcf034cd700a9ed0a3c2951f</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ad8f0d4947c757fa8a7fb080b77ed2216</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a66bc5e12845fdb529c78cdf2369d832b</anchor>
      <arglist>(SbVec2s v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a68d74241813333fdf0a7c8297120cac5</anchor>
      <arglist>(SbVec2s v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator-</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a7646c3cf72bae0391398a796d443c9ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>toString</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>af8575684136c09b11a575e6b0d64aa61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fromString</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a748fddd3cd777af3474334b4e349897e</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a23d77487485f32caa794527405424ae4</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator*</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a5221675e922038fc41bba38c50c67d50</anchor>
      <arglist>(const SbVec2s &amp;v, int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator*</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a25e4787e9b198ad65308ab2ee49bff3f</anchor>
      <arglist>(const SbVec2s &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator*</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>ae5cd1a0742d4f664500b3cf6882e2265</anchor>
      <arglist>(int d, const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator*</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a3248bf507756da3eecf357391618f102</anchor>
      <arglist>(double d, const SbVec2s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator/</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a0da97de4ad79429159ef2a7e9d9b9c75</anchor>
      <arglist>(const SbVec2s &amp;v, int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator/</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a4997afc77f28a86590c3b56851ac7653</anchor>
      <arglist>(const SbVec2s &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator+</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>aa0e3205ce44f1b1834fcd95f90b370e7</anchor>
      <arglist>(const SbVec2s &amp;v1, const SbVec2s &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec2s</type>
      <name>operator-</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a0d9471171e0850999d1ea739c791db64</anchor>
      <arglist>(const SbVec2s &amp;v1, const SbVec2s &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a5e0d9c3c70b584ef527896aab18d0c8c</anchor>
      <arglist>(const SbVec2s &amp;v1, const SbVec2s &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec2s.html</anchorfile>
      <anchor>a2cac79faa94b112ba7aef64565c7cede</anchor>
      <arglist>(const SbVec2s &amp;v1, const SbVec2s &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec2ub</name>
    <filename>classSbVec2ub.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec2ui32</name>
    <filename>classSbVec2ui32.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec2us</name>
    <filename>classSbVec2us.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec3b</name>
    <filename>classSbVec3b.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec3d</name>
    <filename>classSbVec3d.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a8eadb0adc327684c460881ae81253e12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a6d5c6a6082b72c55aae88e23acd843c1</anchor>
      <arglist>(const double v[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a48aba5218dae1458533f87b178da6c5a</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a823106c1f8611953022ce6e422631d6d</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a0c4266b3b2c8d12bb6a4cc36583b64af</anchor>
      <arglist>(const SbVec3b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a278090650beed389e86fb29070a27f20</anchor>
      <arglist>(const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>aa2ba794348f9bed86b80853790cae5a0</anchor>
      <arglist>(const SbVec3i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3d</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>adddf72fdfe5999442b9ca0ed2f781d9c</anchor>
      <arglist>(const SbDPPlane &amp;p0, const SbDPPlane &amp;p1, const SbDPPlane &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a3502ebf227e379148924170d37d1d91b</anchor>
      <arglist>(const double v[3])</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>af33229ecf26ed9181b9560f2cf2cfd45</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a1767493fbe105a21443784c1401a8197</anchor>
      <arglist>(const SbVec3d &amp;barycentric, const SbVec3d &amp;v0, const SbVec3d &amp;v1, const SbVec3d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>ac5a6c3d7be0b7515767823eb5128c712</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>abbf3097826dee7efb5e27e1816b5520a</anchor>
      <arglist>(const SbVec3b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>af2213f41172c01715105e62441ee3e32</anchor>
      <arglist>(const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>ac9d45642a2188d2fd3ca9d3a3a1b74d8</anchor>
      <arglist>(const SbVec3i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a3c7752979790cf79dcb1a2d142e24cd0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a229990b034ac29b804df0c0fd82fccd3</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a62efe1c7f2ff4889b66c72c444aca348</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a56ba55a640920f895e38e46211211473</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>cross</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>ac6df9286890b5c2beb6421c4149ed754</anchor>
      <arglist>(const SbVec3d &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>af7461180b134fd94eca26edc9ca9f2a4</anchor>
      <arglist>(const SbVec3d &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>ad10c722e0e09df8bde90b96e28a9fb81</anchor>
      <arglist>(const SbVec3d &amp;v, double tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getClosestAxis</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a4fce1116dd4e23c854ade26f7da14c54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>acd55215365e30dd2755a92c50c269d55</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrLength</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>abb278c6eccf60c06f3b79adda21588d5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>acd1ac1abcfc3e3ed33da1d00a16e0b26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normalize</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a18665ea58a934c30bf0c1c6514756906</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a5e8c9c3639bba11ce7d0a8f9979b9734</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>afd49d1b1b565338d01143c800dd5a01f</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a168f773bc5d03cea72b7b6e195f3b5b9</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>aeb66ed4671c530add3355deb25dd551a</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>operator-</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a69ea7dfc7770859935cd95d6c32af976</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>toString</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>ac26323bde6d8de6f24f33005d06b5ebb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fromString</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>afccce23ff5d0cbc4be2afacfd7981542</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a6ab02454ed758a43c33212a71f548076</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>operator*</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>ab89d6a719951db2488c8bdb326da998e</anchor>
      <arglist>(const SbVec3d &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>operator*</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>adff62fee69aa44d6fb8dfc1406234f02</anchor>
      <arglist>(double d, const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>operator/</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>afa88edac3a167324bd3f1244b00a4cde</anchor>
      <arglist>(const SbVec3d &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>operator+</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>aeb666d8a1c045ccf8bcb6e7cb7dc2031</anchor>
      <arglist>(const SbVec3d &amp;v1, const SbVec3d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>operator-</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>af0c8316a21d5cf3059da242c43673328</anchor>
      <arglist>(const SbVec3d &amp;v1, const SbVec3d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a6274cf58ed1a8882288f72ea5ae2cee3</anchor>
      <arglist>(const SbVec3d &amp;v1, const SbVec3d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec3d.html</anchorfile>
      <anchor>a1940e03f88535e05b9fcf5afd573993e</anchor>
      <arglist>(const SbVec3d &amp;v1, const SbVec3d &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec3f</name>
    <filename>classSbVec3f.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec3fList</name>
    <filename>classSbVec3fList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SbVec3fList</name>
      <anchorfile>classSbVec3fList.html</anchorfile>
      <anchor>a1e7610fb5a9ce564075095b632f6b322</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbVec3fList</name>
      <anchorfile>classSbVec3fList.html</anchorfile>
      <anchor>a8fcd4eb25a06eba2bc6dcfb9d3287c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSbVec3fList.html</anchorfile>
      <anchor>a9899c06fc9b57c6d203c542791bba3c6</anchor>
      <arglist>(const SbVec3f *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSbVec3fList.html</anchorfile>
      <anchor>adc8c71f530c7b2cdd6e2c61c07b84e92</anchor>
      <arglist>(const SbVec3f *item, const int insertbefore)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f *</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3fList.html</anchorfile>
      <anchor>a3935b67deed30958ceebab1bf5a71e86</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec3i32</name>
    <filename>classSbVec3i32.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec3s</name>
    <filename>classSbVec3s.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a8a17743467745471b1b30c6bf00a181a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a31fd3dc5ec1fddb163f9f6a88ae89190</anchor>
      <arglist>(const short v[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>adc03f5041b94c89f8e5f3f62c653a746</anchor>
      <arglist>(short x, short y, short z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a2678145a4a2f7292f6e0ab74847ed823</anchor>
      <arglist>(const SbVec3us &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>af11345b4ad1e0e22df232888f20f175c</anchor>
      <arglist>(const SbVec3b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>ae5b06878f494b039ad77a1a8edabc384</anchor>
      <arglist>(const SbVec3i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>af7f0f60434502a96320805da1129e2ca</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec3s</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a87ebb005dda25e4028180796dc718da9</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a13bcd6f18c9b72e0398932ebc2c3f2be</anchor>
      <arglist>(const short v[3])</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a7b3b315d4c4ee43904b574e55413987b</anchor>
      <arglist>(const SbVec3us &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>aaa8e79640bc4dabb9bd3e2c7bd577e0c</anchor>
      <arglist>(const SbVec3b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a508bfa34c7c89ef64cd756467970ee39</anchor>
      <arglist>(const SbVec3i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a301642f2b0250ceaae2cc92cbcd64612</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>ad75c16547603db047d2dde75f0f86808</anchor>
      <arglist>(const SbVec3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const short *</type>
      <name>getValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a502fec3919ce6e5ae80f30b77a7b07d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a40172f9d6dce70b746e9eb094556077b</anchor>
      <arglist>(short &amp;x, short &amp;y, short &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>short &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>aaa6622340cee55ca1b64ead2dfc6d2ee</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const short &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>aa1f9f28f093154dca582c062c9a1587c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>dot</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a7bbf8d8436c367d776a31e68956259b7</anchor>
      <arglist>(const SbVec3s &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a38e6999933ca957c0af4ab78e07b8a67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a720cd5ffc9f2db83119ae9147a46d791</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a0374a739323fd020d463fd20bb150935</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a40824232039d0b271ca7f0543d95197c</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a1ca5b77e6a490548f857b6d94e6a0638</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a58cea8166e2a1705f15322da77f4927d</anchor>
      <arglist>(const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>aef82255498882ba2ba3041f4113034cc</anchor>
      <arglist>(const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator-</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>aff0430528c83a8f9f060437389eb5763</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>toString</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>ac7585dd3a279c0a646eb256324885a4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fromString</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a1560b584ee7714f1d43cb0e997f1c511</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a235d9a29c7cb17fb8998a45579762b76</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator*</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a12b8f0a890e6bd3db0af00688c1f5a9e</anchor>
      <arglist>(const SbVec3s &amp;v, int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator*</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a0823116c5c7ab79f9ba5edaf50d940d3</anchor>
      <arglist>(const SbVec3s &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator*</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a0788806ebdea7d7629c2fd3e5870828c</anchor>
      <arglist>(int d, const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator*</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a2234b3b8fd74475bf03709ba0dce6839</anchor>
      <arglist>(double d, const SbVec3s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator/</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a03691fd07c4ea890fbd6e64a218b3003</anchor>
      <arglist>(const SbVec3s &amp;v, int d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator/</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a4ab17190eb376a2158952bff4561839a</anchor>
      <arglist>(const SbVec3s &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator+</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a0fae636d216f98ed3bc952f87c2b76e7</anchor>
      <arglist>(const SbVec3s &amp;v1, const SbVec3s &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3s</type>
      <name>operator-</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>aa2c20aecadbd48a78c765d80f779f7bf</anchor>
      <arglist>(const SbVec3s &amp;v1, const SbVec3s &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a17f16774265457801b432b293eaed06a</anchor>
      <arglist>(const SbVec3s &amp;v1, const SbVec3s &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec3s.html</anchorfile>
      <anchor>a3559605a112446e3796c80b87e6389d1</anchor>
      <arglist>(const SbVec3s &amp;v1, const SbVec3s &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec3ub</name>
    <filename>classSbVec3ub.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec3ui32</name>
    <filename>classSbVec3ui32.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec3us</name>
    <filename>classSbVec3us.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec4b</name>
    <filename>classSbVec4b.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec4d</name>
    <filename>classSbVec4d.html</filename>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ac7b884bfbc3a4b9ce649cdb59de77c79</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a4b144ff8a8ac21844af1a5b3726116fa</anchor>
      <arglist>(const double v[4])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a0837c17f58fa7dcec2691c541518aece</anchor>
      <arglist>(double x, double y, double z, double w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>aee7e6576a17bc24a36855fe435afb4f1</anchor>
      <arglist>(const SbVec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ac01e33c7da04a3a6a5cc6c3fd6283d44</anchor>
      <arglist>(const SbVec4b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ac1efc8004cd66e8db305e3ceedf10115</anchor>
      <arglist>(const SbVec4s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbVec4d</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ae434ea3369094a66f4f2248fdade51d5</anchor>
      <arglist>(const SbVec4i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a3935367aceacc5ec86a5e6e696f89e60</anchor>
      <arglist>(const double v[4])</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ade3661a30bd5f8b3eb0304d0f473a5e0</anchor>
      <arglist>(double x, double y, double z, double w)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a47b57f921f695d62482ed7bab91113d2</anchor>
      <arglist>(const SbVec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ae09ccacd8d4a66f1da6e9e1c256ce9b4</anchor>
      <arglist>(const SbVec4b &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a675ded6aca0f8ef91ac9bf30ad8e1ac8</anchor>
      <arglist>(const SbVec4s &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>setValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a2a3136bdafc59fcf0fb4205b0efbeca1</anchor>
      <arglist>(const SbVec4i32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a6299815f67264a71fcf2df4e8a40bd63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ae6b9ac4bc5f996c9bf4c5fcf814734ec</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z, double &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a351373dbd4dd29a1c7fe8a0da5d6761c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ab69511ea29e5e811f90d27c028db9367</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a9ed52f41df8638a703b14b7ee0e039d5</anchor>
      <arglist>(const SbVec4d &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>equals</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a726c267da1187fa7ae3a0b4db7cf6ecb</anchor>
      <arglist>(const SbVec4d &amp;v, double tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getReal</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a8780e717c447c61f1b95f70c473ebcc2</anchor>
      <arglist>(SbVec3d &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>aea050b75dedfbf92dfff42994d6f7d36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrLength</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>aa6fdcd73e0441fc63968e078cbd2ffd0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ad954080acdc3f04dcf367720462677fd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normalize</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>aac6b1ddbae7284245537b7354f7bcc92</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a84b928e2bae9c8951bfe58a97fada7d7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>aa53a7b2961acae8d12ab2362b445c951</anchor>
      <arglist>(const SbVec4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ada8b1af27e1fed0ed972140637c56cc8</anchor>
      <arglist>(const SbVec4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d</type>
      <name>operator-</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a16a51bbadf6264b2042e01b3dec13ee6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a7a492d9ff3804a4983d1593ceae41676</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec4d</type>
      <name>operator*</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>aafc14f0cd0ce50cabbcc1d4f59f0599f</anchor>
      <arglist>(const SbVec4d &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d</type>
      <name>operator*</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a38efeb2b0d465bb232847e2a8551e123</anchor>
      <arglist>(double d, const SbVec4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d</type>
      <name>operator/</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>ae02649fb85b10ede354e713efb7c55fb</anchor>
      <arglist>(const SbVec4d &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d</type>
      <name>operator+</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a7e01a6afd5a4380ae240805cd96744c2</anchor>
      <arglist>(const SbVec4d &amp;v1, const SbVec4d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SbVec4d</type>
      <name>operator-</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a07e36b6b71e7d092c5dc047f02f21572</anchor>
      <arglist>(const SbVec4d &amp;v1, const SbVec4d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a38923a1aab2ce280682f0c33f7229789</anchor>
      <arglist>(const SbVec4d &amp;v1, const SbVec4d &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSbVec4d.html</anchorfile>
      <anchor>a62d2ed55527d44f10f5b429c0182876e</anchor>
      <arglist>(const SbVec4d &amp;v1, const SbVec4d &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbVec4f</name>
    <filename>classSbVec4f.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec4i32</name>
    <filename>classSbVec4i32.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec4s</name>
    <filename>classSbVec4s.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec4ub</name>
    <filename>classSbVec4ub.html</filename>
  </compound>
  <compound kind="class">
    <name>SbVec4ui32</name>
    <filename>classSbVec4ui32.html</filename>
  </compound>
  <compound kind="class">
    <name>SbViewportRegion</name>
    <filename>classSbViewportRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>SbViewportRegion</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>af522056ea9d27359b03cb2b88536f0e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbViewportRegion</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>af415380060c898ed123ba1b3cf120802</anchor>
      <arglist>(short width, short height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbViewportRegion</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a9573bcfcce0b7e9ffa774d82f0fc09ad</anchor>
      <arglist>(SbVec2s winSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbViewportRegion</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a8b9832f4a55148a0553529c1c6cc0966</anchor>
      <arglist>(const SbViewportRegion &amp;vpReg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a0ae54dc0d8416d2cccdb0b3d6d3ae640</anchor>
      <arglist>(short width, short height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a8772016f85c60dd7737eabca3483f0da</anchor>
      <arglist>(SbVec2s winSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>aee9986763e2234c411c8822206db539d</anchor>
      <arglist>(float left, float bottom, float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>ad5f9e32fb1fde9ea5825572c76d06e57</anchor>
      <arglist>(SbVec2f origin, SbVec2f size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportPixels</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a2977b42c205177a6e89b3860fd823951</anchor>
      <arglist>(short left, short bottom, short width, short height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportPixels</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a98cd719e0afc2b942f0cd99110b8aff0</anchor>
      <arglist>(SbVec2s origin, SbVec2s size)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getWindowSize</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a1a45d79dc096e081c3b2d47aec122531</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getViewportOrigin</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>abff18efe5fbac028929a5a59e2422fd9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getViewportOriginPixels</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a9f44010af49a6646ca6e584b2922d585</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getViewportSize</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a2a26d4d33e2dc855e6b413a1d842620e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getViewportSizePixels</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a18fc6778e0c34a74ed2b40a08e9c52d8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getViewportAspectRatio</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a3cd6ad89d36e1785cd78502cce109831</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleWidth</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a11855a05e9ed450a22cddffdcb373e58</anchor>
      <arglist>(float ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleHeight</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>ab3249cb0a55be9ced4681951283a176e</anchor>
      <arglist>(float ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixelsPerInch</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a13bf92c587ea65ea35bafbd342b11d44</anchor>
      <arglist>(float ppi)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPixelsPerInch</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a5da22464468f5e09f14b2c0b53768677</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPixelsPerPoint</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>add259b948edb8f5a95b8739b63497e72</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a06f53e143b12459c2a10bf8de961c5aa</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>a759c633952740a45c23994bec51fb830</anchor>
      <arglist>(const SbViewportRegion &amp;reg1, const SbViewportRegion &amp;reg2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbViewportRegion.html</anchorfile>
      <anchor>aa4ea8adbc5071d1d32e113fbeaeb1597</anchor>
      <arglist>(const SbViewportRegion &amp;reg1, const SbViewportRegion &amp;reg2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbViewVolume</name>
    <filename>classSbViewVolume.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ProjectionType</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a769616c39bae7ee4e78bac640e0bdaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ORTHOGRAPHIC</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a769616c39bae7ee4e78bac640e0bdaf4a19f676b5e880a7189080151156b64337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERSPECTIVE</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a769616c39bae7ee4e78bac640e0bdaf4a9538d7439b5b05a137f9e33f8bd4e014</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbViewVolume</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>acbcf2f7f32cf0e74b4655367b4a8fe94</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbViewVolume</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>abc5d921466ff37e56d462f2d126ab87d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMatrices</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>aaf5df672ba977f9b5b4d83e1682f6de9</anchor>
      <arglist>(SbMatrix &amp;affine, SbMatrix &amp;proj) const </arglist>
    </member>
    <member kind="function">
      <type>SbMatrix</type>
      <name>getMatrix</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a5bd9601e086a5b27d3bfd19a6f16a9b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbMatrix</type>
      <name>getCameraSpaceMatrix</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a6415ae9f9f4d5daaaababae549247666</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectPointToLine</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a7cfeb60597f0834c09ce41b35774699a</anchor>
      <arglist>(const SbVec2f &amp;pt, SbLine &amp;line) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectPointToLine</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>aa41f86414351097ed9299823fdab175c</anchor>
      <arglist>(const SbVec2f &amp;pt, SbVec3f &amp;line0, SbVec3f &amp;line1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectToScreen</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a477a722363ab50a7d0b75af4371dbddc</anchor>
      <arglist>(const SbVec3f &amp;src, SbVec3f &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>SbPlane</type>
      <name>getPlane</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a4d2915f546da802d20f297f8afa8fb47</anchor>
      <arglist>(const float distFromEye) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getSightPoint</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>aae79513a8eb36402c510ccfcd2a7203d</anchor>
      <arglist>(const float distFromEye) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getPlanePoint</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ad8d8c82474ce1b6c84a342accc813e28</anchor>
      <arglist>(const float distFromEye, const SbVec2f &amp;normPoint) const </arglist>
    </member>
    <member kind="function">
      <type>SbRotation</type>
      <name>getAlignRotation</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a221effb886a5848924f2707b113c9923</anchor>
      <arglist>(SbBool rightAngleOnly=FALSE) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWorldToScreenScale</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ac45918c8f816fdd10bd89edf1447c780</anchor>
      <arglist>(const SbVec3f &amp;worldCenter, float normRadius) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec2f</type>
      <name>projectBox</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a90c8bfc8c2826c0ec832c3025bc41df6</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbViewVolume</type>
      <name>narrow</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a10f0ca68486f3dc6fa9253e705573d5a</anchor>
      <arglist>(float left, float bottom, float right, float top) const </arglist>
    </member>
    <member kind="function">
      <type>SbViewVolume</type>
      <name>narrow</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ab0056db207f6a96c7c0892b83217f3bd</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ortho</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a74cccdb71cc35fb5b3b084917031ebe7</anchor>
      <arglist>(float left, float right, float bottom, float top, float nearval, float farval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perspective</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>aa62d154de3ec060318a8bc49d59c5422</anchor>
      <arglist>(float fovy, float aspect, float nearval, float farval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frustum</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a3bdbe7dc553465904db3b42fa295b48e</anchor>
      <arglist>(float left, float right, float bottom, float top, float nearval, float farval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateCamera</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a7f048618c8b356e7cc5af37d81972a5d</anchor>
      <arglist>(const SbRotation &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateCamera</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a7a29ff8f99f24a9d16defe527ff0fc0f</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>zVector</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ab702af9ddc8697b134e314e70e84b602</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbViewVolume</type>
      <name>zNarrow</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a192fb38eabeddd0d2a7fae8cc27fc2a4</anchor>
      <arglist>(float nearval, float farval) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a8ba76dfded56d0e9b41a3c4f8adec007</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleWidth</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a9d2eb384e69810c23df5748342e081d3</anchor>
      <arglist>(float ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleHeight</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a93de473b12e0847fd6aa31a9d143f5c9</anchor>
      <arglist>(float ratio)</arglist>
    </member>
    <member kind="function">
      <type>ProjectionType</type>
      <name>getProjectionType</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>af06b504f57b8eb466f9e0c5409263943</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getProjectionPoint</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ad3d957bb6ec1c6c4fab52778b3cceae0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getProjectionDirection</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a2cb3b07c63a0d809a1470ab2ad5b8f21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getNearDist</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ad4e8a159275d69742ca57f2c8b929666</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWidth</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ac45e31a043e90e6475e8248d1b12e068</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getHeight</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>adcd3d826f3cf1b15ebd29f8e643e15bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDepth</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a82d1fb3a6211c10da97258d098f14ab6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a1251fb193ab40917dafc4158a55c14da</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getViewVolumePlanes</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ae3f1ef1529f1fb9b20f8e6fede8f09c4</anchor>
      <arglist>(SbPlane planes[6]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a0f836b45107fedfea1a212aeaed38a3e</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getViewUp</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a7883d7582364e2b09166a84df7cac841</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a629e0432230dcb411e9d66db4b48c565</anchor>
      <arglist>(const SbVec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>aa253278e65ec9e7480d7fb5c981f1b46</anchor>
      <arglist>(const SbVec3f &amp;p0, const SbVec3f &amp;p1, SbVec3f &amp;closestpoint) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a3dfd57079062c0e4d6c1eeda7002be07</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbBox3f</type>
      <name>intersectionBox</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>af8b1049cb503fa77675371e14711bab4</anchor>
      <arglist>(const SbBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>outsideTest</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ae3d998894473b6756d8046aee13b6b81</anchor>
      <arglist>(const SbPlane &amp;p, const SbVec3f &amp;bmin, const SbVec3f &amp;bmax) const </arglist>
    </member>
    <member kind="function">
      <type>const SbDPViewVolume &amp;</type>
      <name>getDPViewVolume</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a2c18508188a5aed2093f61a1ff631d98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>ProjectionType</type>
      <name>type</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a8299568cb7ad6fda09eec92adede6877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SbVec3f</type>
      <name>projPoint</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>ab473472322064d5b790a0361fc31ec00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SbVec3f</type>
      <name>projDir</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a3d66037590e6ad2f2ba8d8e63cb72e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>nearDist</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a063842c5cf236a3b5351fa4241679730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>nearToFar</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a6c20b2e40244a5c83d52e97c169d7e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SbVec3f</type>
      <name>llf</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>adf2952f98c0edf4ae4416858d906f3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SbVec3f</type>
      <name>lrf</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>a152c5ad6f9182d94dbc8e36bf1c994e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SbVec3f</type>
      <name>ulf</name>
      <anchorfile>classSbViewVolume.html</anchorfile>
      <anchor>acdeb4aa5b5c465b64a90dddcd8f06ffd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbXfBox3d</name>
    <filename>classSbXfBox3d.html</filename>
    <base>SbBox3d</base>
    <member kind="function">
      <type></type>
      <name>SbXfBox3d</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a44adce59ac262e3deb32a42bc536c824</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbXfBox3d</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>aec9342cfb81b97f1591e601c7c8f04b1</anchor>
      <arglist>(const SbVec3d &amp;boxmin, const SbVec3d &amp;boxmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbXfBox3d</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a7b56b4cc56417ef51d429719f2b735e2</anchor>
      <arglist>(const SbBox3d &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>acedc78abc26655c9775bc6bfdb35d281</anchor>
      <arglist>(const SbDPMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const SbDPMatrix &amp;</type>
      <name>getTransform</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a2cbf251985dd24eddb10183813706c11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbDPMatrix &amp;</type>
      <name>getInverse</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a82126a8078c6fe00f82e62d20b105432</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3d</type>
      <name>getCenter</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a60245ff127d7916dc161e5cecbf6f954</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a8da790ddabc38dedcac25228fe89eef5</anchor>
      <arglist>(const SbVec3d &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a64874cec573cb996acd53e57779ac100</anchor>
      <arglist>(const SbBox3d &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a18392992a10fbbcf77c2c77124492cfd</anchor>
      <arglist>(const SbXfBox3d &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a759c0a46239aee73ee7d7dd2b65aac78</anchor>
      <arglist>(const SbVec3d &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a51a7909a610b743c1cf5c065b37584c9</anchor>
      <arglist>(const SbBox3d &amp;bb) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a5625829df7ef683e001845721714146d</anchor>
      <arglist>(const SbXfBox3d &amp;bb) const </arglist>
    </member>
    <member kind="function">
      <type>SbBox3d</type>
      <name>project</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>aa88643991ebb23198bc8d2592bcf1d45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSpan</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a0e42031bc1e756e7c6e1b55cce4204d0</anchor>
      <arglist>(const SbVec3d &amp;direction, double &amp;dMin, double &amp;dMax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a6bc269dedda3d499ccd711fb66dd4474</anchor>
      <arglist>(const SbDPMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVolume</name>
      <anchorfile>classSbXfBox3d.html</anchorfile>
      <anchor>a46048dc12f5a50f5d6406c542a6055c6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SbXfBox3f</name>
    <filename>classSbXfBox3f.html</filename>
    <base>SbBox3f</base>
    <member kind="function">
      <type></type>
      <name>SbXfBox3f</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a2adb39957d667d7bdc8d3b2c73bf03ee</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbXfBox3f</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>afebdecf40efde099111da9108b6c0f0a</anchor>
      <arglist>(const SbVec3f &amp;boxmin, const SbVec3f &amp;boxmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SbXfBox3f</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a0434ffabf617a0709fd8906650777425</anchor>
      <arglist>(const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SbXfBox3f</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a5f7d0963b5d178faec3752339e08edda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a8283248fd57a70c3c9c9fe15a04733f2</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getTransform</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>aedbafa6684b44dff0b5248f6541ae9fb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getInverse</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a4a35397bc8d3eafb53acdac3f5c7b939</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getCenter</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a50ad1e2df8b4c2373902abd2194cad54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>af8ea6006198bccfd6857d43fbb853db0</anchor>
      <arglist>(const SbVec3f &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>aca7f30a621d18216f8ed2cc9fb621f9a</anchor>
      <arglist>(const SbBox3f &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a05f077bbffbfae38d6a6cdb76aba253f</anchor>
      <arglist>(const SbXfBox3f &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a333003a0d994f1d773646c4065b66d93</anchor>
      <arglist>(const SbVec3f &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a6424cd04c1c287437f2298c263ef8dd9</anchor>
      <arglist>(const SbBox3f &amp;bb) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a2029b20c3ed2342d74c9b43bf6d75d45</anchor>
      <arglist>(const SbXfBox3f &amp;bb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSpan</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>ad90372acfef5c095bb3b68cbf409f116</anchor>
      <arglist>(const SbVec3f &amp;direction, float &amp;dMin, float &amp;dMax) const </arglist>
    </member>
    <member kind="function">
      <type>SbBox3f</type>
      <name>project</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a6365153aae3157ac1f6e67a78adbab58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a011e2b7df656b970e4bf09937cda6498</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>af6732f4fef8dcb3b5917b3c9d8d2ba83</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a3c3d8bbfbe74aac42630c51595045046</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a9b6bfb6e1bad9a583fe7cae59cec244f</anchor>
      <arglist>(const SbXfBox3f &amp;b1, const SbXfBox3f &amp;b2)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator!=</name>
      <anchorfile>classSbXfBox3f.html</anchorfile>
      <anchor>a4a4b5fde749599d4e7db361886b36e72</anchor>
      <arglist>(const SbXfBox3f &amp;b1, const SbXfBox3f &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXML</name>
    <filename>classScXML.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classScXML.html</anchorfile>
      <anchor>a575021fd42fe7862aeaadef4d79cfc50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScXMLStateMachine *</type>
      <name>readFile</name>
      <anchorfile>classScXML.html</anchorfile>
      <anchor>a1cf5fd33dccf83b71c676b74996c2843</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScXMLStateMachine *</type>
      <name>readBuffer</name>
      <anchorfile>classScXML.html</anchorfile>
      <anchor>a94ab99dfd3b0be6d49a521088e59c49a</anchor>
      <arglist>(const SbByteBuffer &amp;buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLAbstractStateElt</name>
    <filename>classScXMLAbstractStateElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLAbstractStateElt.html</anchorfile>
      <anchor>a867c54d30371c84bb914eab9eeca8b60</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLAbstractStateElt.html</anchorfile>
      <anchor>aeb4dd3b18eb44246b68770299c6d41e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLAbstractStateElt.html</anchorfile>
      <anchor>a65c343ca45f1ab1d49b35c4eb5b6d7ae</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXMLAttribute</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>abb8824092c35f5293d957065a0259396</anchor>
      <arglist>(const char *attribute, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getXMLAttribute</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>a3cfb6f404acb4ad13de107f2ef5ee748</anchor>
      <arglist>(const char *attribute) const </arglist>
    </member>
    <member kind="function">
      <type>ScXMLElt *</type>
      <name>clone</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>a4603b60d4f340f21d57987363d92f3bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContainer</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>ac663bd4b53820306beef387a6e1a916b</anchor>
      <arglist>(ScXMLElt *container)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isContainedIn</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>a453fa4676cdf492633a0bd0c6fc08b94</anchor>
      <arglist>(const ScXMLElt *object) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOfType</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>aaec2be794e49c8e1d6177e5de4c05a11</anchor>
      <arglist>(SoType type) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>aff4dbd61103a1c659b1126bd1342d9f7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>ad52f3e69104a3527433768dc369539ae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanClass</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>aae0c5a4a174aca5ba7d7c6f41828b181</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerClassType</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>a8146bae33082f60297517988ebda4632</anchor>
      <arglist>(const char *xmlns, const char *classname, SoType type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerInvokeClassType</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>aa7838602d6dc4f741be2b0984cedf966</anchor>
      <arglist>(const char *xmlns, const char *targettype, const char *source, SoType type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLAnchorElt</name>
    <filename>classScXMLAnchorElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLAnchorElt.html</anchorfile>
      <anchor>aec91e009df3fe505d390f55d4074aaa3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLAnchorElt.html</anchorfile>
      <anchor>a99563ba2ea8f290d1bd4fca33a9ae20c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLAnchorElt.html</anchorfile>
      <anchor>a245a9a5201559f42fa6722a2b8f26ca5</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLAndOpExprDataObj</name>
    <filename>classScXMLAndOpExprDataObj.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLAndOpExprDataObj.html</anchorfile>
      <anchor>a41b1a6cfa2bd14069afaa2b77d3eb08a</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLAssignElt</name>
    <filename>classScXMLAssignElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLAssignElt.html</anchorfile>
      <anchor>a9e4329f07dada52e3d0d47aada29d03d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScXMLAssignElt</name>
      <anchorfile>classScXMLAssignElt.html</anchorfile>
      <anchor>a5284526a47273ba0a92fd09a42af74c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLAssignElt.html</anchorfile>
      <anchor>a365ebe17d543bfbc44783cd932030ce6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLAssignElt.html</anchorfile>
      <anchor>a9f6ec11b6ec7b9797b2937ab52ec3a0b</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classScXMLAssignElt.html</anchorfile>
      <anchor>ada746ed6fe36b4c6065d1e272cb66050</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanClass</name>
      <anchorfile>classScXMLAssignElt.html</anchorfile>
      <anchor>ac9629e5875b1b5cedc7769b9c9e36001</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLCoinEvaluator</name>
    <filename>classScXMLCoinEvaluator.html</filename>
    <base>ScXMLEvaluator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLCoinEvaluator.html</anchorfile>
      <anchor>ab5e3ae77175019134d38a3a105a9b331</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateMachine</name>
      <anchorfile>classScXMLCoinEvaluator.html</anchorfile>
      <anchor>a9b3cc77cd58c18d836f3fb5885436e33</anchor>
      <arglist>(ScXMLStateMachine *sm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearTemporaryVariables</name>
      <anchorfile>classScXMLCoinEvaluator.html</anchorfile>
      <anchor>aeb19052d03db41282f624ec86b58bb1f</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLConstantDataObj</name>
    <filename>classScXMLConstantDataObj.html</filename>
    <base>ScXMLDataObj</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLConstantDataObj.html</anchorfile>
      <anchor>a8c426234b6bb8ece08fcd426d74f0270</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLContentElt</name>
    <filename>classScXMLContentElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLContentElt.html</anchorfile>
      <anchor>a70e883d93d988a568be716255c8ae058</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>ac76e77f8ecedd593ec87b0fa1ee5f7df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>a6acef7487d9ea12bf0ca4de9b156f453</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLDataElt</name>
    <filename>classScXMLDataElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLDataElt.html</anchorfile>
      <anchor>a14d94658625f6550d695d5c6cbb5431f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLDataElt.html</anchorfile>
      <anchor>adbae717dc44fe179e36b6b3917dd98b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLDataElt.html</anchorfile>
      <anchor>a35d6cf96952275c788ce4f0d2352f2ba</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLDataModelElt</name>
    <filename>classScXMLDataModelElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLDataModelElt.html</anchorfile>
      <anchor>a77afbff6c4313034a840eabaa465e0ca</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLDataModelElt.html</anchorfile>
      <anchor>a8a15fbe319261c8645985da8f1143738</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLDataModelElt.html</anchorfile>
      <anchor>a5144bbbf936f06916580f1018501a486</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLDataObj</name>
    <filename>classScXMLDataObj.html</filename>
    <base>ScXMLObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLDataObj.html</anchorfile>
      <anchor>aa8f127e9e677b82f01f321b18a298e16</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLDocument</name>
    <filename>classScXMLDocument.html</filename>
    <base>ScXMLObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLDocument.html</anchorfile>
      <anchor>a88d3171d490d794a619682a878e4a5b5</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLECMAScriptEvaluator</name>
    <filename>classScXMLECMAScriptEvaluator.html</filename>
    <base>ScXMLEvaluator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLECMAScriptEvaluator.html</anchorfile>
      <anchor>a9f43d76d7fc779f0d16cac6073f980fd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateMachine</name>
      <anchorfile>classScXMLEvaluator.html</anchorfile>
      <anchor>a903df9c19b4a93b2988b57672f417d3c</anchor>
      <arglist>(ScXMLStateMachine *sm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearTemporaryVariables</name>
      <anchorfile>classScXMLEvaluator.html</anchorfile>
      <anchor>a7eb59462c0c8b1a267522a89ec22d607</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLElseElt</name>
    <filename>classScXMLElseElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLElseElt.html</anchorfile>
      <anchor>a88772975690349a91b7708da14e00dec</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLElseIfElt</name>
    <filename>classScXMLElseIfElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLElseIfElt.html</anchorfile>
      <anchor>ad16f8ade0309085a6baad665f846f97b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLElseIfElt.html</anchorfile>
      <anchor>a0150583699cdc62856c7dc3e949ad520</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLElseIfElt.html</anchorfile>
      <anchor>ab414574c327311a5a3a17ea42a63f8d4</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLElt</name>
    <filename>classScXMLElt.html</filename>
    <base>ScXMLObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLElt.html</anchorfile>
      <anchor>a3b97c34ff5fba99583caa4d8ef5252d2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLEltReader</name>
    <filename>classScXMLEltReader.html</filename>
  </compound>
  <compound kind="class">
    <name>ScXMLEvaluator</name>
    <filename>classScXMLEvaluator.html</filename>
    <base>ScXMLObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLEvaluator.html</anchorfile>
      <anchor>a22f5bcbd102a6ebfbf399c35addc24e6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLEvent</name>
    <filename>classScXMLEvent.html</filename>
    <base>ScXMLObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLEvent.html</anchorfile>
      <anchor>ae1a1e3ab1922f5b1f5f32201810141d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEventName</name>
      <anchorfile>classScXMLEvent.html</anchorfile>
      <anchor>a7c1112de3684d5726726fbf97bfdffe3</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLEventElt</name>
    <filename>classScXMLEventElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLEventElt.html</anchorfile>
      <anchor>a269a22f8961a136c0b14122e9b9290d1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLEventElt.html</anchorfile>
      <anchor>ad2e64434411a92e1a6659408ff9f89f4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLEventElt.html</anchorfile>
      <anchor>a0337e1a88e9f69c77c0d9804ddcfa2d9</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLEventTarget</name>
    <filename>classScXMLEventTarget.html</filename>
    <base>ScXMLObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLEventTarget.html</anchorfile>
      <anchor>a83c3e492e1f1cd43160447442ca05828</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLEvent *</type>
      <name>getCurrentEvent</name>
      <anchorfile>classScXMLEventTarget.html</anchorfile>
      <anchor>a07704f89bbf875d9f878a3beb1e49c5e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>queueEvent</name>
      <anchorfile>classScXMLEventTarget.html</anchorfile>
      <anchor>a023f131293775c89553361dace4be77b</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>queueEvent</name>
      <anchorfile>classScXMLEventTarget.html</anchorfile>
      <anchor>a148b192e2023df0791fb6a31e20ae780</anchor>
      <arglist>(const SbName &amp;eventid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentEvent</name>
      <anchorfile>classScXMLEventTarget.html</anchorfile>
      <anchor>aef63077fd0be0d7d5517782eba5041a1</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classScXMLEventTarget.html</anchorfile>
      <anchor>ac141e368b9f95ff6feb08e4237e80ee0</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLExecutableElt</name>
    <filename>classScXMLExecutableElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLExecutableElt.html</anchorfile>
      <anchor>ad26b5a870cf887de5d6c9da6421984be</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLFinalElt</name>
    <filename>classScXMLFinalElt.html</filename>
    <base>ScXMLAbstractStateElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLFinalElt.html</anchorfile>
      <anchor>ab13f54ce2f567778fb77f5524dcbea76</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLFinalElt.html</anchorfile>
      <anchor>a5e5e493bb46a5b472cd60eff54a99e3f</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLFinalizeElt</name>
    <filename>classScXMLFinalizeElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLFinalizeElt.html</anchorfile>
      <anchor>abf145d86470e1aa1bf795fec7af9199e</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLHistoryElt</name>
    <filename>classScXMLHistoryElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLHistoryElt.html</anchorfile>
      <anchor>a5e27d13ebefa1f76b2f9a8e983976946</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLHistoryElt.html</anchorfile>
      <anchor>ac077afa9f5c2048df00d37b86022ff31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLHistoryElt.html</anchorfile>
      <anchor>a960abdf9cf94fcb26c6ccf2ef3228695</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLIfElt</name>
    <filename>classScXMLIfElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLIfElt.html</anchorfile>
      <anchor>a623bb596ba1bc6e11cbb906d24d8a396</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLIfElt.html</anchorfile>
      <anchor>ae628a920951925caf369ebef3c69c262</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLIfElt.html</anchorfile>
      <anchor>ab7413ae8ecc183cdcab3b167b76b7013</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLInitialElt</name>
    <filename>classScXMLInitialElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLInitialElt.html</anchorfile>
      <anchor>a40a1b0b55b36752af9c7e602192b0aff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLInitialElt.html</anchorfile>
      <anchor>aa3dd5f89740cbb6a56e8dff93411a037</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLInvokeElt</name>
    <filename>classScXMLInvokeElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLInvokeElt.html</anchorfile>
      <anchor>a66c1d5ded6bf024315feeed966238ec9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLInvokeElt.html</anchorfile>
      <anchor>afa48803a9d3619d5638fb92a28d6d3f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLInvokeElt.html</anchorfile>
      <anchor>a2933aeea688287977f2d67e864087d0c</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLLogElt</name>
    <filename>classScXMLLogElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLLogElt.html</anchorfile>
      <anchor>a5d600c29d8aeeac85f539247e33c115c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLLogElt.html</anchorfile>
      <anchor>a9d070ae058209d8a58d469141d55a4d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLLogElt.html</anchorfile>
      <anchor>af4fbe0327f219d97ffb9b4095c697f05</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLMinimumEvaluator</name>
    <filename>classScXMLMinimumEvaluator.html</filename>
    <base>ScXMLEvaluator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLMinimumEvaluator.html</anchorfile>
      <anchor>ae55e1481c0bf1ffb5a4b500b94339bcf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateMachine</name>
      <anchorfile>classScXMLMinimumEvaluator.html</anchorfile>
      <anchor>a7cd2015644ffedd3ace380747fe3eacc</anchor>
      <arglist>(ScXMLStateMachine *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScXMLDataObj *</type>
      <name>evaluate</name>
      <anchorfile>classScXMLMinimumEvaluator.html</anchorfile>
      <anchor>a8818d107a5d566999ead28f9cf768910</anchor>
      <arglist>(const char *expression) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setAtLocation</name>
      <anchorfile>classScXMLMinimumEvaluator.html</anchorfile>
      <anchor>aa2bab3639e92cb1a242d797e10b580c2</anchor>
      <arglist>(const char *location, ScXMLDataObj *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScXMLDataObj *</type>
      <name>locate</name>
      <anchorfile>classScXMLMinimumEvaluator.html</anchorfile>
      <anchor>ad4154a3ac9e015ca50531217af94129f</anchor>
      <arglist>(const char *location) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearTemporaryVariables</name>
      <anchorfile>classScXMLMinimumEvaluator.html</anchorfile>
      <anchor>ace8b736796006bbd8bd2fb3838cab38f</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLMinimumExprDataObj</name>
    <filename>classScXMLMinimumExprDataObj.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLMinimumExprDataObj.html</anchorfile>
      <anchor>acae67b14941ffd8ca46c042512dbcf09</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLObject</name>
    <filename>classScXMLObject.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLObject.html</anchorfile>
      <anchor>a99bfd8003e56ea165441c66a33da44c6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLOnEntryElt</name>
    <filename>classScXMLOnEntryElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLOnEntryElt.html</anchorfile>
      <anchor>a078f97877bae46861d7a05a7fda1996b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLOnEntryElt.html</anchorfile>
      <anchor>a2930fd3894e3c21d1d10993fdd04383a</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLOnExitElt</name>
    <filename>classScXMLOnExitElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLOnExitElt.html</anchorfile>
      <anchor>a844737d3f6767fa425d20e5458abdd01</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLOnExitElt.html</anchorfile>
      <anchor>a7760290bf8098ce86c22ed52c6c5efa5</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLParallelElt</name>
    <filename>classScXMLParallelElt.html</filename>
    <base>ScXMLAbstractStateElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLParallelElt.html</anchorfile>
      <anchor>a483f26b1ac7ce1364471d80f1cc33a06</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLParallelElt.html</anchorfile>
      <anchor>a9617bfd842c4f986f172e587ab223d61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLParallelElt.html</anchorfile>
      <anchor>ad29265132b5610609f55438edbeaefa4</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isAtomicState</name>
      <anchorfile>classScXMLParallelElt.html</anchorfile>
      <anchor>a43af8b51bd0c20c1eb58e7d553b72567</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLParamElt</name>
    <filename>classScXMLParamElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLParamElt.html</anchorfile>
      <anchor>a2e5c05eb612dfd8e5a542241d634f4eb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLParamElt.html</anchorfile>
      <anchor>aa9be25ba25216e462d66688ff4e6bc64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLParamElt.html</anchorfile>
      <anchor>aede51d8795a89444321e3a7c73efcc92</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLReferenceDataObj</name>
    <filename>classScXMLReferenceDataObj.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLReferenceDataObj.html</anchorfile>
      <anchor>aac0d2a78478331133777a2632d640db5</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLScriptElt</name>
    <filename>classScXMLScriptElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLScriptElt.html</anchorfile>
      <anchor>a1ae76d0efdccb514e443ac8a9be49f50</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLScxmlElt</name>
    <filename>classScXMLScxmlElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLScxmlElt.html</anchorfile>
      <anchor>a5dc763bea77dab6230705fa955fa064e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLScxmlElt.html</anchorfile>
      <anchor>a29134c57770eedc8f9b15a251890ae13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLScxmlElt.html</anchorfile>
      <anchor>a853ecc1b3753d05b65ac0f1b3fd7064e</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLSendElt</name>
    <filename>classScXMLSendElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLSendElt.html</anchorfile>
      <anchor>ad5315395706244f28549c3220c3c1474</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLSendElt.html</anchorfile>
      <anchor>a2a8200bf1060a20e0d91b4491059b574</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLSendElt.html</anchorfile>
      <anchor>a75ce67af90a43334a092045a97e8a5d7</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLStateElt</name>
    <filename>classScXMLStateElt.html</filename>
    <base>ScXMLAbstractStateElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a76088e37137a421d1e96570c9cf78a02</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScXMLStateElt</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a6df32b2660e35cdfe5a3d8421fa06259</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScXMLStateElt</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>ae2a8e7e817e691345cb185f470ede375</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAttribute</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>ae04314f867ba7a3d357e084225cf134d</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcAttribute</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a82ff212d78cedcf354fd2e26c29d7d20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialAttribute</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a6720ab49835e6c0fad259720986b8501</anchor>
      <arglist>(const char *initial)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getInitialAttribute</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a37e789c8aa21cd638e8db4df002e5353</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a7ce8ae758e0d4cc5e3122e5fbff5bda9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>a652ebdf497b03bdbd3892bda34cabba0</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isAtomicState</name>
      <anchorfile>classScXMLStateElt.html</anchorfile>
      <anchor>afe6b9075e7b34f1d3251e557de45191e</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLStateMachine</name>
    <filename>classScXMLStateMachine.html</filename>
    <base>ScXMLEventTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>a16f24b950c817b6defaafdc0743537a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSessionId</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>a675d32dd576b9cbe81b89481935c31ed</anchor>
      <arglist>(const SbName &amp;sessionid)</arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getSessionId</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>af10e94dd407117cc7ae532a3d5f4b01a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>aba14c712ade5e2ca27c73102cef20b62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isActive</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>ad7427887c8aefd7ea4fc38bee6beb75f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isFinished</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>a0ed0801fcc51dbb8d40b005ddcd64e98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumActiveStates</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>aaf848db1832ccc5fb47d117237f62403</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>getActiveState</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>a678ea79bceb511c8959706df7ee97c22</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addDeleteCallback</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>af8bf1428945535c5479a7cc79e9acb00</anchor>
      <arglist>(ScXMLStateMachineDeleteCB *callback, void *userdata)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeDeleteCallback</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>ae6b467bfeefaef24bf8a03884e3013e5</anchor>
      <arglist>(ScXMLStateMachineDeleteCB *callback, void *userdata)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addStateChangeCallback</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>ad84c8d6eccdb3a9f77938855bef43068</anchor>
      <arglist>(ScXMLStateChangeCB *callback, void *userdata)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeStateChangeCallback</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>ab498767b29892f25403678a8e6ee8a53</anchor>
      <arglist>(ScXMLStateChangeCB *callback, void *userdata)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classScXMLStateMachine.html</anchorfile>
      <anchor>a9dbeab737cb398f1a50cb523fd417e64</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLTransitionElt</name>
    <filename>classScXMLTransitionElt.html</filename>
    <base>ScXMLElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>ab4fd381b6b101f88d9ba00ecdaf13fe0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>a3c5cb6b36ea69121befca3438f1255f4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>a2f95806bc4c5978dae575dbaf718a8d2</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isConditionLess</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>a358a0db69503c44efba7190b454797b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTargetLess</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>ad118e7d52eb73026dd2a7b0528a99086</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isSelfReferencing</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>a12a303f9cf0a23a711e741729fa40f17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isEventMatch</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>adcdc76be8a70ad3d85a52a8352f86e39</anchor>
      <arglist>(const ScXMLEvent *event) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>evaluateCondition</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>a2092e23a55d5d2c8615c0027e9bf4e57</anchor>
      <arglist>(ScXMLStateMachine *statemachine)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classScXMLTransitionElt.html</anchorfile>
      <anchor>a95bd1dbb5653bfd36a4e840e0853574e</anchor>
      <arglist>(ScXMLStateMachine *statemachine) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLValidateElt</name>
    <filename>classScXMLValidateElt.html</filename>
    <base>ScXMLExecutableElt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLValidateElt.html</anchorfile>
      <anchor>ae1f66ba601caa686c7bcbe431e42528b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>handleXMLAttributes</name>
      <anchorfile>classScXMLValidateElt.html</anchorfile>
      <anchor>a191f8975f4364fd2265d2c75821d07b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScXMLElt *</type>
      <name>search</name>
      <anchorfile>classScXMLValidateElt.html</anchorfile>
      <anchor>a7ae08da47b4a3c4d0696bd7031acb4d8</anchor>
      <arglist>(const char *attrname, const char *attrvalue) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScXMLXPathEvaluator</name>
    <filename>classScXMLXPathEvaluator.html</filename>
    <base>ScXMLEvaluator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classScXMLXPathEvaluator.html</anchorfile>
      <anchor>ad1c51fd322840a03d6634217711b8b47</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAccumulatedElement</name>
    <filename>classSoAccumulatedElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a8d960ab8dca94f56c4f8493d2eaa0508</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function">
      <type>const SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a8a7fb999dff6f39ea1280eea97a8933a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>ae2eb4b8dcfbc520faef17c4820f9c4c9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a47fb7cba01227fed02b5d48d7797dddb</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepth</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a8508119bc6d937ab882f45f86745d2e1</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a3c98d36d1a92f70d4957395c3e5f3313</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>ae9d85b24213e349b96e4bb78233a0ff6</anchor>
      <arglist>(FILE *file=stdout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoElement</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a9ce2a1034d3bb27910ce9a3eea6e64e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a53244db0aff108029f890d602b904890</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a2c70e4edee66676d8f682b7a4afda037</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getClassStackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>ad2a2e4a49f1cccadc601e75a51048391</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initElements</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>af00f2621eec54163e7d1eb5ae7e81ad5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumStackIndices</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>aff64aac9bd872ce52ac5dfbfa36c36dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getIdFromStackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a5ac8400720c4ab228dec79bf301d7647</anchor>
      <arglist>(const int stackIndex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>ae73af63a5def9e9f13c08c0d67cbed27</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>aa056ead3804fe3818d8ca55e67ef38d0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearNodeIds</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a70f1473b38a1d7337d643ee8b4e59bc6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNodeId</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a0132837d8e145edce7586e2b3169cf20</anchor>
      <arglist>(const SoNode *const node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNodeId</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a72bfdec083dc26e5b36bbd7a0bccbd47</anchor>
      <arglist>(const SoNode *const node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyNodeIds</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>ae65a5e4a450f584709bf55bb18a3edb8</anchor>
      <arglist>(const SoAccumulatedElement *copyfrom)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a6e21205ffcb6a05b7573e5b22c0fe81f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>captureThis</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a77c8c1edfcfa96314e39456d67b4137f</anchor>
      <arglist>(SoState *state) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoElement</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a34312a1075fc6b90b3e5ccf5875c8c79</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>capture</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>ace260f18f598e00d95c98c96925950f8</anchor>
      <arglist>(SoState *const state) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTypeId</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a48d6dbea777d2eee021a788cf896ecaa</anchor>
      <arglist>(const SoType typeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setStackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a84b9e1b74e61a4c8383650a33dc7a9c8</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoElement *</type>
      <name>getNextInStack</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>ae738e26ff31219dc9abe8a72e93e110a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoElement *</type>
      <name>getNextFree</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a4ff965194a4c7905b695022724698ae4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbList&lt; uint32_t &gt;</type>
      <name>nodeIds</name>
      <anchorfile>classSoAccumulatedElement.html</anchorfile>
      <anchor>a6ad9023f4ff2487772a486f0d5057323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoType</type>
      <name>typeId</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a3acf0e425bc7ef0a812df905a39fb269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a3babbcafa83800192cee2acb1a8edd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>depth</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a60e3b7f1344de81f7d6a198e7655235f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoElement *</type>
      <name>getElement</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a30c40ecaa79d6b140278fe906273e714</anchor>
      <arglist>(SoState *const state, const int stackIndex)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoElement *</type>
      <name>getConstElement</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>ab8cb20060c9b527c8b2e343b1cf4032a</anchor>
      <arglist>(SoState *const state, const int stackIndex)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>createStackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a6e4a8ae82aae7ac4d2516929a2e62d1d</anchor>
      <arglist>(const SoType id)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>classStackIndex</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a3ab188deb13cb1a8c1b40ee365fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static SoTypeList *</type>
      <name>stackToType</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a8e7258ccd9bda58158a370fc16455bbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAction</name>
    <filename>classSoAction.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AppliedCode</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a1c1dcf644f0e8bc1acd92f9cd8c917d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PathCode</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a0942e2ce7d88ebc8e7cd10cf26310c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAction</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>ad2839c2461c998920de832d8bdaa34c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a364ad60918a4d20ebdc9635457fe331c</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a82e33af1a24879a4dfd36a11a9832689</anchor>
      <arglist>(SoType type) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>ad2d6ddb297b3a1f5b80026db5fd5e616</anchor>
      <arglist>(SoNode *root)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a8f922db782cb971042da8adc64f61d47</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a311e03e553957474b6920afe03fb94fc</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a984b580685859d42c4505980249fd409</anchor>
      <arglist>(SoAction *beingApplied)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidateState</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a3fbc8efc139853a56e707baecf02b357</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>AppliedCode</type>
      <name>getWhatAppliedTo</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a4d0897cb9be1eecfdecefe1d997c7bfb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNodeAppliedTo</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>abafb324d344d32013ed45e7d02cfa230</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>getPathAppliedTo</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a26927425cfa1f5cbcad875a94493c2a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPathList *</type>
      <name>getPathListAppliedTo</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>addea4390ccdaaaa3457d1f243ff95b0b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPathList *</type>
      <name>getOriginalPathListAppliedTo</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a258606e1d65239e8c4008da42a49c59c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isLastPathListAppliedTo</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>aec41770acf5a27f1b82a7e031571d101</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>PathCode</type>
      <name>getPathCode</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a42b2f4960252071194099b4a965eefa2</anchor>
      <arglist>(int &amp;numindices, const int *&amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a805627d07445a9c3a7e6324748aac2a9</anchor>
      <arglist>(SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasTerminated</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a1ae6a4f107b03fb899743f5f3d5fc7d3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPath *</type>
      <name>getCurPath</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>af5920f3da63a6ba8577dc56621815341</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoState *</type>
      <name>getState</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>aa6cf40cb31bb8371eb5d9a847ce9c944</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>PathCode</type>
      <name>getCurPathCode</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>abba574ba5288668051405a9fcd3678aa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getCurPathTail</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a4e9810cb526353255fedf04792151c2d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usePathCode</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>aea5650e3b7ae6207c4c3d675e83073b5</anchor>
      <arglist>(int &amp;numindices, const int *&amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushCurPath</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a148ece4bf4cda79914ee3a2116c05d09</anchor>
      <arglist>(const int childindex, SoNode *node=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popCurPath</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a88ceb9648c0f51d7ba87475ca8555f28</anchor>
      <arglist>(const PathCode prevpathcode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushCurPath</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>abebcc05d2d935803a3c95310c9447614</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popPushCurPath</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>adf8242136a44ff3af40ea102b372e4e1</anchor>
      <arglist>(const int childindex, SoNode *node=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popCurPath</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a989bcb87598bf55b31bf0704189abb11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchToPathTraversal</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a4285818426cf039bd556b537398d9ece</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchToNodeTraversal</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>accfc280f70bc8f888f61890f07a4aac2</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a6fca4d3db681ecea3bd1d5c24d1f160d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a9c1f8064ac89d9e36d36a8d05365e26a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a3a714aae7f852be330d276041f7bc26e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>nullAction</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a6dd54a728307c37d3cd87b2891b9359e</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoAction</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a7f6ac9fad4b83a66a321adfa48ebacd1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a893a67a9bf2e7b5b5ef0f1f36f1b8097</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endTraversal</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a9af52ee33d0effeba2f23d9c3d4d6ad0</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTerminated</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>aa968d7390c6d9ec862e0c9c1c7e48de5</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a92a36e12e654c3fb3838aebbfe0d2ced</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldCompactPathList</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a074946b7ebc44bed35f915d04680cb36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoEnabledElementsList *</type>
      <name>getClassEnabledElements</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>ac3a072966a0f9fa9f96fa1affc44fe9b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoActionMethodList *</type>
      <name>getClassActionMethods</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a655c3dbf9f093cdfaa7cc896ca54c0f3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoState *</type>
      <name>state</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a5b4ccb851346b95c3c3562b1824d258b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoActionMethodList *</type>
      <name>traversalMethods</name>
      <anchorfile>classSoAction.html</anchorfile>
      <anchor>a00703b6a5c0bac45ac95756f7eb054af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoActionMethodList</name>
    <filename>classSoActionMethodList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoActionMethodList</name>
      <anchorfile>classSoActionMethodList.html</anchorfile>
      <anchor>af86c8480152c573d9e75e835aa72bc74</anchor>
      <arglist>(SoActionMethodList *const parentlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoActionMethodList</name>
      <anchorfile>classSoActionMethodList.html</anchorfile>
      <anchor>a474f294ac9475da3d05f269dd47c7699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMethod</name>
      <anchorfile>classSoActionMethodList.html</anchorfile>
      <anchor>a79983ab40c7c4be74506aff39f9e0a72</anchor>
      <arglist>(const SoType node, const SoActionMethod method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classSoActionMethodList.html</anchorfile>
      <anchor>a85d2c887bf7ccc5d8fbc3cb9e7df0050</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAlarmSensor</name>
    <filename>classSoAlarmSensor.html</filename>
    <base>SoTimerQueueSensor</base>
    <member kind="function">
      <type></type>
      <name>SoAlarmSensor</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>a114d31b978c009fb47f419bc356d4f88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoAlarmSensor</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>a2b5ca4eee57d66a63d73a89cf9324b2a</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAlarmSensor</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>ab504b1bd587ec26c7ffcbc5a72ac3f1f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>af1886674d1187f94ff408349f738d3cc</anchor>
      <arglist>(const SbTime &amp;abstime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeFromNow</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>a8988efd19de1d900859696a628e8e55f</anchor>
      <arglist>(const SbTime &amp;reltime)</arglist>
    </member>
    <member kind="function">
      <type>const SbTime &amp;</type>
      <name>getTime</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>a420fd1f77e890846947be9e08d64b762</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>schedule</name>
      <anchorfile>classSoAlarmSensor.html</anchorfile>
      <anchor>a457a8626f5856284e66367e5ec8bf54a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTimerQueueSensor</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>aa44140fca366b973dcd09a17f67c3593</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTimerQueueSensor</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>a4d62dc9062913ecfa745fde7c06169a8</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTimerQueueSensor</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>ad2d8778f4f166cc1fbd70968a5b2638c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbTime &amp;</type>
      <name>getTriggerTime</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>a3d5ab7bf4b9106307ec4ae1994f1aa4b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unschedule</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>aa6d792983952ef2af6a3e7f005af3b11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isScheduled</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>afe00440d7a01a61b27f66f297d3a3f5d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trigger</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>a3459bf3e4f6bda6de8da7d0a8d64f814</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSensor</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>aef8e234f18554cf8d895e49d2ad87fe3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSensor</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>ac7b074e66870f8b291eba260b6469c2c</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSensor</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a12f75e795419d1ec79ba4c3e2c5a31cd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>ac0a0152828590c9b23da259a9c60a629</anchor>
      <arglist>(SoSensorCB *callbackfunction)</arglist>
    </member>
    <member kind="function">
      <type>SoSensorCBPtr</type>
      <name>getFunction</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a512bff71da628c79dc14d02019c07782</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>acc7ffab34126318972fdc0830de49150</anchor>
      <arglist>(void *callbackdata)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getData</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>ac6474ccce9c26b3f72e6ad0adea03ff5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextInQueue</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a011855ebf2d30b097370ebca6eee98c9</anchor>
      <arglist>(SoSensor *next)</arglist>
    </member>
    <member kind="function">
      <type>SoSensor *</type>
      <name>getNextInQueue</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>af73bb1b36e43218af6186899f31a5db5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a267d8529b420c15f969e124cc809e987</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTriggerTime</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>aa2720312ff24da9ecf460d6e8b7fb592</anchor>
      <arglist>(const SbTime &amp;time)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>scheduled</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>a22000bb83389ed0058939e77416751df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSensorCB *</type>
      <name>func</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>ac21ccac7235fb0f895fff539c13a0ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>funcData</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a00da05a8947650ec2555977ed526cb6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAlphaTest</name>
    <filename>classSoAlphaTest.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Function</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1a8b0557cff65c58a521bc7ec8ac83a676</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEVER</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1af76ce4e47d1a17e5d3a86714f55d894f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALWAYS</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1a5b1a78aa5e038ba10398322cebad7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LESS</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1a6f8eca382fe3ae8a5eb483f33d6aa246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEQUAL</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1af0b59036b3007a7ba0e46750dc3ca43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EQUAL</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1af7d8e0673b5e7a12949710eb07a564ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GEQUAL</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1a29037b9059c646095cc398734dc2c9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GREATER</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1a91b47b7fee0997423f21ac7a2f246ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTEQUAL</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>af21bb2d9573f0673e2f636ef82f424f1afc6e593de21a5a964995650ea1be9da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NodeType</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVENTOR</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09ac0831e453c51372e48be01ebf3f75d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VRML1</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09af394e16a0b4d94ea3336b93f865b65a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VRML2</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09a2c12262016b245952c410f20efd7a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVENTOR_1</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09a3dd4cd24b703ba3d27c03f27278020e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVENTOR_2_0</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09a7968ab0659fe9def9c8e5bfbb3af4a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVENTOR_2_1</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09aea47620acfc8e1c86c3913fe309b6710</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVENTOR_2_5</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09ab07b87a88930896f6f3903544cd9df09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVENTOR_2_6</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09adeb3f37f9ac4d872643fab303ceca4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COIN_1_0</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09ac72b86803610982c730cbba098b3676e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COIN_2_0</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09a37f44b5c6ca9907b4fd06f6fda7bb4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXTENSION</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afaebe871158a88c800ded8c44f583b09a3d8337c6cd271876193dfaad2578edab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>aa03090417f90d29d7ce99fba6fbb7b49</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoAlphaTest</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>ac5237575286ae6204fbb62999dd96ec4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>a458d60b8f8a4d99945b6cac555393166</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverride</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a3c4f3e94bccef0da0f47bcdf64a3e915</anchor>
      <arglist>(const SbBool state)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOverride</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a34d1d340b3a5e6ae9db5fa2cbb548b35</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeType</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a54cb403721ece12f95be66a3baef48a4</anchor>
      <arglist>(const NodeType type)</arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>getNodeType</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a2b4b7b6a405f10d8995bc08c212ab4cf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>copy</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a5bb1642be1ce816fa367284761a3bcc9</anchor>
      <arglist>(SbBool copyconnections=FALSE) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a633c15b6ff9fc56491d686ebe26f96a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a7f93b0ccc30d3d3283773c1b254b34ca</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>aa921ef5b5420dfb2ee8a04cc54e4f896</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>aa26545310c0283245e7cab76fc92a5b5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a8cbbfd0f5bcf3e30528ac0bbda826bf6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a8a49410ba330a0763397753677a874cb</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a4fe80ee53bf8d7821b9b6e91ac20f5c4</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a8a590d9596435ff93fe37cea3aae62ca</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a1f198a845c3f8e8eb313762afd9cb7d5</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ad1acb723f774cdc90eb69f23ac191967</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>acbc15afe5dd825bfaa3c479b51fed98a</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ad45bab33f06902f1735fb05a82dec650</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>add1c0182576fda3e51ccc9a38dd1b694</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a7c6cf297f3abf3a171fd7492d0fee0e5</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a1e33c6b6ea83d1982ecf2febb903d942</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>grabEventsSetup</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>af9f97e3ffaeb4e50e1e1a647a1535e47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>grabEventsCleanup</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a7afcbdc2e142bfa4be450e9124ac93a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startNotify</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ab623a7a6404b31e171869f953113eba7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a19bd6f80f2151fd082ca774068aef239</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNodeId</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ab52fe77c928a116a0f407c3a6c4462cb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>af2df4f667bda1276a0a37f142f227de8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInstance</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a2c1c9901261a3b02fa99e6b1f7223d3f</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>addToCopyDict</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a8de5e3402ef14c3a833d59e92eb1b964</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>acf00f4c8151db47b00d508b2e7c2794a</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoFieldContainer *</type>
      <name>copyThroughConnection</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a52532c42b16a2a480cf7ddf46d51b62f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToDefaults</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a96ce6bfbc94538e8d037030f9990ee61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasDefaultValues</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a1bfd3ad51195e034dfebbff073f79b0e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>fieldsAreEqual</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a7bcfcef5ab9fa426500f612f85daeb9a</anchor>
      <arglist>(const SoFieldContainer *container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFieldValues</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>abc620aa3c3c1d797772ecd8b6ba82075</anchor>
      <arglist>(const SoFieldContainer *container, SbBool copyconnections=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a42458263ddb5dbbdf9473c3dae07a483</anchor>
      <arglist>(const char *const fielddata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aab59399cd2889f2504587c59a98bd35a</anchor>
      <arglist>(SbString &amp;fielddata)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFields</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a243551995fa3e159b3a384dc8ee352c1</anchor>
      <arglist>(SoFieldList &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAllFields</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a440fa92008d81efb70611c0b692050c5</anchor>
      <arglist>(SoFieldList &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoField *</type>
      <name>getField</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>af37c273006d56c866373bbdbd2740e61</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoField *</type>
      <name>getEventIn</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>adc3421886e0c2f3a942ad1ecb791bcb8</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoField *</type>
      <name>getEventOut</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a7cb4b21d9564a06b622fe844e3e5c166</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getFieldName</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>af4793f88a9be2404ea0607de4a9b2111</anchor>
      <arglist>(const SoField *const field, SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>enableNotify</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>acfd479a5769b6f2e5c64e33bc5ecda81</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNotifyEnabled</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a26e6ab8aa9c6f6ce4e79ff89ed6bd330</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aecae5577413772a3df69f8a67c9f8861</anchor>
      <arglist>(const char *fielddata, SoInput *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a1b1ee6b9b4c4dce34072b2207d86e272</anchor>
      <arglist>(SbString &amp;fielddata, SoOutput *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>validateNewFieldValue</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a242628b2d7e41340398754054ae11ad5</anchor>
      <arglist>(SoField *field, void *newval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addWriteReference</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a8fe87d323c349aa7123ecbd2096a90dd</anchor>
      <arglist>(SoOutput *out, SbBool isfromfield=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getIsBuiltIn</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aacdbdb2562de00fd2a5f3caa05aa44f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFieldsMemorySize</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a21abe486f26e41c6d3dd03b28d8a30b2</anchor>
      <arglist>(size_t &amp;managed, size_t &amp;unmanaged) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a0381b3af71e47ffccaf445aa4de38bad</anchor>
      <arglist>(void *userdata) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a6a5d55381c6f6d8ea62f410885d68fc3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>aa5cf76b995f72f073a91f40d9b4b42a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unref</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a29e7a0f62ff982fa75bfe4eb0373d6d0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unrefNoDelete</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ae4bf96b749f2f2a8577050787f7fbee4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRefCount</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a5485f34f5d7159bfd4d0db7813fce585</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touch</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>aba7fd51b022505fa822d295095b7f6a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ab15fb37137177d3137663b2194b11991</anchor>
      <arglist>(SoType type) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbName</type>
      <name>getName</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a6b701830707d957fa112b1e9d9f10a08</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ab9bb8b4387f5fb39d4aa3fe92ca81261</anchor>
      <arglist>(const SbName &amp;newname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAuditor</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ae6df5f7ce9b7426544fa890d7c48b23a</anchor>
      <arglist>(void *const auditor, const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAuditor</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a40434ac2a479164cbeee3f6583307b77</anchor>
      <arglist>(void *const auditor, const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>const SoAuditorList &amp;</type>
      <name>getAuditors</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>af64b194d0d914bcdd97b48c53b051d4e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>shouldWrite</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a6f95394c79b081e482d94a15a823b32f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertAlive</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a56d653cd42bd72dc7824be40e7fc9fc8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getCompatibilityTypes</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ae749600d30d3f68fab7ec45e43b309f0</anchor>
      <arglist>(const SoType &amp;nodetype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoNode *</type>
      <name>getByName</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ad8312b743a45ae88013c788b7dd94717</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getByName</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a28ffc12aa508802ca4c22d4aa91a34dd</anchor>
      <arglist>(const SbName &amp;name, SoNodeList &amp;l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a466efa129792e1b14437048a19cb073c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getNextNodeId</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a35e2a892910f5bc75d4ba573afe39ddb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getActionMethodIndex</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a9e9bc3dd0763fffc3844ba072d8ac43f</anchor>
      <arglist>(const SoType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getBoundingBoxS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a91ab391491a486f54f75335f54ad3116</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GLRenderS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a2c2f47db02ea2726e34c7edcadf72ca9</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callbackS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ac45acbf1842b7b06465bc656b0c3e76d</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getMatrixS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a5b49397f58a5ed03ff3d963725ee0307</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleEventS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>aa08772cfe2d6780d8f35c652ee06bd0b</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pickS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ad2a0c9f57f0520fcf27144783d06fb9d</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rayPickS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afafa6668c3cdb488ac4aea1175c995c2</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>searchS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a0ad7a52381f8278fc7d776bc7ce84877</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>afdabeb342b514c04baca61377856c782</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>audioRenderS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a71c0b51745c06555f8e47ef881f90047</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getPrimitiveCountS</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>abe0ca21e17894d0b42765c3925d80421</anchor>
      <arglist>(SoAction *action, SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initCopyDict</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>abd1c5856ee0e9c1e410b44e1d860c2fc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addCopy</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aa4bd2cf6fe33bd29bba62d49cc166233</anchor>
      <arglist>(const SoFieldContainer *orig, const SoFieldContainer *copy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoFieldContainer *</type>
      <name>checkCopy</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aa95f3cfa95ecdb443d7d62faa1c2aee0</anchor>
      <arglist>(const SoFieldContainer *orig)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoFieldContainer *</type>
      <name>findCopy</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aa5631c8ea1ef70662b136e690cbb8cf8</anchor>
      <arglist>(const SoFieldContainer *orig, const SbBool copyconnections)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyDone</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>ac30353612cc6fc6fa1c0b953e9648fe3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a8419a92b3ac808c6a789673db06776be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a73ce238db093db6ba1b4009818cc9f27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addName</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a74952f1fd17c44eb0fc9c3dc3b69102a</anchor>
      <arglist>(SoBase *const base, const char *const name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeName</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a427c87fa9d48a2d09da950b7a0895fc7</anchor>
      <arglist>(SoBase *const base, const char *const name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incrementCurrentWriteCounter</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a73037fd0866b2d280e6770c1ff11649b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decrementCurrentWriteCounter</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a9258013519caafda065433bb168ed126</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoBase *</type>
      <name>getNamedBase</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>acda0e2703e0f76ef10f0b14ce19e6e42</anchor>
      <arglist>(const SbName &amp;name, SoType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNamedBases</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a64dd273d58c357da1b0df1b4212bfb29</anchor>
      <arglist>(const SbName &amp;name, SoBaseList &amp;baselist, SoType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>read</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a08ab1a0fb1b141d3afc2e745a998fc01</anchor>
      <arglist>(SoInput *input, SoBase *&amp;base, SoType expectedtype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setInstancePrefix</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a24fef6a61e75a6bffb4f83d4cf10fca5</anchor>
      <arglist>(const SbString &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTraceRefs</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a4617280cf55689be859f44b1e332a414</anchor>
      <arglist>(SbBool trace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getTraceRefs</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>adc549cc4452943800c625056b264d1ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>connectRoute</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ac0a10d7a457ae5403dac0e6a76d00984</anchor>
      <arglist>(SoInput *input, const SbName &amp;fromnodename, const SbName &amp;fromfieldname, const SbName &amp;tonodename, const SbName &amp;tofieldname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>readRoute</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ab6687c0316a76792276a0e0e5755f552</anchor>
      <arglist>(SoInput *input)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>function</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>a683d9420bd0b60257d6eb077dd0331a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>value</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>ae6897e246889a1e8fa43567d332639dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>a355d2a53ee5ef01bd66330657399b439</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAlphaTest</name>
      <anchorfile>classSoAlphaTest.html</anchorfile>
      <anchor>a66c7ac9fdd3bdd8ae4b88594d6b34bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoNode</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a11b3f6d76929bcf86e8f8662e2f8249d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNode</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>ad7cef6be5ac6b2b2715666e2ba60128d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a9a126748a9bc691bc8cc49b8245e5855</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoFieldContainer</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a3950d8784a244da6e5d81361760f2845</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFieldContainer</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a4aa2232495749eb6ac1af54d200f2180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoBase</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a30a12f045bf793692612e8420a2d8413</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBase</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a4e09f562870ef14253a439aa8379c1ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ab102bb9166fc2453ff67e15337038691</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>hasMultipleWriteRefs</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a58a876542e7d86adf89966d3c899a97a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>writeHeader</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a247faa658c4fb075e41442ac1d632b85</anchor>
      <arglist>(SoOutput *out, SbBool isgroup, SbBool isengine) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeFooter</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>abdb9f869861fba02d37012b5dbcf3deb</anchor>
      <arglist>(SoOutput *out) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFileFormatName</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a7cb3979a71e021ce8cafab2d75e2c5c5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNotRec</type>
      <name>createNotRec</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>aa41e45678b8c582b5202143a220ad76c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoFieldData **</type>
      <name>getFieldDataPtr</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a8b4c4bf288ab4e253021238a188ab66f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setNextActionMethodIndex</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a6fcaac360719b61121c378ae267ca461</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getNextActionMethodIndex</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>aa9ec668431c27b092c790a728ab32646</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>incNextActionMethodIndex</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a92fde0337a9037cc06dd084f6c644189</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setCompatibilityTypes</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a52dab3d7a7ae89422c095a9c3a977e30</anchor>
      <arglist>(const SoType &amp;nodetype, const uint32_t bitmask)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static uint32_t</type>
      <name>getCurrentWriteCounter</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a79a1022df39ae04dfefff5449d4ead24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>staticDataLock</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a704e6447bdfacab4171721c803087b54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>staticDataUnlock</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a7610ab9ef6c403635bb913cbf7a24032</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>BaseFlags</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a42fedf98911431b5a47e7734a228746f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>uniqueId</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a11772c4de94b96f7bfe97062293804ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>isBuiltIn</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>abfdbfe7eae635b3d67893c978297401f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static uint32_t</type>
      <name>nextUniqueId</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a5c1d79535857c5bdede70e4be9227faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>nextActionMethodIndex</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>a9c90bc3168a1b09951ec86ffa6658b4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAmbientColorElement</name>
    <filename>classSoAmbientColorElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>a368aa4ee343079b63b4cafaaa10d864e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>a9370d89eb64011e7f4a50b23ae43ef60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>get</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>aba503b5bd12b0f1885a1ba8e53d7a58d</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>a7faeb5a15da80a7b6b39e9798ea859ef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>aee36b6c58ae4061d5088b458cf202563</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>ab0ee93ac77371446b6f97b8be6b87f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNodeId</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>a02dc63142ee10f1e8b9badece0d84264</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>a89573f9676df2ca3b5c638fff73005d4</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a69fc44b31adb066ba40bbc555298b107</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>a28f1ae945fee0e706603066f479674dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>a59e64b27e95f6af5ab133f8e64398dfe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>a5629821bd220092418e313b97cc8ed2b</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numcolors, const SbColor *const colors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoAmbientColorElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>ac874eae412b6dbbf9ecb3dbf8717fdca</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAmbientColorElement</name>
      <anchorfile>classSoAmbientColorElement.html</anchorfile>
      <anchor>af82269472b965fda951e8d9b28f13099</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoReplacedElement</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>aa616fc07d9945d27c12302aeafe73144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>captureThis</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a4a920fb9569636f889f530f3f6b4b232</anchor>
      <arglist>(SoState *state) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoElement *</type>
      <name>getElement</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>a70833996b60d53f3e54ec90a3ea9fab5</anchor>
      <arglist>(SoState *const state, const int stackIndex, SoNode *const node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>nodeId</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>a7695219e8870f983e6960e4dcbbe487f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAnnotation</name>
    <filename>classSoAnnotation.html</filename>
    <base>SoSeparator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>a26b898ffe58bc938ca94a80cbdc85789</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoAnnotation</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>a1cf5f2290120ddca31ae6581729589e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>a013d26bdf7954d82710e1cc4b53802c3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>ac163eb13b6b28c244073cd6fd51e6152</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>a692f4cec9f0b9171b92c2738118ee756</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>a3ebc773e02a9a58dd5bce711c093dc3b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSeparator</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>ad7f6193eae60c6472805adfb4fe9bf8c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSeparator</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>ad1e38488e022de4d26959d2fa80be211</anchor>
      <arglist>(const int nchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>aaf118218be778ea04ce57ef324c5dfd4</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a81ec52d27db047d5494aef8cf14ffccc</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a5c5a86e7711f424c0a03620d5b6a4b66</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>acf1998647522bf0c94f3c5cbef47dcd0</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>ac9615e18520dae307a27f7ce702f2d2a</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>aec8d7ff5aa0b22c05186384220f6f968</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a424aa0ce45dd2871f210d33486e0736e</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a43c5e64fc553d1f0b0e826cf04bc7e42</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a380f637a8c2b165a6132e21ce76d9da4</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a0d71862bb6eb5e8416f6ca6df2582d18</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a1da7b0209b1361ebb1637e9cb484164c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGroup</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a6a166a894fe88f6c186efd09ecff7cf8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGroup</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>aa7e15ff5654c7ab4724b397fff8ae889</anchor>
      <arglist>(int nchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a23e0a7aebf3ec75c40638cc360c0e5e6</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a0a87322279423aab116fe442626158b7</anchor>
      <arglist>(SoNode *child, int newchildindex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>aa15cf5f6a91f19377852b71efb670a9b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a1c662ef0bbe4052c6573f595b94276b7</anchor>
      <arglist>(const SoNode *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildren</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>afb2aef68e18331b6edc3523cf6f546f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a08a8536e74a09043e820206cc1107c77</anchor>
      <arglist>(int childindex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a4164d0ef348129adf0ec244153576e07</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAllChildren</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a0e0f51c52b2a78173c46531785decd36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>replaceChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>ad8ad1c3ce980cd622a9e6481dc567d0c</anchor>
      <arglist>(int index, SoNode *newchild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>replaceChild</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>ae006a114fac6746a3514eebd0a8f3dc5</anchor>
      <arglist>(SoNode *oldchild, SoNode *newchild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>aa17968b17d069e36fc9c5598f9b43c20</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a12aef60c111941b6663a7a77bc83b75c</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a6816e99adaa3bcc6056df91e4db1fca0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNumRenderCaches</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>af01258db89466ee375dc8515ff461a04</anchor>
      <arglist>(const int howmany)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumRenderCaches</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a1a68e63539ff381417d47900eed05ca7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>a63d898683c32ee8bd99d2429e67c0130</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAnnotation</name>
      <anchorfile>classSoAnnotation.html</anchorfile>
      <anchor>ad07f41206e3fbf738ba76ae86c5f68d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSeparator</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a1327db2197764b07dc4aa91de5c1c1a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>cullTest</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a1ca8311b65c6db7087867a8a9babae13</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>cullTest</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a063a6864d6a8377333fd4e06bdc375be</anchor>
      <arglist>(SoGLRenderAction *action, int &amp;cullresults)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a7dbd724491497fc7ea5c45f380335e73</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGroup</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a45d9cfe36bf555a90b2e253a2e5a9d9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readChildren</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>ac2d8b2d407cfdf87edf06fb986d53d02</anchor>
      <arglist>(SoInput *in)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>aae8e8e5103e323b5d59eb8386671cc59</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNotRec</type>
      <name>createNotRec</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>aa8cac54a0a595403f5475cc502bebdd7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOperation</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a0ced0d3a09ac439ea20cc78ea755f9f9</anchor>
      <arglist>(const SoNotRec::OperationType opType=SoNotRec::UNSPECIFIED, const SoNode *cc=NULL, const SoNode *pc=NULL, const int ci=-1)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CacheEnabled</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a4d0aacab3b6836083f8960031d207c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OFF</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a4d0aacab3b6836083f8960031d207c7aa821ffe63c4908003367d83f3de5d3160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ON</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a4d0aacab3b6836083f8960031d207c7aa73dd81721759f093b29f13b94d123969</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AUTO</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a4d0aacab3b6836083f8960031d207c7aa522798bd64d9ce99991583f77f425a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCaching</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a66bb73ac97538902c0f55f8d1f4444a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>boundingBoxCaching</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a060012a219ed95d686d6f1d7406d5d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCulling</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a6fb6fba13bf1023d22185c0e4d850f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>pickCulling</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>aaf382e5d94f190ae4bc56ea5211a5724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a858f7cf002e23637542fcd92d098be70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAnnoText3CharOrientElement</name>
    <filename>classSoAnnoText3CharOrientElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>afdc0a6ff633e8fb9bd74e71f513b1049</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a0213652995df022b9e07c93736fd0890</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a575ffc5133d689bbc0075c5e60199a3d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a4df0485c1d02d4835b73fe7b430f01ae</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a8c2dc883660896b2aff89f72de7dacf9</anchor>
      <arglist>(int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>ac49260c3e67377d195e97190220cfca2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>a581c562a5131c9a550d14a81f1acf8b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>ae550a4525a0bf0c4faf6c26a199cb8c2</anchor>
      <arglist>(SoState *const state, SbBool isOriented)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>get</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>a7b0c871d540bdefd03299cfccb0c1c81</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getDefault</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>af8292ed270ee6b890a0f856d4eee1d9e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a02d87fb2e27bd17355ffbb05ef106d29</anchor>
      <arglist>(const int index, SoState *const state, const int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>get</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a616f8407ec7222158c6d73b039ef8e45</anchor>
      <arglist>(const int index, SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAnnoText3CharOrientElement</name>
      <anchorfile>classSoAnnoText3CharOrientElement.html</anchorfile>
      <anchor>afd0ba435beb4eda0bb9f1bd882134c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>data</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>ad2adf8868e417739697ee385ced135e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAnnoText3FontSizeHintElement</name>
    <filename>classSoAnnoText3FontSizeHintElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>FontSizeHint</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>a98f0d14bf9b70be20542b622b125d15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>afe7bfe55a1872e2893abac0e0017175a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>a9a1ee1c83e43c16d38fc30f519b789bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>a44c607eeee829147dafad3a4865df7b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>a417518c1b885acaa084d15afc9e68a01</anchor>
      <arglist>(SoState *const state, const FontSizeHint hint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontSizeHint</type>
      <name>get</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>accc6a6e8cfe921724ae55e377ee00f76</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontSizeHint</type>
      <name>getDefault</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>a73f0b1789aaabaa5871ad7e0b9fd52c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>a1340607d80d51b178fdb590c3efb1068</anchor>
      <arglist>(SoState *const state, SoNode *const node, const FontSizeHint hint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAnnoText3FontSizeHintElement</name>
      <anchorfile>classSoAnnoText3FontSizeHintElement.html</anchorfile>
      <anchor>acf0dbe3e49012b99e2809c4a9147905b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAnnoText3RenderPrintElement</name>
    <filename>classSoAnnoText3RenderPrintElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>RenderPrintType</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>a702375a265c616b3c6c54277866a59d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>a9ce4457f345b033c3d11f59427c9b320</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>a93e94aa8053b946468c76401d2955a8f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>a560eb4fadca5662e1f4df74d00fcc55f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>afe06909553fa8329c2fa5994618ee3a9</anchor>
      <arglist>(SoState *const state, const RenderPrintType hint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RenderPrintType</type>
      <name>get</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>ab65b711c1ca56f2487d587ec3bd6c1d2</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RenderPrintType</type>
      <name>getDefault</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>a0a4a981987fbd6b2003c5248143fd033</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>ad8bbfd6051c745689d91da6a35931dd7</anchor>
      <arglist>(SoState *const state, SoNode *const node, const RenderPrintType type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAnnoText3RenderPrintElement</name>
      <anchorfile>classSoAnnoText3RenderPrintElement.html</anchorfile>
      <anchor>a63a250105c3b2c93a15b54c8e07b3fb8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAntiSquish</name>
    <filename>classSoAntiSquish.html</filename>
    <base>SoTransformation</base>
    <member kind="enumeration">
      <type></type>
      <name>Sizing</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>acf81274786acabfd0ae29fb4153e2c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>ab4d3957b02985133c59f6a2e3971433e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoAntiSquish</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a064915282a46650395701d0b89782d87</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalc</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>aa73905e1f7b5e08832bd8853347526d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>ae4b654892639e4b97eb6a96091e6647c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>sizing</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a6be9e92711ab95e09bc2c3ebe1a96456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>recalcAlways</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a5a3a74c44b6aa014a46cf87bc6242708</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>ac2199444299a7325deb9af9cb1a2064d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAntiSquish</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>aeea57d2f55d6479b85f7a74c0049b558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>adfc66ffab1845a91be6dcfe61e6d31ba</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a2681fcaee3e9fe97cb1162e14e5333bc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a78d48e6a4e1e736d074f1ba199d10b45</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a7960bb46f40ff784d69bca61a7494b05</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>adb7ca96c12f3465adc814439f9662307</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbMatrix</type>
      <name>getUnsquishingMatrix</name>
      <anchorfile>classSoAntiSquish.html</anchorfile>
      <anchor>a20143231ceb173a193544c58f9404543</anchor>
      <arglist>(const SbMatrix &amp;squishedmatrix, const SbBool calcinverse, SbMatrix &amp;getinverse)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoTransformation</name>
      <anchorfile>classSoTransformation.html</anchorfile>
      <anchor>a3ea84d9186777f1a3f657abb60e31025</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformation</name>
      <anchorfile>classSoTransformation.html</anchorfile>
      <anchor>a81c406afcde1940b52cf610b7b615f81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAppearanceKit</name>
    <filename>classSoAppearanceKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAppearanceKit.html</anchorfile>
      <anchor>a9988d8bc10b788df867c41dec500d258</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoAppearanceKit.html</anchorfile>
      <anchor>a33e7c3acda4639e12a18110ecbf14206</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoAppearanceKit</name>
      <anchorfile>classSoAppearanceKit.html</anchorfile>
      <anchor>a2f85da1bcbcf0455757b9877d4779f4a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBaseKit</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a4dec0b9a34a39eaf52a295e2f1ec54ad</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ae48bff9f8e65610b531509e5b68dbc60</anchor>
      <arglist>(const SbName &amp;partname, SbBool makeifneeded)</arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>getPartString</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ada02ebb37e902287724ef764cb010c03</anchor>
      <arglist>(const SoBase *part)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNodeKitPath *</type>
      <name>createPathToPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a57d3e0d10243896d1230e83d21ecd1c4</anchor>
      <arglist>(const SbName &amp;partname, SbBool makeifneeded, const SoPath *pathtoextend=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ab3f42ab04032e4f420625d314b606ae6</anchor>
      <arglist>(const SbName &amp;partname, SoNode *from)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>af95e20233ed052d76be5100ab59899d6</anchor>
      <arglist>(const char *namevaluepairliststring)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ae7cd4c0dd7cc63e1f77a0aa682aea131</anchor>
      <arglist>(const char *partnamestring, const char *parameterstring)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a81fbcf9e1f0d540863eee8ef7f6adc99</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a1addad3c257bb56a44cba69123ee8bad</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a46ac002f670fe64bc68dcac902585482</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a33297f85e39ae607f19a6cc6010109a7</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>aa26377f9df575c8f8aec2e89892ba2c3</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a9f4713081d8019982c2d32b289028f9b</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a4cec6a00edccd42396e5a01fc256ddff</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>af6c97be07ab6ad0707eb3f4560b33438</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a0a2780f431dcdebfbe1c7e8caca412fd</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a7601b8a704fecb1f848b12ccf6eb190b</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a6379d00b14e5b257a19773e76f45163a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDiagram</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a4b6e08a286e936da9f50c40b320ca6f6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSubDiagram</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>add060d40bf336aeddd867a14c88cf7c8</anchor>
      <arglist>(const SbName &amp;rootname, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTable</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a2ad93cb4c60b167c2ac58c6f8ec601fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addWriteReference</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a87a63c4f45dd2a46b9af1b7c76682a06</anchor>
      <arglist>(SoOutput *out, SbBool isfromfield=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>forceChildDrivenWriteRefs</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>af619ae19764e72989fc7c3382e27dc01</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoNodekitCatalog *</type>
      <name>getClassNodekitCatalog</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a022c621ef5ba06480cdbc7b58086bb30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSearchingChildren</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a8a5747aebe003b3776849165d485ceec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSearchingChildren</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ac713693906550abdc31e5013853e8f9f</anchor>
      <arglist>(const SbBool newval)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoAppearanceKit.html</anchorfile>
      <anchor>a33ee7681c99c0e66c7d846158f6c2054</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAppearanceKit</name>
      <anchorfile>classSoAppearanceKit.html</anchorfile>
      <anchor>aa60b9412c5e5fb507bc4dd614125dda9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBaseKit</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a2fdc22950499677d862dde300f7348c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>addToCopyDict</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a457b355a188c8c1773c9f95586e5d2d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>af01f71c1044cf4f7cd7a3750702889cd</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoGroup *</type>
      <name>getContainerNode</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a6523a1f5133a44151a5c85a488fd6da2</anchor>
      <arglist>(const SbName &amp;listname, SbBool makeifneeded=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getAnyPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a58abf39790879ae7dd38c70c43081455</anchor>
      <arglist>(const SbName &amp;partname, SbBool makeifneeded, SbBool leafcheck=FALSE, SbBool publiccheck=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNodeKitPath *</type>
      <name>createPathToAnyPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>aceea85bcbbce8b9041ef7e69e116736c</anchor>
      <arglist>(const SbName &amp;partname, SbBool makeifneeded, SbBool leafcheck=FALSE, SbBool publiccheck=FALSE, const SoPath *pathtoextend=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setAnyPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>af84407cec5591140bab6b16ceae7c76e</anchor>
      <arglist>(const SbName &amp;partname, SoNode *from, SbBool anypart=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createNodekitPartsList</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a4291b8c74c2922317d35e83b8fad56c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createFieldList</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a666d821feed9939f9cc00faef6ad854a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createDefaultParts</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a4125f12156cad5257100bc582f08604d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SoNodekitParts *</type>
      <name>getNodekitPartsList</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>abd6bd994e3319463a4cf7e7fc6af0091</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbList&lt; SoSFNode * &gt; &amp;</type>
      <name>getCatalogInstances</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a0b7c058487261a23998999eadfc05fda</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>catalogError</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a5f63886df8a0cb1072eebdc775adee98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ad0dfa76f0a788985303733bbcc40f41b</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ad102080de639b4e27df578660305cf4d</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a7760408922615010fea9979e5bc2ef00</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>countMyFields</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>abdbff25ca69acf6c96da402a8245f44a</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPart</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a803697aab11a8b4ced0d51d6eaa20882</anchor>
      <arglist>(const int partNum, SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoNodekitCatalog **</type>
      <name>getClassNodekitCatalogPtr</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a98eba60b232f47d280ea53c1aedc7d2f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ae4ab33e30abfa604966d85aa9be58fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>connectionsSetUp</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a318dfc1790c5762ea18979af0ea43e8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoArray</name>
    <filename>classSoArray.html</filename>
    <base>SoGroup</base>
    <member kind="enumeration">
      <type></type>
      <name>Origin</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>acdc932cbda633b70e4204b2c375e88e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>aca8fd6dbac653d1dab16e2f3fd17cd04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoArray</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a7b5b19902e1608e5ae0d4e0c316ff53b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a3f1ea72bd413dd99b3a1a098dda034fa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a50540c8e3a3a5b5be3ac912ea2cdbc1f</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>aa61d05d06738bbb23731bf142de990be</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>ad89401e284d38c6f420156ef9ed36058</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a818571654048a878fe8ab8c47235a7b3</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a089a7ce14fd5520045cdb7f09ab142f8</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a0f247778200f239aaf14672dc5bb2ec5</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a27043b61deecca1ab00d7e74b6ae24f7</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>ada3660b662f2742c4820b776dc5e89ae</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a6733adb6f1458ea049b180420b793ae3</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a58ddb72bd94d39fcc36cd426e2ee7aa7</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>origin</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>aed1969dc01b91311a250b6d81c7803e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>numElements1</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>aace726981980dae1ef63db4dab741332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>numElements2</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a6e3d902db8a5e82c46b1b1519fced98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>numElements3</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a4333cf0af1c029f90f09ad10adec1e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>separation1</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a88174cbcd5f8b5aa814e0ded07b7fd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>separation2</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a7336e5f41c2f204be13a9ff9feabde8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>separation3</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a4077b7549292861935bb568fbe61df43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>ab2392814423781627264fe1207f70fa9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoArray</name>
      <anchorfile>classSoArray.html</anchorfile>
      <anchor>a70f44e6acafd73e4d9313c5da8194d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a3c6b5609d4c6e5ec4ff5fe5797e15fed</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAsciiText</name>
    <filename>classSoAsciiText.html</filename>
    <base>SoShape</base>
    <member kind="enumeration">
      <type></type>
      <name>Justification</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a1e1f759dd2b359aa0bd87d26e79a3b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a1e1f759dd2b359aa0bd87d26e79a3b56a93e6a2224d1a4cc937e3b1e9d767656f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a1e1f759dd2b359aa0bd87d26e79a3b56a9144235c28d36468b935cf443e491f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CENTER</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a1e1f759dd2b359aa0bd87d26e79a3b56af246d2695e0a7ce61fc77e888a46ea39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TriangleShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a997e88ea175786836687c5f2e99aebc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a495ec70c2e4085c9ffe5b43d68a7fca9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoAsciiText</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a2c599144d2e23922e86c97618a3e1380</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a77e0052bfb8b272e18544f3049ec5d3d</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a4110cfb8b219662d4d6eeebc5a7460bb</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a2dcecc96ec05d4e1f534edb668532695</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a364f51dbdd81c7e432afb9a94e2d12f5</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>af24558c23bc709b2a28bb2931d91a94a</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>ac894fd8fd34d1ddf41e5d65738dd1d6e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function">
      <type>const SoBoundingBoxCache *</type>
      <name>getBoundingBoxCache</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a652f5ff1da23ffd399e604a56c7d1b6c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getScreenSize</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aef78da6f6a367067cd80b96ddbb7c193</anchor>
      <arglist>(SoState *const state, const SbBox3f &amp;boundingbox, SbVec2s &amp;rectsize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDecimatedComplexity</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aa44ae544a11257933115c73243b7fe6e</anchor>
      <arglist>(SoState *state, float complexity)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>string</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a39b13f6d7cf678cb2b362c0150ea1161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>spacing</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a75f0c5fb74d94a478e2862c1a9ca5a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>justification</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a65d9c0914d0e6873df20e305daf2791a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>width</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a57afac053033f78fc5e129ea497d67f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a9ff48b7ed9d9fa022a592ec05dd38750</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoAsciiText</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a1012506235aacfcd44742bc392151b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a032afb99a96d7a09f42984bdb7a94f3f</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a5946a656ae3ce21387f61c8d20de4695</anchor>
      <arglist>(SoAction *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createTriangleDetail</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a54d71fd1dd17941fdfc3f2cebfdaf3b5</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3, SoPickedPoint *pp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoAsciiText.html</anchorfile>
      <anchor>a73635e735ace0c83a8d6cc2322248154</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a2e0c814c0033fd77b4214bd4a5d6126d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a813e5f88f7ae3fc672e5c1d28b5738dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float</type>
      <name>getComplexityValue</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aee602594427f297930af998787853be1</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGLRender</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a965388c62914e3dbc62122a2b897bd2c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beginSolidShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a5b470083dbf7d24a40027f473236c199</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endSolidShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a200c7b885d33d9dd8dfcba0a0dd8b029</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GLRenderBoundingBox</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>ab1cf8b2706e282ec22983c0f30d392eb</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>shouldPrimitiveCount</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aadb029a1f8ba021db9438db79ace8b62</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>shouldRayPick</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>ac0d7e0481558d69bbbf104a9df55b8a6</anchor>
      <arglist>(SoRayPickAction *const action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeObjectSpaceRay</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a413c3ad407a64c76ee88095daa29f353</anchor>
      <arglist>(SoRayPickAction *const action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeObjectSpaceRay</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a28f3a842938cb18d1b8cb173765e7387</anchor>
      <arglist>(SoRayPickAction *const action, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createLineSegmentDetail</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a8e4d78ff576a82d6aa09b9e13d49e08f</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, SoPickedPoint *pp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createPointDetail</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a1cd96e88309e6b7e8443d16e159d31f7</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v, SoPickedPoint *pp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeTriangleCallbacks</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a35d5b408cab8a05de63d183b180e7fc0</anchor>
      <arglist>(SoAction *const action, const SoPrimitiveVertex *const v1, const SoPrimitiveVertex *const v2, const SoPrimitiveVertex *const v3)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeLineSegmentCallbacks</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a1fd152ec576882405fe393f70a0227ad</anchor>
      <arglist>(SoAction *const action, const SoPrimitiveVertex *const v1, const SoPrimitiveVertex *const v2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokePointCallbacks</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a19965c48b407c106cb22525fb2a30c08</anchor>
      <arglist>(SoAction *const action, const SoPrimitiveVertex *const v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beginShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a29bf3cc5dc893fc6d5d7885a21c82413</anchor>
      <arglist>(SoAction *const action, const TriangleShape shapetype, SoDetail *const detail=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>shapeVertex</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a1f6330ca029019e4dc80ef0b892c67f3</anchor>
      <arglist>(const SoPrimitiveVertex *const v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endShape</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a0b29b0370b95448cbbeb06c4ce2fa889</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateVertex</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a6a6c2103f025926c81550bce6d7689a5</anchor>
      <arglist>(SoPrimitiveVertex *const pv, const SbVec3f &amp;point, const SbBool useTexFunc, const SoMultiTextureCoordinateElement *const tce, const float s, const float t, const SbVec3f &amp;normal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateVertex</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aca7c9bdc209a068cbbc9ce2f70bdec87</anchor>
      <arglist>(SoPrimitiveVertex *const pv, const SbVec3f &amp;point, const SbBool useTexFunc, const SoMultiTextureCoordinateElement *const tce, const float s, const float t, const float r, const SbVec3f &amp;normal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>startVertexArray</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>ae6960f1e9dfc812eb88d5109ea55b935</anchor>
      <arglist>(SoGLRenderAction *action, const SoCoordinateElement *coords, const SbVec3f *pervertexnormals, const SbBool texpervertex, const SbBool colorpervertex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishVertexArray</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a25bfbc335977c789643a22abd64982e7</anchor>
      <arglist>(SoGLRenderAction *action, const SbBool vbo, const SbBool normpervertex, const SbBool texpervertex, const SbBool colorpervertex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAudioDevice</name>
    <filename>classSoAudioDevice.html</filename>
    <member kind="function">
      <type>SbBool</type>
      <name>init</name>
      <anchorfile>classSoAudioDevice.html</anchorfile>
      <anchor>a45a8be37994dda2c4229d2b1a5cd7ac6</anchor>
      <arglist>(const SbString &amp;devicetype, const SbString &amp;devicename)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>enable</name>
      <anchorfile>classSoAudioDevice.html</anchorfile>
      <anchor>a0309d5f5df046decf3f5d4d6f340225a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classSoAudioDevice.html</anchorfile>
      <anchor>aafb8608616f0832f8704755a94b93c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isEnabled</name>
      <anchorfile>classSoAudioDevice.html</anchorfile>
      <anchor>a41606af51e505f617a07b7dcf2f357a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>haveSound</name>
      <anchorfile>classSoAudioDevice.html</anchorfile>
      <anchor>a57c79f296ba85c130375e05720833dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoAudioDevice *</type>
      <name>instance</name>
      <anchorfile>classSoAudioDevice.html</anchorfile>
      <anchor>a0bfd99bcdbf38a42bb6d8f638f052b27</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAudioRenderAction</name>
    <filename>classSoAudioRenderAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoAudioRenderAction.html</anchorfile>
      <anchor>a8fd9cf93f3c998d6c98795a61501737b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoAudioRenderAction.html</anchorfile>
      <anchor>a41696bf9c222a3ec3835f2023b954fbc</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoAudioRenderAction.html</anchorfile>
      <anchor>a2ee7798c45ca224841a6514b3785657d</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoAudioRenderAction.html</anchorfile>
      <anchor>a142322b30e51c138cb86b01199bf0ffe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoAudioRenderAction.html</anchorfile>
      <anchor>a5e71df0b308b84614713774a261aafd1</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoAuditorList</name>
    <filename>classSoAuditorList.html</filename>
    <base protection="private">SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoAuditorList</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>a6f992c93f093705896839da9dcec97f1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoAuditorList</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>ad1393662d564c52e779a90d227b5d8c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>a3f9378c99629764bde0a6770d193d5d4</anchor>
      <arglist>(void *const auditor, const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>a703cd04bd3acecab96a7d21342f0e6c7</anchor>
      <arglist>(const int index, void *const auditor, const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getObject</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>ad51c760da2feb9032d23deee9289526e</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoNotRec::Type</type>
      <name>getType</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>ac6d34218032e813f79cf457e2bf5dd58</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>a8e34166342dcd9cca4fc715b85954898</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>ae5685a3ed1e4b0facf7a8181cbce02b1</anchor>
      <arglist>(void *const auditor, const SoNotRec::Type type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>aed76eab222da67d308b2fb012dda1517</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>a1c49ce1ecbbac680df0dc71f34fc96b1</anchor>
      <arglist>(void *const auditor, const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classSoAuditorList.html</anchorfile>
      <anchor>a1380a2cc3f2e8c73fd6c0dee02bd43fa</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBase</name>
    <filename>classSoBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a873b521c1386368d4d63ff893856590a</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startNotify</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ad8b4821e5eb780f9098d4b1a866e6a63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a9f7fb26481bfb35d5821acfef0fc10b5</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addWriteReference</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>a4dce35007a2d2f2c01e9e7200ca17327</anchor>
      <arglist>(SoOutput *out, SbBool isfromfield=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoBase.html</anchorfile>
      <anchor>ab4953769f9d9dd210153228a2f096a67</anchor>
      <arglist>(SoInput *input, unsigned short flags)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBaseColor</name>
    <filename>classSoBaseColor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>ad80fa1bc4c651ef768e43c68c22ecec0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBaseColor</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>a9b8a2851a627e5d0f13c2bfa01b4e946</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>af22bccd6d0e6a2f767a2dae0568a14cf</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>a477ad8cefdafb691656898a65baf8834</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>a0b9ca17bd0924ad8760c89e61fb0de9a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>rgb</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>a72782aa59618de4c0ed7cea219036030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>a821fd46ddf63be25ecd42aae7fbcb49f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBaseColor</name>
      <anchorfile>classSoBaseColor.html</anchorfile>
      <anchor>a34e74578cb1987f3fe0e25e20724e763</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBaseKit</name>
    <filename>classSoBaseKit.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>ae070d630e20daab3372d50b3cfb0157e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a550dafdf087c143cd3d2c576dba2bde0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBaseKit.html</anchorfile>
      <anchor>a7197aa641e06306d154ed842c8525173</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBaseList</name>
    <filename>classSoBaseList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoBaseList</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a3486d0f2af4a5d21b14cad5979ebd4dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBaseList</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>af1a9c4a0b40a2bd262b20024297647e1</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBaseList</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a667665378cab8a89ff6cd652153bea2b</anchor>
      <arglist>(const SoBaseList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoBaseList</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>ae8573b49d121c4ccf9c0a9ce4a455ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>ae6ffbeb73abd30d7a93097b603d89492</anchor>
      <arglist>(SoBase *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>ab47bf977ff1edcd838e349dac115e0ce</anchor>
      <arglist>(SoBase *ptr, const int addbefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a3b39dc3c7de744e4f21f62070f26ad32</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a292f89ba8e91c0f40eac4425334273db</anchor>
      <arglist>(SoBase *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>aaa8544a32493ea5d51779b91d580a39c</anchor>
      <arglist>(const int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a160af6eac3036a7937e126c00bfafa2e</anchor>
      <arglist>(const SoBaseList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>SoBaseList &amp;</type>
      <name>operator=</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>aa065a85a57c872e79cbb69d6e9252a7b</anchor>
      <arglist>(const SoBaseList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>SoBase *</type>
      <name>operator[]</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>aceb4ba527a5c7cda7967dd480aa6ae91</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a3acf108ae68ca1e7695ed99503d4a086</anchor>
      <arglist>(const int i, SoBase *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReferences</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a10a75e460fe584d961e3003793825c7f</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isReferencing</name>
      <anchorfile>classSoBaseList.html</anchorfile>
      <anchor>a9cc6538833e9e519569cdb9ecc09a6ef</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBBoxModelMatrixElement</name>
    <filename>classSoBBoxModelMatrixElement.html</filename>
    <base>SoModelMatrixElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a15eaea67077eed69f48ed81720588a52</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a4adcfd22e2132c6dd8cbd3b8680c44ed</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ad6870e1218a12bea88feef88c000119b</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>aa03c96ef8049aa22bbefdc1683fca18f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a0d3373135b35d3cef7ecf39f97c268b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reset</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a289630f7f5444278cbcf19e6ac6da5bd</anchor>
      <arglist>(SoState *const state, SoNode *const node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pushMatrix</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a36dad6f78ca7ae0ee8e62967456a7077</anchor>
      <arglist>(SoState *const state, SbMatrix &amp;matrix, SbMatrix &amp;localmatrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>popMatrix</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a4cf983b73f10499c278cc9778f1be484</anchor>
      <arglist>(SoState *const state, const SbMatrix &amp;matrix, const SbMatrix &amp;localmatrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a50d693a5f72396e8589bad3f8d841995</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a49d5dde7895ca8292d698183dd369b4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeIdentity</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a2cc625ee1fef2e98d004e6555180621b</anchor>
      <arglist>(SoState *const state, SoNode *const node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a2ef3e342f32057026cb0b4fbe4555a97</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCullMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a38e45c2cc47c23951f66ca2713ae76b0</anchor>
      <arglist>(SoState *state, SoNode *node, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mult</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ad8d397e4c84b3850c360189d652848bd</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateBy</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a31c41c27be76256e386a8726bccead53</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rotateBy</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a73b442f437c7fcc3ed70380216bc0f9d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbRotation &amp;rotation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scaleBy</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ae502b32733b77312ac677b37885f10c4</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>pushMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a19feac92a02478944e4a57949d74d7cc</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>popMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a750eaca9a6c7f8b178b916660c4ee73b</anchor>
      <arglist>(SoState *const state, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>getCombinedCullMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a52049c47d52229e86dd02bb59691e075</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>get</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a7477ff80cb3894b610d2d1c984b766fc</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>get</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a493f1e0912766fd0e5de828e70d575f2</anchor>
      <arglist>(SoState *const state, SbBool &amp;isIdentity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBBoxModelMatrixElement</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a6886a6a2bdc272510da372209d75893f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeEltIdentity</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a5a3b2a767924bcf2554f36f36d4dde76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>af1c4c0a865546839e5025d835a36f8ce</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multElt</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a1ccef4dcfefb3e9f85d4fdd77c2321ba</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>translateEltBy</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a5f36ee5aa3f959a9890f2d142c9c9cb5</anchor>
      <arglist>(const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rotateEltBy</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a12a1db6ebeae100e2f48cc7552c8a5f7</anchor>
      <arglist>(const SbRotation &amp;translation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleEltBy</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>ad496b68f01274d470c2f5532374a1e6f</anchor>
      <arglist>(const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbMatrix</type>
      <name>pushMatrixElt</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>ae353c09d60721257b873832eeb61d004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>popMatrixElt</name>
      <anchorfile>classSoBBoxModelMatrixElement.html</anchorfile>
      <anchor>a35ddde7c21415a5fb0021032a50806dd</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoModelMatrixElement</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ad47f555d0e5c27ae3a3c3d17f34105cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>modelMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ac9878e25b31bb12dda820a087fd5bb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>cullMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a5b52ccf0eb62a7167eb182b4c8250ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>combinedMatrix</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a3c84684bb726967bfbdd18b80cb6c414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>flags</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>aa9a346dcf9615bfb89bf6a978acc5e8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBlinker</name>
    <filename>classSoBlinker.html</filename>
    <base>SoSwitch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>ae536b076c9ce9bc274b13e322fe30af5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBlinker</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>ac682f4af4b7ef19b2336a208b2302d59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>a7505fbf740f65a3f76d80cdbf675aa9a</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>a98b65184d01411e6f4971f1f1bbae919</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSwitch</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>ac19a2ab1b2ebb6fa536de922e92b9d6c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSwitch</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>affb4f0a9960cc79c27e4f4bda14b37a0</anchor>
      <arglist>(int numchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a3f0061b3a32cb55405ec28f39ba094ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a91514c3299981f6138c6a9972e34ff4c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a67630373f315058d8000b1986ecac8ab</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a68274138ca68093e47dafdf845c7efc6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>aeeefee4bb66d1c809d5d831409ae087d</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>aa60dbaffc7675e1e7c1281490db7f982</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a11b63f0481af4a33df554d1c0a0fe233</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a1f54d63b548492bea3e8354aeec6f8d8</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a76c5383ea5e8755929bde677a8e3b01a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a0d064899e143e24586b7a0f5cef4702b</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>a09afe0397af89eb72ba8056df9b48396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>ade55994146d014b6f957d31b40f21663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>whichChild</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a28c5635defb50ef668d9b9a806ec1a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>ae29b97867b26773058c76e539326aace</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBlinker</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>aa24a0ac4542971c354447597040e640f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoBlinker.html</anchorfile>
      <anchor>ab8a4502b4479244ab975cd213017b524</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSwitch</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a038f47cb116132919bb1d785c5fa8b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traverseChildren</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a950b9981ab3509619bc69f1415323d99</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBoolOperation</name>
    <filename>classSoBoolOperation.html</filename>
    <base>SoEngine</base>
    <member kind="enumeration">
      <type></type>
      <name>Operation</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLEAR</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a582e5adf86d315c82c3f5762a29c8249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SET</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749ab13cf22c3851d398672653cb3e1dca8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a1addd7ed358bd31cc77b38b4c3007286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_A</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a89f42665a1644553d2b863efb57d9881</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a7c06cd121526ebeb2f440e3b93646e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a58c0b0a29d729c1a1184540cc2d5c378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A_OR_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a0c90e33a5638d3b7dd41a6658593abbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_A_OR_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749af90a69b19067c8fdebc0085eff5d8cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A_OR_NOT_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a4c9fd23af02f8a714006e3994a505976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_A_OR_NOT_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a841a7ded81102a70a6415f688e280e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A_AND_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a339d1855260c12b0f6d01cddf49af74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_A_AND_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749ab7e4bfb2ba8cc68722c961b914394b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A_AND_NOT_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a5736f204ee0b7e724263cf98b9915441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_A_AND_NOT_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a7a7206a8d8e6e0c8d8893d722d6a3837</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A_EQUALS_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a763b56a7109154cb07fc884b365b9bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A_NOT_EQUALS_B</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a670d9a9ba8cbd9a70b15095993705749a4db943f963db7ce734fda495c9f7f574</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a77191bac4d0f75b586c9e62674af4814</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a9120883da508d146f987b671f4b5884d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a02a08f4792dea2c36572bdcdacd2dd8a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBoolOperation</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a2d63071a747ca5c813eaf95dfa5a36cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateWrapper</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a2af42fdbb183c7cf0f531e3cf268403f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOutputs</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a226168cb400109f7e5c36a003252534c</anchor>
      <arglist>(SoEngineOutputList &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngineOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a69d8d8a034385e261644082fb89a9675</anchor>
      <arglist>(const SbName &amp;outputname) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getOutputName</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>af2f71d234e0f79bd5618a9ed3ebaae9a</anchor>
      <arglist>(const SoEngineOutput *output, SbName &amp;outputname) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNotifying</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a38fc62b2351f0a432b8fd8fdda36d69a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a109be36b28a7523d5b3942bb6c0f4bf9</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function">
      <type>SoEngine *</type>
      <name>copy</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a83703b45c249f08aacbbab15f92b63b3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoFieldContainer *</type>
      <name>copyThroughConnection</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a5ffb2c0e2971ecc4496875b723a8ba5d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>shouldCopy</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a4d2b36cd1fed10393c6efe5fe3d9e5b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInstance</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a1bbe7bf1a626ca76a3f7b09c6a0e4df8</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>af74b2eb05fc0ee8493c46437717e8261</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>aef6508694331d19b7dd81bb7e7b301a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoEngine *</type>
      <name>getByName</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>af08d59d0da056f58fd5cfe67c2c3391f</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getByName</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>ab4c77b10bd95e1e9fe5a82ba968f534d</anchor>
      <arglist>(const SbName &amp;name, SoEngineList &amp;el)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFBool</type>
      <name>a</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a50798f4ca280a3be7e252903d5bfa373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFBool</type>
      <name>b</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>aace01f5778ec26d120e62a2c62676a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFEnum</type>
      <name>operation</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>afc11ea7282fa4026ee17d83230cf90e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>output</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a1af0efc4e6e45ccba7b232f0ef89f7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>inverse</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a39b853fba79fcb2fdd87973d69bd4ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBoolOperation</name>
      <anchorfile>classSoBoolOperation.html</anchorfile>
      <anchor>a1ca2059bbb608da2e939cf88d29ede6e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoEngine</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a1ba077f0116dceeef172a5c3984887cd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEngine</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a3d404af815afb6343436bcef39a1fa7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a946da90b09c1a79aefc9b2ca134fb3f3</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>af261c3acd47d3cfab447b1a0b19b583d</anchor>
      <arglist>(SoField *which)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeOutputTypes</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a5e9b96d9a944eb8f819dbe3331274c86</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoFieldData **</type>
      <name>getInputDataPtr</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>a05496135cd39c80a3a1bd214f37faa05</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoEngineOutputData **</type>
      <name>getOutputDataPtr</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>aebc8dc3627c56137fd9d6d27fd6a7055</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBoundingBoxCache</name>
    <filename>classSoBoundingBoxCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoBoundingBoxCache</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>a65b0d579a164758285cd0b5da54819f5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBoundingBoxCache</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>af47bbd4e17ed9c84c6fc9f27c7fec11f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>ab999a86b9e2140e1bdd6a94aded4c239</anchor>
      <arglist>(const SbXfBox3f &amp;boundingbox, SbBool centerset, const SbVec3f &amp;centerpoint)</arglist>
    </member>
    <member kind="function">
      <type>const SbXfBox3f &amp;</type>
      <name>getBox</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>a2e5df0a330b2d2688b0ceab23519feeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbBox3f &amp;</type>
      <name>getProjectedBox</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>a8b6221f47bad7cb2631868af49218bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isCenterSet</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>a3fdeccdd6ef163ecf69f7493eb54ba76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getCenter</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>afb7d06facbd99408692cc2791b596bce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasLinesOrPoints</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>ad7c1903891a3234e6faae5d6e85f926c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCache</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a545dadd5bed78d7c9ab756bb1c430b3f</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a6d89e9e44ebb048684bb19af60e24215</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unref</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a1d52d8862edbda098a42a2196215b0a2</anchor>
      <arglist>(SoState *state=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>acbee322cd97c3779a44631d481311212</anchor>
      <arglist>(const SoElement *const elem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCacheDependency</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a9e6597415be84754904ddc928668ed2b</anchor>
      <arglist>(const SoState *state, SoCache *cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isValid</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a9a6746b710871f5acac8f406fadd5e00</anchor>
      <arglist>(const SoState *state) const </arglist>
    </member>
    <member kind="function">
      <type>const SoElement *</type>
      <name>getInvalidElement</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a8668d9413ff41b5df9c3c1085271c723</anchor>
      <arglist>(const SoState *const state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a6c8892faf5317b9ad1fb19e9acabd504</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHasLinesOrPoints</name>
      <anchorfile>classSoBoundingBoxCache.html</anchorfile>
      <anchor>a268c9a0fd7394043a612dac55c67d401</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>acef65de016e260bcd57ef308b3552735</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCache</name>
      <anchorfile>classSoCache.html</anchorfile>
      <anchor>a986f9bab8a17b466a36c22eaabd17259</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBoxHighlightRenderAction</name>
    <filename>classSoBoxHighlightRenderAction.html</filename>
    <base>SoGLRenderAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>ad44a737711a0567e39cb78a6433639d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBoxHighlightRenderAction</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a43b51164ffccc8f0d68af915d4eff43f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBoxHighlightRenderAction</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>aa55d617673af1bb7fbad8a158b345361</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBoxHighlightRenderAction</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a0a84e1810b7dfc089c2f16862bf895e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a8c98c5bdcf5f324d857bc29b19de7766</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a20fd76cb746235d52fc47a0219b87100</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a6e860c6b846b518c053cbc2ee6a601c6</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>acd568441f316b3752ee53ab317f1e77a</anchor>
      <arglist>(const SbBool visible)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isVisible</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>aeed036eef850528c5aca3d261695b9ec</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>aaa369def0462c4c4d509a339817780ea</anchor>
      <arglist>(const SbColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>getColor</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>ae3ec6afa20d986322987c360ea8fa66c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinePattern</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a0f043a47508cef2b985ec06beb0a48b8</anchor>
      <arglist>(unsigned short pattern)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getLinePattern</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a2b62e4331435d90724d55e8565280776</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineWidth</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a0113077fd54eab84dff57aee91623b76</anchor>
      <arglist>(const float width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLineWidth</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a88a45152432bc1264d84f6cc14c1cc94</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGLRenderAction</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a172532085adc5c2d5bc5dcc11b51577b</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLRenderAction</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>afc88a624ab38cd5e0e2d37f462906e0e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>adc75a9c2226604ef9cb8deaadcdafe81</anchor>
      <arglist>(const SbViewportRegion &amp;newregion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a0e11c2e85f92794d5c44c6a85573ade3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateArea</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>afacefd8a75c0e97bcfb5e0ad0b86e800</anchor>
      <arglist>(const SbVec2f &amp;origin, const SbVec2f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUpdateArea</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a581f28c513031b866c3e92ddd87a9b3d</anchor>
      <arglist>(SbVec2f &amp;origin, SbVec2f &amp;size) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbortCallback</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>abaa6b6775b84984ca68a35484d072525</anchor>
      <arglist>(SoGLRenderAbortCB *const func, void *const userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAbortCallback</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>aa8a697ab67c52d374018957297b3945d</anchor>
      <arglist>(SoGLRenderAbortCB *&amp;func_out, void *&amp;userdata_out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparencyType</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a566bc8a65b02c8220f7e2472c25bc233</anchor>
      <arglist>(const TransparencyType type)</arglist>
    </member>
    <member kind="function">
      <type>TransparencyType</type>
      <name>getTransparencyType</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>affd7c9e198d9b7d2478b30c68c2b8ef4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparentDelayedObjectRenderType</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a50c4aeaf0d9a74f6759dfaa788f302da</anchor>
      <arglist>(TransparentDelayedObjectRenderType type)</arglist>
    </member>
    <member kind="function">
      <type>TransparentDelayedObjectRenderType</type>
      <name>getTransparentDelayedObjectRenderType</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a1a0263b278da003e6105f4031351a68b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmoothing</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a4da74726ed6caf63cc94aec9a5dd70eb</anchor>
      <arglist>(const SbBool smooth)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isSmoothing</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af8ef534cc93cd3d3dc6e15834e64cb85</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPasses</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>abaef725b835c9d34db262f85ce92c860</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPasses</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a9191b685cc82431618408805ab5bde2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassUpdate</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a082c3841d340835436198e494b46f102</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPassUpdate</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a6fe1ecca5e793589055b3ced5c6aa297</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassCallback</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a041614dfb0ee1edcb1f8af1a584eb1de</anchor>
      <arglist>(SoGLRenderPassCB *const func, void *const userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheContext</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af6f24d1fc081580be4c02ad375635f99</anchor>
      <arglist>(const uint32_t context)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getCacheContext</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a6e7919ad5b1d060574366220a414b9e5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDelayedPath</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a0088b567ca6ec701ecab30a116426e68</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isRenderingDelayedPaths</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab02f91427c8194851aed4f677e68c44a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>handleTransparency</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ad0b9db9eacd7c8bea499c3ebe68a27ca</anchor>
      <arglist>(SbBool istransparent=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurPass</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a0b07a3b0378f502ec2da28460ad5cf00</anchor>
      <arglist>(const int passnum, const int numpasses)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurPass</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>afa8670b872d4eb17c2c32dbb5e4fe15a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>abortNow</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a47e743b1b44badaa40f163e8bcbccd35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderingIsRemote</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ad2965b6bf4205683149f972bc8091537</anchor>
      <arglist>(SbBool isremote)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getRenderingIsRemote</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ae66a5eb37c12491f6c1bc3773dbb8d4d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidateState</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a58a967ade8581eaf4f4b1a82c7565e47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPreRenderCallback</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a52ceaef1d177334d3ba0302d491e9e7d</anchor>
      <arglist>(SoGLPreRenderCB *func, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePreRenderCallback</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a68c075ecbf3dc42e3bb4333f54d57a26</anchor>
      <arglist>(SoGLPreRenderCB *func, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSortedLayersNumPasses</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a6114e3e6126cb0ed9eb66b43526960b7</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSortedLayersNumPasses</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a7ba148eb97c57efea5c9d65e90bcba99</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSortedObjectOrderStrategy</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab12ce52b2037e12dc42ca3cab295af4a</anchor>
      <arglist>(const SortedObjectOrderStrategy strategy, SoGLSortedObjectOrderCB *cb=NULL, void *closure=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelayedObjDepthWrite</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>aedc982d84f8bb5cd6cca4705ab53c6cb</anchor>
      <arglist>(SbBool write)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getDelayedObjDepthWrite</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a7054561b878107b23e8bf1d520a6756e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isRenderingTranspPaths</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a1b1f112bcba63ca8744a210f7f13ec53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isRenderingTranspBackfaces</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a55c36357d6c439f4901e34710a638ee2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a94998a6d24637404042e4962c25bec95</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a01aa20819eef7627646e404b57f85582</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a9dafa39fdca32aa9c93f115fa470c6c8</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ac1849c3c06b55087e5eab6be6db5c10a</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a5959321654d95ff5b355322955b3f94f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a5abd36c42d1bc03f99410bc7e75b463f</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endTraversal</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a8f60e31488b81431d9909d390b18b649</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>hlVisible</name>
      <anchorfile>classSoBoxHighlightRenderAction.html</anchorfile>
      <anchor>a3dab10ba7c71802379899c6dd6b8ef0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransparencyType</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCREEN_DOOR</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca85b730dde06333632ba11faaa4ea6065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADD</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860caef8642833b3f74d1891f981d299fe402</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DELAYED_ADD</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca50db8d25f88f0e2b9a5cbcb3bfac652b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SORTED_OBJECT_ADD</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca72a317c8d7011d1685533cbf92ad097f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BLEND</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca097026a11757fcb96ddb52e51850f244</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DELAYED_BLEND</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860cadbc8dd4b5600709df598ab300699bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SORTED_OBJECT_BLEND</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca46d3d452475893e784b18b21a2f587f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SORTED_OBJECT_SORTED_TRIANGLE_ADD</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860cac636aa256a6893c78796376f482210a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SORTED_OBJECT_SORTED_TRIANGLE_BLEND</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca85eeb15a9ae8ff2e08e19004f54103db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca99990d4157e3622b968773e9892b87c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SORTED_LAYERS_BLEND</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ab318debd5fb749f9fcc16487522b860ca10f40549a0473dbc8692c998b41feef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransparentDelayedObjectRenderType</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>aca1a078631b10e969ddcb4a156b93863</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ONE_PASS</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>aca1a078631b10e969ddcb4a156b93863a9c36bc5510e0673aac2d2cd8105b824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONSOLID_SEPARATE_BACKFACE_PASS</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>aca1a078631b10e969ddcb4a156b93863aee00f0cc1104f13934bc9fc793ea63cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AbortCode</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a016763ba5e313424f2450aa41693e8f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONTINUE</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a016763ba5e313424f2450aa41693e8f6ac45fb1cc909525052e4b7b5e4e534e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ABORT</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a016763ba5e313424f2450aa41693e8f6afc27fe42f07f195a259be7c8e4613b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRUNE</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a016763ba5e313424f2450aa41693e8f6a4817d1d831b24cf068da57e4c9214917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DELAY</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a016763ba5e313424f2450aa41693e8f6abbd4e7ce1b7626971c354527309f9f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SortedObjectOrderStrategy</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af673acee2953f6f6701e38c21e2f9ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BBOX_CENTER</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af673acee2953f6f6701e38c21e2f9ee0afde6c04bf7846497133f1a26fa4e4d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BBOX_CLOSEST_CORNER</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af673acee2953f6f6701e38c21e2f9ee0a21a0ba46b74cac56cfae3ccabc0c0c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BBOX_FARTHEST_CORNER</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af673acee2953f6f6701e38c21e2f9ee0a72d3e8ea4615b927a3391b4b8d339d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM_CALLBACK</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>af673acee2953f6f6701e38c21e2f9ee0a9ab2d71ae6738a554f1f16d48125cc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbortCode</type>
      <name>SoGLRenderAbortCB</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>ae38cb7794e7fe3de95ebe385a1e00f04</anchor>
      <arglist>(void *userdata)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBumpMap</name>
    <filename>classSoBumpMap.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>ac7c4517f5b783c57d980b9f5659cc11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPEAT</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>ac7c4517f5b783c57d980b9f5659cc11fa37bf0078be854152a579099da00d6b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLAMP</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>ac7c4517f5b783c57d980b9f5659cc11fa07d5d1434c4d069e24820210f0d7ea83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>a29d112c550ba0d47bdca9fce2530fab5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBumpMap</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>a7cc603594f50682e382fbbd39cf7e22f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>aaaf6f373d4bb1dc95a95fc0ef601e053</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>ae1908738776ef66a68671934eca72de2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>adaa9a06912111adea2ae64564fecc775</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>aa2d9a039d55f151de92b44adef6aed8d</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>filename</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>a90c6e969bfc52a34b372e2c894bdb3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>image</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>a460193dbe316259055d284aa82870d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapS</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>a33875776f1a75f61716277dcead04e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapT</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>abb66a0d5d7be23ca6a81b33dd89066b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>ae27a1a74e760c6224252018ba5cced13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBumpMap</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>a5b38dd9da523facf13e8d7a9f33915cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>aa67d4cbc2e27109b5fc5bf13fe93f191</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoBumpMap.html</anchorfile>
      <anchor>afa642140ca8ca825bfa34cea5dd52834</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBumpMapCoordinate</name>
    <filename>classSoBumpMapCoordinate.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>abe81b3c23ca6fb2c436f53a049dcee6d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBumpMapCoordinate</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>ad06c128b19de777306b6456dc2df54a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>a3ddb991756531c6f01623596b2cb39e8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>a5be99d247606409f7fac2c493e1ce6eb</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>a24b72d0fc8cd2f2322f2a931db48f60a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>ae5d73d9ec6d668ccafe487ecf09da5d7</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>point</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>a39ff5189d691e9722a8f011782bacee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>ad88d368502e1787651e0aeacb4e760bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBumpMapCoordinate</name>
      <anchorfile>classSoBumpMapCoordinate.html</anchorfile>
      <anchor>a9f8005df016515ab8fac4c3281de0a30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBumpMapCoordinateElement</name>
    <filename>classSoBumpMapCoordinateElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>add7b6c34153ef7b7959df359da76a65f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>a592d14e489a4f6f995dd1c111c9e6a84</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>get</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>abc557eae166a96d9d75bd06577d81d46</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>ac33fd5493bb2bcb3f46c050d2bfbc516</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>ab135722666836a43f3c5b8d81fb6969d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>a89f42b05c0e2b5630a42ceb3538a74db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>acf4a5c23a36f257b0a6f09ab9024666f</anchor>
      <arglist>(SoState *state, SoNode *node, const int32_t numcoords, const SbVec2f *coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoBumpMapCoordinateElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>af2895bf773de4a999eafbd5ab172380a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBumpMapCoordinateElement</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>ac6b9d4348ebe96c0b79cf1d8ea8b3032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>numcoords</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>acd8751154cc0c66da9e069ee42e63afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SbVec2f *</type>
      <name>coords</name>
      <anchorfile>classSoBumpMapCoordinateElement.html</anchorfile>
      <anchor>ad5c80105a941dbccbfb14a9853d80f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBumpMapElement</name>
    <filename>classSoBumpMapElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>a3c203c3ae5b0d348ee04304ed34a4c8a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>abebd9d7996adf47f1220dfbd7c3231bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>a2790850d0e35493a21f416773290ec6c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>aee155ed0ff0569d1279511d32c66555b</anchor>
      <arglist>(SoState *state, SoNode *node, SoGLImage *image)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoGLImage *</type>
      <name>get</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>a1ffd7a7e4037cc81566c33b259470057</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBumpMapElement</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>a24245a1827ce87649eca3587a6840124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoBumpMapElement.html</anchorfile>
      <anchor>a4ebfa2548f3378b46b20b62bd4f239a9</anchor>
      <arglist>(SoGLImage *image)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBumpMapMatrixElement</name>
    <filename>classSoBumpMapMatrixElement.html</filename>
    <base>SoAccumulatedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>aa293b1111c3a3e5d1692fa0051a15e3c</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a057803ba1966960103cda3da624182cb</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a164a1a78f5139798c9289423c5eac79f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeIdentity</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a7db862cef59b6c71a02376325231ab1b</anchor>
      <arglist>(SoState *const state, SoNode *const node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>acf3df2266d4e39574adea21ac3e03392</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mult</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a7b6220d48fd1a73929a34df2d9f02e35</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateBy</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>ae3e9b8b99cf15bac328c624d91706133</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rotateBy</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a930a3d97def85ff42bbeb90e0f70b7f3</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbRotation &amp;rotation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scaleBy</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>af26726f0d403d2cf22af70568492dbd1</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>get</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>af4f7b9d1cede3667b4938b155db8b60f</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBumpMapMatrixElement</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>ab638b2fda49cc1c6eae1cfab8573709c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeEltIdentity</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a3b554b7c461b2290309760d29a8458d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>ab3ad70a396eb808612267e06baa323b3</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multElt</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a5ecd67021d618048bab3f7b133e2efae</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>translateEltBy</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a5f43105192d70120959997618e815995</anchor>
      <arglist>(const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rotateEltBy</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>afaecd63e866c58535ff8fbff8ddcba4d</anchor>
      <arglist>(const SbRotation &amp;rotation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleEltBy</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a6985bb7500b0f39d4f9409fe505c55ba</anchor>
      <arglist>(const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SbMatrix &amp;</type>
      <name>getElt</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a16d5a1f505fd5de233e7adb500bfa612</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>bumpMapMatrix</name>
      <anchorfile>classSoBumpMapMatrixElement.html</anchorfile>
      <anchor>a6ac358709c40e101e099f4f31636d436</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBumpMapTransform</name>
    <filename>classSoBumpMapTransform.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a6dd8ab4f265cdf233fb9aa7124b8a6ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoBumpMapTransform</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a771e729e1eb58ddc56062c81b05ade9a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a9fe9a1b39e141b8e1e0bdff919efbbfc</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a6662c5840cbe1c247885af08af184f3f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a961ed16d6fbf74c20e80eb4b7164c322</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a99c714e951829289995e3a4ea4cb5fbd</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>aabbef89b062b2dab4a780cf68c8cb33e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>translation</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>ad45a8a96e6b336aae105dc25a004cb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>rotation</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a38a5995aa1f5a0bc57fca57d892ea1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a59bff48325057f2091158509bb17b8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>center</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>add296c3848291aeec17005077b52856f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a70354346f863edeff08b37d373bedcdc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoBumpMapTransform</name>
      <anchorfile>classSoBumpMapTransform.html</anchorfile>
      <anchor>a4d79967e2bc55c6dd3eae8684fda07ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoBundle</name>
    <filename>classSoBundle.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoBundle</name>
      <anchorfile>classSoBundle.html</anchorfile>
      <anchor>ab28d88df773d84fca7c598416725ef9b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~SoBundle</name>
      <anchorfile>classSoBundle.html</anchorfile>
      <anchor>a7041a50265d70d61451ac271ebe7f291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoState *</type>
      <name>state</name>
      <anchorfile>classSoBundle.html</anchorfile>
      <anchor>af1885d6a2c51dd01d6bbb338c9cf0118</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoButtonEvent</name>
    <filename>classSoButtonEvent.html</filename>
    <base>SoEvent</base>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a3d1c79afafa1a7bcea5008ee132923b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UP</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a3d1c79afafa1a7bcea5008ee132923b3aca2b62447e336e0c5439f3ad4853fa63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DOWN</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a3d1c79afafa1a7bcea5008ee132923b3ae9d7559498d47e935b79d43759fc3dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a3d1c79afafa1a7bcea5008ee132923b3a7f05040166601a1551c7dc11d48369e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a40002d1c016bd24cae1b23fb55d5a36a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoButtonEvent</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>ac38b34ea72bf9fff5b48cd805093e801</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoButtonEvent</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>ac4f44f6cde4311ff95e5ff515415e623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a1a0ddb89d141d2944c726749e4eeac23</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a8abeb16d105a4b2535ce350cd11c349e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEvent</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>ae9ac18892cee75c2a163dbfeadcd7395</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEvent</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>ab1e0f6c4d7385d07a72550723025c25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a90af490dc5f9658009893611447dfb9f</anchor>
      <arglist>(SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a995b16f7948b24bcfac15ca1d50cd2a3</anchor>
      <arglist>(const SbTime t)</arglist>
    </member>
    <member kind="function">
      <type>SbTime</type>
      <name>getTime</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a1580fa84798542f8c43884f1affe5984</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a849416b6d6bf7f844f6ac36b2eeb9a30</anchor>
      <arglist>(const SbVec2s &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getPosition</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>ac70e545b18850b5053cccd2814ad31a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s</type>
      <name>getPosition</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a9a90056b0e35ee3b3841c793098d1348</anchor>
      <arglist>(const SbViewportRegion &amp;vpRgn) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f</type>
      <name>getNormalizedPosition</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>ac4e0475125a5c27625717020de187079</anchor>
      <arglist>(const SbViewportRegion &amp;vpRgn) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShiftDown</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>aa17052cc953fa3693e14d597d36f3793</anchor>
      <arglist>(SbBool isDown)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>wasShiftDown</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a02dd3f8f59a7f32b2052918c4138647c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCtrlDown</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a737a56e86521b7d535ee9ed536d45638</anchor>
      <arglist>(SbBool isDown)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>wasCtrlDown</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a3c95b2d28519cc1647231ba177c3d923</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAltDown</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a64089d0de8c4dd7ba544af64fb24d53d</anchor>
      <arglist>(SbBool isDown)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>wasAltDown</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a1583e93498f88c6fc92969ccc5b69d87</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a9e3ee8610f57b1c1ff9c8250a1f7c8d7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>enumToString</name>
      <anchorfile>classSoButtonEvent.html</anchorfile>
      <anchor>a7af3185c4b852bbb1a91d7476c1c3508</anchor>
      <arglist>(State enumval, SbString &amp;stringrep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a745a76593ca05c87c625b6a4c9aef5ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>aaf846d32f74e0843edf78114ec243cee</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCache</name>
    <filename>classSoCache.html</filename>
  </compound>
  <compound kind="class">
    <name>SoCacheElement</name>
    <filename>classSoCacheElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>af8cd18c33e04c16857946dfdfd5767d5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>ace78012f17d24c7e0c9e048075b64079</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a20be082ad1782056c80fbff5626200d5</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function">
      <type>SoCache *</type>
      <name>getCache</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>aaaec4bbef15ac9143591412c9dbd8e01</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a52bf764661c857b1dcdf4ebbb285a086</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>ad069b063c0fbc029190eb8e6b82b710d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoCacheElement *</type>
      <name>getNextCacheElement</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a6dcb7cbdaba1037a964b0079b049fe3e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>aa813698879092429afd9a53bb79330e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>aeed0ab875e5b0685a35f52f0e4a9e8ab</anchor>
      <arglist>(SoState *const state, SoCache *const cache)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>anyOpen</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a12076d2a83de20e3262c6ec745665143</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invalidate</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>ae5bb362708736eee685119d0601970e6</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addElement</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a109f8c7854a4c38159c5ae3aed236f8b</anchor>
      <arglist>(SoState *const state, const SoElement *const element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addCacheDependency</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a8135dd12474afadc05c5706417f81ede</anchor>
      <arglist>(SoState *const state, SoCache *const cache)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>setInvalid</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a6082e45336953d996d9f5738d908a9fd</anchor>
      <arglist>(const SbBool newvalue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoCache *</type>
      <name>getCurrentCache</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>a50d59658976f8d8a505227cb3d3b5d9c</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCacheElement</name>
      <anchorfile>classSoCacheElement.html</anchorfile>
      <anchor>ab44e537adf722def23c94a9767029776</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCacheHint</name>
    <filename>classSoCacheHint.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>ae6643d391026717ce1e9deac8c7c631a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCacheHint</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a8271e5aed2599c41abd9f5a45e677d49</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a66ea9ebe1342630dfff12d64eeca2535</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a82a9805bf7e670dcb2517fd817a96f3a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a4582500c20ef5aa1e7ba7b5a2a390f8c</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>aed5ebefcb5a17fc2d47412df597a8f57</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a31bd0bce8cc1cdc37cd0b6eb820b7a3a</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>memValue</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a541f79f8019800658ee399899d051d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>gfxValue</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a404368e5578ee9b8ff01ae211eb631b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>aa715e8dacc0b374df33575622460dc4c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCacheHint</name>
      <anchorfile>classSoCacheHint.html</anchorfile>
      <anchor>a5b27dc46ce3c31341ce11a43be7d6484</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCalculator</name>
    <filename>classSoCalculator.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a09d1a28f1bdc440b5db9f41d31008c11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a0aa0bbeb9fdcd68b67bc502241022f8b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a487a13f63137689b1b3cde71db0908cc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCalculator</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a792ba9073ca014317ada73bee9c97183</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>a</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a8334a05f1d4ad8a76233ab1227613c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>b</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>ab8dcece3f0627bc900f37455726ceb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>c</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a5320d1f469afc91138d57bd08aa8498c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>d</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>ad06a1196f4dcb1031691439cd222edc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>e</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>afdc2df292e3699506ac21beb4d34a8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>f</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>aa47315dc25780b728d6bda6819dffa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>g</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a402abec5696b8ab6098a4996d428de5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>h</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>acc6bd0bcaf1ab8c1744a0a41c0340c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>A</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a78b6958e185647f1efcf8dc37a39b461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>B</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>ac275feac67d7994c577cc056da4afc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>C</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a389621e579a69e8333b42542b14c6ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>D</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>aa4835d39b560519b4411dc82e04dd108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>E</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a28491e70e17ab85cd83c672b09c72896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>F</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a670956d1280443971d637a6d4fb0ec6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>G</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a4e10c288d19f6753905a9a6ea6e36797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>H</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a43899d76776d5b34f50f26adc60c8027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>expression</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a7cfb2b420f077abf4726ada17be26e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>oa</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>ad0b4e58a658ee51d1a1857b6ec5118a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>ob</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>ad3b448b93813d089c095b58480e1c0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>oc</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>adf922a722a33ed51f13f9ea9747e7a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>od</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>afbfa34f10b51a3a41096c1ffe74d6cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>oA</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a6b200d36871a6093f5eca0b8b81f4842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>oB</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>ac5e01d8c507dea3b037b1f81f42f6560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>oC</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a5788e010ccd9647bbdb1cde3200e8a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>oD</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>aeef28bf98cb865de73164bc417aec4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCalculator</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>af16d5b5c1dc3be31edd581d4eeae3aa6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoCalculator.html</anchorfile>
      <anchor>a43e3022159bc59a24931b01b625ac226</anchor>
      <arglist>(SoField *which)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCallback</name>
    <filename>classSoCallback.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a84587f85b568c37bad29cac35cc838f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCallback</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>af1e3717dfd82737b6f1d864748857130</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallback</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a7a8f2dc97c80d06895f313fa8095a830</anchor>
      <arglist>(SoCallbackCB *function, void *userdata=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>adf55248b1f7143dc6d2dcc31111b45b0</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>ada7436c6fa43de30e8e6455ba73976e1</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>aa798e7241f78846396ca35d49f149b4e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a62c7151753420cbc003acc63496449aa</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>ac1824b7b11b5b2f260e97ef60dea3f5b</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>ae69baac6f29f0d94429fe6253ffca0c0</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a22c8477f100e3f4f3efb90a494dfa9bb</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a26d33623e4a355bce4fd46b3316f4b92</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a0ffbc601aef9287e1d6f87f1230c41b6</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>ac2ff7785721bf7dd5850981547a45260</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a6994652394fe420ef8719507950f315c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCallback</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>ae7b6450e33376133968b8b07cb83c614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoCallback.html</anchorfile>
      <anchor>a339f6aee8c6f1386bc3bb3cee46dc086</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconnections)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCallbackAction</name>
    <filename>classSoCallbackAction.html</filename>
    <base>SoAction</base>
    <member kind="enumeration">
      <type></type>
      <name>Response</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0aebf2c58836079af765be8e2ba4973d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONTINUE</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0aebf2c58836079af765be8e2ba4973da0d938b2f29d1633097595c14d4cd87cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ABORT</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0aebf2c58836079af765be8e2ba4973daf47cac7f924fcfd67b6ce7b710caf8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRUNE</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0aebf2c58836079af765be8e2ba4973da8848d4ddd907d87c7336c119cf8d5cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Response</type>
      <name>SoCallbackActionCB</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ae6fdf843f4157cbc3ff98c5d711e9de7</anchor>
      <arglist>(void *userdata, SoCallbackAction *action, const SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a4147d651e563a9ae9fd08ad2395e1cfe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCallbackAction</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ad7da5f0d08e5c9b37df8ffdaf87631fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCallbackAction</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a2b50588d8902f28efa53ca0b5b8e0191</anchor>
      <arglist>(const SbViewportRegion &amp;vp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCallbackAction</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0c4030b6813d7ed75647656eabda5607</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a13fd51ff971b2c2ddddd49537202e8a1</anchor>
      <arglist>(const SbViewportRegion &amp;vp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPreCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>abb911a2b72f56a19d0dd40819e7d351f</anchor>
      <arglist>(const SoType type, SoCallbackActionCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPostCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ad98c249636448c4947947e2faf7de570</anchor>
      <arglist>(const SoType type, SoCallbackActionCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPreTailCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aa4eaa1f93b4ea5514b4253ff738a3c90</anchor>
      <arglist>(SoCallbackActionCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPostTailCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ae85004e2f61a0f75465fc19001bb38bb</anchor>
      <arglist>(SoCallbackActionCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangleCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a7a71315cb4b24a5cd83dbbdbfc0d2a3e</anchor>
      <arglist>(const SoType type, SoTriangleCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLineSegmentCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ae12e0c958fa491e15fed955af19788b8</anchor>
      <arglist>(const SoType type, SoLineSegmentCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointCallback</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ab8ac10a541dbe2e65e6a0dd64a1aec6b</anchor>
      <arglist>(const SoType type, SoPointCB *cb, void *userdata)</arglist>
    </member>
    <member kind="function">
      <type>SoDecimationTypeElement::Type</type>
      <name>getDecimationType</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a6ca5e51faefd2275f8b11f917f3b30f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDecimationPercentage</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a3be9dcc5feb21c6b85311f3264c21ee0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getComplexity</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>accb844489a863930369c88d8cb20d834</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoComplexity::Type</type>
      <name>getComplexityType</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a51912ef09f5b593bf53ad507e291e546</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNumCoordinates</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0f4f484d1ea566f2dbd20018e57248a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getCoordinate3</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a8a39bfbf7635e0d9b197c035442f3172</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>getCoordinate4</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a6a9c98c830d27ff7a738eb8881beed4b</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoDrawStyle::Style</type>
      <name>getDrawStyle</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a393b8dd8676ab668a4f3bbbd6074e35e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getLinePattern</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a99e6c72fc29b6e80c478938422ef55aa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLineWidth</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aaad9afbb2e101db088dd9dc1023f4f48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPointSize</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0c7db492edf17022a34d79d19561b1af</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getFontName</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a86f8f698339a65df8bb55c455bc60453</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFontSize</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a6cdaa2b59d78811ed6b481645673097e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoLightModel::Model</type>
      <name>getLightModel</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>af2a271cfa3ddf13566e08962291fca10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getLightAttenuation</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a1169cad45b91391be63ef26ac433dc2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMaterial</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a8eb5c30c849bf3c54a7cf574082db6e8</anchor>
      <arglist>(SbColor &amp;ambient, SbColor &amp;diffuse, SbColor &amp;specular, SbColor &amp;emission, float &amp;shininess, float &amp;transparency, const int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>SoMaterialBinding::Binding</type>
      <name>getMaterialBinding</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a470470892e78a3d964b1df465d65ddb3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNumNormals</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac65b1d41b61672ced9e81b86de86933f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a16ee3746295ce69c287bf864748b2a03</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoNormalBinding::Binding</type>
      <name>getNormalBinding</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a49ab7d79d0fc4a6d25711caded6cd241</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNumProfileCoordinates</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>adce6af2840cdfecc3e24ced46126a948</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getProfileCoordinate2</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>add48b7bb9f9fec04a8a5f9bf8f03d459</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getProfileCoordinate3</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a42d4853b5026d34a2dbcd8d83b3fd2b7</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SoNodeList &amp;</type>
      <name>getProfile</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac798cc8b045de3361b1a21b8b1dc16e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoShapeHints::VertexOrdering</type>
      <name>getVertexOrdering</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a5ba17eb4452bb70dbe03a836661f2266</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoShapeHints::ShapeType</type>
      <name>getShapeType</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ad8bc47df507393b4863aaf0c520cf364</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoShapeHints::FaceType</type>
      <name>getFaceType</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a6ea068d16af4fdee95555e4d79562990</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCreaseAngle</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac7976c69f158ad96223f3c447690c596</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNumTextureCoordinates</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aba6c6ec6dc89872fa72c42be4a08f4e5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getTextureCoordinate2</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac545ae2032fbf711af1c364b39838a43</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getTextureCoordinate3</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a20734400b70a0c83a6df5ddd1cef95ba</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>getTextureCoordinate4</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a6f47244d3d882f942e2884bc8cdcf6fc</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoTextureCoordinateBinding::Binding</type>
      <name>getTextureCoordinateBinding</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aab53bce467ef67246504a5de9abe35c7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>getTextureBlendColor</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac404646053d303d8dcc866ed25a3c892</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>getTextureImage</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac551dec60b98285e88e8744ab34d4820</anchor>
      <arglist>(SbVec2s &amp;size, int &amp;numcomps) const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>getTextureImage</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a1ed671f594d20a608dccf47f00ec19c2</anchor>
      <arglist>(SbVec3s &amp;size, int &amp;numcomps) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getTextureMatrix</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a7ed6e8dfe4046afca3a2bba9099769ab</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoTexture2::Model</type>
      <name>getTextureModel</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0968c3970c63246cd10c11d3d3d25a2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoTexture2::Wrap</type>
      <name>getTextureWrapS</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a380b20fb9139f2acdcaccd0d7709f5cd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoTexture2::Wrap</type>
      <name>getTextureWrapT</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a2870fb696ac5abbf0eb734e37579de1e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoTexture2::Wrap</type>
      <name>getTextureWrapR</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a2c5feb85d89c2669a2520421387417f5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getModelMatrix</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aabdad873751e3c73e1798c7c3f3411fa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoUnits::Units</type>
      <name>getUnits</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a8d14ba3252e977a558cda71598133671</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFocalDistance</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a3bd6f1ad6e1d2fa2bd9fdd53b6202cfb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getProjectionMatrix</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ab20b90ab8a3b6e073b336f193e633b82</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getViewingMatrix</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a076a40c5e60e62b75f23ef47bbe2a170</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbViewVolume &amp;</type>
      <name>getViewVolume</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a10bcfe2c754f6802ae1a099ad8b595e3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a930eec066ea2d2ded4d1eca62ecb1290</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPickStyle::Style</type>
      <name>getPickStyle</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a3daa267b5b0c462ea2fe41a61ec26b17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getSwitch</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aaf9b8f52666ca3c0ccfd6572bd6cda49</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Response</type>
      <name>getCurrentResponse</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a4f9efd32750fa5eb4d01cfca636f6bf1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invokePreCallbacks</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ade92a80d2c2ebc22f0ca871f2296fc35</anchor>
      <arglist>(const SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invokePostCallbacks</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a55e55017fe21f07be7191054850e4214</anchor>
      <arglist>(const SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invokeTriangleCallbacks</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ad162287962a03211d167f248166878d2</anchor>
      <arglist>(const SoShape *const shape, const SoPrimitiveVertex *const v1, const SoPrimitiveVertex *const v2, const SoPrimitiveVertex *const v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invokeLineSegmentCallbacks</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>ac8793751f83619ca3318c8dd48e9de5f</anchor>
      <arglist>(const SoShape *const shape, const SoPrimitiveVertex *const v1, const SoPrimitiveVertex *const v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invokePointCallbacks</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>afe7c4ff2165b9475bd28f7ac654d47e9</anchor>
      <arglist>(const SoShape *const shape, const SoPrimitiveVertex *const v)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>shouldGeneratePrimitives</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a06ce97cd16478fc8f4ca4b8f6bfbcfb8</anchor>
      <arglist>(const SoShape *shape) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getCurPathTail</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a638952a8cd942fde3065ce043fef50c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentNode</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>aaea936b682da09a8df2ae87a5edba03f</anchor>
      <arglist>(SoNode *const node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a918fb4200f40611c516ab03a7fd2b4ba</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>afa5867c40c10cfe78a38267ee8aae254</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a0c5687a290a4c5bd5402f9c6e0791b66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoCallbackAction.html</anchorfile>
      <anchor>a20de90ba2439c6f83e350d2bab64e4d4</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCallbackList</name>
    <filename>classSoCallbackList.html</filename>
    <member kind="function">
      <type></type>
      <name>SoCallbackList</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>accb308b0e556f22f4c3d7e5ae0a66a86</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoCallbackList</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>a75c30a6495ff8014147c02974039725a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCallback</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>a090abfa5f4fce2518249261a66ae3e6d</anchor>
      <arglist>(SoCallbackListCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCallback</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>aec35f7d7aeadcdf4d557574e865fc0f6</anchor>
      <arglist>(SoCallbackListCB *f, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCallbacks</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>a4a0226868b1669e3ebf432142c09d5e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCallbacks</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>a942e1a2506aa23e0c0c9b74ce8c693af</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invokeCallbacks</name>
      <anchorfile>classSoCallbackList.html</anchorfile>
      <anchor>a1a310491a27b615e968e84eb484368f4</anchor>
      <arglist>(void *callbackdata)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCamera</name>
    <filename>classSoCamera.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>ViewportMapping</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a46fd7a2f6e8ca20e44682d005e0bb44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StereoMode</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ae1516a54c7328d42694db1c5b62912ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MONOSCOPIC</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ae1516a54c7328d42694db1c5b62912ecac0ec11eb92040c20ae1b0ade59672849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT_VIEW</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ae1516a54c7328d42694db1c5b62912eca4570af92101f1849e922b8b00a796752</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT_VIEW</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ae1516a54c7328d42694db1c5b62912eca1bcb572494c5a757d7978b082357da77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ad6a7f8c956fcc53225d0c90015ef28d3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbViewVolume</type>
      <name>getViewVolume</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>af452319dd477054863b45f012c2fde68</anchor>
      <arglist>(const SbViewportRegion &amp;vp, SbViewportRegion &amp;resultvp, const SbMatrix &amp;mm=SbMatrix::identity()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointAt</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a0419569e203a18c84870f288d79af31d</anchor>
      <arglist>(const SbVec3f &amp;targetpoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointAt</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>adac554b0c5d8ea465f539d704834f651</anchor>
      <arglist>(const SbVec3f &amp;targetpoint, const SbVec3f &amp;upvector)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scaleHeight</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a2a860095b69cc575ba845d4e228956f3</anchor>
      <arglist>(float scalefactor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbViewVolume</type>
      <name>getViewVolume</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a9dabd51ab0445cdca516180df63a6fee</anchor>
      <arglist>(float useaspectratio=0.0f) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>viewAll</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>af04cc1f085e997c65832da9ddcd5a6aa</anchor>
      <arglist>(SoNode *const sceneroot, const SbViewportRegion &amp;vpregion, const float slack=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>viewAll</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ab10a2218561a9c6e82910cb6ded50118</anchor>
      <arglist>(SoPath *const path, const SbViewportRegion &amp;vpregion, const float slack=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>SbViewportRegion</type>
      <name>getViewportBounds</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>aa3e6738f99a7d5e7f5b7420a8515d669</anchor>
      <arglist>(const SbViewportRegion &amp;region) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStereoMode</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a22e40f356f2ff2055b2a4b0f65c3aea6</anchor>
      <arglist>(StereoMode mode)</arglist>
    </member>
    <member kind="function">
      <type>StereoMode</type>
      <name>getStereoMode</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a83754e152b2f65542e6c06428b779dd2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStereoAdjustment</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a6ed2d2527604e86cc8be234b1e429991</anchor>
      <arglist>(float adjustment)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStereoAdjustment</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>aee529c67134126a1fd9e8bad918e1680</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBalanceAdjustment</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a8d44d94fa463088b2ddfedff2ea72364</anchor>
      <arglist>(float adjustment)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBalanceAdjustment</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ad92d00e82e26432a45679183a343fcc8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a413c4165d5065112db4c27687d9a58bf</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a7a55d20de9f29df22645ea8eab07bd9f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a0e43b194b29f65bf2ffc97b29de634f2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a826bfd39750a3c7300c9c0162eb04688</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a4731c977a5d5ef3848071509af281f6b</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a40dec90ae09d74656b04fb5bc170d4f0</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>af1b340a2532c40eebcb6386ba226d782</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a70260457d32bb6d8d0a7734b248f55b4</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>viewBoundingBox</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>ab04c2ed686b698bee525eaf29aca0f64</anchor>
      <arglist>(const SbBox3f &amp;box, float aspect, float slack)=0</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>viewportMapping</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>abc6c62bbca8a24dd686a3fbb19adec2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>position</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a1346f4606c4fd282818b4b7701bfeca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>orientation</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a1e0dc74890db39d4c8ec2194ec7ab4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>aspectRatio</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a377ac1c352e965864712bcc5ad0459df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>nearDistance</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a96b1bd10731d0a5b8addf3368a8ba53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>farDistance</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a34890d0e76849f4ce27beefae287f471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>focalDistance</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a59fda50eb01e55536d3a603f6590fd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a08e0214079cfc559cf85c260d5d74511</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoCamera</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>afe2aa3972f415c77eb0a61eb8a2ed0ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCamera</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a1d8a58f827233bab4fe735b786ef986f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>jitter</name>
      <anchorfile>classSoCamera.html</anchorfile>
      <anchor>a7d06e8321c4f7fe394ceee5fc7866f11</anchor>
      <arglist>(int numpasses, int curpass, const SbViewportRegion &amp;vpreg, SbVec3f &amp;jitteramount) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCameraKit</name>
    <filename>classSoCameraKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCameraKit.html</anchorfile>
      <anchor>a8cc7be82416dcf7b3b281f2a0541f8a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoCameraKit.html</anchorfile>
      <anchor>a048151f31acf60bfce15e2cfa7ab45f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCameraKit</name>
      <anchorfile>classSoCameraKit.html</anchorfile>
      <anchor>a0a910b4788271ab679a209e2177a6c2f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCameraKit.html</anchorfile>
      <anchor>a17c3a2f6bf6a613fa8b079e30212531f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCameraKit</name>
      <anchorfile>classSoCameraKit.html</anchorfile>
      <anchor>a6a4a768d36e3c28a0502b8cbb3738d33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCenterballDragger</name>
    <filename>classSoCenterballDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>adea2b24256c50a299b17b5f7ee1897a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>aa0e42f2ef998596e3f007efab5c267a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCenterballDragger</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>ae20ff9682e8b592413299eacfaab0b33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveStartParameters</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a934f32e493beaca4ad9a4902d8cb7a75</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a0849979a0ac2a1668aafb79454450eb8</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac7b6197387c2f6afbab953810c53df84</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a5223be55ff1d7e5782f734cb5523a6c9</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac0b672a2e282c740c31c9ad9d8b8caa2</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ae165ab1af26004fb2c44d0928fa1be25</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a223837de2231bbd3df15fecd1ce5900a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectorEpsilon</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab3ffef1deec5922c65168876c6edf460</anchor>
      <arglist>(const float epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a8b2d2084710f60e615420d7b6787bbc2</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStartCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ae00e9e57f085a8f76aa16a5b6e0b1230</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotionCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac0517769322f58ec7c845d7e3e4a404d</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMotionCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>afaaececc9dc22bc61f0e9d2008f516c3</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFinishCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a79adb2dc857a4658627a97c0343a268d</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFinishCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a951623ea7527a67b78fe270549acf6e0</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValueChangedCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a9fecd19fe8dd6ee0f33313f0aca4f366</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeValueChangedCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a36c578d4ba2f222507a02af838dee8a2</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinGesture</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a0f32b086413f00d08c500eabbf14cc55</anchor>
      <arglist>(int pixels)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinGesture</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac075d129602b4abdd29e76871385d121</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>enableValueChangedCallbacks</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac9b06cd585ddf05ae29cb706dd7c9675</anchor>
      <arglist>(SbBool newval)</arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getMotionMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a480a493bc4d4202af034e7b9b2019815</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOtherEventCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a457e60b7a34b2063ef23426b6225c54e</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOtherEventCallback</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>aa9535e0b23caf155aacb6d96b3d6d418</anchor>
      <arglist>(SoDraggerCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerChildDragger</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a1533542fa61931e47e3bd24249df8b3c</anchor>
      <arglist>(SoDragger *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterChildDragger</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>aa42ef5a835a31685215bc70d3d6b4274</anchor>
      <arglist>(SoDragger *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerChildDraggerMovingIndependently</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a2df00ef00554bcfe194179b3bf8ab9a2</anchor>
      <arglist>(SoDragger *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterChildDraggerMovingIndependently</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a29e4050c87c047de835fd0c3e9b2134e</anchor>
      <arglist>(SoDragger *child)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix</type>
      <name>getLocalToWorldMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>abe5e0efec810954d18f51cacfee6104d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix</type>
      <name>getWorldToLocalMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>af6863eacde8a13c38d50cd48bb59867c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getLocalStartingPoint</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab9a499454ab4e0b5a9c05b75881cb242</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getWorldStartingPoint</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab7c24a8e66358d591a734faacbc24cc1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPartToLocalMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a83ed4b69730c2246f88e4bde8b72b9b6</anchor>
      <arglist>(const SbName &amp;partname, SbMatrix &amp;parttolocalmatrix, SbMatrix &amp;localtopartmatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformMatrixLocalToWorld</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab93ae5975ab82fbe88180df4525ebe1e</anchor>
      <arglist>(const SbMatrix &amp;frommatrix, SbMatrix &amp;tomatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformMatrixWorldToLocal</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a9c564861277072608e29b1c6d5ba8645</anchor>
      <arglist>(const SbMatrix &amp;frommatrix, SbMatrix &amp;tomatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformMatrixToLocalSpace</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a7b13f37e194daf3ee5e1a022b7c4dbe4</anchor>
      <arglist>(const SbMatrix &amp;frommatrix, SbMatrix &amp;tomatrix, const SbName &amp;fromspacepartname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMotionMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab83eaa55e4c2093594f5236cc4932dc2</anchor>
      <arglist>(const SbMatrix &amp;newmatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a6117eca20390155a450d62d99b41c6f8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getStartMotionMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab24a03b1a24ae24aa65ee40f1bb1b170</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SoPath *</type>
      <name>getPickPath</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a5fdba6252dd6dac3ee024e0441ba08c0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoEvent *</type>
      <name>getEvent</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>acb11f0192517060a37b258985107ee80</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>createPathToThis</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>adab411d63e761b7b9d9a4c5b12271cea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SoPath *</type>
      <name>getSurrogatePartPickedOwner</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a380674cb4fcaca667796b14585564920</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getSurrogatePartPickedName</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac8d75e080e63a6f5f3a0f7020c88a3df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPath *</type>
      <name>getSurrogatePartPickedPath</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a6df11eee6bd753618faa9600a8c007a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartingPoint</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a446f19479cbf0613c94c58483b82082d</anchor>
      <arglist>(const SoPickedPoint *newpoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartingPoint</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a91da7806b51319c0e248f26a95dd7da2</anchor>
      <arglist>(const SbVec3f &amp;newpoint)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewVolume &amp;</type>
      <name>getViewVolume</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a63c6047ec329569454e6f6c3c0ff5089</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewVolume</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ac97a3e1f1d3d0c733dacf67a88c95e12</anchor>
      <arglist>(const SbViewVolume &amp;vol)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a07c680123d27c0d2f3a848dc1a765b5e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a984519db2bd69dc0cfb5ae27a57d39da</anchor>
      <arglist>(const SbViewportRegion &amp;reg)</arglist>
    </member>
    <member kind="function">
      <type>SoHandleEventAction *</type>
      <name>getHandleEventAction</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a20fd7d4f461ef86fa688a69e554ab0bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandleEventAction</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a46ce71e08a9ac09d42521f60e1b5b795</anchor>
      <arglist>(SoHandleEventAction *newAction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTempPathToThis</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a966b9d325e50c367ffed15aadfe51f9e</anchor>
      <arglist>(const SoPath *somethingclose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>grabEventsSetup</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>accbb8d732a2f501deff37b5a1e4083c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>grabEventsCleanup</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a40624b149275583541b4658326d6ea28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>workFieldsIntoTransform</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a848dfd24b9f14d6250f631556defe841</anchor>
      <arglist>(SbMatrix &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontOnProjector</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a11646a5bcfc56f18afdde7a9a59ba985</anchor>
      <arglist>(ProjectorFrontSetting newval)</arglist>
    </member>
    <member kind="function">
      <type>ProjectorFrontSetting</type>
      <name>getFrontOnProjector</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab29aecdb558e595d70ee681fc762710a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoInteractionKit</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a89f2357a132e87e78e0c469eb4b659ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPartAsPath</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>af86aa8628f3966b61997c5a404d1efa2</anchor>
      <arglist>(const SbName &amp;partname, SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPartAsDefault</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a1aae5cdef63005f5c7251d3991119b60</anchor>
      <arglist>(const SbName &amp;partname, SoNode *node, SbBool onlyifdefault=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPartAsDefault</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a4d58c83525c45acaab52b0db52008cf7</anchor>
      <arglist>(const SbName &amp;partname, const SbName &amp;nodename, SbBool onlyifdefault=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPathSurrogateInMySubgraph</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>ab4faa09f926a2c4774138ce006f578fc</anchor>
      <arglist>(const SoPath *path, SoPath *&amp;pathToOwner, SbName &amp;surrogatename, SoPath *&amp;surrogatepath, SbBool fillargs=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPathSurrogateInMySubgraph</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>ae48169cf808f6c01a4d7fbbc44efa955</anchor>
      <arglist>(const SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPart</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>af09e99ef2289df877b95e4b7f4fe177d</anchor>
      <arglist>(const SbName &amp;partname, SoNode *from)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMinScale</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a35be28bdfe4fa34e7c7251726c0dae22</anchor>
      <arglist>(float newminscale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getMinScale</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a5af4d13935e41873783d8611021ced6c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>workValuesIntoTransform</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a9d27ed39a52e5844f7c84ab4324090b4</anchor>
      <arglist>(SbMatrix &amp;mtx, const SbVec3f *translationptr, const SbRotation *rotationptr, const SbVec3f *scalefactorptr, const SbRotation *scaleorientationptr, const SbVec3f *centerptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getTransformFast</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a866ac61bb63a9e26e8fbeaef3b260111</anchor>
      <arglist>(SbMatrix &amp;mtx, SbVec3f &amp;translation, SbRotation &amp;rotation, SbVec3f &amp;scalefactor, SbRotation &amp;scaleorientation, const SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getTransformFast</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ae73b0045c2b30e7edb86391a461b2a63</anchor>
      <arglist>(SbMatrix &amp;mtx, SbVec3f &amp;translation, SbRotation &amp;rotation, SbVec3f &amp;scalefactor, SbRotation &amp;scaleorientation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>appendTranslation</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>abbcb4cdb3e1542a6896af65a9395f50c</anchor>
      <arglist>(const SbMatrix &amp;mtx, const SbVec3f &amp;translation, const SbMatrix *conversion=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>appendScale</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a58abbcf51017c8756d96e54ff2005a62</anchor>
      <arglist>(const SbMatrix &amp;mtx, const SbVec3f &amp;scale, const SbVec3f &amp;scalecenter, const SbMatrix *conversion=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>appendRotation</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a444ce113b549f9808fdbff77514b3458</anchor>
      <arglist>(const SbMatrix &amp;mtx, const SbRotation &amp;rot, const SbVec3f &amp;rotcenter, const SbMatrix *conversion=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a619901374bbc6824c05e53a7b5f114b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a6ad76dc427dc903678e1e4936bbc7785</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSwitchValue</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>af522e6bc4f5ec32a6b40a0edf22f954f</anchor>
      <arglist>(SoNode *node, const int newVal)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>aaf87147f502dac6649b27f699382e3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>af7bbdde79e7a2be60c45a3604fc49b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a3104dec7dff57c310ea42207fd50a76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCaching</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a0721d44115e135e704899180f9dd1ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>boundingBoxCaching</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a8003282ce3a8bd37a1642472fcc81135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCulling</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a88e5e2140949e46cc6a82aad104a779d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>pickCulling</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>aa630983b94260156b2e8e3d7be5f633a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>ad18e94ab4b49186f97921b1645597267</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCenterballDragger</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>afa8bf763b60ba2ab5a7669aa6b8da266</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferCenterDraggerMotion</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a74d4721d078e56f2721d0c2c61e1f2e9</anchor>
      <arglist>(SoDragger *childdragger)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSwitches</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>af2053f632eac0cca6c4d4c087dd9eef8</anchor>
      <arglist>(SoDragger *activechild)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a16a54b05f6f075b0c880fc8b9bf3b489</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>af3e5b4053a778531168fc1d294cf62cf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>ae6ce696b4fe4867a9d937b3ca2332979</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>ad5b948c30fba5a66e3454187f05d7266</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoDragger</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a59e6729622d54554dc14ab8a105efde2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDragger</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>af6417fd1cf52a391ee8469f86d9ffd57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbVec2f</type>
      <name>getNormalizedLocaterPosition</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ab17562433812d4041cae9ecee4b736e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbVec2s</type>
      <name>getLocaterPosition</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a0fd6089ae6639692defd470746aec7c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbVec2s</type>
      <name>getStartLocaterPosition</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a9c3f74c67b63019a9547ebb314a0cc2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setStartLocaterPosition</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a8d389e453416f6f90f4cc103c06fe764</anchor>
      <arglist>(SbVec2s p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isAdequateConstraintMotion</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a017aa7024e37f667753431da394dc189</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGrabBasedOnSurrogate</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a7086e5aaf6859e29754300526ba51482</anchor>
      <arglist>(const SoPath *pickpath, const SoPath *surrogatepath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCameraInfo</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ae59c9f2f54b51627e3e973f61112620e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ade6fda8dfab62ed95aae397fd01086ce</anchor>
      <arglist>(SoHandleEventAction *ha)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferMotion</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a8011293c936aa66fbb79d48b05ae1cdf</anchor>
      <arglist>(SoDragger *child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIgnoreInBbox</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a1fef53e79cdf180fcf3f2f05a7010b29</anchor>
      <arglist>(SbBool newval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isIgnoreInBbox</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ae67d944d4b6b8406292f5d8ee50c49f5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setActiveChildDragger</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a0af97dcab6595eceb8771d8113bcf7be</anchor>
      <arglist>(SoDragger *newchilddragger)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoDragger *</type>
      <name>getActiveChildDragger</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>aac57e29eba1fd57e69dc38cea581a4d2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDraggerCache</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a0cae8dd9ec1f83c5503782d2a6498f18</anchor>
      <arglist>(const SoPath *path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoInteractionKit</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>afa91e31fbc7622aeb2195b5a1d80b865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a6b198096ba44831447dbf3b5bda9c702</anchor>
      <arglist>(const SoFieldContainer *fromFC, SbBool copyConnections)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setPart</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a4e363d704bf0caf9cbfa1ebd36d7818a</anchor>
      <arglist>(const int partNum, SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a652933434f6384c41475cc80de6c893f</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setAnyPartAsDefault</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a83330aafe32b8f3e5377311084237ffb</anchor>
      <arglist>(const SbName &amp;partname, SoNode *node, SbBool anypart=TRUE, SbBool onlyifdefault=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setAnyPartAsDefault</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>afc3e0a82b1ff5e729b74ae78dbb3adf9</anchor>
      <arglist>(const SbName &amp;partname, const SbName &amp;nodename, SbBool anypart=TRUE, SbBool onlyifdefault=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>setAnySurrogatePath</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a52e0a4c5ce9ab959259de3cf4f9a6d54</anchor>
      <arglist>(const SbName &amp;name, SoPath *path, SbBool leafcheck=FALSE, SbBool publiccheck=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectSeparatorFields</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a38e43e95f0f95dc42e5437ffc413328d</anchor>
      <arglist>(SoSeparator *dest, SbBool onOff)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a1d2bbf65cb113390ad96e43438f945e8</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>ab9c32d37339732608adc74cd547d7678</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>kidStartCB</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a381b809109c06c3a29b2d19f5dbb810f</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>kidFinishCB</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a1865b1a96fee759819d3699aa6361351</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>childTransferMotionAndValueChangedCB</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ae45c275f020dd239b121c55ff3e30adf</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>childValueChangedCB</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a8249524f6e707c5fad6a9b20ec7ca5c3</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>childStartCB</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a7cc2bdaa503ddca69f5855a55c384a33</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>childMotionCB</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>afcb708c2d39b171cd537b71442edac12</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>childFinishCB</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a75245b3558fe16f8e0d865fd6d0670ab</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>childOtherEventCB</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>ad9c9cf2b00f156fa3eef05de8bd8a597</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>readDefaultParts</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a9ae7ec2912714a3606285cdcba5ff37b</anchor>
      <arglist>(const char *fileName, const char defaultBuffer[], int defBufSize)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>ab50592dc32eb0e91b65fb7cc3e558ed2</anchor>
      <arglist>(void *, SoSensor *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotFieldSensor</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>a5673c2a903f475d1f970d2fd3fbf6f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>centerFieldSensor</name>
      <anchorfile>classSoCenterballDragger.html</anchorfile>
      <anchor>ae48263d9c8be83817c3a965a6820ff11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a0b07989dbb5ee24fef77500fb1248dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSeparator *</type>
      <name>oldTopSep</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a27b4f1a6b40cdfd9c5ea94a7d59f8fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProjectorFrontSetting</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>afdfe9d11fcbde8e42fff713907f6c7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FRONT</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>afdfe9d11fcbde8e42fff713907f6c7a1a9afe09d041b239cbfda699703db89f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BACK</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>afdfe9d11fcbde8e42fff713907f6c7a1a1740183c2afc21c9650e8c0ab7647750</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USE_PICK</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>afdfe9d11fcbde8e42fff713907f6c7a1a147e0fac0b67cf918a1b3ed8a77f07c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CacheEnabled</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a6e3b312f001982687c6ead6f70e505b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCenterballManip</name>
    <filename>classSoCenterballManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCenterballManip.html</anchorfile>
      <anchor>a5bb0ece1edbfcebb3ed47c564029b700</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCenterballManip</name>
      <anchorfile>classSoCenterballManip.html</anchorfile>
      <anchor>a93c60e150d3ece7ce0a7c2c579aaace9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformManip</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>ad34ed99c114a7f31b210c9018e628c40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoDragger *</type>
      <name>getDragger</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a0df7cf0b388b8f23600a5c8f5a7be41b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceNode</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>aa3035a324a6d39c037f1754e61a8cee9</anchor>
      <arglist>(SoPath *p)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceManip</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a84dcf0cb3e159ac1fdcfc23a2411528a</anchor>
      <arglist>(SoPath *p, SoTransform *newone) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a65ee82324fe763ebbb67db148362f052</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a445883ede479f83c6067350950ea0ed4</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a576c1ef21dfd9a12e7d8bfb2045c29d3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>aea2aec22ec5044fdf7713e0742dc962c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a841073e74c32900e22a0e3e2ca124b0f</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a6b5dbf7417c79665eab27a94a4d19578</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a65859a478f91ffd2b557da90793b01e0</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a9f9f91b4b12c88f80559951dd28f367c</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a732b82f220281d1c376bbf398601863a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransform</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>aee314730f294bfc896e56681b71fe736</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointAt</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>ae96ad1b916606f3ba482ae92f5ba18bf</anchor>
      <arglist>(const SbVec3f &amp;frompoint, const SbVec3f &amp;topoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScaleSpaceMatrix</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a63f9dab20f9a27e3e384147bd9a8f148</anchor>
      <arglist>(SbMatrix &amp;mat, SbMatrix &amp;inv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRotationSpaceMatrix</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>acafdf80acf9d67ccd27daa8c481f5c70</anchor>
      <arglist>(SbMatrix &amp;mat, SbMatrix &amp;inv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTranslationSpaceMatrix</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a4b68f1284bc29f13c6d9707433cbbaf1</anchor>
      <arglist>(SbMatrix &amp;mat, SbMatrix &amp;inv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multLeft</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a37046e7f913d40f99a7002ad6dcea62f</anchor>
      <arglist>(const SbMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multRight</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>ae4bc3cc7d17a0d75a94653e2dcde270f</anchor>
      <arglist>(const SbMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combineLeft</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>ad66dc0b2f6b2c7ce996e6ac87c1efe08</anchor>
      <arglist>(SoTransformation *nodeonright)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combineRight</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a09c8cda47698d289028330d7f4ed5d85</anchor>
      <arglist>(SoTransformation *nodeonleft)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a6320cc1f0d5c6050ce5d68f474fd4516</anchor>
      <arglist>(const SbMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recenter</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>af170765422c7cac5088448c295750376</anchor>
      <arglist>(const SbVec3f &amp;newcenter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a9b133b39f6c92ef0c11bbd37f18ae6bc</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCenterballManip.html</anchorfile>
      <anchor>ad7b53fd16811ef9f0f2786f84c43c3de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCenterballManip</name>
      <anchorfile>classSoCenterballManip.html</anchorfile>
      <anchor>abcad2cae7c6edd2e9e9dba7b9f238747</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformManip</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a22fce6b970baa77c5339f929aabb9d90</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDragger</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a342d5abdfc9a61e883459ef4529d7af7</anchor>
      <arglist>(SoDragger *newdragger)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>aea958acd64a43b0461bc104708c451c3</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSensors</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>ac84ee0d4eeee8d727b75da2d843d18ed</anchor>
      <arglist>(const SbBool onoff)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransform</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a0727452cecd58c765d49b4191e1b8c03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>transferFieldValues</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a95639f7c920ff38f9d603a4afc0c6e47</anchor>
      <arglist>(const SoTransform *from, SoTransform *to)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a03c9f1f0f7bebec4e9598a811748c40e</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>afb1c212fdd2179fa29ec7721d3447328</anchor>
      <arglist>(void *f, SoSensor *d)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>af836257673b4b8ab61d7bc4807c8f69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a357007d906d1680a72cd73cf974a6869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>aa809e7560e35a236d792aad44ebe01c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>scaleOrientation</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a64249aa497425cd98e6f789a0f0ffa89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a25a62186a483f0b79f072532e6c88a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotateFieldSensor</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a8685cd2bfa5494b5cda66d21498178db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>ad1abf8317db57c15e3b5d359b0c6efd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a20a6aa319d0becb44755fc51c7aa87e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>centerFieldSensor</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>afb882172a345c4b3ec2a3a3ad467d5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleOrientFieldSensor</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a4731f0b05d5e14902980402573798ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a4bb8e2b4b526986090bdf739e0903e9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoChildList</name>
    <filename>classSoChildList.html</filename>
    <base>SoNodeList</base>
    <member kind="function">
      <type></type>
      <name>SoChildList</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>ac69057ffe3be0d879222d7537cb4678b</anchor>
      <arglist>(SoNode *const parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoChildList</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a1bf51909c3d537e78b5f7c6a40547356</anchor>
      <arglist>(SoNode *const parent, const int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoChildList</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a78927429fd796efa62ed69641023f3ea</anchor>
      <arglist>(SoNode *const parent, const SoChildList &amp;cl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoChildList</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a8a87a9f8b278052a9fe3f858cee077ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>abe278cc582d5688ff633799b64be16ac</anchor>
      <arglist>(SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a12c05cc49cf496fba99f037c2948b47d</anchor>
      <arglist>(SoNode *const ptr, const int addbefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a90856979bdc9a6ae323c38123485e704</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a0ddfd394cf8326ea1e5753579a4c2709</anchor>
      <arglist>(const SoChildList &amp;cl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>ac2746b512d935774934eb0869851362a</anchor>
      <arglist>(const int index, SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverseInPath</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a6925cc43313d082b086c99df35692a04</anchor>
      <arglist>(SoAction *const action, const int numindices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>aca4a3b907bceaa6e47691933bf23ef40</anchor>
      <arglist>(SoAction *const action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>ae485442e6c8e626a0b9d376dda9a9a0b</anchor>
      <arglist>(SoAction *const action, const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a6fc486e01df51cbccbede4d45ad4ee8a</anchor>
      <arglist>(SoAction *const action, SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>addcc9b1041879aa9c8c0b0f30d8298e8</anchor>
      <arglist>(SoAction *const action, const int first, const int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathAuditor</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a67cc8c889977a74f0f81ca95c7515c08</anchor>
      <arglist>(SoPath *const path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePathAuditor</name>
      <anchorfile>classSoChildList.html</anchorfile>
      <anchor>a725b5c4126c09ce0061a2c73b37f859a</anchor>
      <arglist>(SoPath *const path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNodeList</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>a5f8cdd4e4ce2f1751e860e2198bc6fac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNodeList</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>a6adf637a2512b3ddf507afc4bce993c9</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNodeList</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>a44082be280e347a8d20e65f951ca8cb8</anchor>
      <arglist>(const SoNodeList &amp;nl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoNodeList</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>a23d4ce6d0bd24a1fc8cf1b76a2a5613b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>a75c055cb0e44b6faad0f0fe01688a752</anchor>
      <arglist>(SoNode *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>operator[]</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>aff6941aea09bc6fc309f25e05b598b95</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>SoNodeList &amp;</type>
      <name>operator=</name>
      <anchorfile>classSoNodeList.html</anchorfile>
      <anchor>a65ecde95f13d4bc0a7a8aaba759748ca</anchor>
      <arglist>(const SoNodeList &amp;nl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoClipPlane</name>
    <filename>classSoClipPlane.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>a51ec7a77e639a3d6a829750232e849de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoClipPlane</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>ad09e2c436c0068b983902f805baa49c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>a7657740c57fe05d9844580e95bc67bcc</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>a9bb4e5e3ce200a8b281c883dcd7193a3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>ad0e6338cf8f776eda3c13650da10491f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>a219ed7a778ec5e69646235b50cec0ea4</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFPlane</type>
      <name>plane</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>a60ec8bf21c21aaae3cbe926c9910ceef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>ae4c28645eb38133124d4096d8e4ed040</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>ad2ea084b63178302437cff79caf353c7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoClipPlane</name>
      <anchorfile>classSoClipPlane.html</anchorfile>
      <anchor>a4e46adb1f703b6b083d5a63c220381ab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoClipPlaneElement</name>
    <filename>classSoClipPlaneElement.html</filename>
    <base>SoAccumulatedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>a815e912ed809503b1082a9ca2b7b8cd0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>a29e776c9a60babfea4604d15f217b6ed</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNum</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>a9b8dc09b165eba350f49c0f3243af07d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbPlane &amp;</type>
      <name>get</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>adefaa96f5d492350251061c68ad98d0d</anchor>
      <arglist>(const int index, const SbBool inworldspace=TRUE) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>ab9df0dac94042649fc5c97f49f12be3f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>a823d2609fe19b06616b2a337a91a85ba</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbPlane &amp;plane)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoClipPlaneElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>a561a6b52236f50294bb65651059de17e</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoClipPlaneElement</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>ad91474f7ef24ab0075949573a0212fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToElt</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>a5ff2052d792ededdfd9e83382dc0999b</anchor>
      <arglist>(const SbPlane &amp;plane, const SbMatrix &amp;modelmatrix)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbList&lt; so_plane_data &gt;</type>
      <name>planes</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>aa9bc5c488621a31930a3c84d31d2dc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>startIndex</name>
      <anchorfile>classSoClipPlaneElement.html</anchorfile>
      <anchor>aa934c14955eb6a5b459b4897b0032953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoClipPlaneManip</name>
    <filename>classSoClipPlaneManip.html</filename>
    <base>SoClipPlane</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ad601d6d116cb2c96aad5e09af9f601ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoClipPlaneManip</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a454888f25c6085fde413315ad3d928c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoDragger *</type>
      <name>getDragger</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a03728b7e4e1ec9b58af114864bbd69d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a50c3d70ae9aa64866f43818e79c75fe5</anchor>
      <arglist>(const SbBox3f &amp;box, const SbVec3f &amp;planenormal, float draggerscalefactor)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceNode</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>af7e248c396ab18fc222bba7ae2f8e97c</anchor>
      <arglist>(SoPath *p)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceManip</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a334a6fecefa52888f3ae9112ccc2c9c6</anchor>
      <arglist>(SoPath *p, SoClipPlane *newone) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a4dfd8d4764b544e7cdcfaaa6b48aa8a4</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ad743a4e6b71fb7ca58358a631fb79c01</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a5596e521a04dc190a79e0ad4754554ef</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a88e55ea3c526761c3091e691762b289b</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a6e108bc457f0351746bf11303849ad41</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>afc1efed45bbe9590bd4663537a94a8bc</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a1fdc2a28dece3ca5a1fc5edcc6972713</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ae3f713406292d4994636a8bb59a2e7b2</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>aa1821bc949023f72532d53506f825d13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>draggerPosition</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ad80b29ea97bcbf8d37f84cc77854066a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ac172d56b880daf5d9b2e8e1b73ce1915</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoClipPlaneManip</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a43b9ced9441b15aa04989b303b6bee9a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDragger</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>aa93a419279015b34d4719a5f2b4e3919</anchor>
      <arglist>(SoDragger *newdragger)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a772bc9131c912fda2de525ea17e51679</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a548d74022ed9b72beee359c5a5e20b53</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a5b2ec1e98642e4eed697e933086688ff</anchor>
      <arglist>(void *f, SoSensor *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>transferFieldValues</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>a7787363cec7a1a55b595ae3285750da9</anchor>
      <arglist>(const SoClipPlane *from, SoClipPlane *to)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>planeFieldSensor</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ae6c42644176b5c854cbb7aeaee0b9403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>onFieldSensor</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>af52b97e5076fd587f0740a4d7b3a1100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>draggerPosFieldSensor</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>ac629f2996c378d700be0c52f0c4c5166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoClipPlaneManip.html</anchorfile>
      <anchor>aa15afeb6a06f3e5d37924e6f714508ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoColorIndex</name>
    <filename>classSoColorIndex.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoColorIndex.html</anchorfile>
      <anchor>a2b7da754f7a1c07ceb340c35327a503b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoColorIndex</name>
      <anchorfile>classSoColorIndex.html</anchorfile>
      <anchor>ad849bbf901737e7d309000ba85312c4a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoColorIndex.html</anchorfile>
      <anchor>a871c12986eeb3d727e5f830eecd4731a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>index</name>
      <anchorfile>classSoColorIndex.html</anchorfile>
      <anchor>ae82a0f33260c1803c4655b82ca3bc4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoColorIndex.html</anchorfile>
      <anchor>a537a8f4ab474bd93cfba5dcd9102fb83</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoColorIndex</name>
      <anchorfile>classSoColorIndex.html</anchorfile>
      <anchor>ad758926dcb15e4de0cb40513363e1659</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCompactPathList</name>
    <filename>classSoCompactPathList.html</filename>
    <member kind="function">
      <type></type>
      <name>SoCompactPathList</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>a6eb6fabce6904c275958667be7f6aca7</anchor>
      <arglist>(const SoPathList &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoCompactPathList</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>a26ce75febf724a4fda427e0df5dc9b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>aa8fc24ca3fffcc5ca475c2b3319ea59d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>a20d45ec11750d3859a85d1bd80fb0175</anchor>
      <arglist>(int &amp;numindices, const int *&amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>push</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>adae29b87117103187c9572d70d1f8e68</anchor>
      <arglist>(int childindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>ac30184420ca1313ae5e978182a7a4c3f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSoCompactPathList.html</anchorfile>
      <anchor>a3fc758e21fec05be9a65be5fce41b184</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComplexity</name>
    <filename>classSoComplexity.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a2ff546b75ae833a1ec12a95324868a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OBJECT_SPACE</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a2ff546b75ae833a1ec12a95324868a58ab4693c439c837b465befd52ad247674d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCREEN_SPACE</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a2ff546b75ae833a1ec12a95324868a58a01f46fab18e8677d9b68b211505a842c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BOUNDING_BOX</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a2ff546b75ae833a1ec12a95324868a58a971ff929e8c652bf80290f8870b492ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a044611826c1a1965d171c6502d04653a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoComplexity</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>ae0318b0c164e7f36187a04b788446160</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>aefb72a95a2b08c7fc678569d560c54b3</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>adac713794594abaf176539ed97ec9bf8</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a15784b488df23cb49213f5a67cd0fa9c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>ad312f090454b736e279067043469b9af</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>ae95a4ebdaf1fff4abadbbf4a3081979e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a3d61d0edaf611f2aa11bc00109b25d27</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>type</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a6bd8d0a1658ae2055dfe49dbcfb07d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>value</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a0679d84b90988ecd1f0c8874d1368b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>textureQuality</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>ab0645588ad9a9fa84b769e98455eee24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>af03af62575abe571ffbeb503e9cd2ba3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoComplexity</name>
      <anchorfile>classSoComplexity.html</anchorfile>
      <anchor>a5c18627f1d67aec02c8af4d471beaf7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComplexityElement</name>
    <filename>classSoComplexityElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>a2bf5f3bf07dff945dca30929f1d60743</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>ac0440db3401a0e11feba773c11fa0903</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>ab8682b820fa7653322335bb40fc72777</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>afd624d54625fca2886bbe0b8890d259e</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>a16b947ef6a885245ef4d44ca46a017be</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>ac64f6ea688187960bbb1ae33b6d8ad93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>a5660e34775c488b2d7d57f4768ee7502</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>a2448597cd377c1b9572c21e2ba96de5b</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float complexity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>ae9648e87071435bc4df17bb96423f3d9</anchor>
      <arglist>(SoState *const state, const float complexity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>ac7aff009b0643cecfe1bef2ae991f2d9</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>acb47ce91b37a2c3f5c4db999decc6078</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>affbf73ad04a368a6e171241d70cb66fd</anchor>
      <arglist>(const int stackIndex, SoState *const state, SoNode *const node, const float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>abc4ccd99031a44ad46ad293e1731d691</anchor>
      <arglist>(const int stackIndex, SoState *const state, const float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>aba199d41bb48de8528aeb9fa9b413d57</anchor>
      <arglist>(const int stackIndex, SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoComplexityElement</name>
      <anchorfile>classSoComplexityElement.html</anchorfile>
      <anchor>a3b04fa19f7630007cdc1e193438da83f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFloatElement</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>a34b62e52236b3b2201039af2b1e7fbc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>data</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>a99e4dbb7cb48a8eab24eeaabc44f47f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComplexityTypeElement</name>
    <filename>classSoComplexityTypeElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>a5d7dd88dc55b157955d92b3a2ea712a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>ad103cffd7e26efec256819ac4ace3a51</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>a4e984020be5de6ea8b3831a3246a2943</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>ad266fba7df830bf1d49d6207689e106f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>ae9eccf3187aba058b627090f6ab05e79</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>a958c16891d8bafa02a1049d9474da898</anchor>
      <arglist>(SoState *const state, const Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>get</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>ad3f1e63cc835ae0de343d12ae4209805</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>getDefault</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>af21048833bc5733eaae25791cea388c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoComplexityTypeElement</name>
      <anchorfile>classSoComplexityTypeElement.html</anchorfile>
      <anchor>adeb898d66e4068c3927510aefe28f62b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComposeMatrix</name>
    <filename>classSoComposeMatrix.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>a9cf5070481d5d159150905ae1ab77318</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>aecc409119fd515d993ce25b2d7539ed1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>a06f1eb5daf6c749908dae8973f67fc2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>acd4debbac4b084fa2e639bd95e8149c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>aa6f2a9a411ad75950ac42450296afa2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>a6241cd91c130e3e1484b5589d265fec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFRotation</type>
      <name>scaleOrientation</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>a4eb4b89be7dcf4b4929602e79c7dd1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>center</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>a67c1b08794ce59ac89f390fcf236d3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>matrix</name>
      <anchorfile>classSoComposeMatrix.html</anchorfile>
      <anchor>a4979bd73e735eba2b4b54f83e6d3de3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComposeRotation</name>
    <filename>classSoComposeRotation.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComposeRotation.html</anchorfile>
      <anchor>aec69fbfdd7bafa6e442fecb9b7b3c094</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComposeRotation.html</anchorfile>
      <anchor>a3f05a25566577821fe4594893dbf198b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComposeRotation.html</anchorfile>
      <anchor>ae4c44f2371693e33a1b75dcd99cd01c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>axis</name>
      <anchorfile>classSoComposeRotation.html</anchorfile>
      <anchor>a2ac1f3e7e63b34013c4d6d058a38f89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>angle</name>
      <anchorfile>classSoComposeRotation.html</anchorfile>
      <anchor>a8cf4a24617302598dc83846665098770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>rotation</name>
      <anchorfile>classSoComposeRotation.html</anchorfile>
      <anchor>a453ba00842471d10f7f18b31772445e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComposeRotationFromTo</name>
    <filename>classSoComposeRotationFromTo.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComposeRotationFromTo.html</anchorfile>
      <anchor>a71a8b55b9f4fb15924825cd4594413ed</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComposeRotationFromTo.html</anchorfile>
      <anchor>a58d8070ec26921674fc34273d2e1a491</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComposeRotationFromTo.html</anchorfile>
      <anchor>ac28a0f580d43243acac88b2592436de1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>from</name>
      <anchorfile>classSoComposeRotationFromTo.html</anchorfile>
      <anchor>a054cc01b1fc1f12967ec90f76f818d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>to</name>
      <anchorfile>classSoComposeRotationFromTo.html</anchorfile>
      <anchor>ac1727a4557c1112a6c1c64ee0e47bb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>rotation</name>
      <anchorfile>classSoComposeRotationFromTo.html</anchorfile>
      <anchor>a94744bf83f27899aa73d43435f6fa8b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComposeVec2f</name>
    <filename>classSoComposeVec2f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComposeVec2f.html</anchorfile>
      <anchor>a1d61d913defede7ce0dd8a2ca6bd6368</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComposeVec2f.html</anchorfile>
      <anchor>aeb10e597f43c5076a534642e7ba8dfc6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComposeVec2f.html</anchorfile>
      <anchor>a0d4154e8dbeb3c9bbe073a1c730ee2c2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>x</name>
      <anchorfile>classSoComposeVec2f.html</anchorfile>
      <anchor>a711fa19eff02c31b977178fd053c085e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>y</name>
      <anchorfile>classSoComposeVec2f.html</anchorfile>
      <anchor>a40c2c2048e64a22b40ae61218971b007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>vector</name>
      <anchorfile>classSoComposeVec2f.html</anchorfile>
      <anchor>acd493c780c5f9369ad623f457212c7da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComposeVec3f</name>
    <filename>classSoComposeVec3f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>a82d37615ece25fc7f747635284350ab3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>a8ef296e73b40015f4a35c41bbe944cf1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>a5116bea614eb8dfeb14570430d65144c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>x</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>af35cac54bec7b467c585d19f9b3f6793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>y</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>a9033ad7b14ece698957f2bf409024fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>z</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>a3bbdc4e6eacd1e3bc0ef1744580d4db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>vector</name>
      <anchorfile>classSoComposeVec3f.html</anchorfile>
      <anchor>a63bcb8f88c7131e0b2e417f57dca96d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComposeVec4f</name>
    <filename>classSoComposeVec4f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>a469a1324e0319c959bbadee3303736d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>a3c7e75111eeb7a4e64773e79b6bb70c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>ac434c69e7c0bd58bdcc4a1c7b0abeda8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>x</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>a4536a5a1f774bb3466e8f6834ee1c82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>y</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>abcd64f7576d0d203fd4a1f64881ebd4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>z</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>afdf729bfa8dadce997080f1849a77c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>w</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>a6d8ae29a09880d5e9aff6b47f01c48f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>vector</name>
      <anchorfile>classSoComposeVec4f.html</anchorfile>
      <anchor>adf4c81fbcd4cbefbe717d633506081fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoComputeBoundingBox</name>
    <filename>classSoComputeBoundingBox.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>aaa9aa048ef7fc54cb4de4f3002ba57de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>a4ed1f783d5598ee5f38b6c06713b1671</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>a098477549ad09755439879b5fc8780fe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoComputeBoundingBox</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>aadfc510515d7fde40abee1c9de43620c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>a97426b05730655d25703225023f2f351</anchor>
      <arglist>(const SbViewportRegion &amp;vpr)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>a8124629bce7d0e91645daea77bd2ccd5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>node</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>a23f40c99e64e982e2d3a88a1f9b551b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFPath</type>
      <name>path</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>ad4ca97e8aa530cdc447b6993ac4ec280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>min</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>a320568a6746c591421bcfddddaf3b3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>max</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>ae77a1fbd8d0c7aa08afcb742a0ed2f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>boxCenter</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>af32d6c301face83701ce3977d959add6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>objectCenter</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>accd5aff5caa72d580e74002aff2f5074</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoComputeBoundingBox</name>
      <anchorfile>classSoComputeBoundingBox.html</anchorfile>
      <anchor>ae01abc974aa47c26299dbc9f38869dba</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoConcatenate</name>
    <filename>classSoConcatenate.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoConcatenate.html</anchorfile>
      <anchor>a5efc269c30f81b148f1003dd3ec6b776</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoConcatenate.html</anchorfile>
      <anchor>aa03d6d50d714b1aeacb25f272572b289</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoConcatenate.html</anchorfile>
      <anchor>ab03cb8e5ef5a27ca116deffc37dc5961</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoConcatenate</name>
      <anchorfile>classSoConcatenate.html</anchorfile>
      <anchor>a1f245d172d0c83845a74228a60a4100e</anchor>
      <arglist>(SoType inputType)</arglist>
    </member>
    <member kind="variable">
      <type>SoMField *</type>
      <name>input</name>
      <anchorfile>classSoConcatenate.html</anchorfile>
      <anchor>a02d6a2b555cd040e0f4c512c86d88b0e</anchor>
      <arglist>[NUMINPUTS]</arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput *</type>
      <name>output</name>
      <anchorfile>classSoConcatenate.html</anchorfile>
      <anchor>a2963c32a0e673b1161544158cb0b0826</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCone</name>
    <filename>classSoCone.html</filename>
    <base>SoShape</base>
    <member kind="enumeration">
      <type></type>
      <name>Part</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a16fd6ddab267c269e269a883bb2774c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>aeda3349ee060a45da18707cf892bc57d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCone</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a194d82469bf653f5e361cb262d772fae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPart</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a6bd8132e809b5d63e75579c180dfec7e</anchor>
      <arglist>(SoCone::Part part)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePart</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>aeed3e4496529a3c4eb8b0398e385d943</anchor>
      <arglist>(SoCone::Part part)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasPart</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a310c7878562ab797a53229bbc2e96d0e</anchor>
      <arglist>(SoCone::Part part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a19cc4033b8b852a85c7000b49bc92ee5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a872dddcbf2abc1f88c192a3fd60b4bb4</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a8b72db44472e853bfc9c52b643006eef</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a954e546c49b3078934c159d05836cfa3</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>parts</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>ae8b026c6f0e7747321e52b456a76fd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>bottomRadius</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a6fec355e686bdbed995d478a8aef7236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>height</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a39bac3fb3f787a8a0a375fa2ca855060</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a8aad37e099b8a017e7c6631be9c6d883</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCone</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>ad4870bcfbf408b8bfe38862e9fbbf8f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a5030822da35b640ff56d89e89c451a14</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoCone.html</anchorfile>
      <anchor>a8d93b12a5f789dd0c3029fad09f672ea</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createTriangleDetail</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a7e62fb1ce714c316cd20c789bbc4d598</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoConeDetail</name>
    <filename>classSoConeDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>a6b8c8f399291d4aee3a5109acc37a6fd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoConeDetail</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>a4d6065d857e82a14d848dc555b2d7023</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoConeDetail</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>a2e90a7d984df1d8782b7165e6daa6192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>ab2c53c6ec06e72c1206da006b32eeed0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPart</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>ab6c3f74ee6937f7b08acf0f33ab2078a</anchor>
      <arglist>(const int part)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPart</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>a6ddf0ec35e8221562732ce5715527e1e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDetail</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a7584286c482e7f9ddfce80e2ea02d7fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a176df4de779d768b8c30215e9d97ea29</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a7867506c649488dd52b0569d807cbc28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a54ac808db82da0f072ef8f8aa00181f7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a73a661514c9e90826d521597121ba491</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>part</name>
      <anchorfile>classSoConeDetail.html</anchorfile>
      <anchor>a89ae24cd075b24033d6857e2cca1c7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoDetail</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a9ab95ca77cf53c15d3ca46625a9323d2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoContextHandler</name>
    <filename>classSoContextHandler.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destructingContext</name>
      <anchorfile>classSoContextHandler.html</anchorfile>
      <anchor>ad20fd1fcbda9fbe9eb397f13f9c7bc45</anchor>
      <arglist>(uint32_t contextid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addContextDestructionCallback</name>
      <anchorfile>classSoContextHandler.html</anchorfile>
      <anchor>aaf0496a61e928935bba097c3f92f9380</anchor>
      <arglist>(ContextDestructionCB *func, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeContextDestructionCallback</name>
      <anchorfile>classSoContextHandler.html</anchorfile>
      <anchor>a1e6f8fa0c627413478a78d20ca7c5d98</anchor>
      <arglist>(ContextDestructionCB *func, void *closure)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoConvexDataCache</name>
    <filename>classSoConvexDataCache.html</filename>
    <base>SoCache</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a70e3d8facedc0750d3fcd7b1977b13a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoConvexDataCache</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>ae2636028a43cafa774b0780f888ea219</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoConvexDataCache</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a3adec2d147874cfdab6331a309079c2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>aae1c67df118df25e3535ebb6892ca86c</anchor>
      <arglist>(const SoCoordinateElement *const coords, const SbMatrix &amp;matrix, const int32_t *coordindices, const int numcoordindices, const int32_t *matindices, const int32_t *normindices, const int32_t *texindices, const Binding matbinding, const Binding normbinding, const Binding texbinding)</arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getCoordIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a5499e70be32ec39fdac79dd830f587b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCoordIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a69042015ac6d0649c0e1b184f0d0a759</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getMaterialIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a533f7730b325ec6c572f079bd217a19d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMaterialIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a0fb3cd1f041eef09fb39076dcfbc2e14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getNormalIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a70c0b36348e0d0fd4c61745b547fa01a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNormalIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>af44365c1c8be5759299511203aa6ddbe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getTexIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>a6d2137c63da01f710943f765992181c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTexIndices</name>
      <anchorfile>classSoConvexDataCache.html</anchorfile>
      <anchor>aafde0ac7b044fd33df17f9a76495fab9</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCoordinate3</name>
    <filename>classSoCoordinate3.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a428a25f10d62b17f839d65e233793591</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCoordinate3</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a6b2a0a4d482803a7a9d05a681aea937f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a97ff3fa7739f930beb60472cbd6f6476</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a817f5e881510d7aa8a900eceaac87140</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a4dfc83ff0ab1c7fc6b22c06b43f5bbab</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>adc49a4eed12e606cf48ee28bef34b8de</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a0c94ede2d8397921333b0206cf098dbe</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>ad2353b14ff0ba225dfb3f7fa71052d48</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>point</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a51a6e25b7a4d81bc2c573514e8555744</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>af331021fcec03f33a0c215beaf666487</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCoordinate3</name>
      <anchorfile>classSoCoordinate3.html</anchorfile>
      <anchor>a17bcad8c2d1a044b9bd878112f755636</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCoordinate4</name>
    <filename>classSoCoordinate4.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>a75fae7094ab164d0819609dc99cfffd8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCoordinate4</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>af6f5b8e75da00aeef00ed8ac31d5f01f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>a1aeb8d5e41fefc704b95413952a97bd8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>abf79b6f2c55e64cb29e1510b933a9003</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>a6a16c41269ec92997b3188b6756916e1</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>a7829d2987625df7acc081b5b6acf005e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>a335a9a5b6991b613d7a7e9e1ca6633e0</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>ac904fbb90eb5e345e6e12c13057de48c</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec4f</type>
      <name>point</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>ac52e220adb5d87b99663042196911622</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>a1a7224fc271a04b045bb1ad48fadcc08</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCoordinate4</name>
      <anchorfile>classSoCoordinate4.html</anchorfile>
      <anchor>ab90ae65b5cdaa14f00bcbbe7afecf2ab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCoordinateElement</name>
    <filename>classSoCoordinateElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a6a76f3ab0e3da9b92928dfa983fd459d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a5929ad3fd021876a300a7067b5f50de0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>is3D</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>ae7ce4eb9f2a4d946484f9edd3b56d770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>get3</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>ae02412d99b2cbbe5c29ab246875639f0</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>get4</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a17e2e4bbcfb895adac18681173d43ea3</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getArrayPtr3</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a968d1c81a9b356ac90ef9f0591831a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f *</type>
      <name>getArrayPtr4</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a1a1f3a5f225c27b62110c50d4dabcb2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a9e36b110aaa3a5f287f2f46d5491a140</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a723d4b95931e10330528100cc7b8b88c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a6b05159857b352c8de9f52b36a08e77f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set3</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a2f81dcc7ba3a0136d414b1d30703d9c1</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numCoords, const SbVec3f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set4</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a4321cfd3f196510c9b8405b1f4b4f3df</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numCoords, const SbVec4f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoCoordinateElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>af0cce53ace3c7699da64cd08b83a2b20</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec3f</type>
      <name>getDefault3</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a006b828d8e1721c88e06cb9ef5c25170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec4f</type>
      <name>getDefault4</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>ad2b1dfdc77198274072d042d218792ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCoordinateElement</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a7ae862e4deeb1cc57a6d4389627ddd53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>numCoords</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>af50a3cf9c15daa8ca4fa6ca5cacef2c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SbVec3f *</type>
      <name>coords3D</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>a34fbb80708dbc63c3814c996198f9017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SbVec4f *</type>
      <name>coords4D</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>ab13ec68ab117528025805d83cd4d6c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>areCoords3D</name>
      <anchorfile>classSoCoordinateElement.html</anchorfile>
      <anchor>af73a059248c929c774ed2ce6e9cea520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCounter</name>
    <filename>classSoCounter.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a3d056c62b5327053ea5776887ec9fb75</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>acdb43e1cbb9695cc7399f39055a86263</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>ac44037550d2bdb71f428c4d701195f2d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCounter</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a864ad6b12b2055c5fb6354186a26a81f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>min</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a18b72f09eb77fe0b9929ba74f058c5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>max</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a166edeaf3a199340f9a37581cd30e6e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>step</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>aae155b55670383b609303edebfe5ba9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>trigger</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a84f5fc8d03a982d7aca14dd01020a9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>reset</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a0a738ea3099db302137c7d1b0efffa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>output</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a90c4163f33d4d3ae0556e9c5e0aa84e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>syncOut</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>a3b947dc8498b0641e7ab53a9ef26c95b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCounter</name>
      <anchorfile>classSoCounter.html</anchorfile>
      <anchor>abf9471f79a6924f8999bfbc46ef10a5d</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCreaseAngleElement</name>
    <filename>classSoCreaseAngleElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a8dd63185faa4e7bb0402986689b915c5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a50aef6112cf96be7b82beaed1fe5d39b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a7ad0f2e53f0c57c7d3f1beaed2166735</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float complexity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a9e20e46f43772e09ce5fd87ec0905577</anchor>
      <arglist>(SoState *const state, const float complexity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a9502848d86e19c1d38ae9a3578b4c7e4</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>ac580732789ad12cdd9b3194a859b735e</anchor>
      <arglist>(SoState *const state, const SbBool isvrml1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a10ff871365f4eee3149508cb22b466e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>a66956098377b3f1c276a7119ddcfab38</anchor>
      <arglist>(const SbBool isvrml1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCreaseAngleElement</name>
      <anchorfile>classSoCreaseAngleElement.html</anchorfile>
      <anchor>ada76bc731099a10cf9c73b67b68882be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCube</name>
    <filename>classSoCube.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a43afb7f5fa116334affb6aec763b523f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCube</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a9d60d4a34fd06ec19ed0da061a328501</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>adbc636042bf000df3fc613af40caa572</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>afb5e055a18bf968573b5004b4f46a335</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a887abedb1ebe5ed1a66bf41a2e3a6915</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>width</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a19f68a24bfb4b7915b7c9e583bb2fc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>height</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a92ea43ebe1d5afb78fdb80b8a50c9ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>depth</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a21b8e5af4479ac00b2f93cd5171b2ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a5009d7c87ff363a8fe4d6025cff7dcd4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCube</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a1d48b861970f57feefcf5e4393860b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a197c8d06b5b385647b2972ad2511ea0e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoCube.html</anchorfile>
      <anchor>a1cfaafcb67568159eaaa433791213d67</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCubeDetail</name>
    <filename>classSoCubeDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>a4b34233ce7b5c7012f1053465f6c2301</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCubeDetail</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>a3a32e1a67213881f91215b501605ccf0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCubeDetail</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>ae29faeb704f1043d3364780b6decc9ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>a4caa4ec06c12b8cec6ecec78dd6dc2fe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPart</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>a3b16fbe26433a1c7f3ed638ca8a5c667</anchor>
      <arglist>(const int part)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPart</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>a4dd44da3c455ce6ffa9e066431c2dc0c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>part</name>
      <anchorfile>classSoCubeDetail.html</anchorfile>
      <anchor>a89daaeed80115d9c7f3aa73013dba8f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCullElement</name>
    <filename>classSoCullElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>a7c154590416c61f9aa81e797d0a78409</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>a2e203947136e9e41a9298a696283b488</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>acfd52c0bcc33934f32cfe9e0d5ee9a77</anchor>
      <arglist>(const SoElement *elt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>af0ae7ab045f37eeed13c8d23295c1f42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>a8f264eff46a4fe1535fcccc2568a8263</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setViewVolume</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>aec290713469c0fbd6348e95a73287da2</anchor>
      <arglist>(SoState *state, const SbViewVolume &amp;vv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addPlane</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>a027968f475884448812251f4add09b56</anchor>
      <arglist>(SoState *state, const SbPlane &amp;newplane)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>cullBox</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>a82bdc8f789dd60bd48c383f384eecca9</anchor>
      <arglist>(SoState *state, const SbBox3f &amp;box, const SbBool transform=TRUE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>cullTest</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>a608b67d6639a691ab42d37843efca075</anchor>
      <arglist>(SoState *state, const SbBox3f &amp;box, const SbBool transform=TRUE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>completelyInside</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>ab1d3acc7035a0b202de7a7682c5bc5c7</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCullElement</name>
      <anchorfile>classSoCullElement.html</anchorfile>
      <anchor>ac5d1cacb9ac3c7442747088e6b12bc9b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCylinder</name>
    <filename>classSoCylinder.html</filename>
    <base>SoShape</base>
    <member kind="enumeration">
      <type></type>
      <name>Part</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a05b9b91a417388c07bb355cc455c8d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>ac30d86e9134ae454e03f70d3dbe96421</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCylinder</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>ab0d5ea0b83329dbe123bdf09582f9496</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPart</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a04f5737d78087a9a7c502b0564373117</anchor>
      <arglist>(SoCylinder::Part part)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePart</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a4913f036f5a9b65398c9c96120316cb9</anchor>
      <arglist>(SoCylinder::Part part)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasPart</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a9d4060ccf11f6e4629ce881a490986a2</anchor>
      <arglist>(SoCylinder::Part part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>adb973cd1b6d3bb74929858b6261f0957</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a18f5a7b192b5899bd357d3ebd8231bf1</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>aa1a10b67ae1cd15275d757f90ab212fb</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>radius</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>ac1699c05fc9859ea0140cc8a9bfd1eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>height</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a31f8dd601478fd5a768c460781b8d9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>parts</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a17e414a52b7ccfe341f9fcebc842ed46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a107d1827ae7f6be0578ff7e12a60939a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCylinder</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a11a26c90ff23f8fba4351e256519b836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>a7750d9440a96f7ab274ad519d54cb5f5</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoCylinder.html</anchorfile>
      <anchor>adc07cdf175ac7f81f6f8c4dee6bdc994</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoCylinderDetail</name>
    <filename>classSoCylinderDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>a70ccda4b296fff977eb90cce66986f44</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoCylinderDetail</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>a79c29937eb3222d3bbf00ab0da9bd421</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoCylinderDetail</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>af1030f70a3389fd6464fdf626aa8b500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>a59a3bc175798158e7339bfb6dedecb7a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPart</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>a97c80b94ba9cee2b6cdd6afe2f5208c6</anchor>
      <arglist>(const int part)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPart</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>adf5f774a8d9ec1971fb9afd09d397d77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>part</name>
      <anchorfile>classSoCylinderDetail.html</anchorfile>
      <anchor>a9e87ed7b1e64d0304dff1a1877a8481c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDataSensor</name>
    <filename>classSoDataSensor.html</filename>
    <base>SoDelayQueueSensor</base>
    <member kind="function">
      <type></type>
      <name>SoDataSensor</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>ac25bca01660dcf4cb240444b33fbd42c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDataSensor</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a262cff7df7beb658b4d17f22e0ef7326</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDataSensor</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a343ae89aa0b891e054bba7354d50a69b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeleteCallback</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a150448b51a530012ae970553e0cd59d0</anchor>
      <arglist>(SoSensorCB *function, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTriggerNode</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a873fb2a0f5ece04600c588d8abdc36e9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>getTriggerField</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>ac7344d2ec90cc0b7614c9c1877172ec1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>getTriggerPath</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a9863d08cda1bab3d25a084449509ded0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriggerPathFlag</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a84765fde3a1daf9447f7a3883fb1657a</anchor>
      <arglist>(SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getTriggerPathFlag</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a20d8129c7e29ee589e77e74d4eb9004f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNotRec::OperationType</type>
      <name>getTriggerOperationType</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a190eac778bb83b2a8b60287c3513423a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTriggerIndex</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a3661b5e45da07f9c120fa88a6bdc54a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTriggerFieldNumIndices</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a039f73b255b022aa73fe9d1e855950c2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTriggerGroupChild</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a3064f2306f2e3ec56eab5153edeeb67a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTriggerReplacedGroupChild</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a876dbab9caa38de251b37329fe4aa927</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trigger</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>a4200be321b36a977e358322b229329d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>af19eeacd02a6b3e210a07f1bef483428</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dyingReference</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>aa0aee30e4079e7c04ff58aa08d2f0987</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDelayQueueSensor</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>ad13897ccad36d059d146f1956b83e08c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDelayQueueSensor</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>aeba2e89bb52edfb6d47851e0ae2f03e2</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDelayQueueSensor</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a89ca819b836f56b8699e5f8a62f0e0b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPriority</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>abdf3c976cf2f6ca0a1cd67118b326de4</anchor>
      <arglist>(uint32_t pri)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getPriority</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a0ab7eb37bf927dd75d11bd150e9086d5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>schedule</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a6d3e044f4a81d2e43a51113757d3f86e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unschedule</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a0e3737bdbcb78844beae7c759a9e7af4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isScheduled</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a49e610acc61bde9db9e95af8fa63de07</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isIdleOnly</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a6eaa951dcc54e1ffa7c34575fa44301e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeDeleteCallback</name>
      <anchorfile>classSoDataSensor.html</anchorfile>
      <anchor>ab9e51845993dd93017c50cc23a49ec8a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getDefaultPriority</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a20afebece0d66b67cddcf59a3445bf3b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>scheduled</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a5b81587b893c71b31856ee3a8085b9d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDB</name>
    <filename>classSoDB.html</filename>
    <member kind="typedef">
      <type>SbBool</type>
      <name>ProgressCallbackType</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a888354ed1231a38f3b035ff1bc757de0</anchor>
      <arglist>(const SbName &amp;itemid, float fraction, SbBool interruptible, void *userdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a970f42dfd362c33c69fa1869bfae72b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finish</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a86ecbcfb8c31b89de106f12ce47d19c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanup</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ad5c1b0734798b5fccb01d5a340e5f000</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getVersion</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a2f93c9a3b9f6b25aa539f2d0273e742e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>read</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a6590ed18f339d4d0d0bce415becca8d4</anchor>
      <arglist>(SoInput *input, SoPath *&amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>read</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a66cee30314e475dc8053aeacdf9eb167</anchor>
      <arglist>(SoInput *input, SoBase *&amp;base)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>read</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a10058f7cd875c4a11375ce62b4e31399</anchor>
      <arglist>(SoInput *input, SoNode *&amp;rootnode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoSeparator *</type>
      <name>readAll</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a2ceee0dd279cd44b19660ae4fdd427de</anchor>
      <arglist>(SoInput *input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoVRMLGroup *</type>
      <name>readAllVRML</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a21af0ab91b55308055efe26a43a8ce6d</anchor>
      <arglist>(SoInput *input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isValidHeader</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>afb9bfecc5740bc7843805fcdf6407f56</anchor>
      <arglist>(const char *teststring)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>registerHeader</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>acc6b1ebd3ddc2ceadc5b6924c030d4c6</anchor>
      <arglist>(const SbString &amp;headerstring, SbBool isbinary, float ivversion, SoDBHeaderCB *precallback, SoDBHeaderCB *postcallback, void *userdata=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getHeaderData</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ad07bd0c5c6a73ee1969e5b2e233760a8</anchor>
      <arglist>(const SbString &amp;headerstring, SbBool &amp;isbinary, float &amp;ivversion, SoDBHeaderCB *&amp;precallback, SoDBHeaderCB *&amp;postcallback, void *&amp;userdata, SbBool substringok=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumHeaders</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a534d491c93463fb0aaf52624871e54f6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getHeaderString</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a7550d7484ebd0141a91167b9225f2499</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoField *</type>
      <name>createGlobalField</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a4de0ecbf63b7ff4c16157227eca1a9d8</anchor>
      <arglist>(const SbName &amp;name, SoType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoField *</type>
      <name>getGlobalField</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ab3b006bd268810d17dd3f57362aa9dd1</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>renameGlobalField</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ac9f92b1c6584725782c2bc22d0bf0ab1</anchor>
      <arglist>(const SbName &amp;from, const SbName &amp;to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRealTimeInterval</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>aaa1018dd9fb76eab1af55c6322bd9019</anchor>
      <arglist>(const SbTime &amp;interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbTime &amp;</type>
      <name>getRealTimeInterval</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>af1b5ed87dc9d0fdd4e58e0d3dc533fed</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableRealTimeSensor</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a89acf7863ffca8f10501c07ad3a70301</anchor>
      <arglist>(SbBool on)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoSensorManager *</type>
      <name>getSensorManager</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>aec3467618745683725f2b5f09f0e9ba4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDelaySensorTimeout</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a4a40b27b0ed0cd4f3ee94f9b97c97894</anchor>
      <arglist>(const SbTime &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbTime &amp;</type>
      <name>getDelaySensorTimeout</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>af06e3af9a6fa582a02e22ad1175dbf5e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>doSelect</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ab6c303f9c73503e6d299576d6742ad96</anchor>
      <arglist>(int nfds, void *readfds, void *writefds, void *exceptfds, struct timeval *usertimeout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addConverter</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a01479546225a62b92b9a3d0715417d33</anchor>
      <arglist>(SoType from, SoType to, SoType converter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getConverter</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a1ff424d194f13d88abd5efc3e7d5b3b5</anchor>
      <arglist>(SoType from, SoType to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isInitialized</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ab224f9d6c46e1ebe4c491f9acd611406</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>startNotify</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a78a72575b9e042202ada783d73019caf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isNotifying</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a01f3e1cec8bec1629e761b7e9c5b3700</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>endNotify</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a30ee5427b857fc16afff0a08d8669196</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addProgressCallback</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a8bfc95770120078504b6004db4a49c1b</anchor>
      <arglist>(ProgressCallbackType *func, void *userdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeProgressCallback</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>acfefefa858f3aa8b824cf2c1a9544f0c</anchor>
      <arglist>(ProgressCallbackType *func, void *userdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isMultiThread</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>aacaa6805ae0284379ccc24424e199535</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readlock</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a21f6da9e9825cbb89eeacf2b3d6ff357</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readunlock</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>af706439accf13393ebc3a8b330575bb5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writelock</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a3df36b103bdc10e8918ac9bdffc82461</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeunlock</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ac470ece801064a0164a0f31bc33941e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createRoute</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>ac3987b5e5936c7ce8cc11e6c647d717e</anchor>
      <arglist>(SoNode *from, const char *eventout, SoNode *to, const char *eventin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeRoute</name>
      <anchorfile>classSoDB.html</anchorfile>
      <anchor>a48b28389f94db50c1277b99322816652</anchor>
      <arglist>(SoNode *from, const char *eventout, SoNode *to, const char *eventin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDebug</name>
    <filename>classSoDebug.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>GetEnv</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>adf27ebf5600b2c50243299d488bfa2e0</anchor>
      <arglist>(const char *var)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RTPrintf</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>a5738b3477f0fa0a3b59e14cc51da8c7b</anchor>
      <arglist>(const char *formatstr,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>NamePtr</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>a02d06658b68cad8e84fe6c031e79de93</anchor>
      <arglist>(const char *name, void *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>PtrName</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>a8b1925e2f5e266d9ce1e1ae472ca45d1</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>a4cabb5a8af0936a8c5507e6536f44cfe</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeToFile</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>a6a3cd17303120b896d72dd95f5903845</anchor>
      <arglist>(SoNode *node, const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeField</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>a4b156a1e8e035e09f510ca1f76e28071</anchor>
      <arglist>(SoField *field)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printName</name>
      <anchorfile>classSoDebug.html</anchorfile>
      <anchor>ab763ff9ca9d1680feb75907f6fe27584</anchor>
      <arglist>(SoBase *base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDebugError</name>
    <filename>classSoDebugError.html</filename>
    <base>SoError</base>
    <member kind="enumeration">
      <type></type>
      <name>Severity</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>a75af94a4fc4f0feb5b2ead59b04e9bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>a608e8376b0af4d87579b5da4aab9ec6b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoDebugError::Severity</type>
      <name>getSeverity</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>a1b07bfafad1f89368c0c117048d5be40</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoError</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>aedcf39df541330db83bb8264c81b7033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getDebugString</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a83dc45e92db93c3544514627528c32a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a0aa97b9643b096a937e9089a0b4ba407</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>post</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>ac58cb29fc7116d5c41c2e41b9d9465b2</anchor>
      <arglist>(const char *const source, const char *const format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postWarning</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>ade660ff7e6ba7ff6c8f716016cf55531</anchor>
      <arglist>(const char *const source, const char *const format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postInfo</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>a0ec1038afce3f363d0566db878de8564</anchor>
      <arglist>(const char *const source, const char *const format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHandlerCallback</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a3221f7f406b8788c5f3dce1475da00b0</anchor>
      <arglist>(SoErrorCB *const func, void *const data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoErrorCB *</type>
      <name>getHandlerCallback</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a2caf61a4c7e75c86e215ac99b28f0f06</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getHandlerData</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>acae62657f4158d0d9edd3dd88bd9968c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>ae2c90745f79f7bbbc4f5038aad369381</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>post</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a7648888fdc2d85156787a76d7d064c66</anchor>
      <arglist>(const char *const format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getString</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a0fe91f7aa9a113f40d7b8e9bd9831895</anchor>
      <arglist>(const SoNode *const node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getString</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>adaeb1d41a48af32140a4f3d94c5f4602</anchor>
      <arglist>(const SoPath *const path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getString</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a68f1a499bb28288b1a5f97b9a4ce6131</anchor>
      <arglist>(const SoEngine *const engine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a2503816e8f12af785974fb7214b3efc6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>ac71997bf86112c4437f2f90213434dba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoErrorCBPtr</type>
      <name>getHandler</name>
      <anchorfile>classSoDebugError.html</anchorfile>
      <anchor>a9ab7c7bf255a2b22e25239c788f90832</anchor>
      <arglist>(void *&amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDebugString</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a2538d100bcb6df743a8fc9f51602dcea</anchor>
      <arglist>(const char *const str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendToDebugString</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>aef396299b8419b1b09ba4bcc838289b6</anchor>
      <arglist>(const char *const str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleError</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a899fe836763793c96a74e18d6d4f3334</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>defaultHandlerCB</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a48f1514286444569c8ba7c4ae59b56ce</anchor>
      <arglist>(const SoError *error, void *userdata)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecimationPercentageElement</name>
    <filename>classSoDecimationPercentageElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>a1f2a596f7ae63b36be4a63b4ce322b49</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>a5699d52dfd1368156c9c94f23fabf55e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>af7fd5635d3c2be800dc93b0ff6b9a3b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>ad632dba58921b90f8deade1b8866a8eb</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float complexity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>a45652f5d24df8e94f10ec3a148a250bb</anchor>
      <arglist>(SoState *const state, const float complexity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>adcdd0a19ac9aaef7a17163291a4cf0ce</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>a6d06406f52e90258e38d54258bf7c730</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDecimationPercentageElement</name>
      <anchorfile>classSoDecimationPercentageElement.html</anchorfile>
      <anchor>a2109642492da93042b50edf7df5a5a2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecimationTypeElement</name>
    <filename>classSoDecimationTypeElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>ab77cb535bf5eca102428ce829a5db59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>a6ca12ce719de9f37265fda7abdf3f79e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>adf6250caf286ab0cd952a9b53a4321ae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>ae0a4551af8ceb3315114269241ec417a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>a8f396209d74305c1498b4827a50d133f</anchor>
      <arglist>(SoState *const state, const Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>abcc4a91e9388e6e5d6cb87aa3be35ca5</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>get</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>a1911c4e17b8e4a36cc7bcaae9899bfc9</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>getDefault</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>a91c5dc630b6320fb3a9bf040b08045a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDecimationTypeElement</name>
      <anchorfile>classSoDecimationTypeElement.html</anchorfile>
      <anchor>a51b7e15b0322b7d97b932365c7bbbdf2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecomposeMatrix</name>
    <filename>classSoDecomposeMatrix.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a6702abb8c83dfe90d38dd2cc51461b23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a78688a92e5cfdacdf2dafc6439bf4d4e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a2cb3d3fe33c9199d2e8e478784eba739</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFMatrix</type>
      <name>matrix</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a54096e2f7a4f4aa80df51fd6be3b3ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>center</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a181aa5ce78179323d129b697ae73d47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>translation</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>abcabdb1cb175b5f06ed609e6dbb4ef78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>rotation</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a97c3d1b772b24b92575384e06f20c69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>scaleFactor</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>aee71769f2469748475aa2bb609cde77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>scaleOrientation</name>
      <anchorfile>classSoDecomposeMatrix.html</anchorfile>
      <anchor>a5cebd08d5bd915d604fb70d3bc7e85d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecomposeRotation</name>
    <filename>classSoDecomposeRotation.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDecomposeRotation.html</anchorfile>
      <anchor>a3628d1aded59c060cff19c4862c79a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDecomposeRotation.html</anchorfile>
      <anchor>a6885bb56b5a2ab53a952800118dea518</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoDecomposeRotation.html</anchorfile>
      <anchor>a0e08dd18205e42e8cc702a056fba4899</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoDecomposeRotation.html</anchorfile>
      <anchor>a38e22a181881145021896ebf4ca3339c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>axis</name>
      <anchorfile>classSoDecomposeRotation.html</anchorfile>
      <anchor>aba5d52e7655c0e8bd6ec75f22f03b073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>angle</name>
      <anchorfile>classSoDecomposeRotation.html</anchorfile>
      <anchor>a895ce5a23350132bd71c97f1687b6c28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecomposeVec2f</name>
    <filename>classSoDecomposeVec2f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDecomposeVec2f.html</anchorfile>
      <anchor>a3b95b6803dcb9082f9c8768c4d0be319</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDecomposeVec2f.html</anchorfile>
      <anchor>a82c0964a144bc52e0f76390b2f1e0f2d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoDecomposeVec2f.html</anchorfile>
      <anchor>ab7aa698b7bd0edff32ebb1e068d39edb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>vector</name>
      <anchorfile>classSoDecomposeVec2f.html</anchorfile>
      <anchor>a2133b32a4ccdc8c2a8d46d659a3c8d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>x</name>
      <anchorfile>classSoDecomposeVec2f.html</anchorfile>
      <anchor>a7bdc25bd0a74d2f7aa60ab8e9e7795ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>y</name>
      <anchorfile>classSoDecomposeVec2f.html</anchorfile>
      <anchor>ae6f0965af2b31c18cd30137bdab10346</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecomposeVec3f</name>
    <filename>classSoDecomposeVec3f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>ae58613708c94b4c06ee48c72928e6d4e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>af38a09fe3e633047ef70724114c71b52</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>a5b8929ccec8e67d5648d82ac882295cf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>vector</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>a50eaaeb518759e1b86ad0ab9f21c0d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>x</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>a94c1cc4f6f4a22ac870ba228dead101c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>y</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>a5f75fdf04c1191c6fcdc2b1aebfad572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>z</name>
      <anchorfile>classSoDecomposeVec3f.html</anchorfile>
      <anchor>a5ca8de0537b8f19e206bfe5ad6dec55a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDecomposeVec4f</name>
    <filename>classSoDecomposeVec4f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>a5ca0dcbc4ddf005eff6e48d59c670c94</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>a12ded06401715e0f869b9502d0c2918a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>a33df6ff9f61498453ba9cc7eb5811551</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec4f</type>
      <name>vector</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>a4a651b269aa2047d0e18edc0940f6529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>x</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>ad81ffe20e190629afbae1874a42a3685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>y</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>ab4c800832bf1e71b915849513d5b2bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>z</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>a21a114bf8b5a17cc2306a8d7c578400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>w</name>
      <anchorfile>classSoDecomposeVec4f.html</anchorfile>
      <anchor>a99936fdacfefd6a0542071253637fe5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDelayQueueSensor</name>
    <filename>classSoDelayQueueSensor.html</filename>
    <base>SoSensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trigger</name>
      <anchorfile>classSoDelayQueueSensor.html</anchorfile>
      <anchor>a0b8ec90cc9ab774853624c2f9de76344</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDepthBuffer</name>
    <filename>classSoDepthBuffer.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>DepthWriteFunction</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEVER</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07a6d03bc7a715a5712759b79c09af20b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALWAYS</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07a0a8cf68dc4fa68e0bfd742285ca3cbef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LESS</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07aa7a2a0f3c76f9e2c85b768f074600ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEQUAL</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07aa32b65501c9e972e17d2ab1bae84dd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EQUAL</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07af0bca2cdd0e39824d57dbec2419489c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GEQUAL</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07a3188110fafd5f18a5506765f05914751</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GREATER</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07a7c6306488e48116e1d0b33b6714d102c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTEQUAL</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a55258c0be1e38002eec580cb478c3a07ad06778753dbdad8764cc74c0ba858590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>af0a07ce69c36265e7c06cdf5c2446139</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDepthBuffer</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>adc3534d7a8bdaa876ff8715546d64b98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a05d48e6f1eb4408267e71c2579e67c41</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>test</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a04b5257cc434a90f39b67be191618e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>write</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>acfbc95dd6959c7d53ff82babc0c4e110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>function</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a4de696e790706a1769b87d1515e35e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>range</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a9b6e670c6f75cdd9970802bdf7bc79f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a043cb4e3c44eaaa797ff42dd178b70e5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDepthBuffer</name>
      <anchorfile>classSoDepthBuffer.html</anchorfile>
      <anchor>a99bd287f43d43bd1755d2601d137562d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDepthBufferElement</name>
    <filename>classSoDepthBufferElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>afd3055db490a42b55dd356cc8c71a0bf</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>acfcbdf02e3aa77302a3cd35f76f6c63f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>ab0fa4146703f8a4ad17f81a23e6f1655</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>aee0f7ee18367578e73e9e11f43c1f510</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a3b81dc8eeedc143ba823fd16880aa8e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>af838b5814ec699c3a3f62548302ea8ed</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a9bed5428a7a300dd62b036f6e1cdb0fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a81e18aafbc3b79020d9372fb205f721c</anchor>
      <arglist>(SoState *state, SbBool test, SbBool write, DepthWriteFunction function, SbVec2f range)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>ae44309e34d869473d098759c481b18e1</anchor>
      <arglist>(SoState *state, SbBool &amp;test_out, SbBool &amp;write_out, DepthWriteFunction &amp;function_out, SbVec2f &amp;range_out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getTestEnable</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a879971eb77b8e2a4691d96ad43cc8474</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getWriteEnable</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a29b0c930a47410f349f90b24d03524d1</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DepthWriteFunction</type>
      <name>getFunction</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a002ba8eb710fbebe369ab49b8fe2513e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec2f</type>
      <name>getRange</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>aae2d9bac96511d9bc759ec3704da4e55</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDepthBufferElement</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>a69f5b62061af178bc4282e73a4fedbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoDepthBufferElement.html</anchorfile>
      <anchor>af96bd125636841c7bbc8ef62c749ab81</anchor>
      <arglist>(SbBool test, SbBool write, DepthWriteFunction function, SbVec2f range)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDetail</name>
    <filename>classSoDetail.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a1fe89bba19607b2854fb41beec156b67</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDetail.html</anchorfile>
      <anchor>a5f254d2c666e18624de3bd2aedbc2b46</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDetailList</name>
    <filename>classSoDetailList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoDetailList</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>a2a581608ddfd8140c87377c5c23b3c93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDetailList</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>a1c3d4d06f64bb86665cd4192271c5c14</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDetailList</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>a6a04bc8f53c87eb30d5c26f13df6a14c</anchor>
      <arglist>(const SoDetailList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoDetailList</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>a75f3a6dba3067c95061024b540f16267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>a991227efed1d231562858d0303609dfb</anchor>
      <arglist>(const int length, const int fit=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>a555f88b11be299f2fe2221024e920682</anchor>
      <arglist>(const SoDetailList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>SoDetail *</type>
      <name>operator[]</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>aa93a8ff7f9cb9ca2bc5483d21dcf959a</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoDetailList.html</anchorfile>
      <anchor>ad943c37febf69f78808b15a8fcaec341</anchor>
      <arglist>(const int index, SoDetail *item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDiffuseColorElement</name>
    <filename>classSoDiffuseColorElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>a89b954b0bb592e0af5c08560f176d1c8</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>abd968de03a8e9b2ad650d91195e8f34c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>get</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>aca42a9e2ac064212841cf4b346712c3e</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor *</type>
      <name>getColorArrayPtr</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>a13b4f50852f0904c122cf5f0075ff313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const uint32_t *</type>
      <name>getPackedArrayPtr</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>ac2616870111fa4741e3139666b2b66bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>a396a31b530f78bc1cc8d3cf568fdbc32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>a99061f2a08964ac3fafc5f2adcaa9575</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>a07c17e69f481f0ecb8724ba96bf55e99</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numcolors, const SbColor *const colors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>ac848e15195917f72a4a889730a731658</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numcolors, const uint32_t *const colors, const SbBool packedtransparency=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoDiffuseColorElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>adeeb49c9e6f004db425259c2c9eec124</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDiffuseColorElement</name>
      <anchorfile>classSoDiffuseColorElement.html</anchorfile>
      <anchor>a46934c30357f1d0ec664dea3456b8aeb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDirectionalLight</name>
    <filename>classSoDirectionalLight.html</filename>
    <base>SoLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDirectionalLight.html</anchorfile>
      <anchor>a0760831027463ee678e0ddc8fd8b73bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDirectionalLight</name>
      <anchorfile>classSoDirectionalLight.html</anchorfile>
      <anchor>a6beb73067cc6604001516bd2e7eef63b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoDirectionalLight.html</anchorfile>
      <anchor>a4d8a6da6e6c3c9617de0e99042d846f2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>adc1d9b76d02f79bff5fc48f67de62746</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>direction</name>
      <anchorfile>classSoDirectionalLight.html</anchorfile>
      <anchor>a78c3a83326d1f022b3fa004fd1988fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>aa54c2cc474667387a3ef81ebf87e1ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>intensity</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>a5f50fb5351d88c8166fbf4255636b048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>color</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>a162dac4d38c438c13ada04fb0a4aac1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDirectionalLight.html</anchorfile>
      <anchor>a853c45fabb4d05010be990ed4f95d9df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDirectionalLight</name>
      <anchorfile>classSoDirectionalLight.html</anchorfile>
      <anchor>a05837c5c856edd84151a3044bde15dcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoLight</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>a966891c619160fd6d40bb8309341630f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLight</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>aed349e5268db4c662c368c836210b16b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDirectionalLightDragger</name>
    <filename>classSoDirectionalLightDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>a9377fb225815f3ef09a7339a53e55a07</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>a167e991210b9a98dd8b3d5a243bdd55f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDirectionalLightDragger</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>a14651d7fb0f95d7befb9bd70c35f6406</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a80e097aa02fde58e7639d1838448e259</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveStartParameters</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a9bca559c2581d4c09ecf2c81b8285764</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>ac0954427a5a2bc50827692d8922050cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>aee4f54e9095128c222336e09a8c441cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>ac998e21e13ec9530166dda51728323b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDirectionalLightDragger</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>aab0b18e564de24da11ee302b79603679</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>a5d6a4a6d30bcb422db36a745f68733ee</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>aff0f7d108122cc57d238786123ef59dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a813770e15d6cee62883dbe4cbd456c92</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>aa5870f7164dbf184fdd536b6a8414989</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>ac0f3901a70e0bfa884cc46e74a19792d</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotFieldSensor</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>a4f9e4661b9ab9a003f7814cc32af6d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoDirectionalLightDragger.html</anchorfile>
      <anchor>a1f824090ea2a124a512f28a539438b77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDirectionalLightManip</name>
    <filename>classSoDirectionalLightManip.html</filename>
    <base>SoDirectionalLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>ae9208944ebe6658512549b0a5082ea6d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDirectionalLightManip</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a42f2cbe452fc3921823ef651a53e1384</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoDragger *</type>
      <name>getDragger</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a42012f970c931482ade3af4e4eaf2568</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceNode</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a2ae48f47de4ddc4c2c800c75a633d96e</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceManip</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>af94ffe38ca79ac58da39fb4a66ca2406</anchor>
      <arglist>(SoPath *path, SoDirectionalLight *newone) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a9a5d39c4ad32e5e46c52527d9e81c496</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>afa525b98040dc638885181733d3e1027</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a81dcd1b5a49f0cd8f8f94cd59f186abe</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a739b0e5b2fcef6f016de99517d8a2f8c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a826bc9cf9e8f19f0dbd09b28cae13153</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a9da0caec22104db8ea3f1ddf6377a742</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a7f3a7ef4af26dca09a9e2946450b3881</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a22c53af241354dc897557c762da5e9f0</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>af39e58d2a58b80ee8c71fca506c81038</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a25cd1cdc4a7238821f1b82115591597e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDirectionalLightManip</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>afe944470be7f7fafffbae835373d9cb3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDragger</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>aa03a9ce3f1b94b1179ff1be580cdac44</anchor>
      <arglist>(SoDragger *newdragger)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>ae3604fabe26d2c34a7adf7f7c8c30f3b</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>transferFieldValues</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a00a6855d84fa625aa2c99346a234f305</anchor>
      <arglist>(const SoDirectionalLight *from, SoDirectionalLight *to)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a7b151697b2ae03ff166e56e45e3f4ad4</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a9eec1e548147d70ff18bf85a4d2e9018</anchor>
      <arglist>(void *f, SoSensor *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>directionFieldSensor</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a202b36e6d1a4f40de2cc3ff95a692f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>colorFieldSensor</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a8afc505c3b298d48749ac4be009a6d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoDirectionalLightManip.html</anchorfile>
      <anchor>a0747dda4b23e01873ffa607283d71199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDragger</name>
    <filename>classSoDragger.html</filename>
    <base>SoInteractionKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a5658eb9e71d6fb31598e18af3e20baa9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a0a472ad73e92e20353012f8e7c2252ba</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a68a06a2bee8a1beda20412d9505fba0e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoDragger.html</anchorfile>
      <anchor>a6b21291ec4de984483c35e8e7fc64c84</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>ad44786431f5b073879b4c74d1e97d47a</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDragPointDragger</name>
    <filename>classSoDragPointDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>ad48699d49d87a9c2af4a628edf4c7dff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>ad9893112d30667e382a1882208fbf48e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDragPointDragger</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a614ef13f730250bd0a101e48280ee0b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJumpLimit</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a20bfe7675c8d171faef2314280d50390</anchor>
      <arglist>(const float limit)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getJumpLimit</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>ad0f481c6b624e1f4b6763af71ef7c80f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showNextDraggerSet</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a311750e9c9319c4f75a88e832c29e0b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>ab812f1eec4afd17725cfaab4b72646ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>ad87fece6d711e9c87089e89c63c4f170</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDragPointDragger</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a02e4cecc307d154eb4993d38e65fe082</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a025e7195f8bdf5d324d4c80574bc4434</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a1ce5f30ee68208e8a54cbd696f883434</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a910c09efa1ba925d6c525d9eaba2b4da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>ac585b8bb7f418a22b003d84d23da9b43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a025473a5d004b7db89d34b529254c0e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a63b2f0f72f0943fe6286a07ed1d9014d</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a4870731737dff9a505862e6c979c1476</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a0d4c1060f70b705d781b66b24d91dddb</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>metaKeyChangeCB</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a659e69d69a1d01fc8fae8705aa81526b</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a24902a17cf0151685e23487bf8774374</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>aab35e7c8169e5995b10180e6cafe42e6</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoDragPointDragger.html</anchorfile>
      <anchor>a00ded3cc8beaa4d2d66c46009c6f6343</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDrawStyle</name>
    <filename>classSoDrawStyle.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ae0b3acb00d63b3a3969ea9f6e6b94e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILLED</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ae0b3acb00d63b3a3969ea9f6e6b94e7ea3b75de00d046312eec662cd8d86a5345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINES</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ae0b3acb00d63b3a3969ea9f6e6b94e7ea71df3ec99cbd96a770640eb121140c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POINTS</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ae0b3acb00d63b3a3969ea9f6e6b94e7ea7c43e20a890459c4c48a056ada0d5680</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVISIBLE</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ae0b3acb00d63b3a3969ea9f6e6b94e7eacd3cea4f5a09ecd901c8526f0b06d9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>a283bf795fb144ccf1fa347114f7f0f14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoDrawStyle</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>a838a897444b3a5ab60baa085c65d69ee</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>a3465e14668a02cd28f2f53dd7940b0c7</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>a0a6b8b0f1dff7456c8e9c382201cc5d7</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ad2d5893cc6803e77158978638580ff1a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>style</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ad2f93894213b15f03e99240cac5fbf3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>pointSize</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>ab4389132d46293dc9a76cce7d02a0097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>lineWidth</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>aafe95970d6bcfc4d795cfcafa05be20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFUShort</type>
      <name>linePattern</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>a24dc0b5c2d88c3f1d22c2415a9689e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>af92ee8324c40578c86d28151b050c1fb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDrawStyle</name>
      <anchorfile>classSoDrawStyle.html</anchorfile>
      <anchor>a6d866943ff51c4fe2f175ab98dc6d3e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoDrawStyleElement</name>
    <filename>classSoDrawStyleElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>a3563b11c949573a479f104696a841ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>a746cf3a5438b106e7e462ee35cd67b28</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>a5a0657d82a03d2c20bd5bdf11f517212</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>ad97423d96694f00c1699c5569bfed914</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>a5a58a5ff53b20e693e468163ef27db6d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Style style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>ae9315a874758c2e94eaf47b58adeb61d</anchor>
      <arglist>(SoState *const state, const Style style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Style</type>
      <name>get</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>aa37a0670a5f182f4d36ec0a64a879906</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Style</type>
      <name>getDefault</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>aab7df4c2c461198b1fe577a849a1c38f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoDrawStyleElement</name>
      <anchorfile>classSoDrawStyleElement.html</anchorfile>
      <anchor>af4bcdfa6bd35bc8d0a22af0e976e09a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoElapsedTime</name>
    <filename>classSoElapsedTime.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>af7780a7b4ce92e7683cdfb8c955d7897</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a0f33609c0e15636b60b15999634b31a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a56f8f2e3d4fb3e2e680fe057d40d3796</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoElapsedTime</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a7d56ecc6fb47e9d83193c2ccd317b97e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>timeIn</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a8c13ce60fafcd81cc846e07607df55fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a2b084cd200ab605d05061f3fde71fcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>abfe57f819bf6b35fe6f74e823fa4dd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>pause</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>ac674803b041e3663819dd11549722a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>reset</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a1fc07594d69656d6e89bfad30cde4803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>timeOut</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a3177578d2389840b654c28850ef540ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoElapsedTime</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>a16d87736c2b8f9be400975e039b11803</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInstance</name>
      <anchorfile>classSoElapsedTime.html</anchorfile>
      <anchor>ad579e939908a68c6ebf8ad1b49732b01</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoElement</name>
    <filename>classSoElement.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a620552c04e13e74ac19bfdb3cebca818</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a50b30f50781837a7aedc5cdbd25c5ecb</anchor>
      <arglist>(const SoElement *element) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoElement.html</anchorfile>
      <anchor>a4a6e2a38cdbbdd1dccbb3e9928e68d55</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEmissiveColorElement</name>
    <filename>classSoEmissiveColorElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>a94cd3625a0830e24f7557a6707795be0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>a12fea8ec71eac2cce39155a1deef39ec</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>get</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>af55948d9b59d79c5d09615b5941130c5</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>abd6ea3e6975a50b5b7b8611472f0ba78</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>a2176248fc6e96a89b699f637c861dd78</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>a8b163c5827190495b8ee9fb5b75b7e88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>ac48079b9af29c875eed3aa416b212b74</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numcolors, const SbColor *const colors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoEmissiveColorElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>ac10c8e38fcc6a1554377725a5bd56d6b</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEmissiveColorElement</name>
      <anchorfile>classSoEmissiveColorElement.html</anchorfile>
      <anchor>af99b47c47a2760d396496121fb54b0a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEnabledElementsList</name>
    <filename>classSoEnabledElementsList.html</filename>
    <member kind="function">
      <type></type>
      <name>SoEnabledElementsList</name>
      <anchorfile>classSoEnabledElementsList.html</anchorfile>
      <anchor>a1332d7f7efc996c8be475c9380fb9254</anchor>
      <arglist>(SoEnabledElementsList *const parentlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoEnabledElementsList</name>
      <anchorfile>classSoEnabledElementsList.html</anchorfile>
      <anchor>a76c34847665e5b4315e040dce0dc148e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SoTypeList &amp;</type>
      <name>getElements</name>
      <anchorfile>classSoEnabledElementsList.html</anchorfile>
      <anchor>a2285473c8e2ca4a97091dccec2b3c977</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classSoEnabledElementsList.html</anchorfile>
      <anchor>a205b2a75989c0e965a6c275e8a0ca11d</anchor>
      <arglist>(const SoType elementtype, const int stackindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classSoEnabledElementsList.html</anchorfile>
      <anchor>ae5007263c0142dbe82aa6f769f82e996</anchor>
      <arglist>(const SoEnabledElementsList &amp;eel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCounter</name>
      <anchorfile>classSoEnabledElementsList.html</anchorfile>
      <anchor>a323601b6985adecbbd94c3e2842b2de7</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEngine</name>
    <filename>classSoEngine.html</filename>
    <base>SoFieldContainer</base>
    <member kind="function" virtualness="pure">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>acd5fffe38b63bba5cab302f6fae7dca5</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a804a4be70d7808aba5dbeff8570f8fb5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classSoEngine.html</anchorfile>
      <anchor>ac7aa2cbecf4a33de22abc1f776f07e53</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEngineList</name>
    <filename>classSoEngineList.html</filename>
    <base>SoBaseList</base>
    <member kind="function">
      <type></type>
      <name>SoEngineList</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>a85acece813639febe4fbeaef3f2ff601</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEngineList</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>af4123bcb468cf957b6fc2c309894369c</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEngineList</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>a142ebdcc30bcd317c97c69e73cbfc4a5</anchor>
      <arglist>(const SoEngineList &amp;el)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoEngineList</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>ac1cc2be648abe9260b97d0940be97948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>aaabcef9d90f4ea0a7a232b6125bb67dd</anchor>
      <arglist>(SoEngine *const ptr)</arglist>
    </member>
    <member kind="function">
      <type>SoEngine *</type>
      <name>operator[]</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>a4dc280c9fa8ab13c24affcd1d13555dc</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngineList &amp;</type>
      <name>operator=</name>
      <anchorfile>classSoEngineList.html</anchorfile>
      <anchor>a6d61001ee15a76f2cc617255495fd7ef</anchor>
      <arglist>(const SoEngineList &amp;el)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEngineOutput</name>
    <filename>classSoEngineOutput.html</filename>
    <member kind="function">
      <type></type>
      <name>SoEngineOutput</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>ae41c850127b685421bbb9a03e2f5eea6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEngineOutput</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>aeafdf834d9a2a3e529077d1363d464c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getConnectionType</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a478a7d784f5cbf05057c3c66b07cc529</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getForwardConnections</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>ab9aa6deb69abbf60d346ec627546d47e</anchor>
      <arglist>(SoFieldList &amp;fl) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>ac27253922a0b673a2b01342fce84a369</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isEnabled</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>ae8e0f60ae8d2c1bbc1a0b832b7d69222</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngine *</type>
      <name>getContainer</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>ae5c4c511e2be1e485164e3694d6d2692</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNodeEngine *</type>
      <name>getNodeContainer</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a318b27209ec872efc924b964db161276</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNodeEngineOutput</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a41b8e5c98403de260cfdff59887c329d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContainer</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a0d0ec6018e20dc2935886b5cc540fdb8</anchor>
      <arglist>(SoEngine *engine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeContainer</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a526375b051e5187b7a7662e6aea0348b</anchor>
      <arglist>(SoNodeEngine *nodeengine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConnection</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a7c787d1a762adc2fc51303628560daf9</anchor>
      <arglist>(SoField *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConnection</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>acca4980207d0e822086974358e4d5232</anchor>
      <arglist>(SoField *f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConnections</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a02038502b6f830def2358b1ea3ccfc23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>operator[]</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>ac04be05688954a0eaf24fa8a87d92816</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareToWrite</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>af6766bc74fb6ad2f2f6d5e636fb6f1e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doneWriting</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a55d4925f66d8e694be6e2db7ad153263</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchSlaves</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a8967836b98bbb979590179557601cf39</anchor>
      <arglist>(SoNotList *nl, SbBool donotify)</arglist>
    </member>
    <member kind="function">
      <type>SoFieldContainer *</type>
      <name>getFieldContainer</name>
      <anchorfile>classSoEngineOutput.html</anchorfile>
      <anchor>a7e53a42f36c3c52f906524cd6e477fb2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEngineOutputData</name>
    <filename>classSoEngineOutputData.html</filename>
    <member kind="function">
      <type></type>
      <name>SoEngineOutputData</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>abe4afe71d6d314e3504799a6032bfc8a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEngineOutputData</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>aec901cff89d0e11c2c27e298df0816b5</anchor>
      <arglist>(const SoEngineOutputData *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEngineOutputData</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a7885d74dbde188c66b854a5198dffde3</anchor>
      <arglist>(int approxnum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoEngineOutputData</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a96c3335b6523ee18e2b0dc86c2fbe04b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOutput</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>ad6278a3495c54f1fe8e047624b0ba33a</anchor>
      <arglist>(const SoEngine *base, const char *name, const SoEngineOutput *output, SoType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOutput</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a51cb02e931e97fdac421386267044c1f</anchor>
      <arglist>(const SoNodeEngine *base, const char *name, const SoEngineOutput *output, SoType type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutputs</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a5c365c3a64359a63bd96834eb3a86bc5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getOutputName</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a9a3a3db76a418716d7ce813188d8b614</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngineOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a9e838ba89454663bbec5a4838891f215</anchor>
      <arglist>(const SoEngine *engine, int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngineOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>af94e81cb9bef335be55744524c7302bb</anchor>
      <arglist>(const SoNodeEngine *engine, int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>af3f2bd3208c6c406a42d07555a1ae326</anchor>
      <arglist>(const SoEngine *engine, const SoEngineOutput *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>a8810ff7ca50dbede41711fa05c043d94</anchor>
      <arglist>(const SoNodeEngine *engine, const SoEngineOutput *output) const </arglist>
    </member>
    <member kind="function">
      <type>const SoType &amp;</type>
      <name>getType</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>ad0fd378da18916d129c74557bce8431a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>readDescriptions</name>
      <anchorfile>classSoEngineOutputData.html</anchorfile>
      <anchor>ac51e63b92164bba2420ae28566318df8</anchor>
      <arglist>(SoInput *input, SoEngine *engine) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEngineOutputList</name>
    <filename>classSoEngineOutputList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoEngineOutputList</name>
      <anchorfile>classSoEngineOutputList.html</anchorfile>
      <anchor>a26c5ffcdbb9fca8ddcaf43648ab20a89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEngineOutputList</name>
      <anchorfile>classSoEngineOutputList.html</anchorfile>
      <anchor>a58bbbf6e4412438e61c39b58e3e53c9c</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEngineOutputList</name>
      <anchorfile>classSoEngineOutputList.html</anchorfile>
      <anchor>a9d03168fbd41485336028baaf1f90854</anchor>
      <arglist>(const SoEngineOutputList &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEnvironment</name>
    <filename>classSoEnvironment.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>FogType</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a557458fc0c84af69e6dd0b9dcd41e1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a557458fc0c84af69e6dd0b9dcd41e1b0afc962c8a5ce783871cfc62c0654a9212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HAZE</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a557458fc0c84af69e6dd0b9dcd41e1b0adb1f5fa9e19c04410d02506104f9cd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FOG</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a557458fc0c84af69e6dd0b9dcd41e1b0a33b1e86c0f7633c004d87e3dcb92715b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SMOKE</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a557458fc0c84af69e6dd0b9dcd41e1b0a27686b80dfcfd07e907a7fd720f68703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a0c116b25423fd7007c63fcc971ec5e0c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEnvironment</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a42dc267d4125a910d2dff0e2978e154e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a852eb3ca245d012cb9f01bd7fe3157ba</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a382be5a7ead4b9d7ce220fde2689632d</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>ambientIntensity</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a9d3c0f685a622993b2da13edaf8778ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>ambientColor</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a208a6034a574424c7921b4e80baf1f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>attenuation</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>ac4bb3a61fc8c62aed59b4a67c4c7a324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>fogType</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>aabaf54a37f2be86387230351774b6bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>fogColor</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>aaf7d03f3749f248070f68b07f0786e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>fogVisibility</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a34a6347b6c2a16bcc02eb611c0cce331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>a08548407e9413a03bcc27b4067afe1f9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEnvironment</name>
      <anchorfile>classSoEnvironment.html</anchorfile>
      <anchor>aa99aa92119dce4a5f621e8e93e77c5c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEnvironmentElement</name>
    <filename>classSoEnvironmentElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="enumeration">
      <type></type>
      <name>FogType</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>aead6e3a5bd204de5af14453747d6536f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a0499c032d6f680eb3df9226817cddb03</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>ac60470b75beecd305d21d7ea6cecd4eb</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>ad138a6056afa4f687b63630c25cca5a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a5f1fd4fca8c4bfe58aae6a0e18c6e951</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>ad0c78090ff19ee4f422ddfec0b7dc2ef</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float ambientIntensity, const SbColor &amp;ambientColor, const SbVec3f &amp;attenuation, const int32_t fogType, const SbColor &amp;fogColor, const float fogVisibility, const float fogStart=0.0f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a04d0faddba20e6b5eb4a53553785183d</anchor>
      <arglist>(SoState *const state, float &amp;ambientIntensity, SbColor &amp;ambientColor, SbVec3f &amp;attenuation, int32_t &amp;fogType, SbColor &amp;fogColor, float &amp;fogVisibility, float &amp;fogStart)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAmbientIntensity</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a1ce2079dfc4242c3dab40b6311c45435</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getFogVisibility</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>adfc04e2b28c7db82cabf437aa79c0ba5</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbVec3f &amp;</type>
      <name>getLightAttenuation</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>aa33116030fbebaa2af5a13e6597d11a8</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbColor &amp;</type>
      <name>getAmbientColor</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a59a735ca31faa0a01aaef4df8e787e7a</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbColor &amp;</type>
      <name>getFogColor</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a6683c0244363b0aaf2c8b9568e923fd9</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getFogType</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>acb7d9f518452373568979b36908ba2eb</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getDefault</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a5e479e2401c178c6487c0920b772f9ac</anchor>
      <arglist>(float &amp;ambientIntensity, SbColor &amp;ambientColor, SbVec3f &amp;attenuation, int32_t &amp;fogType, SbColor &amp;fogColor, float &amp;fogVisibility, float &amp;fogNear)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEnvironmentElement</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>adcd265530d7e656d66291c77e519f46f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>aa7be94447dfba94cb9a8c3166448b814</anchor>
      <arglist>(SoState *const state, const float ambientIntensity, const SbColor &amp;ambientColor, const SbVec3f &amp;attenuation, const int32_t fogType, const SbColor &amp;fogColor, const float fogVisibility, const float fogNear)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>ambientIntensity</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>af8ed262f8cbe11fca907e091046f6f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbColor</type>
      <name>ambientColor</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a9800bf618fc997c3e420db99fbeeee0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>attenuation</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a14d3885cbafaf37bc51501517c91bee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fogType</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>aa4d2e0d5a8039fef7d0e44f09a58501e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbColor</type>
      <name>fogColor</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a12cd30da561a10dda967e0d4da58e8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>fogVisibility</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a14c11c0393ff866ed3fc616ba0f3f167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>fogStart</name>
      <anchorfile>classSoEnvironmentElement.html</anchorfile>
      <anchor>a59de46a1fcfbbfb7cd71e28fedc6a67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoError</name>
    <filename>classSoError.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>a41bcf4c50ee9fb96d86e1fdb64e8bfdd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoErrorCBPtr</type>
      <name>getHandler</name>
      <anchorfile>classSoError.html</anchorfile>
      <anchor>ac9a724e724781d7d77b4b6a4f7f8420d</anchor>
      <arglist>(void *&amp;data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEvent</name>
    <filename>classSoEvent.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoEvent.html</anchorfile>
      <anchor>a04d5f88b6986b22f8a8ba58183f62f58</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEventCallback</name>
    <filename>classSoEventCallback.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>ab56c686d961f0bc3ec4e27aa3fb0e43b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoEventCallback</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>aff9e4c6019a6a731f12bd99b5c5a53be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>affd58006af40ddabafb6dbe8d165c017</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>const SoPath *</type>
      <name>getPath</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a154b3b795cc87cb6312c71b7960a5b18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventCallback</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a45302c5c2492bf1654fd89a707eac766</anchor>
      <arglist>(SoType eventtype, SoEventCallbackCB *f, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEventCallback</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a0b9959481b451b5bd5f3739409d1a4b8</anchor>
      <arglist>(SoType eventtype, SoEventCallbackCB *f, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SoHandleEventAction *</type>
      <name>getAction</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>aa66c69bf0f9265ef718ba7423c9fee02</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoEvent *</type>
      <name>getEvent</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a84b49825509aec942f6925740d0dab7b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPickedPoint *</type>
      <name>getPickedPoint</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a177ac9c6d5af00901486b2edfabc77fd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandled</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a3667ebe00e7f5753d6fe47e385a9f2f4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isHandled</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a3c27ed7789aca98626e8805c62292cdc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grabEvents</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a7166accbf57582f7b2c097bc655eb3db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseEvents</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a63f003e6923d8958ee9238fe809cd661</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoNode.html</anchorfile>
      <anchor>af6fa1a20527192bc6f9d18062322456c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a94f4295370c74ec2af988622980d3d6b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEventCallback</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>a8e612d2245a64d591df8f07c08989076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoEventCallback.html</anchorfile>
      <anchor>af39ddff1e8540517221d3dca0d72b407</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoEventManager</name>
    <filename>classSoEventManager.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>NavigationState</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a501e0b834b64f588e247036ec05af20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_NAVIGATION</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a501e0b834b64f588e247036ec05af20ca1db70dcf64dc0cbdb034870bf018eea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JUST_NAVIGATION</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a501e0b834b64f588e247036ec05af20ca8f80d3353a0be34579b88dc5d9b8e2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MIXED_NAVIGATION</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a501e0b834b64f588e247036ec05af20caacb5238d0e45632cda2adcaaf89b1f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoEventManager</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>adf1e2d0f2a83f5434bfe83af636221d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSceneGraph</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>ae97932410f243be24cf9ec02d714170f</anchor>
      <arglist>(SoNode *const sceneroot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getSceneGraph</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>ad47a8d457c7f6db4dfce8a379bd2c6f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCamera</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a33def465009268a3b6e341056f48a20c</anchor>
      <arglist>(SoCamera *camera)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoCamera *</type>
      <name>getCamera</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a3fb264181eeeb7927e7141d5560cee1e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processEvent</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a5f802538969b88ed9f587f1d8a78aeb3</anchor>
      <arglist>(const SoEvent *const event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNavigationState</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a7346e116540f961b4d9c6746179d78c5</anchor>
      <arglist>(NavigationState state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NavigationState</type>
      <name>getNavigationState</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a140d5efa44764773d0037d59183ce8e1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSoScXMLStateMachines</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a1793392ca5d92944204daf6f6661be99</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoScXMLStateMachine *</type>
      <name>getSoScXMLStateMachine</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>ae49dd93096b49370cc9e620cd676de8d</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSoScXMLStateMachine</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a07d8a953f4b2d82cb1d298595bfe4692</anchor>
      <arglist>(SoScXMLStateMachine *sm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSoScXMLStateMachine</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a4a2ce2edd7444329540c79cd47797b07</anchor>
      <arglist>(SoScXMLStateMachine *sm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a8af3b026665a97687c1859178895bcbe</anchor>
      <arglist>(const SbVec2s &amp;newsize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a2fce6d440254baafb32d99a56f30ff92</anchor>
      <arglist>(const SbVec2s &amp;newOrigin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a9d22ddfa59f5af2647862325ee04b87c</anchor>
      <arglist>(const SbViewportRegion &amp;newregion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>ac6b00c5592250d867a760d50d724149f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHandleEventAction</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a384e2bc1d27d1e52811eca13ca10b944</anchor>
      <arglist>(SoHandleEventAction *hea)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoHandleEventAction *</type>
      <name>getHandleEventAction</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>a2958c1cacb29a652b84adc5ccf7cd86c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>actuallyProcessEvent</name>
      <anchorfile>classSoEventManager.html</anchorfile>
      <anchor>ae4571b17440ffccdebfaed8ade9be293</anchor>
      <arglist>(const SoEvent *const event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoExtSelection</name>
    <filename>classSoExtSelection.html</filename>
    <base>SoSelection</base>
    <member kind="enumeration">
      <type></type>
      <name>LassoType</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>af25d467dbc3d587bec603c89eace192f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOLASSO</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>af25d467dbc3d587bec603c89eace192fa07b5e724e73245a6cdbf2385a4a9ba33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LASSO</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>af25d467dbc3d587bec603c89eace192fa33cfba6bacddaace46aa5ff853b1bd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RECTANGLE</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>af25d467dbc3d587bec603c89eace192fac5af0a22cb6a0d73f40f196bae6c8e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LassoPolicy</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a13f9500494e42d0edf20ad79c755b678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FULL_BBOX</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a13f9500494e42d0edf20ad79c755b678afaf26176f5d277cd13f354477a654753</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PART_BBOX</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a13f9500494e42d0edf20ad79c755b678a74e7a4281a1e21de982e0871e5132786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FULL</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a13f9500494e42d0edf20ad79c755b678a19531c7aca936365f13fb938ab3a27dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PART</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a13f9500494e42d0edf20ad79c755b678afcd61eca81ee8badcb61f2a349b4c384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LassoMode</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>ab3301b66803468221a9c6eb51e342210</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALL_SHAPES</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>ab3301b66803468221a9c6eb51e342210ac22245aa446bb43bcfec1380c2fedad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VISIBLE_SHAPES</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>ab3301b66803468221a9c6eb51e342210abe594e1a2d27e9a9c53f1a876ee94b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Policy</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ac1d0134b67e4730b0ba0bcb61ece80c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SINGLE</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ac1d0134b67e4730b0ba0bcb61ece80c0a999a5d15e28bd0e87a58df33bbd31c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOGGLE</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ac1d0134b67e4730b0ba0bcb61ece80c0a3206a6135f02df51a1118acf7faaf6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHIFT</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ac1d0134b67e4730b0ba0bcb61ece80c0a9b45a1f4f16fc18232d84ccbed59c752</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a9aacfca17d4408a502d7947b2f52b223</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoExtSelection</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a9c21cf9b3ae8433c0ac587075e045521</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useOverlay</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>afb79e93a8a70cc2163a4f2c5ccbb7dd0</anchor>
      <arglist>(SbBool overlay=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isUsingOverlay</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a0c7fc734f6188de83eb1ccd60f3e3714</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoSeparator *</type>
      <name>getOverlaySceneGraph</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a9ed079b3b6b237b62ddc11534da8190e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayLassoColorIndex</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a312b1897793d9a7f78e4624d9a63e115</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOverlayLassoColorIndex</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>ae8bffceb5904283014fd2c0b1998662e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLassoColor</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a301800e1eb43e801b9806cdb5c9c05fd</anchor>
      <arglist>(const SbColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>getLassoColor</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a9eb89344aee92f88f56e6cf94a37ae74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLassoWidth</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>ae9e91adbc4a9d89bde2c81984bfb7d86</anchor>
      <arglist>(const float width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLassoWidth</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a5ce7453c38c96b489061c5f08b0359df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayLassoPattern</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a4483e7be8c5a13964c539f7c3b13c2c7</anchor>
      <arglist>(const unsigned short pattern)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getOverlayLassoPattern</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a87e7aff5c7a23ce3f36d96cd3b07ce2d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>animateOverlayLasso</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a9fd12baed22bcdd2bade96f6c9c81142</anchor>
      <arglist>(const SbBool animate=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOverlayLassoAnimated</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a7a237f706eecbc536709f8b56b667b41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>af49966d4bda564b3eaefe64602306cba</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>aa73b735b7ba44b30dfdc28cce6231c11</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a671f524fe587940d8799d662fcbdd7fe</anchor>
      <arglist>(SoNode *root, int numcoords, SbVec2f *lasso, const SbViewportRegion &amp;vp, SbBool shiftpolicy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a8d04956c0278c1c706e99941226e0258</anchor>
      <arglist>(SoNode *root, int numcoords, SbVec3f *lasso, const SbViewportRegion &amp;vp, SbBool shiftkeypolicy)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s *</type>
      <name>getLassoCoordsDC</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a97f57fb270abd14828b2813f54db8b6f</anchor>
      <arglist>(int &amp;numCoords)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getLassoCoordsWC</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a5700298a4d48acb997b3c21e99585f08</anchor>
      <arglist>(int &amp;numCoords)</arglist>
    </member>
    <member kind="function">
      <type>const SoPathList &amp;</type>
      <name>getSelectionPathList</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>afd24a16015bbf6234edeaaefacaa493d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLassoFilterCallback</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>aa8d5736107e182f98d0c44dd3da4fb39</anchor>
      <arglist>(SoLassoSelectionFilterCB *f, void *userdata=NULL, const SbBool callonlyifselectable=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriangleFilterCallback</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>aa8150f3696bc79c38074e00ee62d4b5d</anchor>
      <arglist>(SoExtSelectionTriangleCB *func, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineSegmentFilterCallback</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>af0a8c05c68234a34c39e009f4b21ae84</anchor>
      <arglist>(SoExtSelectionLineSegmentCB *func, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointFilterCallback</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a72b5166c178be3de8069d922b95215f8</anchor>
      <arglist>(SoExtSelectionPointCB *func, void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>wasShiftDown</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a9f74280cf25d52fb55b334f91377f215</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSelection</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ae50b73f59783a5582f025965d6e2899b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSelection</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ad4b9eb2e58cff8d01bf8361cb093919d</anchor>
      <arglist>(const int nChildren)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>af4d566ba95315ae439d2f86a5eb74c31</anchor>
      <arglist>(const SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a181d7d633e090417f5c3650c66fddfd8</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselect</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a3f3139af650bffc2c57f283145c2d555</anchor>
      <arglist>(const SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselect</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a039d0d6ee133a7e3bbce71d2fc22482f</anchor>
      <arglist>(const int which)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselect</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a6f2926768ff418d88a9538d41e9678c0</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggle</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a542a1bd10f92e86b5efe8166763754c2</anchor>
      <arglist>(const SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggle</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a96542e1d3584c3cc3c0443b489acec39</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isSelected</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a2b02579ca8e06c4ea798cdf9ceb30771</anchor>
      <arglist>(const SoPath *path) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isSelected</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>adc97a590e2dc3cbde70640397fdae84e</anchor>
      <arglist>(SoNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselectAll</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a7b801e4303177310514cf9adeb5714ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSelected</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>abedbbc9c6418795a7a5d99a5977ee6db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPathList *</type>
      <name>getList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a022939885ac03469cf1ba794b8d78cd0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>getPath</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ae2f9550d935214955b2d78cf52eff7a9</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>operator[]</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ac0df6faf1a93f6c24f3bbecdd832c0c2</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSelectionCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ab690ccc3414f8e1938d93f36883be814</anchor>
      <arglist>(SoSelectionPathCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelectionCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a111a49c6a60bf6aeaa74c335a6cc50f8</anchor>
      <arglist>(SoSelectionPathCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDeselectionCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a9ed6dcad1b42f0f6ba84b23fa5183027</anchor>
      <arglist>(SoSelectionPathCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDeselectionCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>aba2da183e2bfee410e556555e75c33e2</anchor>
      <arglist>(SoSelectionPathCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>afda4c44b461c82eef58a084fe084b2a0</anchor>
      <arglist>(SoSelectionClassCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStartCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a98a92bf153b222d82f2fe031c408d9ba</anchor>
      <arglist>(SoSelectionClassCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFinishCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>aa7418e3afd3ab0d243d9ce3654a913be</anchor>
      <arglist>(SoSelectionClassCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFinishCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ad189f6df70a1b40a385dbb3b5e065ccd</anchor>
      <arglist>(SoSelectionClassCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPickFilterCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ab9dd66acee47ca36ba90410d989b81e7</anchor>
      <arglist>(SoSelectionPickCB *f, void *userData=NULL, const SbBool callOnlyIfSelectable=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPickMatching</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a099ba79fdf9a7b7dee9a439cbfe0483e</anchor>
      <arglist>(const SbBool pickMatching)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPickMatching</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a63789379afeb481e46666389ecd142b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getPickMatching</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>aed02b53404dda46d09b757197f2b7366</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChangeCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ae5e1690ad385e1de68f0133c9744ca62</anchor>
      <arglist>(SoSelectionClassCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChangeCallback</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>aaf814bd3376a8635eab2441e41d37215</anchor>
      <arglist>(SoSelectionClassCB *f, void *userData=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>af12f68ac6a5e7867953594fd6d813b89</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>aa8a2c4c8fab005144f985722be823f6c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a7c044d52fac42b982cfdfbf186505780</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>lassoType</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>ae971b69bf710bc866c29432050f96650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>lassoPolicy</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a05bb125c7b408ef062e9b3a5500025ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>lassoMode</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a3f1be9f9f9e2500f16ba9526682af7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>policy</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a9f53ac0ea66af1258d37555b4f4c57a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a0c20ab2923154cba4c7463d705e3ec11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoExtSelection</name>
      <anchorfile>classSoExtSelection.html</anchorfile>
      <anchor>a34786b10d242f155cea1ea023b98781d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSelection</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>aae3bc2510e4585b65bb81f23d3d60198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invokeSelectionPolicy</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a72e4fb4e0bc9744ba0f1fd55f28d4ea5</anchor>
      <arglist>(SoPath *path, SbBool shiftDown)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>performSingleSelection</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>aee0bb2c31d5a61d7b61d7048bac480ce</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>performToggleSelection</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a8d40cf265d331234c699f9779e87ef1f</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoPath *</type>
      <name>copyFromThis</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a393e13a982e602f95b87359cc58139de</anchor>
      <arglist>(const SoPath *path) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a1c4336d6875540fcadf7857570c5f258</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a684882d5b50eca52062497098a0ff94f</anchor>
      <arglist>(const int which)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>findPath</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a68f140ade79d2dc8dae00b7a6edfd3fd</anchor>
      <arglist>(const SoPath *path) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoPathList</type>
      <name>selectionList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a3f7a0c5b07c234fc278c93ee8b885a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoCallbackList *</type>
      <name>selCBList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a83140f456c0d4972b49b47158ea2b82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoCallbackList *</type>
      <name>deselCBList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a369923a9736a7277bc42afc56810b277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoCallbackList *</type>
      <name>startCBList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ad749e2198d5be45852a55c66febd173f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoCallbackList *</type>
      <name>finishCBList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a81b98d8cf0a84eee057606c5a6535e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSelectionPickCB *</type>
      <name>pickCBFunc</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>ad66ff4ab3ac806a9bf8ee815fc07fb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>pickCBData</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a15980c07d45835ab8ae2339dc93c9b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>callPickCBOnlyIfSelectable</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a633c3b898548c3a7727e769168066435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoCallbackList *</type>
      <name>changeCBList</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a609399849cc54294cfc03e33ea98f86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoPath *</type>
      <name>mouseDownPickPath</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a2e7b464f2bf0d957d35ce58625193c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>pickMatching</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a0bdaf6bf535a186fac7524728d0f4fd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFaceDetail</name>
    <filename>classSoFaceDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a32c6ece584ea5f3045dacfc1f9c72470</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFaceDetail</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>af9dbb1c8d92c53a2470e950fa46e1636</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFaceDetail</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a71aaca2902db3572667e766f7c51c7cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a1fb2be7d6f1e112b14f2fea1d611283d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPoints</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>ad031ff2cf6727fd10c6be245a02f1d42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPointDetail *</type>
      <name>getPoint</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>ab46958ceb0dcd2a32a09e92582c13be9</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>SoPointDetail *</type>
      <name>getPoints</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>af33e86aebc545e5b194651798854f4c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFaceIndex</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>ac4ca977667e8ab59eecb75234bc0cf77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPartIndex</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a016eb0fca6726aff9ea32c5728e09467</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPoints</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a507a639a064b65fa7c7d311e9b2cf757</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a1641d18aa50f93acd7f425806d736880</anchor>
      <arglist>(const int idx, const SoPointDetail *const detail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFaceIndex</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a0ca89ad73fed20d59c1db818c0792aea</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartIndex</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a28dbbf1347708a7164bdaa00f29843a3</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incFaceIndex</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>afea2d46ddab5e6f7b48b78c99a627889</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incPartIndex</name>
      <anchorfile>classSoFaceDetail.html</anchorfile>
      <anchor>a404571f1f6e778ec73c2650add733e1b</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFaceSet</name>
    <filename>classSoFaceSet.html</filename>
    <base>SoNonIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>a8bfcab5d5b5babf3be6e5e69510fa4f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFaceSet</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>ad80aca08f332d4636db707ad253c9b1c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>ac419bd74482f20be79ba2384fddf6d73</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>aebcdf8cbc891c67af97518e09ea5978a</anchor>
      <arglist>(SoState *state, SoNormalBundle *nb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>a1af1ff68a1465d0a0863686dd869748a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>ac1e619dc424153e58f6470576165e4c4</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>numVertices</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>ac63bdf12c111765158f984aa36e323e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>startIndex</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>a6275da4770ffe6cc94f590278c08eca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>vertexProperty</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a1498e2ce09250c39efc589303119cfb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>a810d1b12287a5aeb043d4593da0c5b7a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFaceSet</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>ac26939745a2c5e71f8005b16c7bb7743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>abf5086ce78a4aa49c058a1a9bcfd4387</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>a9eeec88842c9735ee9ce8a208a7b97f4</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoFaceSet.html</anchorfile>
      <anchor>a3bf1fb3ccea1761a48be05f6a573d9c7</anchor>
      <arglist>(SoState *, SoNormalCache *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoNonIndexedShape</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>a4df486dabe1f6b641aeb955929143bb8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNonIndexedShape</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>a0a6515b77c92c712cd1946069afcc401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeCoordBBox</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>ac0f5401db8637a471033a396d1c9b8ce</anchor>
      <arglist>(SoAction *action, int numVertices, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixNumVerticesPointers</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>a0da554ed3ce34c09a4bc8e9ae5eb5d3f</anchor>
      <arglist>(SoState *state, const int32_t *&amp;start, const int32_t *&amp;end, int32_t *dummyarray) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVertexShape</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>aa90b9edb2d4d453fb20d1b7468f4138f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVertexShape</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a510bcea1c8c353b3551d971585ae6020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGLRender</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a2c46872df6b144062bcffeb4ba3c10b6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNormalCache</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a9a99c2660751edb60c49e86c73851b6d</anchor>
      <arglist>(SoState *const state, const int num, const SbVec3f *normals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoNormalCache *</type>
      <name>getNormalCache</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>af5fbb02a3e906ef3ad5571d0bff4e8a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoNormalCache *</type>
      <name>generateAndReadLockNormalCache</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a32374ed7072ea5ac7fa76ee7e267f69d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexData</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>afe7215c3d3203261cdb546352d161cab</anchor>
      <arglist>(SoState *state, const SoCoordinateElement *&amp;coords, const SbVec3f *&amp;normals, const SbBool neednormals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readLockNormalCache</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a45ba7effb15dde33e0f040c2432c5a5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readUnlockNormalCache</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a2c594579d1fbc7ff57e0070b14d95305</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoField</name>
    <filename>classSoField.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoField</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a5ad15124fa9c372632cdcff9aae9ce0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnored</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a1bc88e54b4476a54db9e065672ad6359</anchor>
      <arglist>(SbBool ignore)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isIgnored</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a6467c80c0147a7cfd791a9836f86d802</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefault</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ad4a5898e9a83082717849530757262a3</anchor>
      <arglist>(SbBool defaultVal)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isDefault</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a57dc4f40a314a16652501f407a3231c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a34ac9c7e16370f08a911e8ef74c8f784</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a95d7bbed8e03793b9537acde298dd6b0</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aab3795218549a2d22b723e9c7f2846eb</anchor>
      <arglist>(SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isConnectionEnabled</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>afc064aeb0d1c810cf78e880ad7dcdc7f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>connectFrom</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a6fcfab4c669504fff42c63c99e05b82e</anchor>
      <arglist>(SoEngineOutput *master, SbBool notnotify=FALSE, SbBool append=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>appendConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aa230785bbfae2c83812eded4252f06d1</anchor>
      <arglist>(SoEngineOutput *master, SbBool notnotify=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a1159b19752c3a62aebfe11719d83d700</anchor>
      <arglist>(SoEngineOutput *engineoutput)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isConnectedFromEngine</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a963c1858a17708efe4cdb452722d8217</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getConnectedEngine</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a7cc56edca09d3a0d623e65f1e06d9752</anchor>
      <arglist>(SoEngineOutput *&amp;master) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>connectFrom</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>abf2ad27ee6f706651454b9e07e4c9a6a</anchor>
      <arglist>(SoField *master, SbBool notnotify=FALSE, SbBool append=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>appendConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a8e4651ab7eda489c57ee200e4703d62e</anchor>
      <arglist>(SoField *master, SbBool notnotify=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a59cefe0b5aed4354d0ef652810178f78</anchor>
      <arglist>(SoField *field)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isConnectedFromField</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aef6bfb61811d21785ec71756f33a7616</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getConnectedField</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a49fccaae156e546072cf452c1d15b2ef</anchor>
      <arglist>(SoField *&amp;master) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConnections</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aba0ad7ec9501fedeb988f7820a39320f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getForwardConnections</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aab414791d41441833160c4aa05383a31</anchor>
      <arglist>(SoFieldList &amp;slavelist) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnections</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a29f7c81cdd02be41309cc803b6917a81</anchor>
      <arglist>(SoFieldList &amp;masterlist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>af8e8c5c46e9cd112f8dd4664fff77117</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isConnected</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a0f6a0ca587d1592f50051c262082583b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContainer</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a9fbdf1e1b8fa0b4c610af0448041d0b1</anchor>
      <arglist>(SoFieldContainer *cont)</arglist>
    </member>
    <member kind="function">
      <type>SoFieldContainer *</type>
      <name>getContainer</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a46019fe43e4d41118544a02f19d23130</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a1ced83f62b6776e9e805aeb5427108e4</anchor>
      <arglist>(const char *valuestring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ad30227a5c8485e5bdaa52b86a21f9591</anchor>
      <arglist>(SbString &amp;valuestring)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>shouldWrite</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a08d5c770270931eb02d5eaff48c3f0cb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>touch</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a64ebcf224b92166b743903c9bf8d748f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startNotify</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a2cc06510e3bbe043bbeded48ec721f48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a917c364cae1a18863084cdf8ad6f8e7e</anchor>
      <arglist>(SoNotList *nlist)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>enableNotify</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a4cf2036ff086d620ff77bef57ac36069</anchor>
      <arglist>(SbBool on)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNotifyEnabled</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a9fcec72e47b48d75f037aff1a05e3d73</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAuditor</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>af950e95a5e11aadb110f68e67d58ac42</anchor>
      <arglist>(void *f, SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAuditor</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ab990bb100c12bc1637d35318b94f2e47</anchor>
      <arglist>(void *f, SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aa674ee4e73605c2132994ebfd05780aa</anchor>
      <arglist>(const SoField &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a24f569dd98e950e5b6f1bf109ce97670</anchor>
      <arglist>(const SoField &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionStatusChanged</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a586b64475f4068518f0da4615b37b4cf</anchor>
      <arglist>(int numconnections)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isReadOnly</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>afce6c509e52307cea1e8291250015139</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a0fcd0bf81f6a9ca80450148c7084b49b</anchor>
      <arglist>(const SoField &amp;f) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a538c1dc5592da995e9760e5ccacadf21</anchor>
      <arglist>(const SoField &amp;f)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a7d7a05ee937f6790f38fe727415e5d84</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ac17b8407371efd994c71db88a523ba63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a2c822e41b385ca49e0f16f3aab8f78e6</anchor>
      <arglist>(const SoField *fromfield)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ab2c7bc1a3a068385d318b56912c796a2</anchor>
      <arglist>(SoInput *input, const SbName &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ab629d9e30c642200478e941dfd5d651d</anchor>
      <arglist>(SoOutput *out, const SbName &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>countWriteRefs</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>af8494f0ed62176deff0f1e189014ce46</anchor>
      <arglist>(SoOutput *out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldType</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a7aadd2ebddc316ae81a65db58fd4f73f</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldType</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aa1d4f6b1c475506f5fb727fa5b66a94c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getDirty</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a0f8b2598ca9625477fed264f6ffd081f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirty</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aa6aa9994c273b961f0d14b9ff55ca876</anchor>
      <arglist>(SbBool dirty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ae04e9d89c5575c8a23299f9ceeda1de1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aae6bb64a7e35d85a2b01395da645120f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ad6112c598f125a25fd4db2959c0d9880</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a36849953c91f385ab581071d5335338e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoField</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ac98e5cd5d81b1a0b817d310bf85a35e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>valueChanged</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a33cb8b1bc3ac383ec3088f3952bb12b4</anchor>
      <arglist>(SbBool resetdefault=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>adac06f0c92c0b595999cbbbef409dc60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual SbBool</type>
      <name>readValue</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a7c18aaa8207dc6aef91c71d1b999085e</anchor>
      <arglist>(SoInput *in)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>writeValue</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a3501176cbe0bc9a208ce5b4e9344c577</anchor>
      <arglist>(SoOutput *out) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>ac25af1612a2270a45bb9a469f6d34802</anchor>
      <arglist>(SoInput *in)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeConnection</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a3dd91105a823ec2de598b50e63c41604</anchor>
      <arglist>(SoOutput *out) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isDestructing</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>aafbd223ac652931734d058419c7fefc5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNotRec</type>
      <name>createNotRec</name>
      <anchorfile>classSoField.html</anchorfile>
      <anchor>a92711cc6e90809df3b1a092005cd9bb3</anchor>
      <arglist>(SoBase *cont)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFieldContainer</name>
    <filename>classSoFieldContainer.html</filename>
    <base>SoBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a8d8637bfa120513d81521c9cd8bc1309</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInstance</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a0f53c49cee136d7248813963dfc97aaf</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoFieldContainer *</type>
      <name>copyThroughConnection</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>a09783845667844c4c925f5f0f9a75590</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoFieldContainer.html</anchorfile>
      <anchor>aebf8cab6ca3299aa1c05cc9b2dde1e35</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFieldConverter</name>
    <filename>classSoFieldConverter.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>a4360697b700ad3a5e73238e2b8b9d20e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>a2a7e245db1275f6d61d3ca5696ea858b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>aafbecbb4bee615e2b95f2e8c4d749626</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SoField *</type>
      <name>getInput</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>af67f8888f8d07b60c30dd0fe8d56e034</anchor>
      <arglist>(SoType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SoEngineOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>a5107660768efbcfcde9c5df094e0055d</anchor>
      <arglist>(SoType type)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoField *</type>
      <name>getConnectedInput</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>a80e7556b71c5cfe7b5e28b8f41c4521a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getForwardConnections</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>aeb92fa6e507bc328a3e2c766948b6ee2</anchor>
      <arglist>(SoFieldList &amp;l) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoFieldConverter</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>a8dc92acb9a61534ce750a6485b4498b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFieldConverter</name>
      <anchorfile>classSoFieldConverter.html</anchorfile>
      <anchor>a75435e4cfb66aaa3fbc4616c1062f41a</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFieldData</name>
    <filename>classSoFieldData.html</filename>
    <member kind="function">
      <type></type>
      <name>SoFieldData</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a95369f380c061dbd05479ef40bc2e719</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFieldData</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a3bd1d0e91634fd525f6bda748378d7a6</anchor>
      <arglist>(const SoFieldData &amp;fd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFieldData</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>aa8b674b6db43a3326d95d51ed24c2034</anchor>
      <arglist>(const SoFieldData *fd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFieldData</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>aff51b3706e99440af35c1e1d84a9970b</anchor>
      <arglist>(int numfields)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoFieldData</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a300cabe43428cb9d990ec5d8f1493042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addField</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a424da8f6ebf6e41d3a4be8de36f0b8b7</anchor>
      <arglist>(SoFieldContainer *base, const char *name, const SoField *field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overlay</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a8ed1cb9cf6cd8418ee7e583ec04b0939</anchor>
      <arglist>(SoFieldContainer *to, const SoFieldContainer *from, SbBool copyconnections) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>aec47845415f427f050e6fa787697a734</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getFieldName</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>adec57701a82fc2e4572ba1489dbe9cc4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>getField</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a383455e1821fca813d82fbe66b872437</anchor>
      <arglist>(const SoFieldContainer *object, int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a3217933eb20685fc0924764524c23c0e</anchor>
      <arglist>(const SoFieldContainer *fc, const SoField *field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnumValue</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>af0ba782b6f2d5510e0ce46a9b7f80f5b</anchor>
      <arglist>(const char *enumname, const char *valuename, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEnumData</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a8bb725bc0912a62abba85369cf2f7883</anchor>
      <arglist>(const char *enumname, int &amp;num, const int *&amp;values, const SbName *&amp;names)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>read</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a7c970d4b23b9c21131dc0a4d7aeefdfa</anchor>
      <arglist>(SoInput *input, SoFieldContainer *object, SbBool erroronunknownfield, SbBool &amp;notbuiltin) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>read</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a6b1853c6712257e5977bbaf63f59ba99</anchor>
      <arglist>(SoInput *input, SoFieldContainer *object, const SbName &amp;fieldname, SbBool &amp;foundname) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a4d01e7a7d07e25844919d3ef83fa4f20</anchor>
      <arglist>(SoOutput *out, const SoFieldContainer *object) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a64970910d09dbab9aa3f862bab9cb939</anchor>
      <arglist>(const SoFieldData *src)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a6f2e8b004804940f1b05cf07be93d1fe</anchor>
      <arglist>(const SoFieldContainer *c1, const SoFieldContainer *c2) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>readFieldDescriptions</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a19d627181e4aa1fc6e248eccbc6b5f00</anchor>
      <arglist>(SoInput *input, SoFieldContainer *object, int numdescriptionsexpected, const SbBool readfieldvalues=TRUE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFieldDescriptions</name>
      <anchorfile>classSoFieldData.html</anchorfile>
      <anchor>a9ba73a17af7d5128db8461aedddea989</anchor>
      <arglist>(SoOutput *out, const SoFieldContainer *object) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFieldList</name>
    <filename>classSoFieldList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoFieldList</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>af3c9e5f08d465cd42b32e3b6949d47df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFieldList</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>a38cdbfdb98409d3e3939207f967fe5fc</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFieldList</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>ad465136c3de42cbb6e3bd32a9c358edd</anchor>
      <arglist>(const SoFieldList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>ab29c53dcb620f2d8628dcd67b2e98b13</anchor>
      <arglist>(SoField *field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>aed7ec7f4060a5abf1c2400b7fb2025e5</anchor>
      <arglist>(SoField *field, const int insertbefore)</arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>operator[]</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>a05447f09c41f661b31d63ac34a65f872</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>ab3e979663b9114d06f285047727c97c4</anchor>
      <arglist>(const int idx, SoField *field)</arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>get</name>
      <anchorfile>classSoFieldList.html</anchorfile>
      <anchor>a1768c3858aee94b93e63a736c96f9671</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFieldSensor</name>
    <filename>classSoFieldSensor.html</filename>
    <base>SoDataSensor</base>
    <member kind="function">
      <type></type>
      <name>SoFieldSensor</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>a88f14d81988af3961e863dd656d80f44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFieldSensor</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>a0224c337f66cc31dfbcf37f203486ac7</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFieldSensor</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>a3ac53745756a202c0a3e50a056524f84</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>a7bd0f67e9cc6e174c0367fdc86c2b09c</anchor>
      <arglist>(SoField *field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>a120b58812997b3579c108f00010e19c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>getAttachedField</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>a9ca4429bc5b63e29b4798c9fcbcbc46a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trigger</name>
      <anchorfile>classSoFieldSensor.html</anchorfile>
      <anchor>aa09e27d3812f5ac53d4fa532d313d607</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFile</name>
    <filename>classSoFile.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>ac96c94ade509a82f4a33619c52a4ac08</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFile</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a79fbde466a7ee0dbb9db96a49f3f3a87</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a34ced21ec68d3f2654831c5e6819c064</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>acde55d3bd0b47a5e81aeadadc44821ed</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a31f0782b83bedb23254dfce09cc8647b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>ad27f669c8e1db8487a238177db4b066f</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>aca244d5433120cdff283c86d3ea318c7</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a69bfba34aa54bf4b1cf92b1ede823e74</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>ade6bf42fe5a44473233e0aa7f3b0520d</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a8c3ee2f11fa89d11f5b761010748b441</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a98dce694a3aab07fd7a05674c49df0ff</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a02a6456f1038ed74140f32f1ebe99fb9</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function">
      <type>SoGroup *</type>
      <name>copyChildren</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a9015b5fc8d660d95c0165b6c6a9a2d60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a1db21bc947e41b11f058b59cd4d8cd82</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a639490591ddda0a83a16aae73007f226</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconnections)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getFullName</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a6c4cae092b2cd5bee96fab24d61c6178</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSearchOK</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a9153ea4c49aae62e1a38cc4818b7d849</anchor>
      <arglist>(SbBool dosearch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getSearchOK</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a0aab35409730223e6af1b7d7b3b5741f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>name</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>ab5a2691d80251515f8d7a501fc918e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a34fc3cfd3a72c109e4f830b504df7e28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFile</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>abd8a336069bbe96aa96e72ec8e1320e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a0c1f0cac18261c2413c753591884b005</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readNamedFile</name>
      <anchorfile>classSoFile.html</anchorfile>
      <anchor>a4ebb835e3494f80a5c64e634017b5186</anchor>
      <arglist>(SoInput *in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFloatElement</name>
    <filename>classSoFloatElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoFloatElement.html</anchorfile>
      <anchor>a73858638ae99e6a928a1af53331694a6</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFocalDistanceElement</name>
    <filename>classSoFocalDistanceElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>a7ba61ca34fe95a14b47b5a1be52c5123</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>a865771257eff07f3f59d954cf20e76a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>ad2e764c00218497230b0379fac4b274e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>a4cba936e6d019ffac4226ef564c023eb</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>af5041ec9d08d1ea524210b8fd02e5cea</anchor>
      <arglist>(SoState *const state, const float distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>a4262589313f73d3d338738d8b4250f5d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>a9996cdad904e537c7d7525ada9cbd257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFocalDistanceElement</name>
      <anchorfile>classSoFocalDistanceElement.html</anchorfile>
      <anchor>a5d2ccc5e646da0da269ec2e13a84b17b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFont</name>
    <filename>classSoFont.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>aed1a4e6f82a81f23216002c3bdde8a68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFont</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a1665809f7a386fd13f737ef436ddb2ca</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>aec10736bf3a4d8a4e5d488e001a4e142</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>ab69f7ddb085b9ca87d99176dc0f82ee8</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a0ddad1a9fac182cff2d13e019b77c3cb</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a5bc6723e6a159d1bcf47575037a11829</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a0bd6a90eb45102480ecdd2630745af2d</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a8994026608cc3b61e226d9e1d43975ad</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFName</type>
      <name>name</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a6e05868c24cbaeeee3f8e2e89e024a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>size</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>a8d2c7630d8020176d56802a9f336cdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>ad7c806ba11566d02b7938232e20a4479</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFont</name>
      <anchorfile>classSoFont.html</anchorfile>
      <anchor>aa4cbe62cf7233f5e274e6bb4eeee20d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFontNameElement</name>
    <filename>classSoFontNameElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>a6a1689def4a4d5862859a9f3e74eef29</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>a332be6d8f55ed5e1a4b9112adf720cd4</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>a134742096848796e08530d525256ea29</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>a23336b8a35a0033a7a35f5b59496ced3</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>a602f15428a2c7d5dfb595fbd8cf4c343</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>ae25c387f5b35b4a95881cacb1ee28f8c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>a8f1b816e76ced705bbfc9af4a0ad8e9d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbName fontName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>get</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>ac3564655e5075bfa231b70fd5a210a41</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbName</type>
      <name>getDefault</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>aefcfccb29c324a31767037f339d36ab7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFontNameElement</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>aa26d3f5974440a265bcc69bb74a93490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbName</type>
      <name>fontName</name>
      <anchorfile>classSoFontNameElement.html</anchorfile>
      <anchor>aae9bec587be7a001a98bf339ee206b0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFontSizeElement</name>
    <filename>classSoFontSizeElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>a442aa9398b0776de7a4bc510180ac4d4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>a157a3598eeaa1c791bcead029e042ba4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>acb49b8f34366429890a1b10c1794fd28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>a8c19bd3dce3dceee43133dbe948b9a51</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float fontSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>a997fd506830c23dcf375fa8b746119a9</anchor>
      <arglist>(SoState *const state, const float fontSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>ae9c14de2fa61684b3763b80b1e67d99a</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>aa6132b0aae1be3ba3ad154649c8ebf02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFontSizeElement</name>
      <anchorfile>classSoFontSizeElement.html</anchorfile>
      <anchor>ab9a7a71335344fa1e57c2ac236ad1137</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFontStyle</name>
    <filename>classSoFontStyle.html</filename>
    <base>SoFont</base>
    <member kind="enumeration">
      <type></type>
      <name>Family</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a797fff8ccb801543fbda54be3a19d3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>aefec3a4f69d7f6eb27e90f6b3e367501</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>ade32d446778213da5176271e86e1c6ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFontStyle</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a34ad9d6c3e07b3a89c89a32a905aa747</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>getFontName</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a5c088de3f5332ed893d9612a97d23b22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a7939d5bc764d14689297cc2530b72cae</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a0ee9113f6379cb4cfa88a4059bf3e7f2</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a2cd6856555cc8e56a3f4da01d0ef44f4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>aeca0739cbaca6e46c9bc8b3cb3c9abd5</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>aa4dd89b6e80e49a80dcdd3461cdb29ac</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>ae703f8b5bb04f5231fec9c96c911a00f</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>family</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a0f275bb697594e9d872de723d1542f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>style</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>a36ed6e5a06403b03bf78b2aab28d37bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>acc1e9f4644e64bb4e9cc97186d7c902d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFontStyle</name>
      <anchorfile>classSoFontStyle.html</anchorfile>
      <anchor>af707554552e0f4c881ec4ce39e3d36dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoForeignFileKit</name>
    <filename>classSoForeignFileKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a0cd317938b209f0d97d32de58d43ed62</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a9f80a6233fd53ccc7953ced51455506e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>canReadFile</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a05985e6f77e5cb803d82a76c4f9dbb15</anchor>
      <arglist>(const char *filename=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readFile</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a9b99c658c0ef76633a3fa9af7550f4f7</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>canWriteFile</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a62a0162e985b03553a91fee7fe8be698</anchor>
      <arglist>(const char *filename=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>writeFile</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>aabb29978c7ac39b050755a509a1ad91f</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual class SoSeparator *</type>
      <name>convert</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a34bbc78e5a1b50106ceb5dc12d7d0b53</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isFileSupported</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>ad6c471e9263c180888b6e580be3751c8</anchor>
      <arglist>(SoInput *in, SbBool exhaust=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isFileSupported</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>ac566ac8da85b9cd9abf00ca6d92a45a1</anchor>
      <arglist>(const char *filename, SbBool exhaust=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoForeignFileKit *</type>
      <name>createForeignFileKit</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a989796146b89a3d8d0922e909abbde7c</anchor>
      <arglist>(SoInput *in, SbBool exhaust=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoForeignFileKit *</type>
      <name>createForeignFileKit</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a7a15555bf925d03e4b340124aa81fa8a</anchor>
      <arglist>(const char *filename, SbBool exhaust=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a7abdd112c9f5fb4e9c8c025dd008b415</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>registerFileExtension</name>
      <anchorfile>classSoForeignFileKit.html</anchorfile>
      <anchor>a7508a2f839514e825398cf17df9f5084</anchor>
      <arglist>(SoType handler, SbName extension, SoForeignFileIdentifyFunc *identify)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFragmentShader</name>
    <filename>classSoFragmentShader.html</filename>
    <base>SoShaderObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFragmentShader.html</anchorfile>
      <anchor>add0290474969191f044f9f9a3008fca0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFragmentShader</name>
      <anchorfile>classSoFragmentShader.html</anchorfile>
      <anchor>a1573371fa73a24e8681f706dc6a3bfa2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFragmentShader</name>
      <anchorfile>classSoFragmentShader.html</anchorfile>
      <anchor>a0e89bf10859f0e3b8e9b166c623f6f59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a8ac115b5435cc6dd7ecf61159242dba5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a31de3e7b0a44248f0de653eaf52de020</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParameters</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a422535ce1d3b71dfe91b94d3e2e34fd0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>SourceType</type>
      <name>getSourceType</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>ae46b8969c8a6380a1187a7e1af3d6655</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbString</type>
      <name>getSourceProgram</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a521decf95cd1016cd3148b033e7dfa76</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSupported</name>
      <anchorfile>classSoFragmentShader.html</anchorfile>
      <anchor>a05bb87c2631bf31395962e33f77baea2</anchor>
      <arglist>(SourceType sourceType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFragmentShader.html</anchorfile>
      <anchor>a69d75b6e876024cbb1af9fb9c282fa5c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoShaderObject</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>ac3451fb9ab75488763d29a4b014a894e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShaderObject</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a825b1c6bb4536996f4355cc9d545c9c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a4ed43b0da6ea5f3cadde0de81f6e7eb7</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SourceType</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>af76ce2b5d836a2b28b3987df07897f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ARB_PROGRAM</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>af76ce2b5d836a2b28b3987df07897f99a3b20f85d78e96656f50d49885f8fea03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CG_PROGRAM</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>af76ce2b5d836a2b28b3987df07897f99ae4d5b6ef042cf1496a06aef006138ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GLSL_PROGRAM</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>af76ce2b5d836a2b28b3987df07897f99a52f929667e30a394d02df900dfbded81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILENAME</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>af76ce2b5d836a2b28b3987df07897f99a909b6538424a62e355a7dd2e4b17036c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a1caba20c0af0932d58a4b0191c2fdf60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>sourceType</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>ac170900f8890d3c342d9221f164638bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>sourceProgram</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a8819df3b12a940f9d34e277cdc943767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFNode</type>
      <name>parameter</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a60191a0bbeb8a17c10b6c9714430d525</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFrustumCamera</name>
    <filename>classSoFrustumCamera.html</filename>
    <base>SoCamera</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>a58da793d800b4c3abf6973148fd49e2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoFrustumCamera</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>ab05eb68d9e65fa2f478727f729973b74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleHeight</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>a664957904b32a096304d8f469d3b2cb6</anchor>
      <arglist>(float scalefactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbViewVolume</type>
      <name>getViewVolume</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>a685072b5bdd355b4f44c9876535a3189</anchor>
      <arglist>(float useaspectratio=0.0f) const </arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>left</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>aeee8a13eec975ce5c430a4bb520ff355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>right</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>aef80bba79964a5f4c703c005d7f02fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>top</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>add56267469c24ce7ea71fe60eed3cc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>bottom</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>a7773a2bce563b540d0c838abf7fb859c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>a121ef42d8cc3d2d06c157d0dd0da2fa8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoFrustumCamera</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>aa4d357bed1a2b71c41fba33edff3ed9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>viewBoundingBox</name>
      <anchorfile>classSoFrustumCamera.html</anchorfile>
      <anchor>a2da63ba0f195f3fd6b13f9d1f57c5988</anchor>
      <arglist>(const SbBox3f &amp;box, float aspect, float slack)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoFullPath</name>
    <filename>classSoFullPath.html</filename>
    <base>SoPath</base>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classSoFullPath.html</anchorfile>
      <anchor>ac910125223965d59eb473cadc636f8c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTail</name>
      <anchorfile>classSoFullPath.html</anchorfile>
      <anchor>a4bddfc1f99bb0cc70c9f1e2ebe1212ce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNodeFromTail</name>
      <anchorfile>classSoFullPath.html</anchorfile>
      <anchor>a1c8d9be87e8eef34f67b81ac8a6df595</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexFromTail</name>
      <anchorfile>classSoFullPath.html</anchorfile>
      <anchor>a416b755d0532b480de14938c630d5968</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSoFullPath.html</anchorfile>
      <anchor>ab2b62f3955e8b9a6c965018c098ef61a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPath</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a358fb5c0804a2326dbe9a0365dee0eee</anchor>
      <arglist>(const int approxlength=4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPath</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>acca61df3c242a3330b500841a8dc5bc6</anchor>
      <arglist>(SoNode *const head)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPath</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a02da31c9ae679ded222a73138f1b266f</anchor>
      <arglist>(const SoPath &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SoPath &amp;</type>
      <name>operator=</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a0098c2fc11f7d2e50e22937d414cb3d1</anchor>
      <arglist>(const SoPath &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a711735eb906e2e6ad10b613fad82d359</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHead</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a91a6cec060019cd9321479eacc2638c1</anchor>
      <arglist>(SoNode *const head)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getHead</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a5ae670ee064c38811a5ae156a8d5274a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>aa32c4df6c4fe63cf31b09727f6ad0bd7</anchor>
      <arglist>(const int childindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>af5eb808c245d5d6f95b6a1ea8e0729d9</anchor>
      <arglist>(SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ace80066f1f54af55a265c0d980c13975</anchor>
      <arglist>(const SoPath *const frompath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a4df0becc437e8052b47b526b0c1b802c</anchor>
      <arglist>(const int childindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>aa82bbd8566a5cddf2139d85402858b77</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTail</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a790d9bb9c6cdb41320dd114eb299c405</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNode</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a961c72a9ac71401a07c4c744a430588f</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNodeFromTail</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a71eee84bbfda27d9da1e13ce2e90a5dd</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a178632030261c047046ca612d9b1672a</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexFromTail</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a8ffd4d262084df9aa6a251df5ca40c38</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ac8e049429d6d9c33cfabee62714f8d93</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ad6078a33f2838005f98cf488d18930e8</anchor>
      <arglist>(const int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFork</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a2e67692f5c126d4e54646d4b8c227add</anchor>
      <arglist>(const SoPath *const path) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findNode</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ad6a5ba8f63de2c5d0c4187a7db2c1dcf</anchor>
      <arglist>(const SoNode *const node) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>containsNode</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a1fd172539c22f3e5f43574385d0b3f66</anchor>
      <arglist>(const SoNode *const node) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>containsPath</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a40946ad30477f1fa41276cb012a56040</anchor>
      <arglist>(const SoPath *const path) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>copy</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a741990616d6f379b02e1ab98ac92f474</anchor>
      <arglist>(const int startfromnodeindex=0, int numnodes=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertIndex</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ac2c8ab31aaece572afc70082e52f81cd</anchor>
      <arglist>(SoNode *const parent, const int newindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndex</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a51180fc82d5385b88b662e0f1a136568</anchor>
      <arglist>(SoNode *const parent, const int oldindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceIndex</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a8ab459c9766169e3c7e58f0cfd6fc446</anchor>
      <arglist>(SoNode *const parent, const int index, SoNode *const newchild)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isRelevantNotification</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a4ca7591a34980e837a3f48857508c4d6</anchor>
      <arglist>(SoNotList *const l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a3b45195e0e17b98f437de45223c97a20</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoPath *</type>
      <name>getByName</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a4fc80e2d0e9330731b5c51ecd9f4e590</anchor>
      <arglist>(const SbName name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getByName</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ae03891fefc14fe234ac170ede8657214</anchor>
      <arglist>(const SbName name, SoPathList &amp;l)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPath</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a5143b3c9f47ecd2e1e2b263e197a04b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>auditPath</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>a4c024bb9e34aa9db13c80413ebab6d3b</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGate</name>
    <filename>classSoGate.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a9559cc35395463a9f06fd91774d1607a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a594f51529a8208446870db37559678ca</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>ab1a618f277b93877a0a60731c7861e48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGate</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a8f33f9f499f21c30e1e21b51aa022719</anchor>
      <arglist>(SoType type)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enable</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a58ba8cba7b7a0485378bca24de4ddca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>trigger</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a8fabec4cf929a7f24c941dee44c879d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMField *</type>
      <name>input</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a6de98f1f2ff1166dfc5a63ecb10275bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput *</type>
      <name>output</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>a9959b3e7a3cdd1fe22bd58556f2569a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoGate.html</anchorfile>
      <anchor>aeb37fc6d9694a3124381c2788b8d5877</anchor>
      <arglist>(SoField *which)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGeoCoordinate</name>
    <filename>classSoGeoCoordinate.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>aa144c195293a9babdabfe516334f081a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGeoCoordinate</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a749508a3aa6232d8754172b3c3556ed1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a783e2f8dad79488a522bc79b5915aa4e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a500846e311a4accd0a544426bf452d2e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a3b4b81ec75ef887327fb4a9ad98233d8</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a460ec6c5aca00f4169d9f0f80e863744</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a0ed2c2b053c28041097b3c30f3662e2e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a138b63833a48a02d9f139c859c54a4a8</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3d</type>
      <name>point</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a854473928ff607b7dbbaaa57d3933a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>geoSystem</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a7b9e25e7ff6853f93cc454ce5f6deee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a631efa5b0748f30f8d8c5b7f5701c4cc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGeoCoordinate</name>
      <anchorfile>classSoGeoCoordinate.html</anchorfile>
      <anchor>a4f9aec0f10e6113b97b7a7e843f246bd</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGeoElement</name>
    <filename>classSoGeoElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>ab9ad8ad6c73c22503b5c8dbd09fec3ab</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>a475b42e6b6ea04ae551a0b9022890490</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>a70a7ef78e4ec03b215926d5f2ae58d3c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>aa2280357270625500e19d2a703304b7d</anchor>
      <arglist>(SoState *const state, SoGeoOrigin *origin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoGeoOrigin *</type>
      <name>get</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>a17684b54f2dffdf6969f7122e2e8fbab</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGeoElement</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>aa5f681c9d222706f4f9057cfd34fcac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGeoElement.html</anchorfile>
      <anchor>a6479660e3999cf07eaf66d7091e6f9a5</anchor>
      <arglist>(SoGeoOrigin *origin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGeoLocation</name>
    <filename>classSoGeoLocation.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a03c15e95d461d44ddeff58bcf603c9ce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGeoLocation</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>aa3d22fb10023de33de7763d1a2109fb7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a39db9c94f5dd94a66f823e1c2a8f073e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a7da42155aa8e2bcffbfb4925cc0bf0aa</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>aa0049b9f9b61697e49010daffb9107ff</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>ab1917b5b0aa02f1f3d31ac6fe6afdd74</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a8ebb38e6c21864b7d30476f28e4c9325</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a6b7e1a7efe67f89f6dc98d9eebd89062</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a7459e03a65e109319aa252018244ca6e</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3d</type>
      <name>geoCoords</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>aaada838a604ff0f8e95837b2aa56041a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>geoSystem</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a16aabdba448292ebf0db71468a80047a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a57c33d0d87ecd0e4f1a258581f3e8484</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGeoLocation</name>
      <anchorfile>classSoGeoLocation.html</anchorfile>
      <anchor>a36b1d951b3f6a90114e09c26f477205c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGeometryShader</name>
    <filename>classSoGeometryShader.html</filename>
    <base>SoShaderObject</base>
    <member kind="enumeration">
      <type></type>
      <name>InputType</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a39733a3084786036d1e29a815d32f5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POINTS_IN</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a39733a3084786036d1e29a815d32f5d7ada549a2a5712d8be3d543f723017973f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINES_IN</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a39733a3084786036d1e29a815d32f5d7ad48c4b6cdcab716867c6964bfaa0fe4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRIANGLES_IN</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a39733a3084786036d1e29a815d32f5d7a0320302c338c2f4d148feb2f9337457c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputType</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a1c2c5367c014c18e7fc3958935b947e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POINTS_OUT</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a1c2c5367c014c18e7fc3958935b947e0a4458b1d3f97a352519d17de2785724be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_STRIP_OUT</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a1c2c5367c014c18e7fc3958935b947e0aab360d2bbd47ed8579bba1ba707464aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRIANGLE_STRIP_OUT</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a1c2c5367c014c18e7fc3958935b947e0aa39cb24d5e44c239cc16947e0cf6b028</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a14b891c1b6e485f38b05f497ed2c6037</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGeometryShader</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a2cacfd81750e6b11efc899afb0befc20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGeometryShader</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a24032b0b22dd4a9a8e88c52c27d6b9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>acde2fb104c72e86a476b69fd20eae2b4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSupported</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a3afcc664fa4702d28553847b7dd347ec</anchor>
      <arglist>(SourceType sourceType)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>inputType</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a8e155b73190430685427af5bbb7d75ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>outputType</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>a2470879057ac0847a35f563cb8282734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>maxEmit</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>ac6a64c98d2ccc4e18a9b5d9a2c0c99ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGeometryShader.html</anchorfile>
      <anchor>ae37db5c3bdd40fb8f593ec0fd621a10a</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGeoOrigin</name>
    <filename>classSoGeoOrigin.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a15bef81e639036af73283fecdbd18cfd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGeoOrigin</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a129f967cdb9c05478d118c8f3a0fe4b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>aa4dcf44b1e9bb566942b306a690a4f1b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>aadb8a9a5ed1627c5d7aaeb883f8740b5</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a57234b0ee79bc406a77fca7cac21b03a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a523eae6fa4a4efb073b1ccce061f26bf</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a93136f0a50ef6ab40cf7f1d13ffb6710</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a7aa28cd049921205fa3524e5e39ec623</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a9997813485c5180429230d3c65199f0f</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3d</type>
      <name>geoCoords</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>aa45f9065bb3d8e6a55cb15442882eb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>geoSystem</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>ac6c1a759abd1551a554d41b4aae09eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a2b7a66300fd941c4825d33a2fbef5633</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGeoOrigin</name>
      <anchorfile>classSoGeoOrigin.html</anchorfile>
      <anchor>a4ea83cdcf10f6649e498932ac0930aa8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGeoSeparator</name>
    <filename>classSoGeoSeparator.html</filename>
    <base>SoSeparator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a4e0ce5854d45d525857cd70526f0d8ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGeoSeparator</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a0445fe419fc0ae6d76e09936ae37260c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a29713955cca4649a472f39d388fc265e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a7d2c5425530d18885e6ff271aa070a67</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a24cd47cfa9b92aa57f5217452e6c86ec</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>ad6e773651687ab8a888110271068a75c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a305f42f6d362597e19e66b588af743ee</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a412f24477cb0717510f29dbbd513096f</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>aeaadad04c7f3343d6bcaf2a425c1aa1a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3d</type>
      <name>geoCoords</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>ac9ad87951a90c57b2cd390807b952ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>geoSystem</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a66af1d6b171f92497cd89a81dbdb7438</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a501e8d04110bf38c787639ed68565f7c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGeoSeparator</name>
      <anchorfile>classSoGeoSeparator.html</anchorfile>
      <anchor>a6ad8ac4cc0b3bdda4390c76692204281</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGetBoundingBoxAction</name>
    <filename>classSoGetBoundingBoxAction.html</filename>
    <base>SoAction</base>
    <member kind="enumeration">
      <type></type>
      <name>ResetType</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>ac64919a694de0f25a48d1072c5c92f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a620c07f36a9a2a5b99ba193f5591ccee</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGetBoundingBoxAction</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>ab575afde0c66bdfa47b4e9ccf5183f1b</anchor>
      <arglist>(const SbViewportRegion &amp;vp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGetBoundingBoxAction</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a1160d8e012127f73334d6394cc65a962</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a8729d4cebd51dff3e91a592f1c1f97a6</anchor>
      <arglist>(const SbViewportRegion &amp;newregion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a4a56ebbcaca9d2f8d44d6f5f34abaafb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBox3f</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>ad0575b70b736eb56b64fdf613e1e33d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbXfBox3f &amp;</type>
      <name>getXfBoundingBox</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>ab452c2ec28417fc7b589f9382358d8b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getCenter</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a248593416c3eb89cbd4d4cd228d71da5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInCameraSpace</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a332ce4920d34d06a4b27ea67cc1ce99f</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isInCameraSpace</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a5fea59506771c8c21d83de9675edd0d2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResetPath</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>afd3c7d93d5394b2d977fb4b2069e3b8d</anchor>
      <arglist>(const SoPath *path, const SbBool resetbefore=TRUE, const ResetType what=ALL)</arglist>
    </member>
    <member kind="function">
      <type>const SoPath *</type>
      <name>getResetPath</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a43994dce7a828f3e873bb5957f6183a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isResetPath</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a2cb391aec10d6c84cfdc4bd4d62808a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isResetBefore</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>ac803e39670329431e32431f5f439eb74</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoGetBoundingBoxAction::ResetType</type>
      <name>getWhatReset</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a5d8efc7d17e3c115c1679e2a873f95cf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkResetBefore</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a03b81040285674e1f3f33615b927026a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkResetAfter</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a0229310254d52ed12d27e0f1812e900d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a5a4d10e40fc73fa438007d76df6cbbfc</anchor>
      <arglist>(const SbBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBy</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a8c2429efc99bf73ad48b20788da397fe</anchor>
      <arglist>(const SbXfBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>adeac8e44eb54353bca044cd540d35b77</anchor>
      <arglist>(const SbVec3f &amp;center, const SbBool transformcenter)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isCenterSet</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a5d634d927e1e4980a10431dc121b0fbf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCenter</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>ad132b7df48f254c4500fd8b2de4ac3cb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a693f3ae41369317133b9e4496ccae103</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a379d1e7ade13fe6bf7c29673cbecf2c4</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>afe9252bf770d1c3d3ef025dd6c2877d1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoGetBoundingBoxAction.html</anchorfile>
      <anchor>a014ad0b1616c5c24d039a773d073d476</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGetMatrixAction</name>
    <filename>classSoGetMatrixAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a077438ab5834ca5436f194b01d80a32f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGetMatrixAction</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>ae5ac0b7f06181091f871fee39562f4e9</anchor>
      <arglist>(const SbViewportRegion &amp;region)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGetMatrixAction</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a1b62ede3ca7db86bcc3bed6b18be3eca</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a94d1edd2867ac637c183e184e7e3e2a4</anchor>
      <arglist>(const SbViewportRegion &amp;region)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a8f05ba3e817d91eb8c51d62189116739</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a2ba7ec7b75bf2a11540952f5bd966dc6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>getInverse</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a0f9c88aaadeea5fed0cac6b41f8924fb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>getTextureMatrix</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>ab818d4b77714038f0412e139600598bf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbMatrix &amp;</type>
      <name>getTextureInverse</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a3ddc9020114cab6f0976615205c506be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>af930cd1eb94563078fa1b7ac6cf9500d</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a79b8acef205ee40c73eb27c2585cf8d3</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>ab5dc1c84d3fac1b5e9339a1b6d4c0795</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoGetMatrixAction.html</anchorfile>
      <anchor>a8cb038085672ecad54c2fd86ccb0e76e</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGetPrimitiveCountAction</name>
    <filename>classSoGetPrimitiveCountAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a25f8ff5e8e9c71d88b98972b54eda6d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGetPrimitiveCountAction</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ad96ce284d73ed804cf219318022c01dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGetPrimitiveCountAction</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ad6108f902f19f546978c1713e0e849ca</anchor>
      <arglist>(const SbViewportRegion &amp;vp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGetPrimitiveCountAction</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a003c383f472e8ca055fbc622ca1b11f3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTriangleCount</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ad6b44613cd180df30a610e5cc433eeb5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineCount</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>adf0923412bc23b7edd94b563a1e58d84</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPointCount</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>aa55f5a2c8585c8436dc5f972c2f02bf7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextCount</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>aea009de66f6f510d77fe3348d03b6da0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getImageCount</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a30c35c514ae526b8bd6c5a2c375343f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>containsNoPrimitives</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ab096760eab5aa3d23ce173d96eb197cf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>containsNonTriangleShapes</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a3034b5eb71497c0216901ada5b91662c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>is3DTextCountedAsTriangles</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>aa8672b57993a7f76c023a5c8280d0edc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCount3DTextAsTriangles</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a77d772d26366cae2df50072510d3e657</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>canApproximateCount</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a0cb9ca77e912f3fc7101068f2bb0f7bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCanApproximate</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a12ef509b97600196ac98e8e384c1a425</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecimationValue</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a631433ccadec3636d90ffefcea353150</anchor>
      <arglist>(SoDecimationTypeElement::Type type, float percentage=1.0)</arglist>
    </member>
    <member kind="function">
      <type>SoDecimationTypeElement::Type</type>
      <name>getDecimationType</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>abee67ef57de81b1d8623b57b6426446f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDecimationPercentage</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>aecf62216c2b534af098c200825b5a523</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumTriangles</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a78d9fff0fef87f447f62c43d9c728935</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumLines</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>aee2ab6c1a328b3ac7c2914f5d17fda4f</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumPoints</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ade3acd55b90303e0300a35eec7d79037</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumText</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>adb3a0d28cf056be2dfbd1281bc7b5d7f</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumImage</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a60eb717ba1b0a3e197ccf3994781dc35</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incNumTriangles</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a73dd9395cce3b8672d946e2d68255645</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incNumLines</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a3d628ce227ea643414e1bcdff83908d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incNumPoints</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>af23b3aa141a6efd8dc5892dce77ab8ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incNumText</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a42899e902896d95df12b4d2729892417</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incNumImage</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>a1a4324f01af564588056cfec816f6393</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ae4ba2e3d9d1feaf139af7cc043d6871c</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>ac249c50615603601f1e2d333d979f2e5</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>abb5186034bb002554f47a7caf52308d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoGetPrimitiveCountAction.html</anchorfile>
      <anchor>aa252da82ac0a2aa5263413899d66ca62</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLBigImage</name>
    <filename>classSoGLBigImage.html</filename>
    <base>SoGLImage</base>
    <member kind="function">
      <type></type>
      <name>SoGLBigImage</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a63bf724f345c2a17403aec857b3fca90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unref</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a66f4ebbb9a4d6a914f46faa82212f7f3</anchor>
      <arglist>(SoState *state=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a6ceb53afc3a417548ed5917b1d73e688</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a03d83d40ee2851ecf90d90abfae412cf</anchor>
      <arglist>(const SbImage *image, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a25f7c25cbc4e13dfa1c63be7927df04f</anchor>
      <arglist>(const SbImage *image, const Wrap wraps, const Wrap wrapt, const Wrap wrapr, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>exceededChangeLimit</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a108c4d2aaaf0291552db029dd53f76b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoGLDisplayList *</type>
      <name>getGLDisplayList</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a34c957db1299d20e1e2d339dce664552</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGLImage</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aeb677834d518a3fa5074e94b52915133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isOfType</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aeb92ad6e27577d845a987e8f38406c0b</anchor>
      <arglist>(SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLDisplayList</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>af27b448da7b46aaa3b4fb16d5c0d8091</anchor>
      <arglist>(SoGLDisplayList *dl, SoState *state, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const float quality=0.5f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPBuffer</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a07ba3870534f4f5907886d3006359d73</anchor>
      <arglist>(SoState *state, void *context, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const float quality=0.5f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a9224330dccd39954755029af4bb4a24c</anchor>
      <arglist>(const unsigned char *bytes, const SbVec2s &amp;size, const int numcomponents, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a0dbf63f849f504e5de843b8768c2200e</anchor>
      <arglist>(const unsigned char *bytes, const SbVec3s &amp;size, const int numcomponents, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const Wrap wrapr=REPEAT, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlags</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a6950dd6e70a3c23fe1d548b945ceb9f8</anchor>
      <arglist>(const uint32_t flags)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getFlags</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>ae31f3466f1bdaab595dcb2946ca96daf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbImage *</type>
      <name>getImage</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>ade6281887fcda93b6e07b5cb2cd8cbaf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasTransparency</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aec14995e8aa7e025d779c31db78b6818</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>useAlphaTest</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a9f0e72349b883638434684b2947d0244</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Wrap</type>
      <name>getWrapS</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>ae22d93f279540345275db10d311642e4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Wrap</type>
      <name>getWrapT</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a7417be94f86e0831b06ab298960924ba</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Wrap</type>
      <name>getWrapR</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a4204bb6c396311df8de118b002911e7d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getQuality</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aaa69cfd1c187cf0469df0f09068f4213</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getGLImageId</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a9d80bccb9d7491feea39a3be1a8d5775</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setChangeLimit</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>ac05f8834536618e37cfa5bcb7de5fc9d</anchor>
      <arglist>(const int limit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>a5a84e68ec4e187b499556ca06126b009</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aa444512d6d479270446be7daa59f984a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>beginFrame</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a93c6f30b09ad71b1ca8d633492bafd72</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>tagImage</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>ad8dc4d2c29ecda4a07c7b4e927f63ffa</anchor>
      <arglist>(SoState *state, SoGLImage *image)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>endFrame</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a1e0fa5f6229521c519b314a6bed1d699</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDisplayListMaxAge</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aa85f7da15bbb06227f9da3a91dfe6da5</anchor>
      <arglist>(const uint32_t maxage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeAllImages</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a2416ed37d727effcfb7579a4725f3334</anchor>
      <arglist>(SoState *state=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a949c4afb8ebf6bea1543f16f93b8fbea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setResizeCallback</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a8a8860699c12cee3abad5a1d0cb0048e</anchor>
      <arglist>(SoGLImageResizeCB *f, void *closure)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unrefOldDL</name>
      <anchorfile>classSoGLBigImage.html</anchorfile>
      <anchor>aeab189f04a025e0a49954c8374621d5c</anchor>
      <arglist>(SoState *state, const uint32_t maxage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLImage</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a64ceff3a8d7d595f0f6bf5e7abd2146e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aa7a651ee3183f5497290ce3d92141524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResizeReason</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a39a7a3a25f3b2af662b33844d9d0281a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a3a13ffb56506b763c64831a6f037d4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SbBool</type>
      <name>SoGLImageResizeCB</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a51b734acc32c6a4d1cf24285bdb9961d</anchor>
      <arglist>(SoState *state, const SbVec3s &amp;newsize, unsigned char *destbuffer, ResizeReason reason, void *closure, class SoGLImage *image)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLCacheContextElement</name>
    <filename>classSoGLCacheContextElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>ac44db8acf7b081b05962a5ff773abc75</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>aea038aea05195bca322eb5c50add7747</anchor>
      <arglist>(const SoElement *elt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>adfadda2e27c12f32e8f92c50a6cdc74f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>accde9188d5473dbc51dd42731b00f6ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>ab53c5fe8913c0a40de48104cd4af5ea9</anchor>
      <arglist>(SoState *state, int context, SbBool twopasstransparency, SbBool remoterendering)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>aa6670196d3a5703087f175680e7e2f21</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getExtID</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a22e922375fa676f387b845143fe06d73</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getOpenGLVersion</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a2681f82106071a1ea0c09481a93b1ed8</anchor>
      <arglist>(SoState *state, int &amp;major, int &amp;minor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>extSupported</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a20c81fc50d6d058b9a7519b0cf43b7fe</anchor>
      <arglist>(SoState *state, int extid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>areMipMapsFast</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a1b1be03a71b79d8e035a130b05b20bc3</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shouldAutoCache</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a03c2a0a9306ee88a174e7a6f7e1998ab</anchor>
      <arglist>(SoState *state, int bits)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setAutoCacheBits</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a5b3cf2ffd8d475c011a7cb6e9abd7dd8</anchor>
      <arglist>(SoState *state, int bits)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>resetAutoCacheBits</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a15ba6a5703b11dd1ee16bce1cd42ee81</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getIsRemoteRendering</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>ac840790e0f61e500543d02fb9a2ec537</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getUniqueCacheContext</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>ace6d79525d7124a447c033d1e71a2384</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scheduleDeleteCallback</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a50fd18a2165f6b55ad131c0435bd3bb4</anchor>
      <arglist>(const uint32_t contextid, SoScheduleDeleteCB *cb, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incNumShapes</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>ace461e5edf0f89b781035ecd55de1ce0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumShapes</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a3e03e6fa9cc69fd20289f9464ba4f480</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incNumSeparators</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a0123f35d001ce7f0de86ba410d7b713f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumSeparators</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>a5ca726ed733357ce2324eb82c48bed2a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLCacheContextElement</name>
      <anchorfile>classSoGLCacheContextElement.html</anchorfile>
      <anchor>aff137d61f4ad1d395aa3244506db51ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLCacheList</name>
    <filename>classSoGLCacheList.html</filename>
    <member kind="function">
      <type></type>
      <name>SoGLCacheList</name>
      <anchorfile>classSoGLCacheList.html</anchorfile>
      <anchor>a9f6ceb554e71a39157b0cb23e0e0c79b</anchor>
      <arglist>(int numcaches=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoGLCacheList</name>
      <anchorfile>classSoGLCacheList.html</anchorfile>
      <anchor>aee03c8f1dc11d09800b9223e6731108e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>call</name>
      <anchorfile>classSoGLCacheList.html</anchorfile>
      <anchor>a864f195027aedb6135bf9ddd32e12c11</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classSoGLCacheList.html</anchorfile>
      <anchor>a4e607f06f606ce349872cf92bb02c9ef</anchor>
      <arglist>(SoGLRenderAction *action, SbBool autocache=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classSoGLCacheList.html</anchorfile>
      <anchor>a62f2b42fe0803aa34e287e261ba9b31b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAll</name>
      <anchorfile>classSoGLCacheList.html</anchorfile>
      <anchor>aa6587bb062c2f3d5e1a7d861e2e9c7f3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLClipPlaneElement</name>
    <filename>classSoGLClipPlaneElement.html</filename>
    <base>SoClipPlaneElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>a9bf213fddcf792f17c370a64b35a77db</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>a07b11693faab7c3ff71387461f3d474b</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>aea86fe6a7d64da979413ca0ab2e75af5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>ac543d0982b3d8d3758c85b574e988630</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMaxGLPlanes</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>acd631f37bb9dfcd76a1475cd5f55242c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLClipPlaneElement</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>ad2653fc3e7a0499804341369b29f67ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToElt</name>
      <anchorfile>classSoGLClipPlaneElement.html</anchorfile>
      <anchor>a719312c1e515ded8ddc2428c9cbef254</anchor>
      <arglist>(const SbPlane &amp;plane, const SbMatrix &amp;modelMatrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLColorIndexElement</name>
    <filename>classSoGLColorIndexElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>a4b2b724439e36f144a3b80ec9421e398</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>a961e3430fdf5ceb0be97886b2d08813c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>a907446af6185550332ebcc56c6abbdc3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isColorIndexMode</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>a4210813703fd2737eda8067edb35fe30</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>a514870d404af75a3b4452cbd39efe439</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numindices, const int32_t *const indices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoGLColorIndexElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>ac58b13db3ae9fe48c603ec347cbfe4c7</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLColorIndexElement</name>
      <anchorfile>classSoGLColorIndexElement.html</anchorfile>
      <anchor>aae18ec8d7cab4fe5cb8c5519eee03d0a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLCoordinateElement</name>
    <filename>classSoGLCoordinateElement.html</filename>
    <base>SoCoordinateElement</base>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getPtr3</name>
      <anchorfile>classSoGLCoordinateElement.html</anchorfile>
      <anchor>a753b432038433f32a9345db723b667a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f *</type>
      <name>getPtr4</name>
      <anchorfile>classSoGLCoordinateElement.html</anchorfile>
      <anchor>ad53a039498c92169e903f8545d1f4e34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoGLCoordinateElement.html</anchorfile>
      <anchor>abe262a168eed9c96b16755f2a566983c</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLCoordinateElement.html</anchorfile>
      <anchor>a2281db0e4aad987952765ad3b5a5544a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLCoordinateElement.html</anchorfile>
      <anchor>a465ad91c144767518a886bbc7abf276e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLCoordinateElement</name>
      <anchorfile>classSoGLCoordinateElement.html</anchorfile>
      <anchor>a5dbe4195a765d73a5250ad581b7c029e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLCubeMapImage</name>
    <filename>classSoGLCubeMapImage.html</filename>
    <base>SoGLImage</base>
    <member kind="function">
      <type></type>
      <name>SoGLCubeMapImage</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>a48a50fd01499425df7fb41b996a78ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unref</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>a3b76cfb097f3135fc8e2928ba9b8baf1</anchor>
      <arglist>(SoState *state=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>a26e55f67623fb26f5606904c508e1b7e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>a46893eb4e6ef479dcd73c2e737cb1162</anchor>
      <arglist>(const SbImage *image, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>a3a7865d02a0f1b7c99b0965892241385</anchor>
      <arglist>(const SbImage *image, const Wrap wraps, const Wrap wrapt, const Wrap wrapr, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoGLDisplayList *</type>
      <name>getGLDisplayList</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>acfd924916d8c5403f7279f5a3d6e55cf</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLCubeMapImage.html</anchorfile>
      <anchor>a742b6bd436068b42c1e5f43e395b6c27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unrefOldDL</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a99e6a675f9c00509bbeda7602d559c02</anchor>
      <arglist>(SoState *state, const uint32_t maxage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLDepthBufferElement</name>
    <filename>classSoGLDepthBufferElement.html</filename>
    <base>SoDepthBufferElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>a9f08d9e229bf59df4a061dedff41c8a4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>a480cf9263f8bc9d90e70791c6dc95327</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>a1772bc47aac09221b56ade8c1374616c</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>a31f5768f8ff4564b5ac72cf8781453e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>a64030c1bf7685be4301583203e477a9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLDepthBufferElement</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>afe6cf5c76c66d13b48874025d9725a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLDepthBufferElement.html</anchorfile>
      <anchor>a94f78042249843283e85e0fa5203a05b</anchor>
      <arglist>(SbBool test, SbBool write, DepthWriteFunction function, SbVec2f range)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLDisplayList</name>
    <filename>classSoGLDisplayList.html</filename>
    <member kind="function">
      <type></type>
      <name>SoGLDisplayList</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a9675f4cb4e76b8b005a128fc613cf20e</anchor>
      <arglist>(SoState *state, Type type, int allocnum=1, SbBool mipmaptexobj=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>acc910c8eb5219d173615ca678ebe4409</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unref</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a69d2f9cd8f920781e9e0c614dc7b964e</anchor>
      <arglist>(SoState *state=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a949fbf29c5a6c41ebfa3548e0b2905f0</anchor>
      <arglist>(SoState *state, int index=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>ac9b6e9c8021f305b92a8bb4b0e14800b</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a553a566be22fee2ea06cb5b4b7b5fbb6</anchor>
      <arglist>(SoState *state, int index=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDependency</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a2c80a2c5ad0ce0c6b9c1274185c14900</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isMipMapTextureObject</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>abb6b65f95a6df4af8baf2836e727a16d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a3489c278923b86d04e45f69f32b7b90a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAllocated</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a54b6938d5eb4fa500d2ae7df587fda10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFirstIndex</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>ad46055f5b926107178df00e3f47827a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContext</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a4ffc92250a57b01991112cb5372ea9bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureTarget</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>ab3efa088fe1e15e26e18f46c196a01f9</anchor>
      <arglist>(int target)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextureTarget</name>
      <anchorfile>classSoGLDisplayList.html</anchorfile>
      <anchor>a52fc08ac79f614492d40b55b7c004f99</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLDrawStyleElement</name>
    <filename>classSoGLDrawStyleElement.html</filename>
    <base>SoDrawStyleElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLDrawStyleElement.html</anchorfile>
      <anchor>a21f8aeae1f5482b95bd55dd7561056da</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLDrawStyleElement.html</anchorfile>
      <anchor>a40b9ff90c60b88b01184e7ecfdfcfb4a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLDrawStyleElement.html</anchorfile>
      <anchor>a66b11b27dca423f8d391a201d56f7ce6</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLDrawStyleElement.html</anchorfile>
      <anchor>ab012c51f8e3f5206725eed6457d69081</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLDrawStyleElement.html</anchorfile>
      <anchor>a75498acd20e4afe987e4cdea864e8448</anchor>
      <arglist>(int32_t style)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLDriverDatabase</name>
    <filename>classSoGLDriverDatabase.html</filename>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSupported</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a35f18a28f4e36340753b3b027a543433</anchor>
      <arglist>(const cc_glglue *context, const SbName &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isBroken</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a58910a805424132c14c55660068f4e11</anchor>
      <arglist>(const cc_glglue *context, const SbName &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSlow</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a3de4d2385dce2d2770b41573e0ed85e6</anchor>
      <arglist>(const cc_glglue *context, const SbName &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isFast</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>afcd59354cc3ea23faf98c2a365aeddf1</anchor>
      <arglist>(const cc_glglue *context, const SbName &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbName</type>
      <name>getComment</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a87b16159e9aae277356fed91e0dbfda8</anchor>
      <arglist>(const cc_glglue *context, const SbName &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadFromBuffer</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>ac28af1332fd98a67f1fc697c867b5da4</anchor>
      <arglist>(const char *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadFromFile</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a247d4e101bf35746dd5172b8709207c0</anchor>
      <arglist>(const SbName &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addBuffer</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a53bd7e1e482e890edfed98e3d96a83ae</anchor>
      <arglist>(const char *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addFile</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a65f391c2c2b02b737149bddc6cb50a4d</anchor>
      <arglist>(const SbName &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addFeature</name>
      <anchorfile>classSoGLDriverDatabase.html</anchorfile>
      <anchor>a1aa667e2173f532b7248ecb2736cbb45</anchor>
      <arglist>(const SbName &amp;feature, const SbName &amp;comment)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLEnvironmentElement</name>
    <filename>classSoGLEnvironmentElement.html</filename>
    <base>SoEnvironmentElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLEnvironmentElement.html</anchorfile>
      <anchor>a7483880f7f2f549a65669d02f01b14eb</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLEnvironmentElement.html</anchorfile>
      <anchor>a0cf21b6c0def24fc7cd98d04796d4ec4</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLEnvironmentElement.html</anchorfile>
      <anchor>a848cdfab7c88e19e17f13775ead5db97</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLEnvironmentElement.html</anchorfile>
      <anchor>a1c81335058f7df4f84619c50d579195a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLEnvironmentElement</name>
      <anchorfile>classSoGLEnvironmentElement.html</anchorfile>
      <anchor>ad1cc191551e33d311980e4fb10ca52b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLEnvironmentElement.html</anchorfile>
      <anchor>a159f565fc78904a1a9d2dd17c75c4334</anchor>
      <arglist>(SoState *const state, const float ambientIntensity, const SbColor &amp;ambientColor, const SbVec3f &amp;attenuation, const int32_t fogType, const SbColor &amp;fogColor, const float fogVisibility, const float fogStart)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLImage</name>
    <filename>classSoGLImage.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unref</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>ad7e79b5ba71f8d59a70bf98a6fa43b45</anchor>
      <arglist>(SoState *state=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a666e328abfcec8c2ca78fcf202ce260c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>ac8f8dda12d9a438e044b70d54747188b</anchor>
      <arglist>(const SbImage *image, const Wrap wraps=REPEAT, const Wrap wrapt=REPEAT, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>a0cf5094330fe62ebe537e11cecdb371a</anchor>
      <arglist>(const SbImage *image, const Wrap wraps, const Wrap wrapt, const Wrap wrapr, const float quality=0.5f, const int border=0, SoState *createinstate=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoGLDisplayList *</type>
      <name>getGLDisplayList</name>
      <anchorfile>classSoGLImage.html</anchorfile>
      <anchor>aff3d3890ee87cd6c742e8da9890d8b48</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLLazyElement</name>
    <filename>classSoGLLazyElement.html</filename>
    <base>SoLazyElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a7bcc8715e39fbc131319d837f321a68e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a247eab5efe9e86234adf6e34edde4c20</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a7e6b01ace3ad94d718e2f5452df4139b</anchor>
      <arglist>(SoState *state, const SoElement *prevtopelement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendDiffuseByIndex</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>af63cc5c3872f28f0db70b9f619cc4699</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a29525a0f936a98a88997c96f9dcc780c</anchor>
      <arglist>(const SoState *state, uint32_t mask) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendVPPacked</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>ab1f9ffc403db454aadf85d0153b683f6</anchor>
      <arglist>(SoState *state, const unsigned char *pcolor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>afde1eef8fc8fac9a55c7cf7a543419de</anchor>
      <arglist>(SoState *state, uint32_t bitmask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>a5d0d3d86d48e3dacfadaf4068bc466be</anchor>
      <arglist>(const SoElement *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>a943bb739a5e0128cd47cdddd23496025</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a845efb5e7df694b3ef41aeee0ba744e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>ae87c99367dc115d73d68ef9a78c44ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendAllMaterial</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a103f6d513f8fb6a658cd09d930a096f4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendNoMaterial</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>acf895b922c531dcd739c131582786361</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendOnlyDiffuseColor</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>ac8f91fb102579319531c0fb82ae099fe</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isColorIndex</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>af71e8f9528b685db231366ff704e50a1</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoGLLazyElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>ae32fccbc7c294c652ba058ae8eb23e37</anchor>
      <arglist>(const SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mergeCacheInfo</name>
      <anchorfile>classSoGLLazyElement.html</anchorfile>
      <anchor>a7c76dc9ec0ac109ccf5013914a0e2c75</anchor>
      <arglist>(SoState *state, SoGLLazyElement::GLState *childprestate, SoGLLazyElement::GLState *childpoststate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>a95b378403ca1c9e8e6ba6d5d817fe8b9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>a8a9cb64b2a702f8bd9910c39718015b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setToDefault</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>a2d1a94a1af08f562547f135a4960a605</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLLightIdElement</name>
    <filename>classSoGLLightIdElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>a5aa5e2a3dfe22614c3ca7920eec3b00f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>a83b6b7bc4c7775b9f0687c08b4b4beda</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>aca0905c8ba7e299d55b7e5b1818e32bc</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>ac0fe17edcc996aad9d79835b758b564a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>a4e5419ed301b217d3e960da7a1d83578</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>increment</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>a3e7794d67c6c1fc64b2cadb8998c8485</anchor>
      <arglist>(SoState *const state, SoNode *const node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>increment</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>a81d9ee078992656e06144a6a059fd042</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>get</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>ae0a57b45a7c70ad094b0a599ffb3c28b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getDefault</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>ad7be1ece604a52a8980dc462fce48cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getMaxGLSources</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>ab34676900ae478cd7b15be27c38a6549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLLightIdElement</name>
      <anchorfile>classSoGLLightIdElement.html</anchorfile>
      <anchor>a3d3b6c88220ce5ee6bdf66fa76ad0a42</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLLinePatternElement</name>
    <filename>classSoGLLinePatternElement.html</filename>
    <base>SoLinePatternElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a0272499c2428eed44aedcc62916018b9</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a8c11ddd4d73f060362f65369a05cb17b</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a43a72b560f153056f2cd8c404f5b839c</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a685633d3ff97473ac4312dd0a1f61b25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a55757e05dcc8c5b0dbb33cd4dd44ffc2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>a7100b499655a8d4705b27c14b089b368</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>a5246e7ba7d323d0e9ca809fb21419f84</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>ad60fe246601ec865f84c3ac1da584030</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t pattern)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>a62fc53417d1b08a9af97457ed7eced03</anchor>
      <arglist>(SoState *const state, const int32_t pattern)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>get</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>ae0ce78feae3b9474d5714f68cf016eeb</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getDefault</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>a159a7bc2f71650fcae3b5d9e9981ef7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLLinePatternElement</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a354b03da856e112005952af9f439ce37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLLinePatternElement.html</anchorfile>
      <anchor>a8d341ae39b3e092032c27006614d5c7c</anchor>
      <arglist>(int32_t pattern)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLinePatternElement</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>a124468df86fbb9bbe279588dcd924990</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLLineWidthElement</name>
    <filename>classSoGLLineWidthElement.html</filename>
    <base>SoLineWidthElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLLineWidthElement.html</anchorfile>
      <anchor>aec5e4cd4da409b3f605526cca890c517</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLLineWidthElement.html</anchorfile>
      <anchor>a97d67146a752b66547a72dab2095a59d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLLineWidthElement.html</anchorfile>
      <anchor>a376fc1204889dc9ebde64cab729dd077</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLLineWidthElement.html</anchorfile>
      <anchor>adf6a56eadbcea69403a0f0631e806a77</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>a7e9d78e0c5ea39ca479ee0d9cfe5a98a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>a15be72431bd91b4fc8f569ff27ad1e5c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float lineWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>ad3233903c73c9799752819cc96305bbf</anchor>
      <arglist>(SoState *const state, const float lineWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>a833ca083d47eb2bafaf0c4986aa8e67d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>a5441460299f8b0c39028c47ca3fd7da5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLLineWidthElement</name>
      <anchorfile>classSoGLLineWidthElement.html</anchorfile>
      <anchor>ab31d3b69c48fe512bb08740769a327b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLLineWidthElement.html</anchorfile>
      <anchor>a99023b6f65600d89f1edcc084aecf5a3</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLineWidthElement</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>a53a952cbc57106ceea551ebabc7746db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLModelMatrixElement</name>
    <filename>classSoGLModelMatrixElement.html</filename>
    <base>SoModelMatrixElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a9d1ae12553624f815bab9f562f61c1fc</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a42798458217059c6d48f20ed27055076</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a88ea2d927343537fbc9d12f4695ff8c6</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a89a3af2cd74791ddc3ea44c86a060108</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a30f4d7e82d6eb355ed7171f13b2a8fe7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLModelMatrixElement</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a1b08083b4ebfdbabe429c1c40c97d76f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeEltIdentity</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>af72727bbb7de7e5c783489823fb12f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a5cac1c0bd472b0c055bc7fd53d2d1612</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multElt</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>ac3632d1251255aefc60671114453fca5</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>translateEltBy</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a0ec039530a4d0f6abf565f4367c3aee7</anchor>
      <arglist>(const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rotateEltBy</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a54be892d5cdfc22756f543fd5db6e71c</anchor>
      <arglist>(const SbRotation &amp;translation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleEltBy</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a1f5a31f390e2543382240f5d5b6c5ac6</anchor>
      <arglist>(const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbMatrix</type>
      <name>pushMatrixElt</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>afb14ff393a253ab7aa06289c1036b244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>popMatrixElt</name>
      <anchorfile>classSoGLModelMatrixElement.html</anchorfile>
      <anchor>a418d50081bf76295a90840c2b33ec5b7</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLMultiTextureCoordinateElement</name>
    <filename>classSoGLMultiTextureCoordinateElement.html</filename>
    <base>SoMultiTextureCoordinateElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>adbfd14ff81ae66d52949a466be370a92</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a8665668a936b64bd8e9fb0b06409fc46</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a1d3dc250d755defdf5ef1ad19203ed47</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordType</type>
      <name>getType</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>afc835f4cc3bd1bd75c12bd3702aca3d9</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a96953d58e8e28d39dcd07ab92c620400</anchor>
      <arglist>(const int unit, const int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a21200fb3129379f1f23d3fbad63bb8a0</anchor>
      <arglist>(const int unit, const int index, const SbVec3f &amp;c, const SbVec3f &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRender</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>ac67fde7aac1a246dfb2e71373c8e689e</anchor>
      <arglist>(const SbBool *enabled, const int maxenabled) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initMulti</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>af07d0835f286a882e5fe5d295bab3bba</anchor>
      <arglist>(SoState *state) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>get</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a1450c3e2bba29b7223c1d5559a2a52d6</anchor>
      <arglist>(const int unit, const SbVec3f &amp;point, const SbVec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>acbb8a6e4176e5d106f003818ea4305ab</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>is2D</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>ada2638de949ee75a188701ea87cdbb4c</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getDimension</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a027d34d3e6ad64ca89a1226263070091</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>get2</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a620d5d7da381522005377d0e1775b136</anchor>
      <arglist>(const int unit, const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>get3</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a2ab8cd4c992bd3bcfba43954a4f79876</anchor>
      <arglist>(const int unit, const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>get4</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>afcb3c002cda90727b84e345c15e11d00</anchor>
      <arglist>(const int unit, const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f *</type>
      <name>getArrayPtr2</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a661e48f246cb9b264a13bc8c369a0aa6</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getArrayPtr3</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a24e459638897c651c7919dc30d9c84fc</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f *</type>
      <name>getArrayPtr4</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>ac46c93e84b9e8b3881fa94a0480bbffa</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a7be792e76b138cdd92766d8614cea472</anchor>
      <arglist>(const SoElement *elem) const </arglist>
    </member>
    <member kind="function">
      <type>SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a58447b83a71deb7ff6abb8735634d7d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a15d9967a6a52f9c04046e661e71a4034</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a0dbbef7162fed85b4a1285bf8c85f7a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTexGen</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a680a23b441a80f6d3d6373b80d6af23f</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, SoTexCoordTexgenCB *const texgenFunc, void *const texgenData=NULL, SoTextureCoordinateFunctionCB *const func=NULL, void *const funcData=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoGLMultiTextureCoordinateElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>aca42fb831435677f5905a6eaa1b6df75</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a8338385129684659e4e98493467aa6a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a7a937f46e714af084a702c0ee09c2f35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefault</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a06b0db0c8ec93ee8b324922837667d38</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFunction</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a56e6bc113e57a8e8fd5c2f7de1a80a24</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, SoTextureCoordinateFunctionCB *const func, void *const userdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set2</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>aff70d4f364279037eecebd716c6e7076</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const int32_t numCoords, const SbVec2f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set3</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>acef29639eb7cd3988161584fa1f00bf2</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const int32_t numCoords, const SbVec3f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set4</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a40d784c2dbd030c8e63c6714f31bbcfe</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const int32_t numCoords, const SbVec4f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CoordType</type>
      <name>getType</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a09010469457f2f9170420bf8161684e5</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoMultiTextureCoordinateElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a1105b92e8457d6641181cdfc3f75d744</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoGLMultiTextureCoordinateElement</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a4d016fb4912b068c8f87a062ae42da5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLMultiTextureCoordinateElement</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>aea761a405e4007329afdc95f14db1261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLMultiTextureCoordinateElement.html</anchorfile>
      <anchor>ac69838447ff8566f460b54293d6fdc54</anchor>
      <arglist>(const int unit, SoTexCoordTexgenCB *func, void *data=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoMultiTextureCoordinateElement</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a1e5c06cf7e4bda1f97cd4e95db366919</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMultiTextureCoordinateElement</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>ab551a9259d46d386211485a1f3395604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UnitData &amp;</type>
      <name>getUnitData</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>aa208bc28ed5b6f7f1f875629353a8d24</anchor>
      <arglist>(const int unit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLMultiTextureImageElement</name>
    <filename>classSoGLMultiTextureImageElement.html</filename>
    <base>SoMultiTextureImageElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>aa603eca04df98e73bb00ae136e66851c</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>ab451584769ffacccac5445a53b17cdfb</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>af244d84ece902ee90675d876d5ff8670</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a1efa9629312fb3a38c7e7de96e01d47e</anchor>
      <arglist>(const SoElement *elem) const </arglist>
    </member>
    <member kind="function">
      <type>SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>ad3d34eb05796225e20ec2adbda821499</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a3fef8bf860e526d16bbc416fb1743bbe</anchor>
      <arglist>(const int unit, const uint32_t nodeid, const SbVec2s &amp;size, const int numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Model model, const SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>aa576771327ab3d60b8bb4e282fee9233</anchor>
      <arglist>(const int unit, const uint32_t nodeid, const SbVec3s &amp;size, const int numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>a7e4dbeaf170a2da533f9233d7566959b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>ac1701c0b5715b2496ebdb9d2fbaaea25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>aa76aaddbb49462e6f304e625d868b626</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, SoGLImage *image, const Model model, const SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>hasTransparency</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>a25f73b974b50b6c739271aec0fadcdab</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getMaxGLTextureSize</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>ab994f08c91fbc980bd55e23aa2738eaa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a763924bb4caf10b338c869c096276cec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a6b059b0cf1f9f362e32d8314dde7cbd3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefault</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a85820239338287fe17efb15e26f1b70a</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a9eac56ffcbbda7baa046fac86d76863d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const SbVec2s &amp;size, const int numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Model model, const SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a7d83e22f0e10b45507fbcf86f20822ac</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const SbVec3s &amp;size, const int numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const unsigned char *</type>
      <name>get</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>ae894bdcb07ba0ceb02a367e63f608df9</anchor>
      <arglist>(SoState *const state, const int unit, SbVec2s &amp;size, int &amp;numComponents, Wrap &amp;wrapS, Wrap &amp;wrapT, Model &amp;model, SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const unsigned char *</type>
      <name>get</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a6978745d8abe0e625722462af608b46f</anchor>
      <arglist>(SoState *const state, const int unit, SbVec3s &amp;size, int &amp;numComponents, Wrap &amp;wrapS, Wrap &amp;wrapT, Wrap &amp;wrapR, Model &amp;model, SbColor &amp;blendColor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const unsigned char *</type>
      <name>getImage</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a6eb41dcafd499ad04b9bbd84e532a060</anchor>
      <arglist>(SoState *const state, const int unit, SbVec2s &amp;size, int &amp;numComponents)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const unsigned char *</type>
      <name>getImage</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>aeacb9e877683801a36cd40ec9feb095c</anchor>
      <arglist>(SoState *const state, const int unit, SbVec3s &amp;size, int &amp;numComponents)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbColor &amp;</type>
      <name>getBlendColor</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a9a85e186b05c755f4d6b4bdea4e1accc</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Model</type>
      <name>getModel</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a8c0e2b32d07a2347beaa4c1a4514b6da</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Wrap</type>
      <name>getWrapS</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a72a17e65109352bd6dc26cf64d35355b</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Wrap</type>
      <name>getWrapT</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a0ee8e2024e98f00af18aa46d697a47d7</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Wrap</type>
      <name>getWrapR</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a755f7557350d7a862a1b728f1845f2ef</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>containsTransparency</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a3cbc4caae7598f65d4e10ceb9de68fc7</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const unsigned char *</type>
      <name>getDefault</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a30d14a31bd101ca101f37975aba3a12d</anchor>
      <arglist>(SbVec2s &amp;size, int &amp;numComponents)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const unsigned char *</type>
      <name>getDefault</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a37c26f0daa5f0b767fc0bf7761e62c7b</anchor>
      <arglist>(SbVec3s &amp;size, int &amp;numComponents)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLMultiTextureImageElement</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>a0b938ba6086b4832541a0f2b8908c7bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>hasTransparency</name>
      <anchorfile>classSoGLMultiTextureImageElement.html</anchorfile>
      <anchor>a9ee5066d1c346166c7912b7d3241b047</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMultiTextureImageElement</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>ab1081ffd64cc2d521c5ece57a8c408c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNumUnits</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a7e6f25e3f476831afaf69f15fc82a7af</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLMultiTextureMatrixElement</name>
    <filename>classSoGLMultiTextureMatrixElement.html</filename>
    <base>SoMultiTextureMatrixElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>a57a1cadc4a17ff180615ad587c635b4e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>ae202213bdabb95105828a44023935825</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>a937fbee85e574d5a6cc95d430e1e9a84</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multElt</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>a2b37753e9fde42822d64b09fa1531313</anchor>
      <arglist>(const int unit, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>ac23e633f909c7740387797f15cb9298a</anchor>
      <arglist>(const int unit, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>a348874e638d3cbd2ccb6436a09146e17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>ae96e40921d3fdbfb2e9284e0ba373a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mult</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>a3c1f4b25f22fc612f479133a53ef3d5e</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>get</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>a4b11d484ec7ef3b362a62f7fac5bb657</anchor>
      <arglist>(SoState *const state, const int unit=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLMultiTextureMatrixElement</name>
      <anchorfile>classSoGLMultiTextureMatrixElement.html</anchorfile>
      <anchor>aef80704592cad705272cfbd59bbba4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoMultiTextureMatrixElement</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>ae31c6a49957ac0070912c12104aa32cb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMultiTextureMatrixElement</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>ac469cdc4ab0ec9c8f92794cd78424675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SbMatrix &amp;</type>
      <name>getElt</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>a5b13cc21ad176f91ddec225f1931ac6a</anchor>
      <arglist>(const int unit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLNormalElement</name>
    <filename>classSoGLNormalElement.html</filename>
    <base>SoNormalElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLNormalElement.html</anchorfile>
      <anchor>a652c1885d1e710a2cf59e8bb40fc4f10</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoGLNormalElement.html</anchorfile>
      <anchor>a4b3db73feb4d555bab4be4a4a419bd1f</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a102e5566ca753615ba800dc98f658d8e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>get</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>ae69d866d3899baef190ab1e2c9b3cc5a</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a4e4c6b2a8c831c7bd4d2fbe50ff32ca8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLNormalElement.html</anchorfile>
      <anchor>a2777a8e55e765b5d433eddd7de0845f3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLNormalElement.html</anchorfile>
      <anchor>a19d9543c92b6a0c1524cd6b842cf4543</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>ad9008f7eea0e21d678cc156057fbeb57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a81d9b90773df5461c37b62acb5b0249b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a2deb643886419c4e54134d72470ac18c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numNormals, const SbVec3f *const normals, const SbBool normalsAreUnitLength=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoNormalElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a79380361209dde053b581738c793a154</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLNormalElement</name>
      <anchorfile>classSoGLNormalElement.html</anchorfile>
      <anchor>abf32a44725514701918bb8c54d6e32f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNormalElement</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a24966c92497d04a848d21946bf82a125</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>numNormals</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a1631415393a44776bfec318d3e5583e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SbVec3f *</type>
      <name>normals</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>aaff6dae83a199a7e8e8bba7423b8724f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGlobalSimplifyAction</name>
    <filename>classSoGlobalSimplifyAction.html</filename>
    <base>SoSimplifyAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>a027e9925363edf781fed2aa9a847715b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoGlobalSimplifyAction</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>a19bafeb7870dcce16a7219136924f6a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGlobalSimplifyAction</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>ab596681d4f3ee091e28597f19265a066</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSimplifyAction</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>aa33427a185acd090d8b01c50587ce778</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSimplifyAction</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>ad9593bac6cdd77c7eb89d9cc8e7527c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>ad1c29e9b7b349e3193cb7449748a855e</anchor>
      <arglist>(SoNode *root)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>ac2710c088d7cee5031bb0beb518fe54a</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>a74060d6e6e390c6afad06a4aa2319bec</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>a75399fca343cc65070e6eb3278c09fc4</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>a9c9b16fd61a96bd1e1210e9e672ee6d9</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>a4d83709ee556a1805b3d33130716ae54</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>a83bea629d5b435a95bf57b82464556a5</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>a7967e555d51aa0cae8b49583ee6c0aa0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoGlobalSimplifyAction.html</anchorfile>
      <anchor>adde1a28938729acb4d64773aa0f7b805</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLPointSizeElement</name>
    <filename>classSoGLPointSizeElement.html</filename>
    <base>SoPointSizeElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLPointSizeElement.html</anchorfile>
      <anchor>a8f7bd9e0a740e5a80bfc27f29a9f33f1</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLPointSizeElement.html</anchorfile>
      <anchor>add020f6e47a46716b9d43591cdc5c426</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLPointSizeElement.html</anchorfile>
      <anchor>ae2cbb7d333efd36091751023e485c6de</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLPointSizeElement.html</anchorfile>
      <anchor>a2f0d05a5fade2e1508b28c0960ec41c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>ade9118cf020eb03e4f7dcab6536f7f52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>acbe463ada6d456efe5b5e8f210648326</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float pointSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>a61c580bf06f34b737df021aa0ea26fcb</anchor>
      <arglist>(SoState *const state, const float pointSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>ae68c865bedd02f8972073d2472616daa</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>a7c8d144d16c4fc705fa415dcd036f697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLPointSizeElement</name>
      <anchorfile>classSoGLPointSizeElement.html</anchorfile>
      <anchor>ab54691def266979e2695777d2d978da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLPointSizeElement.html</anchorfile>
      <anchor>a1c589ffa540114b8f006d6a6a032c76f</anchor>
      <arglist>(float size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPointSizeElement</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>a499b4f1007318b13d93a8d9ef6a54bee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLPolygonOffsetElement</name>
    <filename>classSoGLPolygonOffsetElement.html</filename>
    <base>SoPolygonOffsetElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>ad4a0b3eb3f3f09d6a37de2c3bafaedb5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>ad9b7806385e0635bd7fbc0bc7ea60ea0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>a1ce1f60ae50dd7b3e54c2627b0943500</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>a071f97fc3c8956cdec1c33c89f32d2c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>a94e7517f2f114f2768ed5b681b02d758</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a6e9055c335cff5af663d530b67bb5741</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a280d8a77fcd008f50695952001de1505</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a6cf59ceb5f970af621e6e0fa791860d4</anchor>
      <arglist>(SoState *state, SoNode *node, float factor, float units, Style styles, SbBool on)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>ac177d1fc712c3fbc2d6f4c638220a0a3</anchor>
      <arglist>(SoState *state, float &amp;factor, float &amp;units, Style &amp;styles, SbBool &amp;on)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getDefault</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a860ba0cc104bd4ab68431872fedd1344</anchor>
      <arglist>(float &amp;factor, float &amp;units, Style &amp;styles, SbBool &amp;on)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLPolygonOffsetElement</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>ac11c7b2b8e83a3902e19faabe97b9799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLPolygonOffsetElement.html</anchorfile>
      <anchor>a7864d1bcd6c893104db857eb3b083bd7</anchor>
      <arglist>(float factor, float units, Style styles, SbBool on)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPolygonOffsetElement</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a7e8c110780211f3098296ee55b88e683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>ab9f63d44d3568e41ad34b97b3c138393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Style</type>
      <name>style</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>af406ce8e4e65a89d7f077daedcdf02c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>active</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>aba7e58faf78d658a96799446c94df995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>offsetfactor</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a3fb4188bc45d91c319c91814600245ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>offsetunits</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a783f162f571924ecd61fd698bd9b9503</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLProjectionMatrixElement</name>
    <filename>classSoGLProjectionMatrixElement.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLProjectionMatrixElement.html</anchorfile>
      <anchor>aaac1ddc1cafb18614515b94cbe32eba4</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLProjectionMatrixElement.html</anchorfile>
      <anchor>a97eaa7b4145dc3676230d3fc0f529fda</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLProjectionMatrixElement.html</anchorfile>
      <anchor>a749e43832884ffa19f218f556225c620</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLProjectionMatrixElement</name>
      <anchorfile>classSoGLProjectionMatrixElement.html</anchorfile>
      <anchor>ade4a961e1b97014d4be7772bb69ad107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLProjectionMatrixElement.html</anchorfile>
      <anchor>ad258dc78f7065ea581734f4569cae8f6</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLRenderAction</name>
    <filename>classSoGLRenderAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a3ae003b708f5b873bcb95ec0ee5771ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoGLRenderAction.html</anchorfile>
      <anchor>a729631d563fa54b07248a57fd253cca2</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLRenderCache</name>
    <filename>classSoGLRenderCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoGLRenderCache</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>af929c70477f344ba24bed1dabd63c72d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLRenderCache</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>a1166f5868d0c3202da7e67f3bd05e55a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>a1c23e0c0dc558e47ced5e0726698a920</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>a74f05a561558771e30a3b796a950d825</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>a33aa1f6480c71974e42bba21436dd204</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCacheContext</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>a1250ca78aee8de70e676b802fb3dbbff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isValid</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>a2748ee0bee745f9c40b17eb3a3c2d683</anchor>
      <arglist>(const SoState *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addNestedCache</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>aa2f230810931b1e980efb975342242e2</anchor>
      <arglist>(SoGLDisplayList *child)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classSoGLRenderCache.html</anchorfile>
      <anchor>affc61d6e4f277b9f24546ae1ac41e10a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLRenderPassElement</name>
    <filename>classSoGLRenderPassElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a7c4f2c78911bf8982c0546d63d2a56ae</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a6eb5036f430d0ea0bd49df26cb6fdcbd</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>abc6d5bd775f668869942083fb3467711</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a1e6e52080ab58122c4c9f3ca685b979f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a752174f3a8d7d3c97274d9a43d9f5a64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a25a12f995be0e551cc6b6342c8f5687f</anchor>
      <arglist>(SoState *const state, const int passNumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a2671c397459e36efc1de639ccadb019d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLRenderPassElement</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a5faa7871e2ab86c20276ec8b668e0bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>passnr</name>
      <anchorfile>classSoGLRenderPassElement.html</anchorfile>
      <anchor>a046951265f2ba2d2f4d085c3495fe091</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLShadowCullingElement</name>
    <filename>classSoGLShadowCullingElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Mode</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>a662bfb9ea3d1b258a256f919736706e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>a071921ca070f5fa170576579d310635a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>a073d4a2a6e24b530aaee3d306a2f8304</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>a26373eab509cdcce9969f1152c15f96a</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>a72b77c0aaeb7ad59e0513eca08fefe5e</anchor>
      <arglist>(int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>ad6af9c5e6a449e1397a13ec55fa4ab7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>aefd6009137fda4ed3cdcb38e47e9ad5c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>a4d8d0e90e0333c30f58376c25eccecd5</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefault</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>acb0faa38476e749fbd8c9a68f45c4530</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLShadowCullingElement</name>
      <anchorfile>classSoGLShadowCullingElement.html</anchorfile>
      <anchor>ababec802b607f28bb7e3b1d62e88c054</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLShapeHintsElement</name>
    <filename>classSoGLShapeHintsElement.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a1494ce527fc8a6e2ed525f52a194ec76</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a4cb308d73c120ea36aaa32a91de0dffd</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a4314486c1e19e5f24648751d704eb0d1</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a5ae5bedecc1c9c77e61d3b7a31519358</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>aa51c9546ce91c24bd20693ecf2711a05</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>forceSend</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>ae4b7c8ae7eaa8dd75bca16efecd3c5b2</anchor>
      <arglist>(SoState *const state, const SbBool twoside)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>forceSend</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>ad6e4d1dd44c546fae7c39231420b6d3c</anchor>
      <arglist>(SoState *const state, const SbBool ccw, const SbBool cull)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>forceSend</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a01aed538a5b342364956bbd18b953215</anchor>
      <arglist>(SoState *const state, const SbBool ccw, const SbBool cull, const SbBool twoside)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLShapeHintsElement</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a2caf7ef48a4e2a55424123a7f29a42b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLShapeHintsElement.html</anchorfile>
      <anchor>a89906d873775e5794fbc96c3ad8012f4</anchor>
      <arglist>(VertexOrdering vertexOrdering, ShapeType shapeType, FaceType faceType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLUpdateAreaElement</name>
    <filename>classSoGLUpdateAreaElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>af77d4096dbb155c3a3b6d02ac3bcc90b</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>ae0967a22f6a4db1f26ee64502b4f30d7</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>a99f9cc030c3fa3a28ebebfd992ab51e9</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>ad4998ee24ddc8f33aa47067d20567c99</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>ada0922c5e850042fb3ac3776d6fbf881</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>ab0463c327d71b6c94f2cc9b25f9aad90</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>a1e753bcaf7e867cb13a6daeed75769a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>a20859d1b0626723655f9ff2ae09019d8</anchor>
      <arglist>(SoState *const state, const SbVec2f &amp;origin, const SbVec2f &amp;size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>get</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>a18e658e29e4c4f841cdd2b66696f261e</anchor>
      <arglist>(SoState *const state, SbVec2f &amp;origin, SbVec2f &amp;size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec2f</type>
      <name>getDefaultOrigin</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>a08e3ebf22f3bfac23211d14d99a7c67b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec2f</type>
      <name>getDefaultSize</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>af2d71e28bd44963a033a2e61ae4defe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLUpdateAreaElement</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>af66de8b900a3c73467b2ed25c48c1c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec2f</type>
      <name>origin</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>a6fce34f182bda9600980e628dbd0b27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec2f</type>
      <name>size</name>
      <anchorfile>classSoGLUpdateAreaElement.html</anchorfile>
      <anchor>ab342dd75e7e701d6f5f21f9cc96c723a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLVBOElement</name>
    <filename>classSoGLVBOElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a54145aa682fb8646e111c76208cc25e4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>af41f342103a2c721f832ae3f3a63dcd4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>ad26691cc2e7e83722bc7f6abf35fa34a</anchor>
      <arglist>(SoState *state, const SoElement *prevtopelement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a48d412fef607c33433e3a2bd23823371</anchor>
      <arglist>(const SoElement *elt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a05f105079e09fbf5994623219917f228</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>ad03670860a018222c834291cd7374573</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>ad51586234e6c739b81474fec681e9823</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>shouldCreateVBO</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a4e541d579e0ea6b98b223cd18c0ddd1f</anchor>
      <arglist>(SoState *state, const int numdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVertexVBO</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a4363fbf652cdfb23c77dacc072c321b1</anchor>
      <arglist>(SoState *state, SoVBO *vbo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNormalVBO</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a693a49bb1e7b4a5ac41abc63121417f1</anchor>
      <arglist>(SoState *state, SoVBO *vbo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setColorVBO</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>ac36cc6d973e604f43f68e6aab9a7a831</anchor>
      <arglist>(SoState *state, SoVBO *vbo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTexCoordVBO</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a8898d2e10ce22348a2cc6b1711af84b6</anchor>
      <arglist>(SoState *state, const int unit, SoVBO *vbo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoGLVBOElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>ab5d63db93eafa8919df8b4f52ab6ea0b</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoGLVBOElement</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a5794241b19cb5ea3b02b32babf7d4160</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLVBOElement</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>a2a64d254312fb8b6f16fb06e62e1f82c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoGLVBOElement *</type>
      <name>getElement</name>
      <anchorfile>classSoGLVBOElement.html</anchorfile>
      <anchor>ab1f32ce2ecd519c450465f619de3322b</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLViewingMatrixElement</name>
    <filename>classSoGLViewingMatrixElement.html</filename>
    <base>SoViewingMatrixElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>add79da62cd04d73f428866b870e38824</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>aeefcfbf89a5366e585c6c919934e82d5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>a2e5ef046552143d95256bbce26f8866d</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>a2966f9446fb469e985dc94a5d6dfda70</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getNodeId</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>ad512b3d7545ae07ff00bd89ee0028259</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>getResetMatrix</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>a9f297ab1b188583a5b6ae56f77e19eea</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>af07baa08faae37b78f2a05bbe51cc830</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>a30452a77f9dae2627bc4e888e2660447</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>a096e0de3aa885abf95fdfc6f2c650dff</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbMatrix &amp;ViewingMatrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>get</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>aa332738251d0fe26c2028a2abd99f24d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLViewingMatrixElement</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>ad60b7bac108084fbe95e659335e14b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLViewingMatrixElement.html</anchorfile>
      <anchor>a2892f59a2860c324798b5e47e5a522df</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoViewingMatrixElement</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>a073c37cff4abb448a597a2bd5470aae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>viewingMatrix</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>a7c4735c1f0c4a1ca7419a0705101ea47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGLViewportRegionElement</name>
    <filename>classSoGLViewportRegionElement.html</filename>
    <base>SoViewportRegionElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>a732393f3b3103aa12c31c56ff8e1a7b6</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>a499e0befed7f220893fa256bf0c8a85f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>ac90b5de385bc19f620d10a66933d92c5</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>a8c5f964ac891d0c45122df66d2ce76f2</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>ae4b77daf0c076078c146d23a2374874f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>a5a6c7727de2e93deae85433f8f7e69a0</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>a29e0806ff20df01b7753709361045dcc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>a860f724c828e400fe7459395d1205851</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>ac0feb73e5df569957eccb05e0ae1a641</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>ab5a206ed0565ed1acd8c453293b34233</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>af97174e3ce37f6f33161d967b008a72b</anchor>
      <arglist>(SoState *const state, const SbViewportRegion &amp;viewportRegion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbViewportRegion &amp;</type>
      <name>get</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>a4c9c2b04afb2999a9657a864313d4458</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoGLViewportRegionElement</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>a24d24c06d59b53c3f29175e2194b66a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoGLViewportRegionElement.html</anchorfile>
      <anchor>a5bb654b248505c579449d384361b3d22</anchor>
      <arglist>(const SbViewportRegion &amp;viewportRegion)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoViewportRegionElement</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>ab8bddd810fe0da9e1ee9b143d6f13595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbViewportRegion</type>
      <name>viewportRegion</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>af11021d39847b8bfbe4f42e9033cc2d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGlyph</name>
    <filename>classSoGlyph.html</filename>
    <member kind="function">
      <type>void</type>
      <name>unref</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a34429d57345422f33f7cffff2dd2460a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f *</type>
      <name>getCoords</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a15596a1a76b5a8ae67040afb9a6dd387</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFaceIndices</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a57a933f3aede9ca9dfde30369cabe5e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getEdgeIndices</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a511e2cc4fcebee6e6952231449faca92</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getNextCWEdge</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>ae6e9912af6ac1e6035717b4a2d080a1d</anchor>
      <arglist>(const int edgeidx) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getNextCCWEdge</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a5ea6632ae366d3bc517a1899be017e5b</anchor>
      <arglist>(const int edgeidx) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWidth</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a55d81c949f19a1983b9efcfbebc2629f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbBox2f &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>aca858ca2ea0978b9fc96cbf8724374ef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getBitmap</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>ae62521d56afe5e5b6235c7ca66bf318b</anchor>
      <arglist>(SbVec2s &amp;size, SbVec2s &amp;pos, const SbBool antialiased) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoGlyph *</type>
      <name>getGlyph</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a3a6d1fd028a4ef0f98854a6942e28d02</anchor>
      <arglist>(const char character, const SbName &amp;font)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoGlyph *</type>
      <name>getGlyph</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a85408a8f2690f6d979ad1086415f8c64</anchor>
      <arglist>(SoState *state, const unsigned int character, const SbVec2s &amp;size, const float angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoGlyph</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>abdfc619870ae27ce222ddf16e359e9a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~SoGlyph</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>acb6bef86b559ac87907338f18d778a0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCoords</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a25e87953f4948b41ecb5fe2e25779e3f</anchor>
      <arglist>(const SbVec2f *coords, int numcoords=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFaceIndices</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>adc31feab8fe20cd17f92db6dd21e596c</anchor>
      <arglist>(const int *indices, int numindices=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setEdgeIndices</name>
      <anchorfile>classSoGlyph.html</anchorfile>
      <anchor>a84a47878c54cec3534903991a8d9f12a</anchor>
      <arglist>(const int *indices, int numindices=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGlyphCache</name>
    <filename>classSoGlyphCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type>void</type>
      <name>readFontspec</name>
      <anchorfile>classSoGlyphCache.html</anchorfile>
      <anchor>a49a0aab55e775101143d719fb009f0a9</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>const cc_font_specification *</type>
      <name>getCachedFontspec</name>
      <anchorfile>classSoGlyphCache.html</anchorfile>
      <anchor>a6de691a88a75bc87f7d135f02d24776d</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoGroup</name>
    <filename>classSoGroup.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>ae86f127de98897702634f99d6f0aa2fa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a209bb35866916e72da4b18046428057c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a1ee9efd0a4183d032a0417114b04ee38</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>aa3a6024dda260bc148e05cf35a7361c7</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>ad5a7fa40c5caac6f193f48f780658340</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a35e6dbcbea865a28977fce93e3b835a3</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a9cedae6a08d579f9fade1b92fe8aaa95</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a63a504e1809c7413318396010d002335</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>ae728a959b52a0ac5f110095bd8a42494</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a263b32be11483f9de8f892222aed0aa2</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoGroup.html</anchorfile>
      <anchor>a4ddb37e2d70663d1d44da6c42ea39947</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoHandleBoxDragger</name>
    <filename>classSoHandleBoxDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>ab990f6070ddc93412fcfe2de2e8e70c5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>ad798cc275d6749407773117f8d1f5ac2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoHandleBoxDragger</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a5b4917fb4ce7c2b5a9e044369438de7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>adde36d1ce2232a4c1f799f9c98f307b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>ac3f9e92c27dff70aa86cc132296f40b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a25e5fc858f937875d1cbe61e8dc1899a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoHandleBoxDragger</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>aff2e41c3f243a3a1682ba30ab9517ef7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a68e0bfd46e5bb31ec2c2af3e90f850c5</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a60f59d46f50d668a3e42331c182d0816</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a48069238efe24a46cf15f539973b08f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a7837fd5cd8449267fdf4438d58027fdd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>aab0b03e1335de3e706a06a5119cf9bd8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAllPartsActive</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a99bc8950f885716a9ac81bf461e3802e</anchor>
      <arglist>(SbBool onoroff)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a807a19805071592181f540e670ed3972</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a142599d5cfc9d58189fe038507ae0ab7</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>ac32f2aced387d349e1bb680d5f7fabf2</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>metaKeyChangeCB</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a1d81c7f97ade48acbcc0d24d7794bd77</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a0aee9daa04056e70c3d9306b9e51d3a1</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a3f67daa2f9869bb2bf9f6c4fda9dec4e</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>af639384d9e110a7e0e99bd98a3eee565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoHandleBoxDragger.html</anchorfile>
      <anchor>a7a9f8369f7aca9061a41ed5b4012adb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoHandleBoxManip</name>
    <filename>classSoHandleBoxManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoHandleBoxManip.html</anchorfile>
      <anchor>af4b932400122e9f94e1d70d9a7ed5340</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoHandleBoxManip</name>
      <anchorfile>classSoHandleBoxManip.html</anchorfile>
      <anchor>a6be60bcbecde5e568a69905bc6079418</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoHandleBoxManip.html</anchorfile>
      <anchor>a23dd970166b4c16ef347cd78bbd687a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoHandleBoxManip</name>
      <anchorfile>classSoHandleBoxManip.html</anchorfile>
      <anchor>a222305fe6041455b3fc05074f16c6b14</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoHandleEventAction</name>
    <filename>classSoHandleEventAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a417b98c718510cee397a4c6e5a0dff07</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoHandleEventAction</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a5064ba50229cbe988529fe684f9cd031</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoHandleEventAction</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ad1b87af3a0d81ba718813a87ffc47156</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a3789af4dd51672e02587816661a08fd2</anchor>
      <arglist>(const SbViewportRegion &amp;newregion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a66a2dbcb2dd81cc67fd37d69cef65c5f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvent</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ae431ba76ac60ddfd160d150d9f37e842</anchor>
      <arglist>(const SoEvent *ev)</arglist>
    </member>
    <member kind="function">
      <type>const SoEvent *</type>
      <name>getEvent</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ab42e2c4e7b63ee61e374b39bf78c415f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandled</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ae27869d8043de45b0e29d07b7dabd02e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isHandled</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a3474c845128c7bd9bea92081e5bdf25e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrabber</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a2c7d99dd4a7d6635ca14ba2246285ada</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseGrabber</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ade6a8ef0aceb76d516f623d3f5f5d02e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getGrabber</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a03ba08db320a5a62fc388720c1059db9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPickRoot</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ae22b30a237275ce72f685be1c27c9da4</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getPickRoot</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>afcc72a13a6f724a7134aa077bdd5950b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPickRadius</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a28f3e792d32278c6a84aa3963c0e153f</anchor>
      <arglist>(const float radiusinpixels)</arglist>
    </member>
    <member kind="function">
      <type>const SoPickedPoint *</type>
      <name>getPickedPoint</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a29af021df8f9ab25023b4f9d901e314e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SoPickedPointList &amp;</type>
      <name>getPickedPointList</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>acdfbd6db0f7396a329522ce862b9187d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>a2d249745d188755c408a5a4af45aac23</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ad35e40d200147ff7a009e6f825a5d7e5</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>afeddea59d7fea4ec010086ff7d9acfd8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoHandleEventAction.html</anchorfile>
      <anchor>ac166197a430e31f9004015121015e92b</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoHardCopy</name>
    <filename>classSoHardCopy.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoHardCopy.html</anchorfile>
      <anchor>ae1fbea5ce5f0fcd4c4a003ac76ee7a3f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getProductName</name>
      <anchorfile>classSoHardCopy.html</anchorfile>
      <anchor>afb41be14ae5a8540bd70f0f4fe0c1266</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getVersion</name>
      <anchorfile>classSoHardCopy.html</anchorfile>
      <anchor>a2ab5e0b641005c107cfff478582b72e4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoHeightMapToNormalMap</name>
    <filename>classSoHeightMapToNormalMap.html</filename>
    <base>SoTexture2Convert</base>
    <member kind="enumeration">
      <type></type>
      <name>NormalMapFormat</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>a1b9f1f8980b35ee2dc71042ed2668ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INT8</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>a1b9f1f8980b35ee2dc71042ed2668ddcab23c5b8cdd6821f4d51cb19e5ea9dd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>af17b2bf3bfb4a91c6f0ff09c133da32a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>acb5f06ac569717e65e448d01a2b3dc50</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>ad17c0efd186eaa87ad61e7bdafd61786</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoHeightMapToNormalMap</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>acc3693b48da1ce810c3e83b301a9d2ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>a872b97096751d7ef9348c56f112f2712</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convert</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>a3b327aa3a25976f9c1f2fa2b2210be43</anchor>
      <arglist>(const unsigned char *srcptr, SbVec2s size, int nc, SbImage &amp;dst_out)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>format</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>a21e887415d4dbd734bdd5bd7a38f4351</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>ad850a82693bc92d932da823e4ed42342</anchor>
      <arglist>(SoField *which)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classSoHeightMapToNormalMap.html</anchorfile>
      <anchor>a4bc29dc2d4b488be90d2f20bd7fb979d</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIdleSensor</name>
    <filename>classSoIdleSensor.html</filename>
    <base>SoDelayQueueSensor</base>
    <member kind="function">
      <type></type>
      <name>SoIdleSensor</name>
      <anchorfile>classSoIdleSensor.html</anchorfile>
      <anchor>a38f4ba3784a19ef721730304cb59518b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIdleSensor</name>
      <anchorfile>classSoIdleSensor.html</anchorfile>
      <anchor>a287e2990524792fd89e6a0f7762747b0</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIdleSensor</name>
      <anchorfile>classSoIdleSensor.html</anchorfile>
      <anchor>a3e49ee86dda770ce9f17bbf0722c5084</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoImage</name>
    <filename>classSoImage.html</filename>
    <base>SoShape</base>
    <member kind="enumeration">
      <type></type>
      <name>VertAlignment</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a1b53fae1ddedd0dc4f5471ba90d048a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BOTTOM</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a1b53fae1ddedd0dc4f5471ba90d048a2a8b030ed80252bb443fa15bcd4564e256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HALF</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a1b53fae1ddedd0dc4f5471ba90d048a2a072997f653966022f9e624ff038401cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOP</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a1b53fae1ddedd0dc4f5471ba90d048a2ac1ce7d8b1ffd64ae5179fd2bad55f358</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>HorAlignment</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a85dee2c63494827b752aa7d9ead26f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a85dee2c63494827b752aa7d9ead26f6bae6841512e4eafcf4f498514d11a5862e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CENTER</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a85dee2c63494827b752aa7d9ead26f6ba4b755bf99642cc72e47cad534f9d0247</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a85dee2c63494827b752aa7d9ead26f6baba11b512dbaf29a162a917324d1b0a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>acf3d09cdf9eae8c36eb590712f564304</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoImage</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>aeef86fd5240dc59b031e49dd0f1e0402</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a39003530abbdd172fd399ac277315578</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>afa004c3e8333cbea28d88cea24bb6dba</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>abc9ac911e16ede073f9fc0e47686d388</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>width</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a8c77fe717baad762597c43bd387218e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>height</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a6c2734e0a6776c80c98d53c9b01e21a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>vertAlignment</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>aeb5f590a5fed89fc7d7b1d308054f4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>horAlignment</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a83f5d85b3b60c9d40bed2ba0d412a5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>image</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a09e91a795301ae842a1be118ff5109d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>filename</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a6d4ae0d8e96d19f7198c45fab8e66df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>ae9c57db3b314f7893d11bb8debf93bb2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoImage</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a17ef93d3085bd1387a168dd80a95abed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a46db5083906a4916cf514d0636b0d96b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>afec8f680a441cd18b6d59dbaa66a4675</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>ae08cd0bff6b575f851592c0642f050d2</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a818c282ec15d1f6ce2d0847c78977268</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getReadStatus</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a2d3f691bb49af5ccea50601825f12e71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReadStatus</name>
      <anchorfile>classSoImage.html</anchorfile>
      <anchor>a4ac17d1506e231bfb61fcdef3d5e5602</anchor>
      <arglist>(SbBool flag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedFaceSet</name>
    <filename>classSoIndexedFaceSet.html</filename>
    <base>SoIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>acf12725b11679ed92b64ad93b98900a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedFaceSet</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>a7395181966165160a16034165370183f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>ad40204739706ee03825f7344328e5a0a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>a8bf94c6e2513dd486445c4d79d3fbc80</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>a2f7077230d6945c9cf025273fcb3f4bd</anchor>
      <arglist>(SoState *state, SoNormalBundle *bundle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>aec657bda0949de2f8664be78cee2493c</anchor>
      <arglist>(SoState *state, SoNormalCache *cache)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>aa4b0d1568872abc4bd18d7ded834aa65</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedFaceSet</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>aa8cba49ffb7d140de49efd7c50f112b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoIndexedFaceSet.html</anchorfile>
      <anchor>afcf16a60e75cd1f7d88d7853b0c16387</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoIndexedShape</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a95d013121106581f13dffe229b4637cf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedShape</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a4c2d96f0d8e0f484e1130f3ea482443d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a599eb45ef1d6501745d68356b3d17f0d</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNumVerts</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>ac5dc266e55f5d28b301f1a4f44c0094f</anchor>
      <arglist>(const int startCoord)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupIndices</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>ad2975c1d31283911236eb85e680abd6e</anchor>
      <arglist>(const int numParts, const int numFaces, const SbBool needNormals, const SbBool needTexCoords)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const int32_t *</type>
      <name>getNormalIndices</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a34ce4abfc0cacd5c6c15b9cd63c59b35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const int32_t *</type>
      <name>getColorIndices</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a0d188c7b7a9868b57d99a8a736073140</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const int32_t *</type>
      <name>getTexCoordIndices</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>abe2eeab78b950ba0bb09bef3aeda1edf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>getVertexData</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a97e74cb895ffbba68b7a5378433ac8ff</anchor>
      <arglist>(SoState *state, const SoCoordinateElement *&amp;coords, const SbVec3f *&amp;normals, const int32_t *&amp;cindices, const int32_t *&amp;nindices, const int32_t *&amp;tindices, const int32_t *&amp;mindices, int &amp;numcindices, const SbBool needNormals, SbBool &amp;normalCacheUsed)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>areTexCoordsIndexed</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>aa0451abd888ba88ce1b76e854256ae2f</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>coordIndex</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a2782d75eda8d1831b2b279be8b333de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>materialIndex</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a969bc4d2b7e03fb636059c496599bef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>normalIndex</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a05dbebf79c7badea7a05063a0280bcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>textureCoordIndex</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>a7b118a6997db7b0374674a02ac2459ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedLineSet</name>
    <filename>classSoIndexedLineSet.html</filename>
    <base>SoIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>a65bf790739650916db0cddfc1b7af0d2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedLineSet</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>a164d8a8b011e18eee1982abd1b581b20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>a68446f3fffa43afc784e4f5a0e3e55a8</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>a3fa55d0c4bea4b51fdcbf79eba343b53</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>a93b36d6bc86fb020489b80a1ce9a158b</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>ab62b6ee261e44f6806eef28805c5be8c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedLineSet</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>aec61d02f397b0aa35f7f932e3f73ebfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoIndexedLineSet.html</anchorfile>
      <anchor>a2cc939cd736e390e7f0571586d5dc592</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedMarkerSet</name>
    <filename>classSoIndexedMarkerSet.html</filename>
    <base>SoIndexedPointSet</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedMarkerSet.html</anchorfile>
      <anchor>aacea32c0144d846bb40c6ebecb7980b4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedMarkerSet</name>
      <anchorfile>classSoIndexedMarkerSet.html</anchorfile>
      <anchor>aa376b137cd3446b42b3df1ec6dbcece4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedMarkerSet.html</anchorfile>
      <anchor>a6fc71f377232c3c3d36745bb66ef4e12</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedPointSet</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>aaeab770b6c657a193095059b27821258</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>a3a3a56b0ae4f42dc3682189df5010b1b</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>a48f35bfb9de66d722df73ea777b8fdbc</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>ab68516e3833eae0c09a8e9182080c925</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedMarkerSet.html</anchorfile>
      <anchor>a06a00eb4e06ceddd9500ffde47fd7648</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedMarkerSet</name>
      <anchorfile>classSoIndexedMarkerSet.html</anchorfile>
      <anchor>a3139cb85aafd645cb2011b0ab98b90cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedPointSet</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>a722fa07654e0c6d30405f861c5ef4742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>ada14455293dbf27880dd550fc77586ee</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>acdc0f9c0e2af3c22b7e12762b8cce5ab</anchor>
      <arglist>(SoState *, SoNormalCache *nc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>afefa28b95a25ff059e36ea42e4e535f4</anchor>
      <arglist>(SoState *state, SoNormalBundle *bundle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedNurbsCurve</name>
    <filename>classSoIndexedNurbsCurve.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a14dd64dce8151be416f1a46cbd8fb85d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedNurbsCurve</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>ac9453356a004334e954727eab8d9cd75</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a112208ab3c11a2f0f7467fa9b451ef49</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a948e23ad741e2fee1d9bb41afda74d12</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>aac17433fa4e776bfddfd1babc642e764</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a15f4b0022b46bd844a1a6f54da522891</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPrimitive</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a09036952f59087c9bfab06ce5483a214</anchor>
      <arglist>(SoAction *, SoPrimitiveVertex *)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numControlPoints</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a8b566eb9b4ad3ea7b50311aefb72aa6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>coordIndex</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>ae32ff72af45be515ed77ff47c5ddd760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>knotVector</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>af717f3c48d603b9a1765e02c67130e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a246e8334de20a0f6282912b9dd6be343</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedNurbsCurve</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a4432eb4cff7d309794ec0bdc3fa57ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>adcf39bde0894ccc04b6a7420ef0d9058</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a9788fe6d8d8ed8b322f13de9ae1b5ecc</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createLineSegmentDetail</name>
      <anchorfile>classSoIndexedNurbsCurve.html</anchorfile>
      <anchor>a4aa0b8d53cefa160ef74c3894c64beb8</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedNurbsSurface</name>
    <filename>classSoIndexedNurbsSurface.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a7cb368b8d24ddb0451a6c9c59136570e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedNurbsSurface</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a32a49b3beeab5dc9fc6d115c2004763a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a1f0eed88d71aad1f27e9166a08dbaa23</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a0e148385b214ae60275b30beb2f9e67a</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a1449e15e7704b19736335c0151cee5b6</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPrimitive</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>acb5acde3a4bc96216e22d18a70f1721e</anchor>
      <arglist>(SoAction *, SoPrimitiveVertex *)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numUControlPoints</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a96aa9d2c69b911943b1933ecd29440cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numVControlPoints</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>abda9f35376986cd24d25a2521e037e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>coordIndex</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>ad10043fccc50ff35413d1f4b29e51235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>uKnotVector</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>aa5fa8f2f1d03ee7ec53a0765750abe31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>vKnotVector</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a974a53bc0d52fd9ea3b0d26435999d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numSControlPoints</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>af78fa7edc64d3c9a5c9b40e2730fbf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numTControlPoints</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a52bb3b078112279c88e6770e185fe794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>textureCoordIndex</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a697c5a7a868c530618252f647cabdaee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>sKnotVector</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a6acc91c0e8d3299ebaac05e9707facaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>tKnotVector</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a9e25145aaa8ae9d230f67e2039ff8ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a11bf2e1fba32f654201e80bdb325da8d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedNurbsSurface</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a2bbe37eb3699e392748ad6bc93afba8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a4222f6dbfb73b4798cbcf5140b07b159</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a018a85f79f83f17c1c1df316f83a5fad</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoDetail *</type>
      <name>createTriangleDetail</name>
      <anchorfile>classSoIndexedNurbsSurface.html</anchorfile>
      <anchor>a534e907013393ac9b78e56249aceac69</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedPointSet</name>
    <filename>classSoIndexedPointSet.html</filename>
    <base>SoIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>a088fe44fe14e20fa2a5c6c6775aeeb47</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>a3d36d664f92b72d1e18eb825e28ade8c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedPointSet.html</anchorfile>
      <anchor>a2dc5befd751d4c8b6df27e91e918b74d</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedShape</name>
    <filename>classSoIndexedShape.html</filename>
    <base>SoVertexShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>aaaba1c76b4ebc133bc87e3987c64c538</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a521c79967921b647a5c2e02bc0d608cc</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a22bc8b3ae7009fcbbc5bf99f41ee92aa</anchor>
      <arglist>(SoState *state, SoNormalBundle *bundle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>af0ae8d1b8709aa495af414ac0bbde3e0</anchor>
      <arglist>(SoState *state, SoNormalCache *cache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aa7e1b61eb89c30f60d05032cc703b35d</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a60b82169df8b927bb293f6360230651b</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedShape.html</anchorfile>
      <anchor>ac331724d58dbcb62d2bedcb52efff0b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>ae896e3e51b05e1cb639b368f8272b7a7</anchor>
      <arglist>(SoAction *action)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoIndexedTriangleStripSet</name>
    <filename>classSoIndexedTriangleStripSet.html</filename>
    <base>SoIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>a084a0a8e6cab810de4093f46eb7f84ce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoIndexedTriangleStripSet</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>ae8fb1dacdea5860aa57246a979285e37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>af1b2e3d3f84f0b38ac2b9b4d3890649d</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>a35f1057ba26b504004d40d499ae1aca1</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>aa2f936e06495a49c088179689a4c9d66</anchor>
      <arglist>(SoState *state, SoNormalBundle *nb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>a832966d2f21da90bebf72a4562f070bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoIndexedTriangleStripSet</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>aaf3fdbf417915bb7a23e190af3db2705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>a3682069b698ee5b67870ed5c2d64475d</anchor>
      <arglist>(SoState *state, SoNormalCache *nc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoIndexedTriangleStripSet.html</anchorfile>
      <anchor>a7e33a5497f77f4b47ef95432af127ffb</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInfo</name>
    <filename>classSoInfo.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInfo.html</anchorfile>
      <anchor>aaadac66621eb9d610cdbbb6bf64d7107</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoInfo</name>
      <anchorfile>classSoInfo.html</anchorfile>
      <anchor>a287b26b41158b984054c3a3698187323</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>string</name>
      <anchorfile>classSoInfo.html</anchorfile>
      <anchor>acb8b5cc82716d22bd9d220d26d0c197a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInfo.html</anchorfile>
      <anchor>a94ecfd3f5960a1fdf5fc5f30f580069f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoInfo</name>
      <anchorfile>classSoInfo.html</anchorfile>
      <anchor>ad174fbd6eedbfbef251ed86902322d8a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInput</name>
    <filename>classSoInput.html</filename>
    <member kind="function">
      <type></type>
      <name>SoInput</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aad6a27869faabd1cfc94d537881af73e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoInput</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aec1751434db4f9bc397d872f7efcf100</anchor>
      <arglist>(SoInput *dictIn)</arglist>
    </member>
    <member kind="function">
      <type>SoProto *</type>
      <name>findProto</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ad0e25f354c7802977ea4f48dece877ca</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProto</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a57453400e374bd1719fff8b2f4a463df</anchor>
      <arglist>(SoProto *proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushProto</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aa117f260177b221870236d761005867b</anchor>
      <arglist>(SoProto *proto)</arglist>
    </member>
    <member kind="function">
      <type>SoProto *</type>
      <name>getCurrentProto</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a2eabe9deb19e1b8899307d4cc4014152</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popProto</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>af9b9b35394f090326900d83d203c45c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoute</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a45d7f8f6244662d288e6ea6a29e374fb</anchor>
      <arglist>(const SbName &amp;fromnode, const SbName &amp;fromfield, const SbName &amp;tonode, const SbName &amp;tofield)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>checkISReference</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a3bca1464e2a2895d274cf2ae88d3e475</anchor>
      <arglist>(SoFieldContainer *container, const SbName &amp;fieldname, SbBool &amp;readok)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoInput</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>abf4e3d4e5d06959037323ed6f03f5df3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFilePointer</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a20f9f4b22af997659ca7c6ea561fa105</anchor>
      <arglist>(FILE *newFP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>openFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a75df5c1deef8e619c1056aae2776abdc</anchor>
      <arglist>(const char *fileName, SbBool okIfNotFound=FALSE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>pushFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a7a3279ca83ff540501a2fba2d27a04d3</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a1129eedac60a1c409d47558009a46ffb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isValidFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a528a90823909957b417e2fefa743c91d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isValidBuffer</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a541a70c39fac93a91be4ad14b5de98b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FILE *</type>
      <name>getCurFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a0e4f781fb2176e320f4f74e549af82bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurFileName</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a039f94d34a61c59893bc72b298987b08</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBuffer</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a66e89c33a5c320c3f40c7a4935445852</anchor>
      <arglist>(const void *bufpointer, size_t bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStringArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>af28592d7aa017765fdaad6fbc6b3d99f</anchor>
      <arglist>(const char *strings[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getNumBytesRead</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aae89566e455bce511bca97f7646b5e9c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbString</type>
      <name>getHeader</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a38f80ad59e0ca2e8ec1f6216a380f0ad</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getIVVersion</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a32a5e6eaf4969d8ada1e5daf2e059269</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isBinary</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a457936a22ca9585314552bcdfb2564b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>get</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a5193596a25c9d0cc5fe6280acbdbf1f3</anchor>
      <arglist>(char &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>getASCIIBuffer</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aaa9370afb9829d4e053eae82b56f0be7</anchor>
      <arglist>(char &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>getASCIIFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a7e6a3babde6c7e217e2a29ff8a528f7f</anchor>
      <arglist>(char &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readHex</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a589f80db7bde345c47c64f8d12cc2bb7</anchor>
      <arglist>(uint32_t &amp;l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ae96f56efe2cd0e61e046ae976d46f6c5</anchor>
      <arglist>(char &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a9f5e23b8db88b37a9e154d4d0b3e2f43</anchor>
      <arglist>(char &amp;c, SbBool skip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a81e213356becf52d09987bde2f646b25</anchor>
      <arglist>(SbString &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a31a321770682fd2fc4b7b97441b420d1</anchor>
      <arglist>(SbName &amp;n, SbBool validIdent=FALSE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ae0194dab35cf68149363ec635637147a</anchor>
      <arglist>(int &amp;i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a37eaf39d8c7015810439b78b88b6caf6</anchor>
      <arglist>(unsigned int &amp;i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ae25bc725ee5f2e106afc56d4dd05f93f</anchor>
      <arglist>(short &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>acfab9a73baa1edaf02dac8a6944862db</anchor>
      <arglist>(unsigned short &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a8b8edaa764bc0f01d03bdd08c5421823</anchor>
      <arglist>(float &amp;f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>read</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>adcf3f1162ae979a5a410a1460f09dd8a</anchor>
      <arglist>(double &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readByte</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ab36205986f083a4a972cfe98f6a5c23d</anchor>
      <arglist>(int8_t &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readByte</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a6752d8a78312923963724e1d5f765954</anchor>
      <arglist>(uint8_t &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readBinaryArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aa24b5d57e230205637dfc475e29afe54</anchor>
      <arglist>(unsigned char *c, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readBinaryArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a54ca5cab823c815fc199b7f685d469b4</anchor>
      <arglist>(int32_t *l, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readBinaryArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a560111581a01297b7169bc3980dd11be</anchor>
      <arglist>(float *f, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readBinaryArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a238e479498baa9e734bb489ab85e285e</anchor>
      <arglist>(double *d, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>eof</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aae2dd97e64b66d394c016c96100807ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isFileVRML1</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a317cb5abf19f4497e03ad18ccfd04303</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isFileVRML2</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a9fa47e434f95ccf796a8bdffcac240c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetFilePointer</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a587ea9cc13a516915fa0bb88cca2c61c</anchor>
      <arglist>(FILE *fptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getLocationString</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a93744cd5f3612d57693ca3ccf841c719</anchor>
      <arglist>(SbString &amp;string) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBack</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a581157f03a6367b675fd1a3053d2f27d</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBack</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>aa3275a753ea5094c301dfd2b4d6ac118</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addReference</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>abdf22810734f06e0caad609d47ec07e2</anchor>
      <arglist>(const SbName &amp;name, SoBase *base, SbBool addToGlobalDict=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeReference</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a4cefe302eb15818d8479ef280db0ebbb</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoBase *</type>
      <name>findReference</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ab69667928e7f8b317891590f5fb6486c</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDirectoryFirst</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>acf1c66aeaa773a2b667431f6a7b79e4e</anchor>
      <arglist>(const char *dirName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDirectoryLast</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ab87aef010d6cef7fd7e342e0b0c56004</anchor>
      <arglist>(const char *dirName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addEnvDirectoriesFirst</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a47aba07c24b063b8914411f1507b2598</anchor>
      <arglist>(const char *envVarName, const char *separator=&quot;:\t &quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addEnvDirectoriesLast</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a0ab1c2a23e37a3474495ca9f01e4d5a9</anchor>
      <arglist>(const char *envVarName, const char *separator=&quot;:\t &quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeDirectory</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a81232f02926735fc6be93225ae22dc6e</anchor>
      <arglist>(const char *dirName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearDirectories</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a52cbdc5c911d65c8348314d0fe92ec5f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbStringList &amp;</type>
      <name>getDirectories</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ae39a7ead8ea676ad33786f79478ff504</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a522c7da748cada3332a488e3f0d0a943</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getPathname</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>af9ea3c3871ac51b220cd6949e8682390</anchor>
      <arglist>(const char *const filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getPathname</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a72c37c9264259441d013ae2d82f07a3b</anchor>
      <arglist>(const SbString &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getBasename</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a79895ffc6452b899e0c6c559cc615c01</anchor>
      <arglist>(const char *const filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getBasename</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a7225ea814b5ce0314c25b9aaeb851aad</anchor>
      <arglist>(const SbString &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>searchForFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a6ee3f1b5422497cc59ec969050a05d1c</anchor>
      <arglist>(const SbString &amp;basename, const SbStringList &amp;directories, const SbStringList &amp;subdirectories)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>popFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a31ca60fa51f3185a9f68269a5a651761</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIVVersion</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a8dd2208b78264e118d0e8050eec0f261</anchor>
      <arglist>(float version)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FILE *</type>
      <name>findFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>af720556440547befcb96c56fedcd43b8</anchor>
      <arglist>(const char *fileName, SbString &amp;fullName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a6ac0fa29984e7206b9c903962f37f0f4</anchor>
      <arglist>(FILE *newFP, const char *fileName, SbString *fullName, SbBool openedHere, SbDict *refDict=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>checkHeader</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a819860391ac8abecd7dc8281646d012e</anchor>
      <arglist>(SbBool bValidateBufferHeader=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>fromBuffer</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a2d715bf53144a8264bd8ef187bc99558</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>skipWhiteSpace</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a311a3e2c6e50fceadf569f4be8a5409b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>freeBytesInBuf</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a8d1a58c157682bef50e2830889c6e6d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>readInteger</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ac1e04e4a618213d1093f2b890cf0a9db</anchor>
      <arglist>(int32_t &amp;l)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>readUnsignedInteger</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ae9c9afb18dbe1f4e4c579355eb0131d4</anchor>
      <arglist>(uint32_t &amp;l)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>readReal</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a5e52331fcb571c6febcd8f636108e0ba</anchor>
      <arglist>(double &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>readUnsignedIntegerString</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a3bccd0c02785695f4398264af3764d84</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>readDigits</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a358e925a83795e1fd5131a3cbccde540</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>readHexDigits</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ab5240cab86dd76f573c626fd0c9c66c8</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>readChar</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a2db70a69bd37b3ecfabdcbfe2415f962</anchor>
      <arglist>(char *str, char charToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>makeRoomInBuf</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a711dd686d1310b6c9c83b6812bb1bacd</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertShort</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a35ad479e386e0349bd7b95ca365db523</anchor>
      <arglist>(char *from, short *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertInt32</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a3f85a5dd4636f5f6884997c81bb1255f</anchor>
      <arglist>(char *from, int32_t *l)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertFloat</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a993edbf51f25c038a9ab12b5e1d1a8df</anchor>
      <arglist>(char *from, float *f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertDouble</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a12c7f06ddcd60090e1465810dabbfefe</anchor>
      <arglist>(char *from, double *d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertShortArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>af242d22b935e532793b644e59b9d38cb</anchor>
      <arglist>(char *from, short *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertInt32Array</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a71f898e1e1926f781e5d705444e999f4</anchor>
      <arglist>(char *from, int32_t *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertFloatArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a99fdf3aa13fdd31cb34a2dc1e6759091</anchor>
      <arglist>(char *from, float *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertDoubleArray</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>afc1fcf22e4561b47fb2b3c03886cebd4</anchor>
      <arglist>(char *from, double *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isFileURL</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a40f74151ef9b1a11cd8989e223f8d607</anchor>
      <arglist>(const char *url)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>char *</type>
      <name>URLToFile</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>ad0133eb4aa2ea9620989607d949de3e7</anchor>
      <arglist>(char *out_buf, const char *in_buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>IsURL</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>acbea495763e468a62626067cf7363bfa</anchor>
      <arglist>(const char *c_strng)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setDirectories</name>
      <anchorfile>classSoInput.html</anchorfile>
      <anchor>a90471ef7420a90b0e94abdd84ae1cb44</anchor>
      <arglist>(SbStringList *dirs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInt32Element</name>
    <filename>classSoInt32Element.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoInt32Element.html</anchorfile>
      <anchor>a595990f7cc4e2281e0192863abf2c915</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInteraction</name>
    <filename>classSoInteraction.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoInteraction.html</anchorfile>
      <anchor>a42c9aff2309ba6835c5a7a2171870a86</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInteractionKit</name>
    <filename>classSoInteractionKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>ab5e20b7d7f7cd62a3b33b0440736dd4d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>ada55d684841bf610d4c5b78efad4800a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a623f7718c9b5894b96257bc791dd98c5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoInteractionKit.html</anchorfile>
      <anchor>a62921f96d071bbb0a66d1266d34f0ef5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInterpolate</name>
    <filename>classSoInterpolate.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>a6652f97664d901bce521c6a342f64aed</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>a58e6c5b79f1958f1a4706f2e434bc606</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>aeb63478134ed33b517dadbd7669625ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClasses</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>a584d9129a85d3fbc3732f5015ca97920</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>alpha</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>a64d875addb45655774a2f3d374644c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>output</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>a2a04c43bd50f973ef36e3a08f0b8887f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoInterpolate</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>ad726b3e1a0549ab99ff4beb5aea608c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoInterpolate</name>
      <anchorfile>classSoInterpolate.html</anchorfile>
      <anchor>a8108d066fd113b3b89f9ad681f2f204b</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInterpolateFloat</name>
    <filename>classSoInterpolateFloat.html</filename>
    <base>SoInterpolate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInterpolateFloat.html</anchorfile>
      <anchor>a27ca72db7d9c38f3b207726ad88e145b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInterpolateFloat.html</anchorfile>
      <anchor>a9cdfdfc64d7cdc870b3a14f7fd6710fe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoInterpolateFloat.html</anchorfile>
      <anchor>a339fc5c2605ac29c84b61443d8f6a57d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>input0</name>
      <anchorfile>classSoInterpolateFloat.html</anchorfile>
      <anchor>af628f78a2234211ac9a75c4552e5f800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>input1</name>
      <anchorfile>classSoInterpolateFloat.html</anchorfile>
      <anchor>aa6feb93d679c1dc9de17af6012fa5039</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInterpolateRotation</name>
    <filename>classSoInterpolateRotation.html</filename>
    <base>SoInterpolate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInterpolateRotation.html</anchorfile>
      <anchor>ad59b28611ac5e726ccf0670f544a4fb3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInterpolateRotation.html</anchorfile>
      <anchor>aef5c602d079b463f4dbdcd67e2bee50f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoInterpolateRotation.html</anchorfile>
      <anchor>a50381f3021fa4b8eb2c8daa98065a5e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFRotation</type>
      <name>input0</name>
      <anchorfile>classSoInterpolateRotation.html</anchorfile>
      <anchor>ab002ae48b7ae593e112a725a52622a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFRotation</type>
      <name>input1</name>
      <anchorfile>classSoInterpolateRotation.html</anchorfile>
      <anchor>a89966726215c5632020581cfa1ebfa00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInterpolateVec2f</name>
    <filename>classSoInterpolateVec2f.html</filename>
    <base>SoInterpolate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInterpolateVec2f.html</anchorfile>
      <anchor>a944ea4d702f50cb0bb3c9f47c86f3aee</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInterpolateVec2f.html</anchorfile>
      <anchor>a7570c7aa63b8a7256ec657d23557b31a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoInterpolateVec2f.html</anchorfile>
      <anchor>a81a81f9f6adae5f3558ec2510d647636</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>input0</name>
      <anchorfile>classSoInterpolateVec2f.html</anchorfile>
      <anchor>aff7d71f05944eae85edab47ac0263de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>input1</name>
      <anchorfile>classSoInterpolateVec2f.html</anchorfile>
      <anchor>aa16b9e7728370631b98f3f3b5e360abe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInterpolateVec3f</name>
    <filename>classSoInterpolateVec3f.html</filename>
    <base>SoInterpolate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInterpolateVec3f.html</anchorfile>
      <anchor>a36fd5d6babc3f0044b473e0b3fef3585</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInterpolateVec3f.html</anchorfile>
      <anchor>a4466c31767ed82cd63a86936a0d9dc4a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoInterpolateVec3f.html</anchorfile>
      <anchor>afdbe6e388c63384f48cfdcec53a6de2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>input0</name>
      <anchorfile>classSoInterpolateVec3f.html</anchorfile>
      <anchor>a9cf5865c8ca8208ecde080182be03326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>input1</name>
      <anchorfile>classSoInterpolateVec3f.html</anchorfile>
      <anchor>ac8738d3973ee4680f8b0c4358dab17bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoInterpolateVec4f</name>
    <filename>classSoInterpolateVec4f.html</filename>
    <base>SoInterpolate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoInterpolateVec4f.html</anchorfile>
      <anchor>a8a6d230c6e14486d20e234557d349ee2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoInterpolateVec4f.html</anchorfile>
      <anchor>a79eb4e4f7fdc50b73f645dc9ad16930f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoInterpolateVec4f.html</anchorfile>
      <anchor>a329aaf35b58d7f7f4ab141a4c85d0541</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec4f</type>
      <name>input0</name>
      <anchorfile>classSoInterpolateVec4f.html</anchorfile>
      <anchor>a09a936ea0f77af64740af6327405729a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec4f</type>
      <name>input1</name>
      <anchorfile>classSoInterpolateVec4f.html</anchorfile>
      <anchor>a2bf9d0754ea505ebbb53602f6d5a6127</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SoIntersectingPrimitive</name>
    <filename>structSoIntersectingPrimitive.html</filename>
  </compound>
  <compound kind="class">
    <name>SoIntersectionDetectionAction</name>
    <filename>classSoIntersectionDetectionAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>adfd6193aaa5a820eb06c5f86ebe2c919</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntersectionDetectionEpsilon</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a5d5dcab038e35d68ef492709e61d3eb2</anchor>
      <arglist>(float epsilon)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getIntersectionDetectionEpsilon</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a9455aaa28bb41f2ffb827d24721d9ce9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>aaff4034df4e40919e495f8b68271fed2</anchor>
      <arglist>(SoType type, SbBool enable)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTypeEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>ae6463dac25ff1368b404d8ab4a3db0fe</anchor>
      <arglist>(SoType type, SbBool checkgroups=FALSE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManipsEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>ad7d5f02e7a2b2a444624dafbe8712a60</anchor>
      <arglist>(SbBool enable)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isManipsEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a64ea2e5380b991c6c70f64c1a09035e4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDraggersEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>add5f5aa4660bef116803849540787c3d</anchor>
      <arglist>(SbBool enable)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isDraggersEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a132e2f4fc975737b2f039986c585a961</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShapeInternalsEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a49363d4b06e7c8e4ea05bbf32822696e</anchor>
      <arglist>(SbBool enable)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isShapeInternalsEnabled</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a48b91be5a9f5680be4008717f1cd4d62</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVisitationCallback</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a4a4f8140fb45f7a3fea7c8f105afce21</anchor>
      <arglist>(SoType type, SoIntersectionVisitationCB *cb, void *closure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVisitationCallback</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a9bcb8e8621853c5ae7ced047d1d79442</anchor>
      <arglist>(SoType type, SoIntersectionVisitationCB *cb, void *closure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a81fa441e145866d7eaa81ddb7d1ebdad</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a789ee88aa501678c6183150e3db487f9</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a8a4595877a40aca2ab90306c7536ef0e</anchor>
      <arglist>(const SoPathList &amp;paths, SbBool obeysRules=FALSE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFilterCallback</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>ad439ca8d2c8d52b1a6df147e016831fd</anchor>
      <arglist>(SoIntersectionFilterCB *cb, void *closure=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addIntersectionCallback</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>aef6643fd98e970744e6b7d19ede887d6</anchor>
      <arglist>(SoIntersectionCB *cb, void *closure=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeIntersectionCallback</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>ad8e66f4845cf44d8ef784939b83248d1</anchor>
      <arglist>(SoIntersectionCB *cb, void *closure=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>aeaacf05db0930feadd36ff98b0048e9d</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>ae1fa904640ce674a654d3cc9537ecc3c</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setIntersectionEpsilon</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a326524c74662879ccead63e582c02f00</anchor>
      <arglist>(float epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getIntersectionEpsilon</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a3e2232327976c6a1c20c6b511bda8365</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoIntersectionDetectionAction.html</anchorfile>
      <anchor>a71770f53fdc854cd6862d40bfa97e13e</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoJackDragger</name>
    <filename>classSoJackDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a79145a548d3f7cefba6eaa1b246e9e9a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>ab34fc0280294142050803f670c4c8cef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoJackDragger</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a40a0af1bbfb5dd6bc322a8573a71ecf9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a1cede44aeb4e1023918668f8fca296cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a3cb5d256e584c4127ab5dd651e111317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>acf5f30ef501ef4fe820d804f1eb78759</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a14d8fb85cd1f6255ad229390bceedd77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoJackDragger</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>abae2c8f54360119a9d986c99ddb1d015</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>ade8460570bb0a1cada0595f3efd1c94e</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a47e0499c154a2a2ee59239d00d205c74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>invalidateSurroundScaleCB</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a97e16b24546b928d5bdceba6b9da1f01</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a0ff3b7e6201d3801414863ee26ad1b7f</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>ab5ac1e2545219ca133686d1a551d3f4f</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotFieldSensor</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a22bba552f296761dbfaeee8afc417a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a4ba8328e5cc1a756a4e2d74a169e76b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoJackDragger.html</anchorfile>
      <anchor>a8205fe00016ed6187ca174c6e2f3f0a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoJackManip</name>
    <filename>classSoJackManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoJackManip.html</anchorfile>
      <anchor>a9d91e6f12cb4d00ce0c3f8f7a6b6f7c3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoJackManip</name>
      <anchorfile>classSoJackManip.html</anchorfile>
      <anchor>a03410418991c0a1dce034656556f7f1f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoJackManip.html</anchorfile>
      <anchor>af263b6747fa5e3e2fd11a14fdb3ab661</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoJackManip</name>
      <anchorfile>classSoJackManip.html</anchorfile>
      <anchor>a04705594778bef01fcb554a540e1edb6</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoKeyboardEvent</name>
    <filename>classSoKeyboardEvent.html</filename>
    <base>SoButtonEvent</base>
    <member kind="enumeration">
      <type></type>
      <name>Key</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>acfea547b82afb8a5963f599d002fd004</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a5f4effa54c4f8392a6bb8422329c17ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoKeyboardEvent</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a0342020dc1f7b170d15d813bef5117c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoKeyboardEvent</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>adab72607ed498df93552773b24dc0847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKey</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a0dd7e1b26c29d974f035112287c590fb</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>getKey</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a8de8e885d61d530420cea6bea6f3c7f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintableCharacter</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a6f6fa7ab12631619ca0817df57af066c</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getPrintableCharacter</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a6107bfd146adedd464906cf9ab947a85</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a11a82a5b8af5ecfc8f803d5fd057883f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isKeyPressEvent</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a9fd1c33c7f3007c4dc4d8b998f485a15</anchor>
      <arglist>(const SoEvent *e, Key whichKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isKeyReleaseEvent</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>aad092c44c2794240fe0d541a8114f647</anchor>
      <arglist>(const SoEvent *e, Key whichKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>enumToString</name>
      <anchorfile>classSoKeyboardEvent.html</anchorfile>
      <anchor>a79126582fa17b13c42007c4a3708ddc5</anchor>
      <arglist>(Key enumval, SbString &amp;stringrep)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLabel</name>
    <filename>classSoLabel.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLabel.html</anchorfile>
      <anchor>aff29e233dba5b0b4c74237f5fcc6a42b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLabel</name>
      <anchorfile>classSoLabel.html</anchorfile>
      <anchor>a6f34b5a312257aa85a607528d2951f2e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFName</type>
      <name>label</name>
      <anchorfile>classSoLabel.html</anchorfile>
      <anchor>af863e4baf5a826b22798f29769ccb180</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLabel.html</anchorfile>
      <anchor>ab7f2f751b4206cafa6afd09962d15798</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLabel</name>
      <anchorfile>classSoLabel.html</anchorfile>
      <anchor>a187c9fe843d80e2f6b4d60f732f6d323</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLazyElement</name>
    <filename>classSoLazyElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>a9716bf1656c5ef0a4127803814d38476</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoLazyElement.html</anchorfile>
      <anchor>ab20371a0bd3f6767f0f5542c95ebe3db</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLevelOfDetail</name>
    <filename>classSoLevelOfDetail.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a969fd8b430fc093de38534376517d4ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLevelOfDetail</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>acf8248ed4824f5b929ed0d8707fb6f03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLevelOfDetail</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a6f59e3e3dfd96fa8747fc7e95b30bfe8</anchor>
      <arglist>(int numchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>aa3418515ebe373a2ee9ba1bdb3d030bb</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>acd9654973ed5f0e4977d6ea3560b129c</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a76c83c04f62677b682d5016f2196bc9f</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a9528c37da71e3e4d43a46ca40906076a</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a5551d24ff11afc1cf38461ac6095ffce</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>ad8ac2d8dc905c99db12fe05d1213a993</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>aea5651a9e68d3a2c8b55971da82d1d58</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>screenArea</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>ae7a8efe0f06472d5ebcfb307475fa836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a5b645f3e33e3bf0afcbc296ea6665346</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLevelOfDetail</name>
      <anchorfile>classSoLevelOfDetail.html</anchorfile>
      <anchor>a70ee21eaa2362c87b7deab0ab4605d93</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLight</name>
    <filename>classSoLight.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>abf2adb02ae2b2ae7e53e05b55d408677</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLight.html</anchorfile>
      <anchor>a7db3c0c1b80f96c37b8f2ee7f2a377a4</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLightAttenuationElement</name>
    <filename>classSoLightAttenuationElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>a92b7f8c09cf030a37ad853144ca50ded</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>a08545c9b75b3b1f6911abb7af9872e46</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>a986e76de46d27de4f3d753f45da9480b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>a10c4f95c8cd1630a113a16998c67bf36</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>a335ddbe316f2dabb7165039e1a9082c9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>af2032b70cb2f3e06579b95314acbf5b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>ac101a9747afd35c29ef3fe127a868772</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;lightAttenuation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbVec3f &amp;</type>
      <name>get</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>adb4054071ecb32ec110141152923b0e7</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbVec3f &amp;</type>
      <name>getDefault</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>abca6c7149a13809738c5672c8abe4c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLightAttenuationElement</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>ab4d3345537746013a6ca6392bccc8e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>lightAttenuation</name>
      <anchorfile>classSoLightAttenuationElement.html</anchorfile>
      <anchor>a452e32216545dae5ca3ee63566410f77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLightElement</name>
    <filename>classSoLightElement.html</filename>
    <base>SoAccumulatedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>a13d7adee5b32c0fddddbe0326c3a1072</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>a5c2bbd359eec3dee73ef49d52ad866b9</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>ad4605d835c0643b21d1a1c8e3dcb70bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>a02c3896e074e84c41ec30a5421284bab</anchor>
      <arglist>(SoState *const state, SoLight *const light, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoNodeList &amp;</type>
      <name>getLights</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>a5547aefa9adf8733b786f841b9f0d9eb</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>aaf2a8fa5dba5f22b418b1f47def143a9</anchor>
      <arglist>(SoState *const state, const int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoLightElement</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>a7ee1ddcfb4693edaa3b33f85e7d5007e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLightElement</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>aeeb3231970900ce24a80b9d9ce3a3d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoNodeList</type>
      <name>lights</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>a826d14dfd590aae6a8a38e1ed5d8b797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbList&lt; SbMatrix &gt; *</type>
      <name>matrixlist</name>
      <anchorfile>classSoLightElement.html</anchorfile>
      <anchor>aa9075f94a20fe9b2d82d3a6271c9a72b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLightKit</name>
    <filename>classSoLightKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLightKit.html</anchorfile>
      <anchor>acd8e1680ede61cfd24769de96ec9ddbe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoLightKit.html</anchorfile>
      <anchor>a478a769764f2ebc08106bd02ad52fd21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLightKit</name>
      <anchorfile>classSoLightKit.html</anchorfile>
      <anchor>a63016b6c7080090276b8acb46380d552</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLightKit.html</anchorfile>
      <anchor>a29d25d40fa58a07c651fa184b1db88be</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLightKit</name>
      <anchorfile>classSoLightKit.html</anchorfile>
      <anchor>a0cdc221baeb4f8b66be4ac241cad0a27</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLightModel</name>
    <filename>classSoLightModel.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Model</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a50177588212c998d7a37deed8d1321ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BASE_COLOR</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a50177588212c998d7a37deed8d1321ceadedbd26dc80d695f4123bae991f0615f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PHONG</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a50177588212c998d7a37deed8d1321cead8d5b79c998c02dab21af02d9e1ff8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>af99848ca2c26ecd3448c3fb4b42f2245</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLightModel</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a2d81ca7b2a8b90d5e2761fc3c0bea480</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>ac874a9f52b8bff2750a58cd0580a61ad</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>aa5b4cfc96eac8982a974b0f49b9a2e1b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a5ab42d0a22574c40fca78a05fb8d463e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>model</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a6fa4ebe215e5b9aa11757c2aeda6e3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a921f30f5c3f62e754df8111489d7b3f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLightModel</name>
      <anchorfile>classSoLightModel.html</anchorfile>
      <anchor>a0b4754ad5dc44f6df678aa72c788edaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLightModelElement</name>
    <filename>classSoLightModelElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Model</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>a69590485158a7b504334ce4c2bff15ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>ad0723bdf5580594fb4f5e01922479cdb</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>aadf5e0d8e0c29b00e961ba078c591124</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>ae74890e8b3c436dda2cd7f52cc9bad59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>a7ecba11d44462e503bd80881c8942990</anchor>
      <arglist>(SoState *const state, const Model model)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>a8b7e2dfe29500a2eeb3d035cd3d0c77a</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Model model)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Model</type>
      <name>get</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>ab3655da98d91891e4f0d3713cf851c3d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Model</type>
      <name>getDefault</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>a7ba91fb1d1d52b62350aeafe9536efff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoLightModelElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>a72ceafeef912d005c674553de6eb9f39</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLightModelElement</name>
      <anchorfile>classSoLightModelElement.html</anchorfile>
      <anchor>a6ab85d9ddc6e359df81ed7d6fcc142a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLightPath</name>
    <filename>classSoLightPath.html</filename>
    <member kind="function">
      <type></type>
      <name>SoLightPath</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>aa6417d3e79b7897e27bfb831c39305b4</anchor>
      <arglist>(SoNode *node, const int approxlength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLightPath</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a7d4c7bf8dca8ec316755459ac3e7e2eb</anchor>
      <arglist>(const int approxlength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoLightPath</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>afecbb9d9e0695e03cc6f8806b4fb231e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHead</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>ae08ffa24d57ca247235f05bb81959160</anchor>
      <arglist>(SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a0fa585d36c20b5e01da6db7729ab9940</anchor>
      <arglist>(const int childindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a075988525734fab8a7061ab0fc383f31</anchor>
      <arglist>(const int childindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a8604ef0faa3f748d564852b7ae335104</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTail</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a7104ab0de18de563c80fbe5eca74e8a1</anchor>
      <arglist>(const int childindex)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTail</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>add0e2e09da88006d832a2f6f8e3ee5f9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getHead</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a0e3ad7b808078c2739516b556d035af5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNode</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a0f2417d88b5a46993c8e23cd8edb1523</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>ae9c852d7b90dea77a23eb064c7725f41</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFullLength</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>abf11b0887b23fec1a5d3b914f0616e41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>aa080a9fe4dc28159b5e9047665794534</anchor>
      <arglist>(const int startindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeTempPath</name>
      <anchorfile>classSoLightPath.html</anchorfile>
      <anchor>a5dc2b02625c02ab89bf390d645d4d2f0</anchor>
      <arglist>(SoTempPath *path) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLinearProfile</name>
    <filename>classSoLinearProfile.html</filename>
    <base>SoProfile</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLinearProfile.html</anchorfile>
      <anchor>a0755a7d97f2159a8b4bfeabc78fce91d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLinearProfile</name>
      <anchorfile>classSoLinearProfile.html</anchorfile>
      <anchor>a4ce4221d272a9fcb7363bb513107ca1e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTrimCurve</name>
      <anchorfile>classSoLinearProfile.html</anchorfile>
      <anchor>a375370c64d7c72954050c17c870f78f5</anchor>
      <arglist>(SoState *state, int32_t &amp;numpoints, float *&amp;points, int &amp;floatspervec, int32_t &amp;numknots, float *&amp;knotvector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classSoLinearProfile.html</anchorfile>
      <anchor>a623d940677e8d7ebee6b3e9f70913121</anchor>
      <arglist>(SoState *state, int32_t &amp;numvertices, SbVec2f *&amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a0a4e3ea8f3dc2f745eb219722ea22f8b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>ad5f6a3556c4a060813c235e3a07ffaed</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>ab331bd2fe81542929cbd52ff76a18276</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a0ceb0c989efd4a1d37ebec3061414d1b</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a46d5a811b9af44f07386bbeaa9a1aff5</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a11fce6cf64c8f216a555b9aecee99256</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLinearProfile.html</anchorfile>
      <anchor>a6971e3d6ddf40a2bcae45b1f6fbf1753</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLinearProfile</name>
      <anchorfile>classSoLinearProfile.html</anchorfile>
      <anchor>abea63c1a79de045ec248065918cc9dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoProfile</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a3e504038720d19c9c456596c508e4bf5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProfile</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a86e1df04737b220dbbcf2f6f28f7659e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Profile</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a48f2107358bb102cdd0edf427ee018f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>START_FIRST</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a48f2107358bb102cdd0edf427ee018f4a46989b1a0f33f9d35a3543099f60b682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>START_NEW</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a48f2107358bb102cdd0edf427ee018f4ac6e79bd9830a454055585968b2a412e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADD_TO_CURRENT</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a48f2107358bb102cdd0edf427ee018f4af3b82bb45f386e15b509752e8432c297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>index</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a118c0bd44fa34d6e2a2307cafac2fa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>linkage</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a3968857494b068a53e0bd6b790fd45eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLineDetail</name>
    <filename>classSoLineDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>ab45647b1aeaed19ad17199635dcb79e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLineDetail</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>ac6c1be2107bb0f5c23c563b05135d9bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLineDetail</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a8ea9db2e1e64efd1067bbac55ee8c3a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>ae80d0217e65c55b967bdac270a4ff679</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPointDetail *</type>
      <name>getPoint0</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a08e1bb55620b14748035d6ab0722ac6a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPointDetail *</type>
      <name>getPoint1</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a62aff41d7d952bf7e83a25794d00b9dd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineIndex</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a624baadc961b24fa21b4f021d431308b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPartIndex</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>ad4bfefeeb0d0332384d94c1de544d8ab</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint0</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a3e8ffd91604b08c62fac9a414337d283</anchor>
      <arglist>(const SoPointDetail *const detail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint1</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a7f55218a890e8c5cf5756d74bfb5d4c4</anchor>
      <arglist>(const SoPointDetail *const detail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineIndex</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a5806ee856e283ab78977023007ae62b3</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartIndex</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>af4180975a63e7258ed8146eae7759a0c</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incLineIndex</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>a965e12055b4a5e3b5d3fdf6769fd8b58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incPartIndex</name>
      <anchorfile>classSoLineDetail.html</anchorfile>
      <anchor>aa150217d02157d2a82e2ae00b7450c16</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLineHighlightRenderAction</name>
    <filename>classSoLineHighlightRenderAction.html</filename>
    <base>SoGLRenderAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a916678f2bba09d6f03566bb9f31a723d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLineHighlightRenderAction</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a07ae908be3e8dd3387c5e957f4deff90</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLineHighlightRenderAction</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>af1bd8ea409f8708bbc8c63bb152cfba2</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLineHighlightRenderAction</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>ad20b9f86ec3ea218d73586294fc4638b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>abd49363878b23b1e7b87d81143205970</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>ac7d936a233be399ab587b27cabc92e75</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a6d03d64303a4d72d6fc19295e78e22f1</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a68c59c32b168c54d054a884db1ee7c86</anchor>
      <arglist>(const SbBool visible)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isVisible</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a6a8474bbe3ca6996b1c289e84b305644</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>aaa1eb076b9855cc41b441956ae16e420</anchor>
      <arglist>(const SbColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>getColor</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a9cb825e25ab24a6318ac39bf87223a80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinePattern</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a25d5652991ad66b6376e4f57ea3e418e</anchor>
      <arglist>(uint16_t pattern)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getLinePattern</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a02e1a0140bb93f961c3aac83c847cdf1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineWidth</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a002740ae0aa5062e5982825d241121ec</anchor>
      <arglist>(const float width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLineWidth</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>ad7b97be39b853d654b30182259c9586e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>ad5f6b24b1a225ffbc5ff3b3ffe9396f0</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a0ca1db02c9b1b3354623d28b1eb687b2</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a6b8ca8fd45a0639ce373170a87ca4883</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>hlVisible</name>
      <anchorfile>classSoLineHighlightRenderAction.html</anchorfile>
      <anchor>a8a54d4a40f5f2b8c5f9fdf30900d0610</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLinePatternElement</name>
    <filename>classSoLinePatternElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLinePatternElement.html</anchorfile>
      <anchor>ac45418e81de5830f357b4a4479a905d2</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLineSet</name>
    <filename>classSoLineSet.html</filename>
    <base>SoNonIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a017e14473e5d17e615318c71c6dc1af9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLineSet</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>afef7e42695da00dba3fa75629ae696af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a05acfe6524e1023da77e5f5050495763</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>af16ea2c4f2961cda871f3b0696fd658e</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a460889565e3047a99663d5d5bc847f6e</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>numVertices</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a4e1f67ce4fdf86d531659827d089e93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a8aa1c1d96f0b3bbe93f9ca137265be7c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLineSet</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>afda2cff9379ebef592df61c8ae2d7307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a4703d69b9a2cc44584fb2b3b56d3f873</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoLineSet.html</anchorfile>
      <anchor>a88687f5bc294a336143701c5989675ec</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLineWidthElement</name>
    <filename>classSoLineWidthElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLineWidthElement.html</anchorfile>
      <anchor>a046e144d552f1df3ef463b849dde1040</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoListener</name>
    <filename>classSoListener.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>abfc261cbca3b37eb38134b6f0e91d54f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoListener</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>aeef624948f01b2988180cb5f6124f3e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>position</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>af7813178adfb8c270ea677baef414235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>orientation</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>a1d4be0d33c45cbafba6e64e6caaf7b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>gain</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>a5d306e0699c5517b11d9ec7867b26aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>dopplerVelocity</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>acfd3d11207598713cb1a74395256aa17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>dopplerFactor</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>a77676bd080ed6eb7a999e1fae2c5ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>a07be720bb52c97ae27fab573f6a756d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>a9e633d78de2a744fb83893b31723d22b</anchor>
      <arglist>(class SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoListener</name>
      <anchorfile>classSoListener.html</anchorfile>
      <anchor>a3cb2ffbe56e26f91af5f9e7975ff8be3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoListenerDopplerElement</name>
    <filename>classSoListenerDopplerElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>aa2c6c3ddb84770b4fb0eb329b1e66b3a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>a5e6c3da7f240efe80b672e08dedf91d5</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>ad715d2898af7a1974ea2e92fd82038da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>a5fb837bd58441b488dac5abf8a19d0cf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDopplerVelocity</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>ad04c3de0e656f0e62cb5bab9bda3cad9</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;velocity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDopplerFactor</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>ae710de034f61fcb678463cc73f3e5c7a</anchor>
      <arglist>(SoState *const state, SoNode *const node, float factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbVec3f &amp;</type>
      <name>getDopplerVelocity</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>a8ab4c47ab68163f30a4e536daf71fb19</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDopplerFactor</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>aa3aff9ce8fe64912da4be3e7ca276178</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoListenerDopplerElement</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>ae3a8d75b74ab1afaf219247ff8839023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>dopplerVelocity</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>a747edb6610a74fae73ae13d2817e9d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>dopplerFactor</name>
      <anchorfile>classSoListenerDopplerElement.html</anchorfile>
      <anchor>ae4a3ec82f5a74f1a7264ef8af173ef6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoListenerGainElement</name>
    <filename>classSoListenerGainElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoListenerGainElement.html</anchorfile>
      <anchor>ac5225f138f579ee5dd6be3ed0de15ab5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoListenerGainElement.html</anchorfile>
      <anchor>a69751696b65ad2bbca4c1df2a4b89560</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoListenerGainElement.html</anchorfile>
      <anchor>a91871618fb96734edbc6a8fe89c212a2</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float gain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoListenerGainElement.html</anchorfile>
      <anchor>ad75d153a15e42a5c64f3137cc1f6876f</anchor>
      <arglist>(SoState *const state, const float gain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoListenerGainElement.html</anchorfile>
      <anchor>a519b99e89c5249911988b3e563bd61c8</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoListenerGainElement</name>
      <anchorfile>classSoListenerGainElement.html</anchorfile>
      <anchor>a1e185b2a866be7ad07defe4225f426cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoListenerOrientationElement</name>
    <filename>classSoListenerOrientationElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a59660317a73abe3412a84ead70f81684</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a5f7b2c99faa21ccc83a00a8ca250a3fd</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a304dee425056a2e0c9c58760310de03d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a7fcaf12f9f18db3611a47f26dd0efd20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a1e46b4ee28109ed5bbda41c96dc1225c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbRotation &amp;orientation, SbBool setbylistener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbRotation &amp;</type>
      <name>get</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>aa642ad2099ddd7bd63ac9050f8ec4687</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSetByListener</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a2617c1c137f29c9f6df3234a58230d28</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoListenerOrientationElement</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a51aa6dc01861044269c52ed901bb11b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbRotation</type>
      <name>orientation</name>
      <anchorfile>classSoListenerOrientationElement.html</anchorfile>
      <anchor>a597b8d0652f9bb1b2fdda4371066ccbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoListenerPositionElement</name>
    <filename>classSoListenerPositionElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a1cef6932a8651769fea7e149f14ccb10</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a8ffcd76a34786ba7c3cd4b0731eed770</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a43bcb142da398bc6bb5801fbe75c4d6d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>affde3b2e866c262cd7a060f8c9d8d760</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a173c5c7a7296ab2a30ce1eea6a7ccd64</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbVec3f &amp;position, SbBool setbylistener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbVec3f &amp;</type>
      <name>get</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a817722b24f86e059cd953b2b3d238be8</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSetByListener</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a7ffb04d3e111311978f0efd8e0ef406e</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoListenerPositionElement</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>a5e123f32aed622b03fbd89edd1b8cdcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>position</name>
      <anchorfile>classSoListenerPositionElement.html</anchorfile>
      <anchor>ad9f181282a56bff1b5f3a09074c33118</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLocalBBoxMatrixElement</name>
    <filename>classSoLocalBBoxMatrixElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a767fd4429224b768726659bcc3be7517</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a49891a3fb639a5ae2a87011bd05cab80</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a830c0dae62b93d22ba9d0edea845eec5</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a2081084b72c476915ab9a56b593545ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>ab621751775fa063935d5c2363f52930b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>ab7cb2f7540c7b56d1decdf856a4674c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeIdentity</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a2df122fa1a8f1303a6dacf02ce9a63d7</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>aede4c6a554cc3da5fd2c7686070683e2</anchor>
      <arglist>(SoState *const state, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mult</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a74a725be1129f0eb8a94c87fa1384a6a</anchor>
      <arglist>(SoState *const state, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateBy</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a19756c359722e67fcd02eb9189214e7a</anchor>
      <arglist>(SoState *const state, const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rotateBy</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a21ed13c5ee9e113d60d83832ee38a72c</anchor>
      <arglist>(SoState *const state, const SbRotation &amp;rotation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scaleBy</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a37ce65c34ef638fe94f416b7b2baf215</anchor>
      <arglist>(SoState *const state, const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbMatrix</type>
      <name>pushMatrix</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a880d1613e5271f93084250e2b791c9b7</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>popMatrix</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a28c3dfcb0a585d9d6ca98c931eea1ea6</anchor>
      <arglist>(SoState *const state, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetAll</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a38768fb9c9fcbe5fbbfaad24c0e76aa3</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbMatrix &amp;</type>
      <name>get</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>a548eaeab3eb959499f631ad2dda9ba3b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLocalBBoxMatrixElement</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>aa949530314f1791911d4d8f89b600af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>localMatrix</name>
      <anchorfile>classSoLocalBBoxMatrixElement.html</anchorfile>
      <anchor>aaebd11e8d04a7197bc4f7532ed4a563a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLocateHighlight</name>
    <filename>classSoLocateHighlight.html</filename>
    <base>SoSeparator</base>
    <member kind="enumeration">
      <type></type>
      <name>Modes</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a07d7fc34bdde291be3d47e0ff21786e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AUTO</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a07d7fc34bdde291be3d47e0ff21786e7ac770a44cad3d23b14e7e5242a31ed1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ON</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a07d7fc34bdde291be3d47e0ff21786e7a0bb610d4d6d38faa02bc5aa07c1ff545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OFF</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a07d7fc34bdde291be3d47e0ff21786e7a02ae0f2345e4f2d1a3ff3906318ddd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Styles</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>af07c2e0d9cb1d88f6a025f573a858ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMISSIVE</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>af07c2e0d9cb1d88f6a025f573a858ee1a90c934c0202d5351b45725f0e2ac484c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMISSIVE_DIFFUSE</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>af07c2e0d9cb1d88f6a025f573a858ee1a52e67e528e74d278caed68e51b700c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a186eb473e971d1cfd689fa7accd71dd0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLocateHighlight</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a7561749edcd400972b6d67b66a35771e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>ada9b05509db135e6059edfee89c3fcda</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>aec147e6d80af69318499840d15740042</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>abcc6c3834a1a55e733703dd1d1e8b4c4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>turnOffCurrentHighlight</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>adfbadf7a2fa35d60c62ed19b2d2dbc99</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>color</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a06f66b7ed507803f15323352f455b871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>style</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a4847fc17a7ab36b3044068c2ab4c912b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>mode</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>ab78e6b1f61534b86464e10688db7402a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a26b8b8aa338d7f72daa960311c576a1e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLocateHighlight</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>aabe3974684e90c55512a90266855e9ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>redrawHighlighted</name>
      <anchorfile>classSoLocateHighlight.html</anchorfile>
      <anchor>a8bb907be65bd427904e3a1085a3f4fae</anchor>
      <arglist>(SoAction *act, SbBool flag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLocation2Event</name>
    <filename>classSoLocation2Event.html</filename>
    <base>SoEvent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLocation2Event.html</anchorfile>
      <anchor>ac59e9e64954ddc70b392e9926f8a7e8b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLocation2Event</name>
      <anchorfile>classSoLocation2Event.html</anchorfile>
      <anchor>a31062f16ed60ad5ba77d0c5dab26eaab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLocation2Event</name>
      <anchorfile>classSoLocation2Event.html</anchorfile>
      <anchor>ac86547016b7b44cc1e18170225adec6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoLocation2Event.html</anchorfile>
      <anchor>a84c09d98415e1feefa84ff773c080e7f</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLockManager</name>
    <filename>classSoLockManager.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetUnlockString</name>
      <anchorfile>classSoLockManager.html</anchorfile>
      <anchor>a6e4c722c471a8c75d7914f7aa7db5587</anchor>
      <arglist>(char *unlockstr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>GetUnlockString</name>
      <anchorfile>classSoLockManager.html</anchorfile>
      <anchor>a40acc4edc9bfa6c361216dc831c63ad5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoLOD</name>
    <filename>classSoLOD.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a964a239e7798702ec62dd5b768bda310</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLOD</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a7f4e8a39cb52053fcd2bb6832be1d0f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoLOD</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a787c6ff4952c4ff4748f22c9523db3e6</anchor>
      <arglist>(int numchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a35ec3a6c4e45fa134612e7e18ba70192</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>ab305821f8c4881c2725f848360cf5379</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a8f17f992e60232be0781655c64ed3da5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>ad50b9f1b7a6f756c63aa127f8f9f4da9</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a8b611718cdb4174bfa53186676f5294c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a4fdaa044ac94669dbdaf5a4b56aae85a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a5a73fedec6154c5005c81f4205933e85</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a161a68356ed2480d680c4cc794eb9175</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a141bfe227d07641f877cbcf983ef3403</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a6418136457b91c70d5eef5af9599476f</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>ac491d2c0249cd26d60eed7b425d116b7</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>range</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>aa3764dcfeb89e251d1e1b3dde7744253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a8008ee2c4b4bc78499c72df39e711012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>ad8f7d10d4e4dd2d686fdbe9466067632</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoLOD</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a71c3f37e40b8719d3befc047bfb5a0b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>whichToTraverse</name>
      <anchorfile>classSoLOD.html</anchorfile>
      <anchor>a73207dffcfd21f9c8985f83916950009</anchor>
      <arglist>(SoAction *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMarkerSet</name>
    <filename>classSoMarkerSet.html</filename>
    <base>SoPointSet</base>
    <member kind="enumeration">
      <type></type>
      <name>MarkerType</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>ac86150a74fbb60927ccc5658fed5bfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>abe4fec3f52ec6989b8aba094fad8160b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMarkerSet</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>aa5ca5009d19621342afdb23b2b217630</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>a41e8663ed44c1913ec1171118849eea9</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>ae21a7a81ca2852807ffbfc33f86c06c7</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPointSet</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a4c8a63a7c8aaa3bf88769ed6850c60e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a128f9bcfbb20f40abfd1ebe4e5dd6b39</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumDefinedMarkers</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>a02a350989d0f366a6757f708d6c233a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMarker</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>a379da6b9b42817e751b8084a2955ff68</anchor>
      <arglist>(int idx, const SbVec2s &amp;size, const unsigned char *bytes, SbBool isLSBFirst=TRUE, SbBool isUpToDown=TRUE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getMarker</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>aa50f939c2f4b71f80aaec48c8b874f75</anchor>
      <arglist>(int idx, SbVec2s &amp;size, const unsigned char *&amp;bytes, SbBool &amp;isLSBFirst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>removeMarker</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>a096193bfb95288fb1bf3dadb2651a21c</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isMarkerBitSet</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>ab7b4c9fb49461016c0cd479ba2eaf62b</anchor>
      <arglist>(int idx, int bitNumber)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>markerIndex</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>ac2865f080490e7b89984a49b61628a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numPoints</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a1a74a03a73e24dc5c603f06b85e9916c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>a582dbd3276ff951943064137a49bc798</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMarkerSet</name>
      <anchorfile>classSoMarkerSet.html</anchorfile>
      <anchor>a122932a0dc975a71e855c2ccc89c4511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPointSet</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a4f373fac284eb3dc28b7b8a1ed8d836d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a512572bfeab52723ebe142fefc6407a8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>ab7b457365b643873358322657e8fd70b</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a97a4e816e8a5fcd83e2df7610e8dea4f</anchor>
      <arglist>(SoState *, SoNormalCache *nc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>af24186c4352779a054422f1d37755c67</anchor>
      <arglist>(SoState *state, SoNormalBundle *bundle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMaterial</name>
    <filename>classSoMaterial.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>ad8db410e9e255610c70ffa0e68d7b750</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMaterial</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a7a6aa33ecf28564f2a87185433432fb7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a1cf3b5f81a1c00ed5397b831f4642810</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a9456f2fd23af7e5bb33c4c38bd27025d</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a3931bf40d4162339f639723ccd1b7ede</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>ambientColor</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a929e0e85da6d18cf913b7b43fb466484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>diffuseColor</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>aacf72121a57569188bca484289bac69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>specularColor</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a7ce33fb8e13f6f41fa130c30908280e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>emissiveColor</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>ad6bfbb0005031395237fb06e805d3be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>shininess</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a41b78cf9944b2c332021247b31de830b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>transparency</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>aac495dffe6ceb9e35103d8f82746164f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a96270753f705710ff7c9e5bfe815751c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMaterial</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a3b3d8faada9d7d5c407e80b8ad63b49c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoMaterial.html</anchorfile>
      <anchor>a6e432496706c7733b048c3106a669f52</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMaterialBinding</name>
    <filename>classSoMaterialBinding.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OVERALL</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cbabe652f14992c8e44e453bccacaba4b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_PART</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cba289310fc808d820f99c572ea83b670dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_PART_INDEXED</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cbaeaa06e2bd45e3aef50c9586b252b6e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_FACE</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cba0bc18189ef28ac4a4d800d1e142694dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_FACE_INDEXED</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cba4de2959fe4a6ca10c563e029939fc598</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_VERTEX</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cbaf0a28a0664325baf9fdd40925bb3441c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_VERTEX_INDEXED</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cba886d81551ae3514ee93d26834e78f789</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFAULT</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cba3e612cea36c9e8dbf8f0a4f0607bae10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a4baca14ebba9410624ee304b633375cbaac7a25d3f0a04251efc8ffe01632a8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a5433e926c88d8c03021efff16a8d8b7f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMaterialBinding</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>abf4013195d54ffe89b8fbf7950ef1dba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>aa6f3aa1b69641e3f2790f84508554a94</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a2b449fbca03683a1c3b43178296f190f</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a2f59c32c55eebbe7fcd64b9a00c4ad18</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a49075f8514814206834725bc2d248f1e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>ad18887d4a29fdc92a109d6be73d37979</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>value</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a254c01f6755298773b85bfacfd433de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>acbe1b18906ef5805f64d4ff32f273a56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMaterialBinding</name>
      <anchorfile>classSoMaterialBinding.html</anchorfile>
      <anchor>a1d7962c71412c5a5d13695a7c81717e3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMaterialBindingElement</name>
    <filename>classSoMaterialBindingElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a5656483f86cb0b6b64bdb482bbf84e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a0279c5eaf27c33dae03415d1af6940d0</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a6c3ee27aa395958d40f3853c00e47133</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a21bec68527e2de84ec3c9b338ab5f8e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a86d3242c40b55be2fa1d62b53a58130c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a6792e598febb3a51e860cdf331e3fbc5</anchor>
      <arglist>(SoState *const state, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>get</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>ad0a8d160b2ed61746353d436d93d419e</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>getDefault</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>ab4d7c33ea4161458f83f0fb9d982b672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMaterialBindingElement</name>
      <anchorfile>classSoMaterialBindingElement.html</anchorfile>
      <anchor>a29721e0893cd0d000ef4026384d35653</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMaterialBundle</name>
    <filename>classSoMaterialBundle.html</filename>
    <base>SoBundle</base>
    <member kind="function">
      <type></type>
      <name>SoMaterialBundle</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>a3c69eebe0f4e8bc54464355d3544124f</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoMaterialBundle</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>a763e84e4ab3243e4ea630ea4cfb92c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpMultiple</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>a41b7a3a8e22755aeb152f11e0afd8902</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendFirst</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>a2427c02c7bdeedad56c064dacb42157c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceSend</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>a5825c6e4643fbe819e625657487e03ba</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isColorOnly</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>afca8c8499aa6335563fa9f43449e889b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoMaterialBundle.html</anchorfile>
      <anchor>afab2c71eb1bfb1500ecc3c0c8a34998b</anchor>
      <arglist>(const int index, const SbBool betweenbeginend)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMatrixTransform</name>
    <filename>classSoMatrixTransform.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a10e05a60f6cc540d7f04f15bf2fb018f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMatrixTransform</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a65f9382ef6ebe7e199056b28b7626730</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>aad34a9376bbcbb046224f79b4a4d8e88</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a8ffecb35e560f23a44effea3fe1e76d8</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>aae2ab59d1a411437fc7188db56f67402</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a251df83369e0bb83262cd891393c17f3</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a4eeea148677647351c4a38594c307c3f</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>ad6920838a25af849c026b0412539190c</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a70f3a2af96bae7df53497a3dc49fbabe</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFMatrix</type>
      <name>matrix</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a528414bdae6cee21514fc642ce8a2783</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a0577345481a329720715e7f160e6934f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMatrixTransform</name>
      <anchorfile>classSoMatrixTransform.html</anchorfile>
      <anchor>a5d77725ad9247a7360438aba523b9e16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMemoryError</name>
    <filename>classSoMemoryError.html</filename>
    <base>SoError</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMemoryError.html</anchorfile>
      <anchor>a8d27cbd0ba4a0fe86c94ff651eef0dbe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>post</name>
      <anchorfile>classSoMemoryError.html</anchorfile>
      <anchor>a6c7cce40d6bc13961b97e230468cbe6f</anchor>
      <arglist>(const char *const whatWasAllocated)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoErrorCBPtr</type>
      <name>getHandler</name>
      <anchorfile>classSoMemoryError.html</anchorfile>
      <anchor>aa3c6e03dfd7c6b933053cd4c52b149ba</anchor>
      <arglist>(void *&amp;data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFBitMask</name>
    <filename>classSoMFBitMask.html</filename>
    <base>SoMFEnum</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFBitMask.html</anchorfile>
      <anchor>a34b288f4f2c034759f2040e9c5fe3901</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFBitMask.html</anchorfile>
      <anchor>a2e893d968ae686292d39204f7b92c000</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFBitMask.html</anchorfile>
      <anchor>adc8a2db509d42f48ab86a6de9338a00c</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getValues</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a0f27437fe2f07a4ba4594fb5713ae257</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a67922196ad9c47f2c13e67e311bb9965</anchor>
      <arglist>(const SbName name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a312494fabb1a0367d22ecb2ad673dc47</anchor>
      <arglist>(const int idx, const SbName name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnums</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>ad200588ff41105dbb3d6fa103b13a8b3</anchor>
      <arglist>(const int num, const int *const values, const SbName *const names)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEnums</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a88137a4cb37f5ee2de9e10c3b6420e06</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEnum</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a3189d9f946bcfd22699c09ab4eb44503</anchor>
      <arglist>(const int idx, SbName &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMField</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>af07d4320c3c4be08678e3b56a57f4c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNum</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ad60b7da6d786926cea93c676ad623977</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNum</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ad41785f63d6cf99f4a8bc6fedd55d398</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteValues</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>a00b7c3f249ed2333901bb73accc38ad8</anchor>
      <arglist>(int start, int num=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertSpace</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ab5ef85c5febe2f5faff55f0a29f96d6b</anchor>
      <arglist>(int start, int num)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set1</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>a19232a6e205fd3d9088f0c30363cc830</anchor>
      <arglist>(const int index, const char *const valuestring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get1</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ad0734eb8ec34ecbb633ccffce0f3fb83</anchor>
      <arglist>(const int index, SbString &amp;valuestring)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableDeleteValues</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>a62ce03063996d39fdee9ef36658db21b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isDeleteValuesEnabled</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ae4a6f5096330fa3167b7fab91c589f16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a53c71cad00b22a5c049fe10253b528eb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a6cb259be3f4811babdb69c103f434de3</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>findEnumValue</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>aaea86eee80aae8df585cad9e07bd4935</anchor>
      <arglist>(const SbName &amp;name, int &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>findEnumName</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a230c3c2866c5abed0375c031d5e54747</anchor>
      <arglist>(int value, const SbName *&amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoMField</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>a687eeb3ee47c6caa258694bb659678f9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeRoom</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ac07f6388c27eba3c4be8437e035adc4a</anchor>
      <arglist>(int newnum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoNotRec</type>
      <name>createNotRec</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>a66c71f07e8204ba2ee7d7aa8e9cb739b</anchor>
      <arglist>(SoBase *container)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>legalValuesSet</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a122b8190d954e78386039ab423e06ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numEnums</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>ab94dff3d1e1844355dec114a778a219b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>enumValues</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a6734f182556874b8aab24aa0626f1e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbName *</type>
      <name>enumNames</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a8bee79790c148e0cdd2a30269bb8b2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ae7b3a61bcc18b20c5bdf971db5942fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxNum</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>ab9c4ae077d62a4e8a51dc5113d96a869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>userDataIsUsed</name>
      <anchorfile>classSoMField.html</anchorfile>
      <anchor>a8301aed1f6d683c54e74237b08855e63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFBool</name>
    <filename>classSoMFBool.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFBool.html</anchorfile>
      <anchor>a6b000d18c156593d1a2d3e84dcd9a9e1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFBool.html</anchorfile>
      <anchor>a873c4e1e1a2003f90a84881b3dc9edbe</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFBool.html</anchorfile>
      <anchor>abc331465fe91de3e5d8fd1692c93ea1f</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbBool *</type>
      <name>getValues</name>
      <anchorfile>classSoMFBool.html</anchorfile>
      <anchor>ac8e332695ec2fb61646099dcedecd563</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFBool.html</anchorfile>
      <anchor>a2bd724dd79d75399bf5fd28e27524782</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFBool.html</anchorfile>
      <anchor>ac60a1672458d8c5383d66b6d0c91f617</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFColor</name>
    <filename>classSoMFColor.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a784a132eb65b0d00f48db3b89dcf783d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>acd6fecaf27984f402c0f9ebdc85a9380</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>ad5ca708bd2fd1480e2958984a1beb7f8</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor *</type>
      <name>getValues</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a4e3424b71a6a0dff44eb522ae65f3ad9</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a50ace263f90d24d1b3f13792ee4631e4</anchor>
      <arglist>(int start, int num, const float rgb[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValues</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>aa0335780508dbfed5832f1233f4c7781</anchor>
      <arglist>(int start, int num, const float hsv[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>aa1535424e276f7a74fd2762d7b399c0c</anchor>
      <arglist>(const SbVec3f &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>aa25627a9c7c80843c44d1800b37242aa</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>aa41dd824fdafc0181150c4547190327b</anchor>
      <arglist>(const float rgb[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>ac8075af66233b05738d0422e932ff689</anchor>
      <arglist>(float h, float s, float v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a9739da99fdf2c130bfbbd013103240cc</anchor>
      <arglist>(const float hsv[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a5e4571ce2f574ba2bb74cb37ceadde49</anchor>
      <arglist>(int idx, const SbVec3f &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>ab220b8cb2607362df56a71044f283afd</anchor>
      <arglist>(int idx, float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a7fa587f2a1aa76f159f11ee46d57b80a</anchor>
      <arglist>(int idx, const float rgb[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1HSVValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a71be5539b28ceb540e788fda53f5de4a</anchor>
      <arglist>(int idx, float h, float s, float v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1HSVValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>af3823b5ad381fd04a6c27a366064d6b6</anchor>
      <arglist>(int idx, const float hsv[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a15da88b0e801784266b0053d223ac482</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFColor.html</anchorfile>
      <anchor>a9b0b4744cac7678949fce2f20a55ba92</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFColorRGBA</name>
    <filename>classSoMFColorRGBA.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a7691d8c58828c8c2754aa242649b7168</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a70cedf621c804332680fab2c199492c4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>ab081703773605638f29accd893c7880d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor4f *</type>
      <name>getValues</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a939034132da5b20cd4c82428b9c334c9</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a4c2e62093b5f06b80e163c9a45dc632a</anchor>
      <arglist>(int start, int num, const float rgba[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValues</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a7c0b8d5e5bf43746ef779a1cf51b28fe</anchor>
      <arglist>(int start, int num, const float hsv[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a106d132378ede9a0025103c3ad113838</anchor>
      <arglist>(const SbVec4f &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a6aee7caa4bee6a9bec25dceb6803b118</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a4de2c44fb78b7a840cb4dfb30ec1a797</anchor>
      <arglist>(const float rgba[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a0c6efa5375c0e9d5f7f5ace4713a6bc1</anchor>
      <arglist>(float h, float s, float v, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a973f86c0033692066867c39efb4619ed</anchor>
      <arglist>(const float hsva[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a06561c22a6a451d4937970d6456b59ac</anchor>
      <arglist>(int idx, const SbVec4f &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>ae6cbdf22db37c3b2a70e4cfbc103c672</anchor>
      <arglist>(int idx, float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a16ba3faac35a46fb25aea9e5b0e705c1</anchor>
      <arglist>(int idx, const float rgba[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1HSVValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a290798a90a9019ed9070d2042342079e</anchor>
      <arglist>(int idx, float h, float s, float v, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1HSVValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a8281388e0e1714557e79cdd32c41799b</anchor>
      <arglist>(int idx, const float hsva[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>ad59b3dd08e2f6af0f5d26ee01596bce2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFColorRGBA.html</anchorfile>
      <anchor>a4f07d4cfa8b9d6660354e57f370686be</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFDouble</name>
    <filename>classSoMFDouble.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFDouble.html</anchorfile>
      <anchor>ac546e751454b832d94289e303aaa5b50</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFDouble.html</anchorfile>
      <anchor>a765a332b8e6d7dbb59cefbaee3171608</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFDouble.html</anchorfile>
      <anchor>a7b8e6c25279f1fb39519757a61760a1e</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValues</name>
      <anchorfile>classSoMFDouble.html</anchorfile>
      <anchor>ae872447870dbc084aad5ef0e5fca321a</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFDouble.html</anchorfile>
      <anchor>a78fbe5b2b90560d40db9cdf7aee89e24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFDouble.html</anchorfile>
      <anchor>a3412f284029b5006016dd467f8921203</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFEngine</name>
    <filename>classSoMFEngine.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a56a3685beb623108093f6d5c326ba277</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>ad948d34dbe790b3fe88addde938c217b</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a894f51c99b98e632379d661c65812d73</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SoEngine **</type>
      <name>getValues</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a3a0354522b6d50180c48f5df1308d8c5</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a87f8286c967043661a9fa14301d15bb4</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a955125565a225efcbc67eb58551e7dd7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteValues</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a75e6b106ba70f4408d595cfc7dfcb878</anchor>
      <arglist>(int start, int num=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertSpace</name>
      <anchorfile>classSoMFEngine.html</anchorfile>
      <anchor>a08f8d1ee8b4e04c6fdb242c433470bfd</anchor>
      <arglist>(int start, int num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFEnum</name>
    <filename>classSoMFEnum.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a51a46b986eb0656c1c2993a2fad2387b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>adc2887bc4244f16ee6257c9790820ad5</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFEnum.html</anchorfile>
      <anchor>a4f456943005be9eaba2228b33743d4b9</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFFloat</name>
    <filename>classSoMFFloat.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFFloat.html</anchorfile>
      <anchor>a9c212a6954774214c14b1e3698781142</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFFloat.html</anchorfile>
      <anchor>aff1552bf3800db8847d4b25924f8182a</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFFloat.html</anchorfile>
      <anchor>acedba1460867654ad6a2d634c6732462</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getValues</name>
      <anchorfile>classSoMFFloat.html</anchorfile>
      <anchor>aa29f5b864e5b1d3ee04e404cf1030eed</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFFloat.html</anchorfile>
      <anchor>af923ff0e3576fef514bbef075d191d9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFFloat.html</anchorfile>
      <anchor>ae7966e4d07dab65499495a55792094d7</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMField</name>
    <filename>classSoMField.html</filename>
    <base>SoField</base>
  </compound>
  <compound kind="class">
    <name>SoMFInt32</name>
    <filename>classSoMFInt32.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFInt32.html</anchorfile>
      <anchor>a8d24088c157678a2d0bef7c4edc2b133</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFInt32.html</anchorfile>
      <anchor>a147f9a5ad50e4f779305b33dd84c2236</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFInt32.html</anchorfile>
      <anchor>a7ca756ea04ac3c7e1babf0ccd1a733e9</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getValues</name>
      <anchorfile>classSoMFInt32.html</anchorfile>
      <anchor>a54b068aaf0e121edd062f8d78e88c601</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFInt32.html</anchorfile>
      <anchor>af8144f90ca9112e782723f32357e45da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFInt32.html</anchorfile>
      <anchor>a0b712bf8ef3d9cdb99422cb837593a8d</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFMatrix</name>
    <filename>classSoMFMatrix.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>a35d7c4ea89438284c8dacba622c37782</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>a5270a64c201a10092ddb0cfe7dfe86f4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>a3126d61bf7f25a7dc2c080213200575e</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix *</type>
      <name>getValues</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>a02447c4ca6d03a174b1fa08278301dbd</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>a1c01e374a092ea76203c37daea12e4f7</anchor>
      <arglist>(const float a11, const float a12, const float a13, const float a14, const float a21, const float a22, const float a23, const float a24, const float a31, const float a32, const float a33, const float a34, const float a41, const float a42, const float a43, const float a44)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>accdb4f897af56021ffe4a89d63c44289</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFMatrix.html</anchorfile>
      <anchor>a0617ac385fbf74a3c224c91dc9f73358</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFName</name>
    <filename>classSoMFName.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>a25e5ae83cbe133b65a8d5cbe1ff16eae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>a4774469f3a2b007ac91877f50b133534</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>ae6d8e53fa35e0ee8e370279e06af30a6</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName *</type>
      <name>getValues</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>a1c0d921b4a4ad162df624192810bab09</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>acfce262e4c8bd0547f5e4f1fc7a1e014</anchor>
      <arglist>(const int start, const int num, const char *strings[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>aab308a625f14a25cc8d1681a47cf7501</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>a3ff341f6afad02c1ce9bfc0223c7e458</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFName.html</anchorfile>
      <anchor>a8655695c5fe0d59e2c1da8aff5928cbf</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFNode</name>
    <filename>classSoMFNode.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>a0274529d80e6bde29dac69b2978a045d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>af224f399e0105d4714d17b621013ec94</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>a4251e45fd67dfc688758904db9ec5c70</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SoNode **</type>
      <name>getValues</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>ad912640910492045232f21b8d1a63cbc</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>aa6e774457d4f3319eb9d21e10721d45e</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>ae4e230012f02405bcede66a912cc8cec</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>ac6c2b304ac32207a68eaad65e49c2072</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>a1b59464136a4d213e28f0d632b2358b8</anchor>
      <arglist>(SoNode *node, int idx)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>aca0912a9a7df9d50a9f98621938c7ebc</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>a6a3867aa416470c928b1bf40a8f208e0</anchor>
      <arglist>(const SoNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodes</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>aee70ba9d0e7636b1a5da9db21d1ce351</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>a8bbaaf2392ce500e2fbb67c8591c1691</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>a097e65231abce5a86c10ba0a94571306</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllNodes</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>add346c87741ebbadd0fa7c84997735e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>aa714f0501f11c9dafac9a2bc181d21e8</anchor>
      <arglist>(int idx, SoNode *newnode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceNode</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>aca35cfd957e6592ac6ae942f59770104</anchor>
      <arglist>(SoNode *oldnode, SoNode *newnode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteValues</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>ae84bef6b8dfaf807ba08710ad3329842</anchor>
      <arglist>(int start, int num=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertSpace</name>
      <anchorfile>classSoMFNode.html</anchorfile>
      <anchor>adac23e1714ca11172daaecc55214a31d</anchor>
      <arglist>(int start, int num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFPath</name>
    <filename>classSoMFPath.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>a416bacbf017a19f90451dafd0176cc78</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>aaa999bb8fbdd5fe71e0038238c3d9187</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>afbe001067e5d52fdf92c1cf56bdcb5da</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPath **</type>
      <name>getValues</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>ac37df7623fd4045e44d7af595efc48ec</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>a13ac392429032424273d0e31a165da38</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>a1e02d5cb1b7c669a66e6935f15dc5ad9</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>ac35cfbaea665a398bf678b60b73139f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteValues</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>a116b84beb9f733a318a47f627e642393</anchor>
      <arglist>(int start, int num=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertSpace</name>
      <anchorfile>classSoMFPath.html</anchorfile>
      <anchor>aefe9513cb523b93c3f41b9a371ca0ab3</anchor>
      <arglist>(int start, int num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFPlane</name>
    <filename>classSoMFPlane.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFPlane.html</anchorfile>
      <anchor>a9cf51647aada8130f1994ec3a73a2992</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFPlane.html</anchorfile>
      <anchor>a9d03dbf56dccd551501b77779a9401f8</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFPlane.html</anchorfile>
      <anchor>ac029ca09cfa6710e56cd5da733d39e28</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbPlane *</type>
      <name>getValues</name>
      <anchorfile>classSoMFPlane.html</anchorfile>
      <anchor>aeeeb60963c0cd0256b5033e30cfdc1b6</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFPlane.html</anchorfile>
      <anchor>a73a84012fae484681777ce857383ae7b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFPlane.html</anchorfile>
      <anchor>a62bfe0ed0f52c052a3dee6fe2828af23</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFRotation</name>
    <filename>classSoMFRotation.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a59a427f06160e1befa8b1e8791c17878</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a285a92463a139b80a356b330a32ce15f</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a94cecfa626bdd55115a9f531a60c99f1</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbRotation *</type>
      <name>getValues</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a78761135352a5a23c420a778622d6715</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a71a7433d9ac9e5f99601a355adbece1f</anchor>
      <arglist>(const int start, const int num, const float q[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a622f28f8e25b79b58274e9bf91f19c90</anchor>
      <arglist>(const int idx, const float q0, const float q1, const float q2, const float q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>acc02204c540aadcb8fef65dd163084dd</anchor>
      <arglist>(const int idx, const float q[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a006c0888c69ca41d95d080cd9c560cb4</anchor>
      <arglist>(const int idx, const SbVec3f &amp;axis, const float angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a7ffc93da0846d653d06e6aa8c70992a6</anchor>
      <arglist>(const float q0, const float q1, const float q2, const float q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a4149bb31f4aac82480fe10e8b600b75d</anchor>
      <arglist>(const float q[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a165dd9bdd77ca53a4edeeba9fced9ef9</anchor>
      <arglist>(const SbVec3f &amp;axis, const float angle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a452c82ad69c79ced102db5161b864b60</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFRotation.html</anchorfile>
      <anchor>a16e672367ea143f15db121930df0b80d</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFShort</name>
    <filename>classSoMFShort.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFShort.html</anchorfile>
      <anchor>af800a620cb36626eca86b9eb209349a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFShort.html</anchorfile>
      <anchor>a99ed026c34e38d0fa06a9497b06caa8f</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFShort.html</anchorfile>
      <anchor>aa2e030facece2a41899a13cc29026f1b</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const short *</type>
      <name>getValues</name>
      <anchorfile>classSoMFShort.html</anchorfile>
      <anchor>a6d33e8d1ec0e7d9f43fe31e94d1a91ec</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFShort.html</anchorfile>
      <anchor>a95e805f53116c342fbfdf67d5f65a077</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFShort.html</anchorfile>
      <anchor>aec30aa2c92a42f1cbc14f144bffd94fd</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFString</name>
    <filename>classSoMFString.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>a543aaed8e33db1d2f431f43e13494f0a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>a863bc0911645cd3bdf289f05165d2b45</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>adb7bdd53ba08d21ab21550edcb4c90c0</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbString *</type>
      <name>getValues</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>a7804da258d8f4b0c5cadd6d451a48f3a</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>a6d6fe55ec59600c84574cfaddd232008</anchor>
      <arglist>(const int start, const int num, const char *strings[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>ac091e85c9620e67cc1944a2e58e41ae1</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteText</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>a067411b95c97e16ebf0930a72f469a8b</anchor>
      <arglist>(const int fromline, const int fromchar, const int toline, const int tochar)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>a41faabae057cb0bdb5ee4cf436ce73d8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFString.html</anchorfile>
      <anchor>ae5e8d8f400bd52b82995bbef96fa8765</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFTime</name>
    <filename>classSoMFTime.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFTime.html</anchorfile>
      <anchor>a266d6a49f0b7049f2cfb560b65ad1824</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFTime.html</anchorfile>
      <anchor>a5680570e32f3f34b14e5dd91cfd58bd7</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFTime.html</anchorfile>
      <anchor>ad864b1e911aa2d6227ee2d3d7cc29ac3</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbTime *</type>
      <name>getValues</name>
      <anchorfile>classSoMFTime.html</anchorfile>
      <anchor>a1639b0b1cace4cb7ff52dcf54d8978bf</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFTime.html</anchorfile>
      <anchor>ac3c765ea48f9710d6e0d7ca981cfdb0f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFTime.html</anchorfile>
      <anchor>a662116168a83e9a0bca423b51d40fdc5</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFUInt32</name>
    <filename>classSoMFUInt32.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFUInt32.html</anchorfile>
      <anchor>a3b46754eaa833e503a8b1af0641f641f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFUInt32.html</anchorfile>
      <anchor>a26382c1b7dbc9de0ff5b7a848edc0cd1</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFUInt32.html</anchorfile>
      <anchor>a46f8caa057ea7e725916821d8110ca35</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const uint32_t *</type>
      <name>getValues</name>
      <anchorfile>classSoMFUInt32.html</anchorfile>
      <anchor>adf381f18b334c2bc5cfc6cda10a34f82</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFUInt32.html</anchorfile>
      <anchor>ad242017fecd19338a6b0c36d5c4d9798</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFUInt32.html</anchorfile>
      <anchor>aa1580b213a92438cd7e4b274bc33e0a1</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFUShort</name>
    <filename>classSoMFUShort.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFUShort.html</anchorfile>
      <anchor>a456a80a1b5b9761fe8b5d8a030f7116d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFUShort.html</anchorfile>
      <anchor>a119da38268c8ec333cc386f42e74e164</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFUShort.html</anchorfile>
      <anchor>a85f20eb4fcdc72c2a9d02211e4dc9f71</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned short *</type>
      <name>getValues</name>
      <anchorfile>classSoMFUShort.html</anchorfile>
      <anchor>a2f28e5145595ef1b9221015224b58b42</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFUShort.html</anchorfile>
      <anchor>a82eecb94fef514748449288b82db5a97</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFUShort.html</anchorfile>
      <anchor>a7358eb7f0e8e8bb6fb86c9708030b646</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec2b</name>
    <filename>classSoMFVec2b.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a41c92a7d9a0fd509fc8ac081a36e3aad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a12e6b0ebd95b59d576e7911da112d160</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>ab1f9116b65eb1fc863916defa7c07d5e</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2b *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a7fdb2780174b8479d8b569c73673fae0</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a4885c329cb49917d42378ee31adae236</anchor>
      <arglist>(int start, int num, const int8_t xy[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a119d8075f0b3639f71d88d66d4510622</anchor>
      <arglist>(int idx, int8_t x, int8_t y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>afa521198e3eb2863549801bc457e93d9</anchor>
      <arglist>(int idx, const int8_t xy[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a1e300d0e680256e4985a99d9f6fb7904</anchor>
      <arglist>(int8_t x, int8_t y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a722202be4a7402d6d58694d7b9dcf57a</anchor>
      <arglist>(const int8_t xy[2])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a8b1e7f1f40df0808fabc14c158a26b97</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec2b.html</anchorfile>
      <anchor>a54dc3e52fd6d1e824bc807e17a0bbf13</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec2d</name>
    <filename>classSoMFVec2d.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a2f17ba0eeffff4a9b814025969ab9182</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a80bcf57a21f42cb329ab8d99733df361</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a5c6811f67a8e2b127e3aeefc093cedc0</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2d *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>ad77af03343312106ae2f3d1cad721fef</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>ab16e0a48277daab9d41222a9aa4b1a9f</anchor>
      <arglist>(int start, int num, const double xy[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a55b926217af2c67fe9d7180234529985</anchor>
      <arglist>(int idx, double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a756b5f4fa67a301087446d398534edd3</anchor>
      <arglist>(int idx, const double xy[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>ab5cc9d0971b711001c11f9da1dd09a28</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>abec0d3cf09b1b76b879018c6ccddfdba</anchor>
      <arglist>(const double xy[2])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a9a81244276d1b9f6ef0115d1d424e979</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec2d.html</anchorfile>
      <anchor>a838d446e6ef6f0c3a51f605f63ec5d49</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec2f</name>
    <filename>classSoMFVec2f.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>ae6ed8c4378823cd83d82b969a8218475</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a67fbdf3bc7153d1f0b82c9a8fc076811</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a8f22cd060236b8011a398a49eaeb658d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>abbdf4a957c9d92c741ee5c1e9a583207</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a79bcb163e4b7318ff74d17b98d96bd60</anchor>
      <arglist>(int start, int num, const float xy[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a5d7887a60ca917be63bf0206c9547142</anchor>
      <arglist>(int idx, float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a31ec3795c9ce6a5756d75ce1f7886319</anchor>
      <arglist>(int idx, const float xy[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>ae63b7d37643cb6121a9819234c06ee79</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a93d452fcf77f56b645358401e586d25c</anchor>
      <arglist>(const float xy[2])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a800078641f960e15d60704e1511f2668</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec2f.html</anchorfile>
      <anchor>a11d353019e0f6e8b7ff26be15f93674f</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec2i32</name>
    <filename>classSoMFVec2i32.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>a6fc5366268df5f68b21f7771c7bdf1b8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>aca2a49a9d26076b72e4e546958d4e870</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>af114479ecc565d3f3b9adc83f90eda7d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2i32 *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>ae42148021deaf355ba78306f342a63a8</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>a0712a49c203dc3c167c65d4f5efd3f4a</anchor>
      <arglist>(int start, int num, const int32_t xy[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>a7be75e4535318dcdd6c837fdf1931c0d</anchor>
      <arglist>(int idx, int32_t x, int32_t y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>ab432f78f33b93c6fab2156844280d236</anchor>
      <arglist>(int idx, const int32_t xy[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>a960b812a96d5af16b16ff6e3d3840d10</anchor>
      <arglist>(int32_t x, int32_t y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>aefb6ad43d63a666255bbac1e83fdd678</anchor>
      <arglist>(const int32_t xy[2])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>ad3415636d9ba2d85c92247eaedf3b6d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec2i32.html</anchorfile>
      <anchor>a161f163194f3309b5b225d1d426f767e</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec2s</name>
    <filename>classSoMFVec2s.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>a0d73feb5f125acfd382e478c057d59fd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>a604228b87159f4d956ac3edef86d22d4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>ae4c6561989cdb4581cfeca94d7868925</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>aac61cff6e23c4906aae9e91e31d14b77</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>a99ff8c47f5db3142b2cb767b003c9619</anchor>
      <arglist>(int start, int num, const short xy[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>af3b6c8f12f22b85f1a5b2d449479faee</anchor>
      <arglist>(int idx, short x, short y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>aa987d1953bb2e450d3d4c3be7a941813</anchor>
      <arglist>(int idx, const short xy[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>a4877bae53aa927d4c76d04e0808a409e</anchor>
      <arglist>(short x, short y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>af3bac423b1435dfea973d9c8141d33c3</anchor>
      <arglist>(const short xy[2])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>ad5c7e1456fd733689ff8e38eff44879e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec2s.html</anchorfile>
      <anchor>a0225a217a6b51439ae9b4bf3d325fe8e</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec3b</name>
    <filename>classSoMFVec3b.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a47d12787e134c852c60bea9756b06b80</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a8b171dfe94e20bc54ece991df62a59b4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a3d2f997a6f3e25be434b621774fddaba</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3b *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>aa18b6844afaeda4adac6d18e787ea784</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a67ea38d00de949325826472115ae3988</anchor>
      <arglist>(int start, int num, const int8_t xyz[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a896945320e2df39c77ea3739439a6c4c</anchor>
      <arglist>(int idx, int8_t x, int8_t y, int8_t z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>affc0fab4e61d1e54bbab17c7a70ef096</anchor>
      <arglist>(int idx, const int8_t xyz[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a716a8530c1c858dacb96a134f88ad37f</anchor>
      <arglist>(int8_t x, int8_t y, int8_t z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>aa82ddc37f77aa1874159d2a63545bee9</anchor>
      <arglist>(const int8_t xyz[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a95e4dbb49ff1743bffab1c9d3bee0c88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec3b.html</anchorfile>
      <anchor>a45d1e935a865f6bc5e684f145eefacf1</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec3d</name>
    <filename>classSoMFVec3d.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>a52a68556a2af44cefde26a671334b963</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>ae1a9048c422ddb3436a261837407ffd5</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>a454a1a0ab6d25c007f1472e7cb0a2b50</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3d *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>af133c4b8085533460308b5c0b3156fc9</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>a3447423211ea22c90b22050b1cf5d048</anchor>
      <arglist>(int start, int num, const double xyz[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>ae9560707427f696c6b06251b7b7fd13c</anchor>
      <arglist>(int idx, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>ae80eacdb6101623a52fbd40f97b3f4d8</anchor>
      <arglist>(int idx, const double xyz[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>a04cadba3d89b9e4aa8f92498a998951b</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>a654695c989fa1da7f772cb474c4c157d</anchor>
      <arglist>(const double xyz[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>a1ddb812ca1e2dc64254fe7007fe57f8f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec3d.html</anchorfile>
      <anchor>aed1c9911c7b6bf8d0b49a9d03d10f1b4</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec3f</name>
    <filename>classSoMFVec3f.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a7cd8de39e0db5888f5879fd1e7e0f795</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a8edba4c15768ffea02b76bde75ae97de</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a1619f1019098da0efd042747666f1207</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>abec5730a904b311531f494af743f2c61</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>acd8fffd717312d9629e60d976869bfd1</anchor>
      <arglist>(int start, int num, const float xyz[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a4c9044ef9873d05d737ce460f859ebaa</anchor>
      <arglist>(int idx, float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a73c9889d4f8bafe26df6d3e16e4d7610</anchor>
      <arglist>(int idx, const float xyz[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a0913a341e6a062d6c24b6c3ea275699b</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a0a738ac52e1f0b7c527c5c531a549c74</anchor>
      <arglist>(const float xyz[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>acc92ce1307c4d3702719ceecdce1ba47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec3f.html</anchorfile>
      <anchor>a5b88555633190cf119a54e64cc968686</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec3i32</name>
    <filename>classSoMFVec3i32.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a239c5fb5e229132d01589fd664b23a97</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>abd0810237ed35b9e9d5e5a71b8bc795a</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>ad0d8a696671d7a07d538b6a37fbce0c2</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3i32 *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a92a5707a98796135dab3640ef12edc7b</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>aaa715afed7d900dab252b3c98c67ce7e</anchor>
      <arglist>(int start, int num, const int32_t xyz[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a0830aed00814a08e6d80836aafe8af60</anchor>
      <arglist>(int idx, int32_t x, int32_t y, int32_t z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>af0b2fc98afbe6dc1c2327f9a5306035e</anchor>
      <arglist>(int idx, const int32_t xyz[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a175a8cbd4060611e1657b41e43ff7693</anchor>
      <arglist>(int32_t x, int32_t y, int32_t z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a984b6e646f5e63b296f67200e01da783</anchor>
      <arglist>(const int32_t xyz[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a1e6c640d1e979a48a69f42e1b9ec53e9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec3i32.html</anchorfile>
      <anchor>a997ae149d5bcf6bf0f6412cca46dfa61</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec3s</name>
    <filename>classSoMFVec3s.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a6bf71599d1b67db5a8da3a2f436aa889</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a0b688ee2d3024e777bec8a7a40dfcb1d</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>ad87d19cdb0462f45b75176139383189d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3s *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a50cb8af5c5f566d7af8cc43fa7dc4cf2</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a5b71462fc84aad1492f68b8268b20905</anchor>
      <arglist>(int start, int num, const short xyz[][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a49e71097eebe98861cec75452eb57546</anchor>
      <arglist>(int idx, short x, short y, short z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>abf777babdff6f946cb781b8f30bc9700</anchor>
      <arglist>(int idx, const short xyz[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a6a331bfe3192aedcd24aff44476d883a</anchor>
      <arglist>(short x, short y, short z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a9d411d46c62ccf1a30d6ac1ea2a18b37</anchor>
      <arglist>(const short xyz[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>a3219574eb3f419b81b8fc8c89889c201</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec3s.html</anchorfile>
      <anchor>ae9f8112290e0f96c775f553d035bb317</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4b</name>
    <filename>classSoMFVec4b.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>a5d8c1690892e658a81e95e62fb20268b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>a83c65301962a44bdd0a8e83dd22fb8f6</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>ab3ea6367ae6c6d0344cb1c9b436b566f</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4b *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>a38e385d1e973dcdc1c69c19260f7d850</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>ae5f898dde374d535f820c63500248386</anchor>
      <arglist>(int start, int num, const int8_t xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>a4e833a78f33d8f3659314cfe74838eff</anchor>
      <arglist>(int idx, int8_t x, int8_t y, int8_t z, int8_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>aad83d62876009fb953316eab963a0019</anchor>
      <arglist>(int idx, const int8_t xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>a41c1f22e0a61fe702cc558d66ff7295d</anchor>
      <arglist>(int8_t x, int8_t y, int8_t z, int8_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>aeaea7c0d2ef003596338654161c0371a</anchor>
      <arglist>(const int8_t xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>ae2faa2cc67e9e488cf6ab6d0ca2dd53f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4b.html</anchorfile>
      <anchor>a6b79a1ca5238e2532ce06f1b0e9785d2</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4d</name>
    <filename>classSoMFVec4d.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a64395041bf167accd317bdb58682a578</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a344addb93b3de450e5f48f308f839208</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>acc5c6bc767d498feadd8c52b9c827d39</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4d *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a2845a5199c3da264bae07e0db4ba7093</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a8f7e94a8d3be48014cbaca903efa60f1</anchor>
      <arglist>(int start, int num, const double xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>aa9971fc6860b18b6b34fc54101e3cae4</anchor>
      <arglist>(int idx, double x, double y, double z, double w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>ab3e1930eab18354c716e34c59b05f9de</anchor>
      <arglist>(int idx, const double xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a394787736ee95970c568390dad967262</anchor>
      <arglist>(double x, double y, double z, double w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a73cd42aa540f611a5eaa44498dc82080</anchor>
      <arglist>(const double xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a8230fe34fb38be0b4775767eb68bcfb9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4d.html</anchorfile>
      <anchor>a8f572df1cbc9af88774d388df49f894a</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4f</name>
    <filename>classSoMFVec4f.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a550d7043f83208cf568fcbff83a407a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a5764906fdc39e715594b1eacb6d37201</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a7fea91256f800e1e0117498478f37fc0</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>af386b3d99c0b2bb0d0d48935887973f9</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>abe1baf6c62640d72762e3332de57e15e</anchor>
      <arglist>(int start, int num, const float xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a848407618b5107c8f0c3b9c175bd14b3</anchor>
      <arglist>(int idx, float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a50fc3afbb3a1d8aa1494c4e5d699db1f</anchor>
      <arglist>(int idx, const float xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a7c0b984888fc60ba611725314ec5380b</anchor>
      <arglist>(float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>ab28df8c0a98faaea72e53bc49802062a</anchor>
      <arglist>(const float xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a8a3e075d3e32296538fc9c07aaa7c1a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4f.html</anchorfile>
      <anchor>a5133cd3b5d5ffcece274c7d30ccf7a69</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4i32</name>
    <filename>classSoMFVec4i32.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a8b5a4649738395089c15bcb37e78fee5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a26625f0eaa09ca0ac8019504d6c81645</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>af943b2a0130045188765519c3acb85a3</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4i32 *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a98119dfaacdbb31396038b74a0dd9c66</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>ad7ca7ca1c490802fd6660dfc13da7dcf</anchor>
      <arglist>(int start, int num, const int32_t xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a7424a71e63b28ee9ff99e9f54187168f</anchor>
      <arglist>(int idx, int32_t x, int32_t y, int32_t z, int32_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a76c617577ef29c4d2991733af92d47fd</anchor>
      <arglist>(int idx, const int32_t xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a5665e4423ace6a5cc8dbe2faf2338778</anchor>
      <arglist>(int32_t x, int32_t y, int32_t z, int32_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a1ba9f5d08ce70cf8e5ac1159bfe348df</anchor>
      <arglist>(const int32_t xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>a9416fd3672371ab47ebde9c7e737007f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4i32.html</anchorfile>
      <anchor>af870a22ca19716ab2f1b5288e2352610</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4s</name>
    <filename>classSoMFVec4s.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a962b934e189226215640fbbf95ff75d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a20af3bf918f887759ed41c69484f8b6d</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>ab34c5514127d19387dd291bbfdeccc7c</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4s *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a0fc79311468d902b95c21d7cad73ad09</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a0f91dd08297e759cdf692eb00a0ce689</anchor>
      <arglist>(int start, int num, const short xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a51f4055c2b6591033e7b5875709d4d24</anchor>
      <arglist>(int idx, short x, short y, short z, short w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a439a0d0928783057885061dd52a565a0</anchor>
      <arglist>(int idx, const short xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a44ab17d526f72a599966b2428d24b0c8</anchor>
      <arglist>(short x, short y, short z, short w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a11d55528b91d15a9e9195b3e803eabe1</anchor>
      <arglist>(const short xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>ab2a055a73e0aa2ab8250de4e7eb2d23d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4s.html</anchorfile>
      <anchor>a33b08e4429ec7f628d69cdb572fb8e6a</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4ub</name>
    <filename>classSoMFVec4ub.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>ac7d2a2721b8b50f1fd4bfbb40644e5c3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>a835e1eab6f8aa1f76c7af3ff014979a6</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>a88c64657df29f4cbe3346e611764c385</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4ub *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>aee2a7a793253200173fc123294e97cde</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>a28052541e3ec04cd8af4d769835a74a0</anchor>
      <arglist>(int start, int num, const uint8_t xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>ae45892ae2d5d5217d9582507bf9d849c</anchor>
      <arglist>(int idx, uint8_t x, uint8_t y, uint8_t z, uint8_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>a52394d0ee05cb66dcd2aa0c06f2e601a</anchor>
      <arglist>(int idx, const uint8_t xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>af66de4d58808a51f4b055538718063a0</anchor>
      <arglist>(uint8_t x, uint8_t y, uint8_t z, uint8_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>af5558315f566aacb983282f65994bb38</anchor>
      <arglist>(const uint8_t xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>a5f064746327632e577066cecc0f09c03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4ub.html</anchorfile>
      <anchor>a76a929fe61d2463fac62397f2bbcd3b1</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4ui32</name>
    <filename>classSoMFVec4ui32.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a10cc05a57113e220bfa6cf476575100d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a2d64161504e0e2af78d5cd4c0b846eb2</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a5e05461880faededd7b36b5095bf8e2c</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4ui32 *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>aa2c52e11101df5fc9e4669cbf75f73c9</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a9c8564af2bf069b629166fd33efbb71c</anchor>
      <arglist>(int start, int num, const uint32_t xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a24884582f740f5bc535aa8206207f3b9</anchor>
      <arglist>(int idx, uint32_t x, uint32_t y, uint32_t z, uint32_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a84ae741f61ad9c102940c5d6d5736132</anchor>
      <arglist>(int idx, const uint32_t xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a316d1fffc32009e12d5f5f81c5e28f89</anchor>
      <arglist>(uint32_t x, uint32_t y, uint32_t z, uint32_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a3e60ec1da5174d306cc4dc88a3239b18</anchor>
      <arglist>(const uint32_t xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a246ea2b1e0cdbc76a20fc5288ae98d55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4ui32.html</anchorfile>
      <anchor>a7c792bc5cf8369d55b32aaa82d7aea42</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMFVec4us</name>
    <filename>classSoMFVec4us.html</filename>
    <base>SoMField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>a32853a5f5f384f56cd5b7191536161a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>af6963d021ded318a056852becb9d1411</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>a8ecb2057e61b34ba0684bbe6160b9142</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4us *</type>
      <name>getValues</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>aacf5a81e24a55139b88129f9d3f33660</anchor>
      <arglist>(const int start) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>a98ef84dfbc32a527518369704ef853fb</anchor>
      <arglist>(int start, int num, const unsigned short xyzw[][4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>ab955e6843576da8cdc96954622402b8e</anchor>
      <arglist>(int idx, unsigned short x, unsigned short y, unsigned short z, unsigned short w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set1Value</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>adadbef2c20f5b6c6b109aa90bbb72330</anchor>
      <arglist>(int idx, const unsigned short xyzw[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>a74755d225279fccf3c19084bfeb920d8</anchor>
      <arglist>(unsigned short x, unsigned short y, unsigned short z, unsigned short w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>aa802d7720500ecb3bd23380e46453e23</anchor>
      <arglist>(const unsigned short xyzw[4])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteAllValues</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>ac5cf4a3e3fd22ca0a6d47dbbdb620659</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyValue</name>
      <anchorfile>classSoMFVec4us.html</anchorfile>
      <anchor>a0ea4e4d6dc6c5d17ff1ace26ce3a8dc8</anchor>
      <arglist>(int to, int from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoModelMatrixElement</name>
    <filename>classSoModelMatrixElement.html</filename>
    <base>SoAccumulatedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a5795900e2ab4d90c163c17349c3a5d93</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>aee24b693e7440813fec120d6d8ba24f5</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeEltIdentity</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a3373ade52add2968b9e74c48d84574e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ae2477b78bc5424d4c415718eaa4ba028</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multElt</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a60ec67f0cd97423998f3da2873c569f9</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>translateEltBy</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a4cdd9572f29f3026515a9fd870fce4f6</anchor>
      <arglist>(const SbVec3f &amp;translation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rotateEltBy</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a3425bc649f4ef25b2af00cb27902650b</anchor>
      <arglist>(const SbRotation &amp;rotation)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleEltBy</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a4147bdbe8b988bd0ccf57bc03c555af9</anchor>
      <arglist>(const SbVec3f &amp;scaleFactor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbMatrix</type>
      <name>pushMatrixElt</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>ab5c2094bf2b2e405ddf69192a535017f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>popMatrixElt</name>
      <anchorfile>classSoModelMatrixElement.html</anchorfile>
      <anchor>a3c99c1ea29f9d53bc0a7286482c05194</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMotion3Event</name>
    <filename>classSoMotion3Event.html</filename>
    <base>SoEvent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>a214b9516175a0f717dcadb2e489452be</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMotion3Event</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>ac9bed796981c0cc8aa35cee4c650ada9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMotion3Event</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>a374a2d684e0d8fc75ae97a1f2081e763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>a43af2b05b6cc203b65a33af89b0fe3c6</anchor>
      <arglist>(const SbVec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>a0b86bafd5b75c84c4714c17e734076bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>ad8939e78c9bda17c6df6c58ce4af6bf5</anchor>
      <arglist>(const SbRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const SbRotation &amp;</type>
      <name>getRotation</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>a0f86d42c648dd8932bf1d67602100e56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoMotion3Event.html</anchorfile>
      <anchor>a7bb2b7b9366d8fdc327e89d2813ead27</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMouseButtonEvent</name>
    <filename>classSoMouseButtonEvent.html</filename>
    <base>SoButtonEvent</base>
    <member kind="enumeration">
      <type></type>
      <name>Button</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANY</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1a59c71efa7703a1c339be504fc7ebaee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUTTON1</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1af5d7769223dd6c689a7b2013a59b8e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUTTON2</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1a7d0b1f94abea9762f72c12629136d7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUTTON3</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1a0a02611c40652f11d0fd5020acdf80ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUTTON4</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1a9798425c1259ece21027f5f85ad754ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUTTON5</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa573f2c74fcec1448935075c1db558d1adeef57ccd3569c84425e7b9d249b216f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>a094a35cc45a8ad21f279f9e8b7645a6e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMouseButtonEvent</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa5b1a326508aff5a863143808b915d9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMouseButtonEvent</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>a0792710e85d19b8ef15f31ba71ebdf03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButton</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>a9b359f6069edec93f0c191db85ac54af</anchor>
      <arglist>(Button button)</arglist>
    </member>
    <member kind="function">
      <type>Button</type>
      <name>getButton</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>ae336365e6fc988fe24f58041249b6e40</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>a598706e642897c9fc14672a62faaba18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isButtonPressEvent</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>a5f44112bf193cbc7f95e19b89620f4bf</anchor>
      <arglist>(const SoEvent *e, Button whichButton)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isButtonReleaseEvent</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>ab3532fbc0655a657dde5c88d62d69cdd</anchor>
      <arglist>(const SoEvent *e, Button whichButton)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>enumToString</name>
      <anchorfile>classSoMouseButtonEvent.html</anchorfile>
      <anchor>aa0e7366a6142e89078dcd038077fa2a1</anchor>
      <arglist>(Button enumval, SbString &amp;stringrep)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMultipleCopy</name>
    <filename>classSoMultipleCopy.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>aeb242880beb21b5a3be70e891a8c1271</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoMultipleCopy</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a34c646b72c9b8bff9242cf8673b7cb55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>ac8ac87e9943fc776bafb3a6ba37eaf11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>af0f0cfca3dd19c8b4f91b6a792c05412</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a21b3da69d50aa73f909674933fa5fddb</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a1b4846370824f72ed186e3f2aa4f98e0</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a8575343bfb10e20bd7f8b489915b4095</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>ac1a47cb6251eb5621e733c6465b0aa37</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>ae69117b12321a93950f6ae5e4fe8ee5c</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a134ccc31773694c5b632bc8a838e6516</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a35a75d0e8a96fdc6591c4854be361a9c</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>ad9eedea404fe589aa91e9c9aaa8f2e42</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>ac9830df82d9d0f1e858a4283da5ac0c0</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFMatrix</type>
      <name>matrix</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a6ef9f307573e60198d1cce4065bd5870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>a4261013d39f4a0088239c49e682fc5dd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMultipleCopy</name>
      <anchorfile>classSoMultipleCopy.html</anchorfile>
      <anchor>ae09770ff7de036dbaf36b6d598afbeaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMultiTextureCoordinateElement</name>
    <filename>classSoMultiTextureCoordinateElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a4414df2321b9996ef0764ae1bbe02530</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordType</type>
      <name>getType</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a0c0a926b27719f132ef9473e045068b2</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoMultiTextureCoordinateElement.html</anchorfile>
      <anchor>a66e3959b413972d272550e46047daa82</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMultiTextureEnabledElement</name>
    <filename>classSoMultiTextureEnabledElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>adca1d2f2ce7b620f0b65641dabe59c0f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>aea7744c14073cc9bb9f466bda964c8e9</anchor>
      <arglist>(const int unit, const int mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>ada9001c5ddb888f8ce29aad33e34b8bf</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a5d4c02250e5e9e1335b09bd94c237611</anchor>
      <arglist>(const SoElement *elem) const </arglist>
    </member>
    <member kind="function">
      <type>SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>aa68b8bfb29cd97db49b90a1389d48438</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>aea763a5907b814fa3584b2c5dbd4bb93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a406db88857e8d17d3fb36b420a932c4c</anchor>
      <arglist>(SoState *state, SoNode *node, const int unit, const SbBool enabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>get</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a61c2e6f4b3e5589a528f18a10bf52ca1</anchor>
      <arglist>(SoState *state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbBool *</type>
      <name>getEnabledUnits</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>af7bd45c1ae6bb68b9d118be6c3554a5e</anchor>
      <arglist>(SoState *state, int &amp;lastenabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Mode *</type>
      <name>getActiveUnits</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>af3de045e5124ed15211e6dbe4bb5aa86</anchor>
      <arglist>(SoState *state, int &amp;lastenabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableRectangle</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a8454a3c9f2a528ca15244df55ab42b74</anchor>
      <arglist>(SoState *state, SoNode *node, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableCubeMap</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a2cf304a93dd719b2e5a867b706603188</anchor>
      <arglist>(SoState *state, SoNode *node, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableTexture3</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>ab8be46bcf7093612e708a7a7e42e6be6</anchor>
      <arglist>(SoState *state, SoNode *node, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mode</type>
      <name>getMode</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a38f62c55e0218f34f7f81ada9d4050d7</anchor>
      <arglist>(SoState *state, const int unit=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>disableAll</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>aea40e5b1d030d7a6a2e840a0f93b8c9c</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a9190c69d99f6e18777595e11f8b394d1</anchor>
      <arglist>(SoState *state, const SbBool enabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a2e611657feb46f68c81522c8da1629d0</anchor>
      <arglist>(SoState *state, SoNode *node, const SbBool enabled)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoMultiTextureEnabledElement</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>aeebf241e4b747f76f1d7d62455e56d6e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoMultiTextureEnabledElement</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a70eb4aec0c633b9df52967f89bcf4723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMaxUnits</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a26ca62f31318b66e50d9726ac682021b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isEnabled</name>
      <anchorfile>classSoMultiTextureEnabledElement.html</anchorfile>
      <anchor>a8dab1d8dd0e0227cfdf66db0cc222e7a</anchor>
      <arglist>(const int unit) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMultiTextureImageElement</name>
    <filename>classSoMultiTextureImageElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a665311d3c877b003c9cc305481eb2dbe</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a55c388e636912dd7ab8a2e536b426457</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>hasTransparency</name>
      <anchorfile>classSoMultiTextureImageElement.html</anchorfile>
      <anchor>a8bcd170400d5828202388bd96c913675</anchor>
      <arglist>(const int unit=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoMultiTextureMatrixElement</name>
    <filename>classSoMultiTextureMatrixElement.html</filename>
    <base>SoAccumulatedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>ac2e89928f4fed4975a9b3f07afa59b71</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>a01d93af1d4ca8cbcdf1f50d77cd43042</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multElt</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>acb72049d5814678cecf76a2ccc162be6</anchor>
      <arglist>(const int unit, const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoMultiTextureMatrixElement.html</anchorfile>
      <anchor>a181f56f9fc4c928d977bace3d232cf36</anchor>
      <arglist>(const int unit, const SbMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNode</name>
    <filename>classSoNode.html</filename>
    <base>SoFieldContainer</base>
  </compound>
  <compound kind="class">
    <name>SoNodeEngine</name>
    <filename>classSoNodeEngine.html</filename>
    <base>SoNode</base>
    <member kind="function">
      <type>void</type>
      <name>evaluateWrapper</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a93cc3e9cbd86d6eaac05cac714d6617f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOutputs</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a32f553d015208edea8dff8c9e913cf85</anchor>
      <arglist>(SoEngineOutputList &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngineOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>abd9dd32cf1b2449b08603828c77ebe77</anchor>
      <arglist>(const SbName &amp;outputname) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getOutputName</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a67e8549b5376a02fff985887b85674f7</anchor>
      <arglist>(const SoEngineOutput *output, SbName &amp;outputname) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>aa7da66917b1806e0a9b19f7f990e72b5</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNotifying</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a38f6278b40a72c4195556ba11493c3b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a40413791c6f3f3421183a4e499db195a</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInstance</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a37846b3b14d6cc800ed030b6401d7066</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoNodeEngine</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>adc20dc10d53e636f98add5e040008aae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNodeEngine</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a708af696531402e5d052db42691535b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a6544608ae91070d36dadeb27b96cc489</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a95569ab1ef2a6821a2277fb549342305</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a3d7f09a6ee88f91a718ef692b47d25f9</anchor>
      <arglist>(SoField *which)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeOutputTypes</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>af30c4fefca9bafed14e9eca71390a413</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoFieldData **</type>
      <name>getFieldDataPtr</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a2167067a23c2ee1b695ca07a6d8d88cd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const SoEngineOutputData **</type>
      <name>getOutputDataPtr</name>
      <anchorfile>classSoNodeEngine.html</anchorfile>
      <anchor>a6c2bbc91b1dcddf720bfa2a286853bb9</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNodeKit</name>
    <filename>classSoNodeKit.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoNodeKit.html</anchorfile>
      <anchor>a008ec3602a4cc4127902c25b29cf55b4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNodekitCatalog</name>
    <filename>classSoNodekitCatalog.html</filename>
    <member kind="function">
      <type></type>
      <name>SoNodekitCatalog</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a21c68eb07748783a244b0af93e14c1be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoNodekitCatalog</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a970382d3ef0253a691ae00e3db6345dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEntries</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a83349d35f6e6647a20f0306727c946f9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPartNumber</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a070c7f2285a5374ebb4faa4c1e2f7157</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getName</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a8ca071b6f6846a58237b4fdef03e2cb3</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a39a8eaf198df7c8cd5dc282a189df24b</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a644f88d54b0eef62f8949b81c5909cab</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getDefaultType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a456de2da182ec81c6093239cdf3fbd76</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getDefaultType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a6b3edee43931b91de43527c8fa745fba</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNullByDefault</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a30b1e5facd296dcd9ef195db6b14da20</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNullByDefault</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a3963d257a86d4a2254177f1fec078b34</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isLeaf</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a522b0531b1109aab0c1d2053f2a41ecf</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isLeaf</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a1c5a9ce6dd7c9aca2dca131147b039b0</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getParentName</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a7a8796f31734c905f90f38c6727b7bac</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getParentName</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>af76eee5631600dc0d4d70c66d015c85b</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentPartNumber</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>acab56d6ab8f82f812fcc9205995a0d42</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentPartNumber</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a76181ee3622cf7ae3f7508cd2785d087</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getRightSiblingName</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a1517474c18c79a1174f1540ea9a5d55c</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getRightSiblingName</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a97db17efd0ffab310ef16f687b6caf83</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRightSiblingPartNumber</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>af147f9123b1fdbb330f883bb34b6ab38</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRightSiblingPartNumber</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a3af9c8d0a0849539a1afb4d27125131c</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isList</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>adfb367a25a05dbf5b85fdf047bfe1868</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isList</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ac5ccd4f18152f7eae32105b613f3ca1d</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getListContainerType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a23cf8051c852192920ca750b05902d42</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getListContainerType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ac8034493eddcf5eb127a3b74aed5ade1</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const SoTypeList &amp;</type>
      <name>getListItemTypes</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a26fae404cc31bc44da5138bf426953f7</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>const SoTypeList &amp;</type>
      <name>getListItemTypes</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>aa60ce2e9f0552409222683614cd42c39</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPublic</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a7a3c44408a3b1d16367c0720088f1045</anchor>
      <arglist>(int part) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPublic</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a64fda8180f53f5242b2c8fb3715f5a27</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>SoNodekitCatalog *</type>
      <name>clone</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a0a282970cfca5c4e6396a79c2f011fbd</anchor>
      <arglist>(SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>addEntry</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a493028c3171b482d50ca3584bba9a8ba</anchor>
      <arglist>(const SbName &amp;name, SoType type, SoType defaulttype, SbBool isdefaultnull, const SbName &amp;parent, const SbName &amp;rightsibling, SbBool islist, SoType listcontainertype, SoType listitemtype, SbBool ispublic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListItemType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a9fb2b11ca99ec73969da012b5cfe82be</anchor>
      <arglist>(int part, SoType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addListItemType</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ac2d98fbceba797420f2e63d9617e6085</anchor>
      <arglist>(const SbName &amp;name, SoType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>narrowTypes</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ab6a65d84a8beabe1b65a5cf13ac91872</anchor>
      <arglist>(const SbName &amp;name, SoType newtype, SoType newdefaulttype)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNullByDefault</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ad73c8908fe7f5b0de0bc9f71d42564aa</anchor>
      <arglist>(const SbName &amp;name, SbBool nullbydefault)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>recursiveSearch</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ace86fd62b00bde426e1d08c04e127922</anchor>
      <arglist>(int part, const SbName &amp;name, SoTypeList *checked) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCheck</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>a482be783903441ede04cb75846bcb7b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoNodekitCatalog.html</anchorfile>
      <anchor>ad32a1fe319c0a1e38dceea40f65cbab2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNodeKitDetail</name>
    <filename>classSoNodeKitDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a63b36f121db008fcb42217350303337f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNodeKitDetail</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a49132125e7e3dfa2d7fc26eb695682c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNodeKitDetail</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>acf9d418177da275c3811ad2824005a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a5710b998c8e8a4b0c2babbfea4e3ee64</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeKit</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a830758a446544062fcab1f99a1311ef2</anchor>
      <arglist>(SoBaseKit *kit)</arglist>
    </member>
    <member kind="function">
      <type>SoBaseKit *</type>
      <name>getNodeKit</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>adea024fe1dbe7bc8790ac37b30594c20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPart</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a4a2185278f05521b4c6df1d4211c98bd</anchor>
      <arglist>(SoNode *part)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getPart</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a1c0c242caa266f634a0ce7cd28f5bdf2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartName</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a70114e163304ff318e0b39e20c2f35f4</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const SbName &amp;</type>
      <name>getPartName</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>ab3e6915e5760813091be092c15e3439b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoBaseKit *</type>
      <name>myNodeKit</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a051399a0a9872fb2b88911efab580ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoNode *</type>
      <name>myPart</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a72ccacfcc796d1f9c7114f545ca06c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbName</type>
      <name>myPartName</name>
      <anchorfile>classSoNodeKitDetail.html</anchorfile>
      <anchor>a0b4edca9bdd6c91883b664126fbf8c7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNodeKitListPart</name>
    <filename>classSoNodeKitListPart.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>acaa9d68c314e92d6297ff70ca5ea6b93</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNodeKitListPart</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>aacbae6fc4f8b1b7955f09caffd70d926</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getContainerType</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a0b42aa5f7f65aa04b55a4f48a2eff178</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContainerType</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a8de46164a424a023bbfb9d0a90bd92c2</anchor>
      <arglist>(SoType newContainerType)</arglist>
    </member>
    <member kind="function">
      <type>const SoTypeList &amp;</type>
      <name>getChildTypes</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>ac6b3e7427a98afc138fe8a492daa72f9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildType</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a2c3732febfb0ff5925c6838ea692f970</anchor>
      <arglist>(SoType typeToAdd)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTypePermitted</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a357620a0a06419f9d12837ed445f4a9c</anchor>
      <arglist>(SoType typeToCheck) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isChildPermitted</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>af148c67db28fa255a08307a578761baa</anchor>
      <arglist>(const SoNode *child) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>containerSet</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a741334835fea98314e6f353110c18619</anchor>
      <arglist>(const char *fieldDataString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockTypes</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a9030b9bc899b21c18a22da8e3d9f62e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTypeLocked</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a0ef89d7cbdd9e0b830e49aaf3ffa477b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a36b268c13ffd50300622651f5244b670</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>af1f0f063fec383b29d0c1242645fb3df</anchor>
      <arglist>(SoNode *child, int childIndex)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a2c7f4ef03d2d27cdcf797e5582821df6</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a6432e75bc0a84d43e49ce05d1a2ae8eb</anchor>
      <arglist>(SoNode *child) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildren</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>aeb130f374d6a5b02daabad2b03106661</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a84b4e5324bbccce6200b5b1c3f91d171</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a18f010bdb9d39c26e2202fe2bc92ff8f</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>aa4a3602b1db8118470ce841c250bf454</anchor>
      <arglist>(int index, SoNode *newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>ae4dba51f7db4d829bc6be7dfce106d75</anchor>
      <arglist>(SoNode *oldChild, SoNode *newChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a606b1d5c08c51722a5168e8c8507835a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a21bbd14f2a1b4f0f3d82fef87c783c15</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a12a8d1e89f0c085b5c759960821e99c2</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a8ebf8666820a3531f5c367cc38a3102a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a4dfd89d3309e12de0fe8426139961ad6</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a0f320f0d1261b44e4887aec53d85d818</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a1919e9b426683c55803656956ea4d17f</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>aa53ce751cc4b32a4ca6b6d128329baea</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a326afbd057ac629955e73cbe0a4296cc</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a802b0df26423d87f8fcf1ad25844d1cd</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>ae09ad69fda1d8ab919b7fc46bb11ea21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a0cd616cd4955ab9de69b465ae130a4d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a87683f4ff39264b8807f5113748d340b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNodeKitListPart</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>ab4eb32286233f77774a6fee952da3df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoGroup *</type>
      <name>getContainerNode</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>aa3408947d50597027d39e21d0a565e63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>aa7272605375093b31d7751b4ca1029d9</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>a3ced3ddfc281731f112d1e75e7aa894f</anchor>
      <arglist>(const SoFieldContainer *fromFC, SbBool copyConnections)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoNodeKitListPart.html</anchorfile>
      <anchor>ae8e7deb66408ebf7bf2c0169c709090d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNodeKitPath</name>
    <filename>classSoNodeKitPath.html</filename>
    <base>SoPath</base>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a624f01f0eb5dba0b226b51b42092818f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getTail</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a88d954807186707f08380257028bf59e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNode</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a05a011e9f733636f81f58bd2d0c86116</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNodeFromTail</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a86f2567ca9bde15d2b82d12dd8088848</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>aaa7b5e960e4c751a0e5a7c3c8f75c1fe</anchor>
      <arglist>(const int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>ae3218e321593b0f509f91e9ca2d8de56</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a1c944ad83c395fb0cbb6c4248cbe663b</anchor>
      <arglist>(SoBaseKit *childKit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a0409937d795db96449e75dd65fb1647f</anchor>
      <arglist>(const SoNodeKitPath *fromPath)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>containsNode</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>aa4501d314bcab9d2e7faba127b0b646c</anchor>
      <arglist>(SoBaseKit *node) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFork</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>aaacc3e802668f4772f39d20e646fc233</anchor>
      <arglist>(const SoNodeKitPath *path) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoNodeKitPath</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>ab1419322991dc95ed80ebada53ee6e76</anchor>
      <arglist>(const int approxLength)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNodeKitPath</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a0f2b9d6aff34f7fec50b5aebe27fe554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>operator==</name>
      <anchorfile>classSoNodeKitPath.html</anchorfile>
      <anchor>a8067b1878ec9a4848bb132f84b37c66f</anchor>
      <arglist>(const SoNodeKitPath &amp;p1, const SoNodeKitPath &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNodeList</name>
    <filename>classSoNodeList.html</filename>
    <base>SoBaseList</base>
  </compound>
  <compound kind="class">
    <name>SoNodeSensor</name>
    <filename>classSoNodeSensor.html</filename>
    <base>SoDataSensor</base>
    <member kind="function">
      <type></type>
      <name>SoNodeSensor</name>
      <anchorfile>classSoNodeSensor.html</anchorfile>
      <anchor>a9d61b97e7ff67f105b99ddffe15ef6ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNodeSensor</name>
      <anchorfile>classSoNodeSensor.html</anchorfile>
      <anchor>ae6c56d5dff51e67fcabfa81f4abbf79a</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNodeSensor</name>
      <anchorfile>classSoNodeSensor.html</anchorfile>
      <anchor>a9caae5b30dc282640355b8abf38fe4f7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classSoNodeSensor.html</anchorfile>
      <anchor>acb9a4d413e1e2aa081ffaf3988e3f6bd</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>classSoNodeSensor.html</anchorfile>
      <anchor>abb62ded137dcd724e2dec2364f65d7ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getAttachedNode</name>
      <anchorfile>classSoNodeSensor.html</anchorfile>
      <anchor>a7378a6f5d98d34dc6a90dbfb89f0399a</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNonIndexedShape</name>
    <filename>classSoNonIndexedShape.html</filename>
    <base>SoVertexShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>a60386064f3f1564bd9eb9fa52cd50a84</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a06a7390e836c583fcd9e840ccd670a52</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNonIndexedShape.html</anchorfile>
      <anchor>afd1b0d0f9bf1140f3c0d6f2fbba63f30</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormal</name>
    <filename>classSoNormal.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>acd5e5d38c5cd99e4ecb0be85c093cd1e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNormal</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>a1fa1719b1d6cd9004af09733923c7cb0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>a891f460ab012b5087ebb49f368aabf6d</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>a49dc995bfe81720fb30040a5fbbfa72e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>ad5832fc6eb4a17282a9d02cc0eb0fb38</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>aa31eeccc607846914e08261b2858f2f2</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>ab06b674a8585b9d68614b9e665ef7f6f</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>vector</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>a12fc0a7b16402d6f0b15ad76a22d2ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>acdc9270529d42bb2d54503f3b5f783ed</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNormal</name>
      <anchorfile>classSoNormal.html</anchorfile>
      <anchor>aa340cf2f69e722be4c5d5b1172ef027a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormalBinding</name>
    <filename>classSoNormalBinding.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>abac17246b7bc2d3be7f03d80556cba91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>afc9b1c7df130f1e97ccefd95c6e7de86</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNormalBinding</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>acce671ebf57f859f9db9d5c6ab41657a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a02178113ee957f5ef763063fb5c2298b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>af3a3ee4e7131230ffb61fe40d85fc95b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a6cd99b236d196df8658f5de04bdec759</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a008c60dcc7a8ba84053c8afb9a4decd9</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a6d88dc3f5145224fc8b63da4a52d0bc4</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>value</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>adb4d71cf892697e6b4d308f55561e3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a2ed6eadc16d06eea95f028d3915fcf61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNormalBinding</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a9abda22da81e8e173ecafecaa198782b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoNormalBinding.html</anchorfile>
      <anchor>a32ab1c5b7435fbbfeb7789cd4d020c97</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormalBindingElement</name>
    <filename>classSoNormalBindingElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>aac0e8417b30d1e5910a9bf5e2cd6c009</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>a630c146cf89169c29d938f5470f3f531</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>ab3b360db9eaeb586a2ffdc6042f87f4e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>aa06f880913f2403f83fab3817a90d49c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>a4d06ba7a4ab5488008cca4fd2372f073</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>ac7e327b19ca9e1b0b107fca086bdc326</anchor>
      <arglist>(SoState *const state, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>get</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>a8bc2eda3153c3a93a41c93496359c17b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>getDefault</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>a9e445c554b4df3db52f8377281bb60f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNormalBindingElement</name>
      <anchorfile>classSoNormalBindingElement.html</anchorfile>
      <anchor>a5f1152a5d4bcab862acc9798e74f4a28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormalBundle</name>
    <filename>classSoNormalBundle.html</filename>
    <base>SoBundle</base>
    <member kind="function">
      <type></type>
      <name>SoNormalBundle</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a175dedbe45df71ed253c0cd016f3c1d3</anchor>
      <arglist>(SoAction *action, SbBool forrendering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoNormalBundle</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a7f08b8f73943420cf9e896d2fa86840c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>shouldGenerate</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>afdb769b4e28cd20b37182d4e29b1a52d</anchor>
      <arglist>(int numneeded)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGenerator</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>add80eab75f0567854eadf422b72f0d4e</anchor>
      <arglist>(int initnum=100)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPolygon</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>ac5233061d688590d91d5f0cf932b7a61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>polygonVertex</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a28ba99cd7f2d38aa3c5f0cee59a7add1</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPolygon</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>ab03148682921c9a8d3017294eb05f3a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triangle</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a9c7ab71ed84cda1ff7e10dd138a185d6</anchor>
      <arglist>(const SbVec3f &amp;p1, const SbVec3f &amp;p2, const SbVec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>af723c14d943bb54a74ab84b961f8ed6d</anchor>
      <arglist>(int startindex=0, SbBool addtostate=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getGeneratedNormals</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>adefd4ace70eaf7fc5282284c3035a49e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGeneratedNormals</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a240f92ce820a4f896277b2f219f4f43b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a0eab7ee8f75ae530085c43a7080a7030</anchor>
      <arglist>(int32_t num, const SbVec3f *normals)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>get</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a76e841b7a7ec995b1e8d75ed12b4de94</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoNormalBundle.html</anchorfile>
      <anchor>a0216cac3edf9bfe015966bae01f0b482</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormalCache</name>
    <filename>classSoNormalCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoNormalCache</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a2c94bc86711d0e48fc91cb6172bb59dc</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNormalCache</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a374079a66605b434019f1df521c580a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a292b138426df55af685529bc9230f142</anchor>
      <arglist>(const int num, const SbVec3f *const normals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a2cadabedcab481668c8eb56063735dbe</anchor>
      <arglist>(SoNormalGenerator *generator)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNum</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>affef6850c255f7f2107fdbfe8ebbfacf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getNormals</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>aec10bf612b1f5405a27cc4a7c330e64a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIndices</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a21ef79a2b32f7db7ee9f45b0d035895e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getIndices</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>ad76c8b310da41036126479906a90a109</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerVertex</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a878c67e6ff119dff978082528f427071</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int32_t *coordindices, const int numcoordindices, const float crease_angle, const SbVec3f *facenormals=NULL, const int numfacenormals=-1, const SbBool ccw=TRUE, const SbBool tristrip=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerFace</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a698615f1676fa126062959875b631b30</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int32_t *coordindices, const int numcoorindices, const SbBool ccw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerFaceStrip</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a9c2f059ccd6d8921a9d95aff8ba78f21</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int32_t *coordindices, const int numcoorindices, const SbBool ccw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerStrip</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a31dc27ee3196e467a8857dc90ead11f4</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int32_t *coordindices, const int numcoorindices, const SbBool ccw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerVertexQuad</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a8816d3c3f2422f31edb1659943f75847</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int vPerRow, const int vPerColumn, const SbBool ccw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerFaceQuad</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a473e39b801e7a2b5a3afffbdc38f3ef2</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int vPerRow, const int vPerColumn, const SbBool ccw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerRowQuad</name>
      <anchorfile>classSoNormalCache.html</anchorfile>
      <anchor>a076429b82121b45ca268eb986cfd2361</anchor>
      <arglist>(const SbVec3f *const coords, const unsigned int numcoords, const int vPerRow, const int vPerColumn, const SbBool ccw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormalElement</name>
    <filename>classSoNormalElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoNormalElement.html</anchorfile>
      <anchor>a7b5834488e142f9e83b113633b0b70c4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNormalGenerator</name>
    <filename>classSoNormalGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>SoNormalGenerator</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>ac8fb1dbd29f1c38356e5c64502c84369</anchor>
      <arglist>(const SbBool ccw, const int approxVertices=64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoNormalGenerator</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>abf41bbee6e824796bb1f29468007af48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a66176ab631d164294bed5f2400a7c106</anchor>
      <arglist>(const SbBool ccw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPolygon</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a3a7820bc158972f62b92142791349b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>polygonVertex</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a16775df221913f227ff02c2ce3155bec</anchor>
      <arglist>(const SbVec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPolygon</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a358f8df7dda6a9dc99e914cf87cf48e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triangle</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>afe1cd3c1042ea0d331ff181ecf7a35a1</anchor>
      <arglist>(const SbVec3f &amp;v0, const SbVec3f &amp;v1, const SbVec3f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quad</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>aaf193c451b8d0318427ce42d2f6f192c</anchor>
      <arglist>(const SbVec3f &amp;v0, const SbVec3f &amp;v1, const SbVec3f &amp;v2, const SbVec3f &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>ab26d17c59c008e9d77228512e5b894c3</anchor>
      <arglist>(const float creaseAngle, const int32_t *striplens=NULL, const int numstrips=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerStrip</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>ad47c54800d433f6aa115d17547c2d8e9</anchor>
      <arglist>(const int32_t *striplens, const int numstrips)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePerFace</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a1c198dfe0a6a050d205c28a043fb1e97</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateOverall</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a721100b18cee07fb847f3f5af202d157</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNormals</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a217ba951df3be0ceaed023783df45572</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumNormals</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a0eff345d55380b6b60cbbae161794cc4</anchor>
      <arglist>(const int num)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getNormals</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>ab911f734b4d659b39a0e79a5845c9eca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a5771c66dc3275cb9005f29b4130db5fd</anchor>
      <arglist>(const int32_t i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classSoNormalGenerator.html</anchorfile>
      <anchor>a6bf4e3d3a9aec6cea0f90c47796ccf86</anchor>
      <arglist>(const int32_t index, const SbVec3f &amp;normal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNotList</name>
    <filename>classSoNotList.html</filename>
    <member kind="function">
      <type></type>
      <name>SoNotList</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a92b6e203e1252283476e266a91230a89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNotList</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a82f4a011075ee5183376392a315ae57f</anchor>
      <arglist>(const SoNotList *nl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a268385c91be6b0a91b06d2e82b6fca1c</anchor>
      <arglist>(SoNotRec *const rec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>abfe693b2c5574417ea58a7fdc16a3e84</anchor>
      <arglist>(SoNotRec *const rec, SoField *const field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>af0491f9aa4d32754bb75f38d2d10b310</anchor>
      <arglist>(SoNotRec *const rec, SoEngineOutput *const engineout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastType</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a3ce00891aad5c25824fe4433db95a70d</anchor>
      <arglist>(const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>SoNotRec *</type>
      <name>getFirstRec</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a0a3c2c0ecda9981eaca64d7761d102da</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNotRec *</type>
      <name>getLastRec</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a3b27698a942e817b0082f192c7d62b3a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNotRec *</type>
      <name>getFirstRecAtNode</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a47f7b933ac71766a6df17bb73553e832</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoField *</type>
      <name>getLastField</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a918124d59ca16142eeb51352c7596af5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoEngineOutput *</type>
      <name>getLastEngineOutput</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a53428710d92a1984bdacf4af1e64b1a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getTimeStamp</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>af063297d2471cd597c589a3dd0d787c7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSoNotList.html</anchorfile>
      <anchor>a03bb0f89adc157aa9c4ee286175c8b0e</anchor>
      <arglist>(FILE *const file=stdout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNotRec</name>
    <filename>classSoNotRec.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>a3dadebf7917d6722df3485e7971ca25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OperationType</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>a881de32e1ff224860ce27dd27b638e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNotRec</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>abaaeeb7bd0ae0083307e5c81e7dfeef0</anchor>
      <arglist>(SoBase *const notifbase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>aeeb4a71b12daa304cf54adf2f140ab97</anchor>
      <arglist>(const SoNotRec::Type type)</arglist>
    </member>
    <member kind="function">
      <type>SoBase *</type>
      <name>getBase</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>a0f71f7948adee96a719503e3953db80b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoNotRec::Type</type>
      <name>getType</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>a87ebe9e28fc97a58cec8bba6b71b6ec1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoNotRec *</type>
      <name>getPrevious</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>aa15e07fd64b62411960e6df69a28d643</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrevious</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>aaf269e73def30a2ee874d442f4510006</anchor>
      <arglist>(const SoNotRec *const prev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSoNotRec.html</anchorfile>
      <anchor>a99efd001681ca211e7104c70a07d6e46</anchor>
      <arglist>(FILE *const file) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNurbsCurve</name>
    <filename>classSoNurbsCurve.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a8af6b8d9c8edf4323beef5086960aed7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNurbsCurve</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a707a7407ccfa95a9218c0886f309314f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a773d2d1e2bdd31cc85c8517712f55484</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a6658f84a649650ae5e0cc09f04b719d8</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a00ad5547d179320656cdc8ea180f9a51</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a1cecea20fd238b26d9663dd3ee072637</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPrimitive</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a39b034fa1f0868a1a861c58f7d55b1a8</anchor>
      <arglist>(SoAction *, SoPrimitiveVertex *)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numControlPoints</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a91469a8ac2ae7fab28ad6669e92b0dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>knotVector</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>aba42bb016762b862804d5ba3df5eb7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>afada574a05d5804e97637b24152f1af9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNurbsCurve</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a77f9603cb196b4e25df65fa5827c24b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a810f685acd09413fb856e36ba2a81f9c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>a1a3c902f86997bb9cf320366140eba13</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createLineSegmentDetail</name>
      <anchorfile>classSoNurbsCurve.html</anchorfile>
      <anchor>ae4288e967530d715321e144be343b528</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNurbsProfile</name>
    <filename>classSoNurbsProfile.html</filename>
    <base>SoProfile</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>abcc9ef35346fe624761d12fddd759a2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNurbsProfile</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>ae72ccd03030cfc36dfe8f51443a39267</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTrimCurve</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>ab4d79b0dae4accddc7181c6dd7624e58</anchor>
      <arglist>(SoState *state, int32_t &amp;numpoints, float *&amp;points, int &amp;floatspervec, int32_t &amp;numknots, float *&amp;knotvector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>a55ebbb02b9a31fc70a5c5427db8cb4fb</anchor>
      <arglist>(SoState *state, int32_t &amp;numvertices, SbVec2f *&amp;vertices)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>knotVector</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>a50428ab26e0d898331492ed34faf0d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>a9f6fa2426ed3c3f9ccd711bc36d122f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNurbsProfile</name>
      <anchorfile>classSoNurbsProfile.html</anchorfile>
      <anchor>a1e5cb855e47b5428b5dcc80068048756</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoNurbsSurface</name>
    <filename>classSoNurbsSurface.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>aefafd4e7996fd247d3038209307a75f3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoNurbsSurface</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a021fc183fe9351d26a3f3a50444267ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>ab3a2c4796906a1b55047c1885888aa87</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a15e692f7a59fa12e89e4dca22ea0a4c7</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>aaec204eb1b27b630ae589a7fa902d2f9</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPrimitive</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a3b81b3723118cca4b254d6a4cc2d66f5</anchor>
      <arglist>(SoAction *, SoPrimitiveVertex *)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numUControlPoints</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>afa7908b93542130032620e3c29d78370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numVControlPoints</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>acdf7111479729258a4103c9df16bb4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numSControlPoints</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a9cfd3e94de4ecc0b8766effca8577a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numTControlPoints</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a83e266e1b116e8f6fb4a0b8fb364f18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>uKnotVector</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>ad1d39130138f869f47acbfda3879e72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>vKnotVector</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>ad029ec34de725d2b7b6ad77d0d17493c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>sKnotVector</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a360f3db13ba21273f9dd72f7691428c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>tKnotVector</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>ae21f99c3146dc2a9a2ec0d897aa4ded2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a52668983b01ec1f12d7b46fd24fb9616</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoNurbsSurface</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a9aa3ad64326b6c3de093e1e9bc44e723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a506313fbd812567918fbc7d44317dfe1</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>acf0a98d57b8122f2c3ce8b9188c77b8d</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoDetail *</type>
      <name>createTriangleDetail</name>
      <anchorfile>classSoNurbsSurface.html</anchorfile>
      <anchor>a1b6da551d2e6548baff48343e2840594</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOffscreenRenderer</name>
    <filename>classSoOffscreenRenderer.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Components</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>acd70da14761ef3b54c07d0e6f642a338</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOffscreenRenderer</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a77b05979638e69baa4b8df817f5c2b6f</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOffscreenRenderer</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a68bd02d137b6f8edc298b6099ab15c6b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoOffscreenRenderer</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>adff1873304cf86867b06a4b146c1f764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponents</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a009e27700869d11686d47d61c5e53a72</anchor>
      <arglist>(const Components components)</arglist>
    </member>
    <member kind="function">
      <type>Components</type>
      <name>getComponents</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a9cdc6fa3f664102cd419596f7b14407f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>aafc12ce58b3ac94b37b0cbf79f548214</anchor>
      <arglist>(const SbViewportRegion &amp;region)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a770b8bd8a6f21cdd91e06a8ce52a6317</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>ac59934bffc73bbfa8242ab16e9a0000f</anchor>
      <arglist>(const SbColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>ac70e76193eb78c01365fd975586f9995</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLRenderAction</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a9e0d9ddb3466b29d38f9873a30530d8d</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>SoGLRenderAction *</type>
      <name>getGLRenderAction</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>aa7e4f0a784a45bf51a6ab3dcd040b35c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>render</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>ae2ae3abd666f819002798abad9385638</anchor>
      <arglist>(SoNode *scene)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>render</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>abaa113ccb637bf0d213d64883ec01123</anchor>
      <arglist>(SoPath *scene)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getBuffer</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>aaf272a90179a0bbb3540f0811d6cadbd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const void *const &amp;</type>
      <name>getDC</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a308b1d55a237cc2260593086f7246bb3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToRGB</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a13fe56cc8079f22d3d768adda9b7e0f6</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToPostScript</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a6c8e92ed57feb4b7ae18ffccf1b59ca3</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToPostScript</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a367300d1931d1e5e6f6d9e708a7956a8</anchor>
      <arglist>(FILE *fp, const SbVec2f &amp;printsize) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToRGB</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a2a15945cad934827d459af3f4f22bc33</anchor>
      <arglist>(const char *filename) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToPostScript</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a6c3530a99129996f36edd34bdc9c29ed</anchor>
      <arglist>(const char *filename) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToPostScript</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>af6f2372e7cd95af42c2d36b8ad7cab71</anchor>
      <arglist>(const char *filename, const SbVec2f &amp;printsize) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isWriteSupported</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a0c561291489f9a892eb6d0c89835b625</anchor>
      <arglist>(const SbName &amp;filetypeextension) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumWriteFiletypes</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a81d48f9b548a4bdaa9097aeda79e7058</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWriteFiletypeInfo</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a3d6757d586bdaaa32e19cb9db161756d</anchor>
      <arglist>(const int idx, SbPList &amp;extlist, SbString &amp;fullname, SbString &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>writeToFile</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>ac5d05306b2e7ff55482cd8f24319f544</anchor>
      <arglist>(const SbString &amp;filename, const SbName &amp;filetypeextension) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPbufferEnable</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>ae400ae638df4585c8881ee718ccb8189</anchor>
      <arglist>(SbBool enable)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getPbufferEnable</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a46f38ed43f165aa6b98fd2b4e2b9b0bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getScreenPixelsPerInch</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>a83ce4f862d4bc99aaa72368a638c587b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec2s</type>
      <name>getMaximumResolution</name>
      <anchorfile>classSoOffscreenRenderer.html</anchorfile>
      <anchor>ae16cf2d7ac5a87dae6a6888e0ec9bc94</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOneShot</name>
    <filename>classSoOneShot.html</filename>
    <base>SoEngine</base>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>afc3baac087b8c4478e49448e5a66284d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a4d38c0f265c9e9b19f9aa6275034accb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>af7e35d2a21744ba67cc56dd4bed4bf69</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a884864cb56e91a86174976e080c1bcb5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOneShot</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>afe76b1224b4a444946eb5959ae6c7024</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>timeIn</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a523667f0cf215af1aa0ebdf6453efee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>duration</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a5402f0539f89087915ae9ce39b83c9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>trigger</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a9ac64496a4b06c4563d6c5918f3247d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>flags</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a40d1a6edce296a08b043c019d1f1a76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>disable</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>ad10b5ea160e8415ac604c8babfa9881d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>timeOut</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a1d64e33e3adb42e11fe53c65fcfd54c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>isActive</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>ab8f275e7d87075c9910ce3861b726294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>ramp</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>a965fa27c10f46fd0026fa50dcb77fd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoOneShot</name>
      <anchorfile>classSoOneShot.html</anchorfile>
      <anchor>aa648206d54df34be28a70adab0e16abe</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOneShotSensor</name>
    <filename>classSoOneShotSensor.html</filename>
    <base>SoDelayQueueSensor</base>
    <member kind="function">
      <type></type>
      <name>SoOneShotSensor</name>
      <anchorfile>classSoOneShotSensor.html</anchorfile>
      <anchor>a224e5711152cd08e4779ed0d991526d8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOneShotSensor</name>
      <anchorfile>classSoOneShotSensor.html</anchorfile>
      <anchor>a7dfa67adceb3518378aa6ca78cfc5d2e</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoOneShotSensor</name>
      <anchorfile>classSoOneShotSensor.html</anchorfile>
      <anchor>ac41a2d7885758bc62f8783cd50b3b5a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOnOff</name>
    <filename>classSoOnOff.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>abd44b0da4cc0161623c339b3f3394bd8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>aa7a5855b2b9b4873016ff362cd03ed8f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>ac7d7fc4cb4ad18367fae10b181547989</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOnOff</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>a205592b8ed646c55edf02b080ee58e62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>on</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>aa07267d61496b90f093bf0c8b8105d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>off</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>a767801c6d7525f407337a1dcddbbc0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>toggle</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>ad77a578627c17733b24827677a0da4ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>isOn</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>a20a312cefc57afe39efaf44de5d0fc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>isOff</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>a4c6ec5c2c21dc0a24928d385b2ad383b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoOnOff</name>
      <anchorfile>classSoOnOff.html</anchorfile>
      <anchor>a961f6a2f666d49542c069d8226585552</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOrthographicCamera</name>
    <filename>classSoOrthographicCamera.html</filename>
    <base>SoCamera</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>a32c888a60ab33e0e7b7261ce9e10c9db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOrthographicCamera</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>a3ac5e89efffdb019d0b20005ac204692</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleHeight</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>acb614f185ad090062266cfbcb9a03267</anchor>
      <arglist>(float scalefactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbViewVolume</type>
      <name>getViewVolume</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>a97b3f199148d18644872585443d70938</anchor>
      <arglist>(float useaspectratio=0.0f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>viewBoundingBox</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>a16be61ad5950ab52c3809854c67efa24</anchor>
      <arglist>(const SbBox3f &amp;box, float aspect, float slack)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>height</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>afa9dc163f3356dee50e46ca66f31c2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>a64959c96ebe70e0a1fd242644ab8c97a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoOrthographicCamera</name>
      <anchorfile>classSoOrthographicCamera.html</anchorfile>
      <anchor>ac36552953c97da2e4b494b672ae30493</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOutput</name>
    <filename>classSoOutput.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Stage</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af5f67f92434acc6d7c7619d3ef1dfb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COUNT_REFS</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af5f67f92434acc6d7c7619d3ef1dfb7fae0d98ba0aaa299ac5309ba8280c54282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WRITE</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af5f67f92434acc6d7c7619d3ef1dfb7fa65828b821d5c69d570a053c2f0b032b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Annotations</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a6557a37a92efd9a0dc80f717f832f65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADDRESSES</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a6557a37a92efd9a0dc80f717f832f65cae6f5a8f71f72eb2287c6c5f9715de398</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REF_COUNTS</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a6557a37a92efd9a0dc80f717f832f65cab8cd4cd580cbe52f6f29a34b3593edb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOutput</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af6b0a04ee8bfd49d99fe40d691dc2564</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoOutput</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>abb7cc39477298359896a2d542a8996c4</anchor>
      <arglist>(SoOutput *dictOut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoOutput</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a670ea6c80f55d25c7b0021c3e86b883a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFilePointer</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a23b6ff34263ce8bbe6e6a354b8e24382</anchor>
      <arglist>(FILE *newFP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FILE *</type>
      <name>getFilePointer</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a1ac7eb115c441a430f2389fbcc9fa6ec</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>openFile</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a15bd93d4388bcbd7415c85241b2e9d3b</anchor>
      <arglist>(const char *const fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeFile</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a731b0fb2e9d1bc7022072c731a016e80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>setCompression</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>aa6e3cda480c9a958e43d49e937925911</anchor>
      <arglist>(const SbName &amp;compmethod, const float level=0.5f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBuffer</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a09e03f4b73073ca6e120029581774bc7</anchor>
      <arglist>(void *bufPointer, size_t initSize, SoOutputReallocCB *reallocFunc, int32_t offset=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>getBuffer</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a693680cac7bfcffbb201447dfed7aee5</anchor>
      <arglist>(void *&amp;bufPointer, size_t &amp;nBytes) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getBufferSize</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a30f9c9a4ac7a7f27e969381b75de4edd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetBuffer</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>afa8509851087905c9952fa03a68e489e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBinary</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ae475769e022ccd316ad1125bbda7b3d3</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isBinary</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af5bf91370930a0fbee260f35d5afd554</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeaderString</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ad993f2c040c1b39d7dc560784188847c</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetHeaderString</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a6a029142b4b708bb2f4ca4662a21fa2a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFloatPrecision</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a499be4cd2d30a68ef86849b924a1300b</anchor>
      <arglist>(const int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStage</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ad6b89daf5481cda8842a32d1731a919f</anchor>
      <arglist>(Stage stage)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getStage</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af3a93c097677d41546afea7c0805fd92</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementIndent</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a8625a0963e65ae38cf211979b0ea0c7c</anchor>
      <arglist>(const int levels=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrementIndent</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a164e1c3bc35933add8a2651905a3735a</anchor>
      <arglist>(const int levels=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ab175e8569a99c5b78a02fc4210a50d5d</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ad0fdc3bb8f3dd2c69f771f8d7c892e96</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>aea09a032e44d59688fe1855be110c4a4</anchor>
      <arglist>(const SbString &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a7f2835386710c5744793bac2fdfb3038</anchor>
      <arglist>(const SbName &amp;n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a1835bb7abf99a29d19650be36e51ee9f</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a1673aac3831873bcfa7e257175447a6b</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a9a6434dfbac3a2baf7ef766083eb7875</anchor>
      <arglist>(const short s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a24b9e65b5c83d3bf70bde83ffb55efdc</anchor>
      <arglist>(const unsigned short s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a762585e6856d8e234ae358a1e5de4c91</anchor>
      <arglist>(const float f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>aa46f450533be763ccd3f45484ed3f139</anchor>
      <arglist>(const double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBinaryArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a1d1cce06bcb3e36cefb419da32cf70e9</anchor>
      <arglist>(const unsigned char *c, const int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBinaryArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a7d676b7c5e16473572bf1c7925615600</anchor>
      <arglist>(const int32_t *const l, const int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBinaryArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a93c825150ca0a1b3bef4d41c38bda5ef</anchor>
      <arglist>(const float *const f, const int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBinaryArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a943723970330050a9d23c97a89e089e2</anchor>
      <arglist>(const double *const d, const int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>indent</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a80e9261a4563b7441d2fe7cdca92471c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a00035cbc43d148976dc9dfef26f13932</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompact</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a9ff4168e5475effe76369d9095f86ef7</anchor>
      <arglist>(SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isCompact</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a37347a8f9b7f7e5dff4f2b7e44ca9e54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnnotation</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a7edfea0bd68a9b59100464883534f64e</anchor>
      <arglist>(uint32_t bits)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getAnnotation</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a93a2381046d761beeaa7f76145bc02fd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addReference</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a3a62c959a6b070ca51af5ca64af63360</anchor>
      <arglist>(const SoBase *base)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findReference</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ae95dee389bfbbf82c8b848a5f9e79690</anchor>
      <arglist>(const SoBase *base) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReference</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a85ba02856c3f3e90753700fa51a837a8</anchor>
      <arglist>(const SoBase *base, int refid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDEFNode</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a3af119503db875683d18470c5dec34d1</anchor>
      <arglist>(SbName name)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>lookupDEFNode</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a0106943506a2ed550af5897069a80c32</anchor>
      <arglist>(SbName name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDEFNode</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a7555f4de703a968d5b00f5b044df801e</anchor>
      <arglist>(SbName name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushProto</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a5ff364eb3e0d6b21817684503414f252</anchor>
      <arglist>(SoProto *proto)</arglist>
    </member>
    <member kind="function">
      <type>SoProto *</type>
      <name>getCurrentProto</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ad593c653fd3ba9a690ee70de40ad06b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popProto</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a59dc3572204939c84da139f4ddc441e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoute</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a13040af220e1a609e2402c7b4b6a3b3d</anchor>
      <arglist>(SoFieldContainer *from, const SbName &amp;fromfield, SoFieldContainer *to, const SbName &amp;tofield)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolveRoutes</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a8a4d22c3ae245f50060e2e6ab5272012</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName *</type>
      <name>getAvailableCompressionMethods</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a902c5214a8a02777bca40f69f37a817a</anchor>
      <arglist>(unsigned int &amp;num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getDefaultASCIIHeader</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ab28e992d4158657626b1dfcca79d2ae6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbString</type>
      <name>getDefaultBinaryHeader</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af494abf9f4e052c86c9e53910fe0fc81</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isToBuffer</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a07b0d89b1e74854627f28ec3a8323a87</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>bytesInBuf</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a0536ad85df0d6660aa3d0b9208764fd8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>makeRoomInBuf</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ac0e2ef06c15f73d0b50cfa899df46d9b</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertShort</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ae722ef6508d77fec90d3842d426782cc</anchor>
      <arglist>(short s, char *to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertInt32</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>af03ec3e531799b0ab872dbd6f2feefd6</anchor>
      <arglist>(int32_t l, char *to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertFloat</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>ae2a6d2389dbb3a6fb43df619588243f1</anchor>
      <arglist>(float f, char *to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertDouble</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>aa735b7f04b8175020d674bfb3f7841e5</anchor>
      <arglist>(double d, char *to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertShortArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a0b4067438e84b6ab7b32a22cb7b5f746</anchor>
      <arglist>(short *from, char *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertInt32Array</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>aa5d1259c90e3f9d45680511216befca8</anchor>
      <arglist>(int32_t *from, char *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertFloatArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a1c28b4db51c1e81e4edc7078c43a054e</anchor>
      <arglist>(float *from, char *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertDoubleArray</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a7fb0aac2bae9ef5fabdf6dcfec9bff3b</anchor>
      <arglist>(double *from, char *to, int len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbString</type>
      <name>padHeader</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a998d4708239ebb78dc26d23a3e452794</anchor>
      <arglist>(const SbString &amp;inString)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>wroteHeader</name>
      <anchorfile>classSoOutput.html</anchorfile>
      <anchor>a115045b8a4e57f8936223a75c991e8e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoOverrideElement</name>
    <filename>classSoOverrideElement.html</filename>
    <base>SoElement</base>
    <member kind="enumeration">
      <type></type>
      <name>FlagBits</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a86547021386028749c51e7cd3cad38c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a3966fba44730dcf3c99ec5e906e1b470</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>acc982f58f20b8fae6917204722646cdc</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>acb4e5ad0be0383557b027c7130486bc3</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a3bb2427e459a281e15c4a6fa16b7a44a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0419c2b86d2326f403e64cda7cf595ad</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a38056a87f7f3a2f6a9b2801eaa89a899</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a35d8907e2a8f14b1781df6f111de2667</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getAmbientColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>aa7423f8388266902f532c513423e4418</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getColorIndexOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a2170cf7503eb4a761eb66f89a3805b94</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getComplexityOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>adbd75fa8e24a2ea1bd7b7a518e7b0880</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getComplexityTypeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a1fba4d8693689e02fccceadfbba011c4</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getCreaseAngleOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>aea21a4f721c72193385fdb0094f2607b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getDiffuseColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0d75746dc3a609cbe9a5cec222ff157c</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getDrawStyleOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a443a55aaa202eaef0409ce937e7731ed</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getEmissiveColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0ba637cdc533c0afbea5fef6b5be2fe7</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getFontNameOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a76e43dd079c0ce5b4a19294f5e7f971e</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getFontSizeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a4c06db1e667973c827c058e7fc92d8cb</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getLightModelOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a61d970749935f30c8eb68a38714cddaf</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getLinePatternOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0bdda781e2dab64df9cebefa27631ebd</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getLineWidthOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>ad6bfb7a86523f40006f53f830eb76ea9</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getMaterialBindingOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a8296c5e587f07d9c900c1cbcd39cf15b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getPickStyleOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>ad2279584837a90fbea47afba15c21f73</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getPointSizeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a1acb64026d3e557ee9faf8a7016955e5</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getPolygonOffsetOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>afbdfaac2fec0e6f54301e0bcb5f8b852</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getShapeHintsOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a39b36e49178c07f13d4ac02e5c92c483</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getShininessOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a339d656a5247b4f99ff00e0c66f31881</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getSpecularColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a72baa9c2a1eab5b7b3d696b4264afe24</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getTransparencyOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a8e382690e7068d0535ae9711fc899217</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getTransparencyTypeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>aa1b3c741562cca807a96b9ae74af25ae</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getNormalVectorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>af01ea9c65d78ea6f76ce27820c50e392</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getNormalBindingOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>af6ab846e87b5a4e50117809b6a30fafa</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setAmbientColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a55367ef42426a1044d700c7fe5432056</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setColorIndexOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>af2f9bdb3878f46956d159ebaef0e95c4</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setComplexityOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a277c3ce2ccf69daa2c8605448265c9ab</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setComplexityTypeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a8c5be3b4996d960bb38a7177e50aa460</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCreaseAngleOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0f742dbfe32609ee1476977857b95678</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDiffuseColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a9c4fd3e3522f1a1871f7cec4d9d3bbd0</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDrawStyleOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>aa90d7cd63aa89a7de8935d34c0f2fb66</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setEmissiveColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a7a30f1cfccd9fbdfeffba855be867dfe</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFontNameOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>ab08e89ebed7fe03d09467b0023587bcf</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFontSizeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a7f8b47f0b35b3599184804b7c931208f</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLightModelOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0dc4aa6f9efb2d9be354003cbf52d114</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLinePatternOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a8be305cab6066b2c91a27bcc4ca70568</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLineWidthOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a98b3d8add28f587c2b43e49775eb5038</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMaterialBindingOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a1d10f0d2b682675edc6db98f92faa6ea</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPickStyleOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>aff3ad061fff9865c6f49e88ffa790b2b</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPointSizeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a7844dde3bc3f8c98172ffad3b3de5c77</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPolygonOffsetOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a14d7370e00f01ea2b25de2afa4f9027d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setShapeHintsOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a0d46ac2e54ba716168351add7056baf6</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setShininessOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a9a1c8507402ac031efa50d5449e10b6c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSpecularColorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>aae88cc42e33ab4719383f6026c88f91a</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransparencyOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a79c936621656ff5e68c7b5ad47d1d474</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransparencyTypeOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>abef2367e1db9b5d904f15a4287dac2f5</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNormalVectorOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>a8c350422b3076a479e06f250fd9d17c2</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNormalBindingOverride</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>afed2ccbdfecbf2f76fe558c2ad41caf3</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool override)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoOverrideElement</name>
      <anchorfile>classSoOverrideElement.html</anchorfile>
      <anchor>ab723abe1857ad98350f4a0fa70be2a79</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPackedColor</name>
    <filename>classSoPackedColor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a3baaee978b6514fb42efbc8b2086438f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPackedColor</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>ae6f17502ef2f9ea9457a200e559684f4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>aa2e79b246c5e27927cd1689d068d067c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a665c14d88bc3e532cca9a0d852c07bf5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a580299fe736f852776115f02fe522ef9</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTransparent</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a8b4be408dbf6dbda6dca287a2c5f83e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFUInt32</type>
      <name>orderedRGBA</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a6c1556f83e403fa64e7323666a98e017</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a3194cb4a087d3e55c4fc5b386ecfa414</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPackedColor</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a6ca8bc5d6b13284e14f319772b216d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoPackedColor.html</anchorfile>
      <anchor>a78644a7fbbaaba4f7304842c13c2e961</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPackedColorV20</name>
    <filename>classSoPackedColorV20.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPackedColorV20.html</anchorfile>
      <anchor>a604df5c4c04e741543cb34d001106390</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPackedColorV20</name>
      <anchorfile>classSoPackedColorV20.html</anchorfile>
      <anchor>ae7729cceb547547b791daa307b6b1ae8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFUInt32</type>
      <name>rgba</name>
      <anchorfile>classSoPackedColorV20.html</anchorfile>
      <anchor>ae8695f4706f16dc39c70575783458b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPackedColorV20.html</anchorfile>
      <anchor>aa5f766f53f36692de6374161234d244d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPackedColorV20</name>
      <anchorfile>classSoPackedColorV20.html</anchorfile>
      <anchor>aeb9155eedceb445e43653ba4bc25dd9b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPath</name>
    <filename>classSoPath.html</filename>
    <base>SoBase</base>
    <member kind="friend">
      <type>friend SbBool</type>
      <name>operator==</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>ab4848beb2243ec5b8166c38835a1583a</anchor>
      <arglist>(const SoPath &amp;lhs, const SoPath &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend SbBool</type>
      <name>operator!=</name>
      <anchorfile>classSoPath.html</anchorfile>
      <anchor>afb925263baf09f7c209443e06bf9e528</anchor>
      <arglist>(const SoPath &amp;lhs, const SoPath &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPathList</name>
    <filename>classSoPathList.html</filename>
    <base>SoBaseList</base>
    <member kind="function">
      <type></type>
      <name>SoPathList</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a5ce3a1a16f9d446fde9adbc709343c80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPathList</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a9c025184ffe3e06f23ee0ac688a9abe6</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPathList</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a766e53ea91953ed447ef94a4a64edfc4</anchor>
      <arglist>(const SoPathList &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoPathList</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>ad2e58a99ae5a73a8c110315acc81ce83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>ac41fb316c367ddb3a0b536a19347035f</anchor>
      <arglist>(SoPath *const path)</arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>operator[]</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a808474a2fbca3616e47c5568563308be</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>SoPathList &amp;</type>
      <name>operator=</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>aa1c2b469e374756a65a836c7727a9029</anchor>
      <arglist>(const SoPathList &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findPath</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a875843c0f99cc6186cd535e5af75ff81</anchor>
      <arglist>(const SoPath &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a61cc92b1b79e4387a2dead9352d1017d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniquify</name>
      <anchorfile>classSoPathList.html</anchorfile>
      <anchor>a0a7da1bdcc904d018b69ed4fb1edaca8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPathSensor</name>
    <filename>classSoPathSensor.html</filename>
    <base>SoDataSensor</base>
    <member kind="enumeration">
      <type></type>
      <name>TriggerFilter</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>af13a360f1b0240372aa25b796253c00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PATH</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>af13a360f1b0240372aa25b796253c00ca3e071abe57169a91f8ca4435ded46e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODES</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>af13a360f1b0240372aa25b796253c00ca8553f30f599f632e588f7b24f54ac16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PATH_AND_NODES</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>af13a360f1b0240372aa25b796253c00ca8797a96f28abcfa252605892a2447257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPathSensor</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>a50c0df3f741d8f01bcc742af5f0e4838</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPathSensor</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>a42419b1bb7c69c47ddc6d0f8ab5e822f</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPathSensor</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>aa16ce9bd3d9772af21a1ab463c86a08e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriggerFilter</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>ab158a94ca8c31d52afa579d2232ade31</anchor>
      <arglist>(const TriggerFilter type)</arglist>
    </member>
    <member kind="function">
      <type>TriggerFilter</type>
      <name>getTriggerFilter</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>a18a992f1cb63423696519172586201a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>ae96bfde8b84277455c6b8e63f65477fa</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>aa22f4e63a909c16ab4a1083d55abd718</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>getAttachedPath</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>ac5a327d01458a5c610260226914ae882</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoPathSensor.html</anchorfile>
      <anchor>a7ef4a67b977aba476b25c44d839099af</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPathSwitch</name>
    <filename>classSoPathSwitch.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a5478f3c3f124306dc7c71d827f5f74ef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPathSwitch</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a71b1074745fc0c4545a6795eb089d50a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPathSwitch</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a702f2b79a88fb2805f5aa57349442271</anchor>
      <arglist>(int numchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a952bdb39d0b83ee2c86b41f39af636c2</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>ae7aa9b89138b90ad28f8a769fcaf576a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a03e2386a8f0ee814cf7adecb0bc276f8</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>ab5023bc95c6934d95b6a045e3305d1ac</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>aa154e44199df1c8ab4e7e4808cf771b8</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a594c091f21ab64d3cebb0d5c91d5f51c</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a0a1943cee725b3eeff7911cda4ad9c1e</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a92125a0f8e06b5ad71bd4489f6211a97</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a46e3c95398c5b8c569154b6671fc66ee</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>a91096708071d93cc1c6f8ce37531b76c</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFPath</type>
      <name>path</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>af4bcec211ad950591c11071828bf4e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>acf38cb9efc7d0f4c764d8d9b18171f3d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPathSwitch</name>
      <anchorfile>classSoPathSwitch.html</anchorfile>
      <anchor>ae3ed5031e8ddba1c792630ed61231339</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPendulum</name>
    <filename>classSoPendulum.html</filename>
    <base>SoRotation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a98c68ecbb9e75d938133647f1b8c78de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPendulum</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a6f7fc6042015eeee927af1272e523758</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a3e35a5e2cb0834178d5637038567ea1e</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRotation</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>afe0b58625a11c76516572e4b9f03c01e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a4ac099c6d0f3cc1259db1b1ed84a9b63</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a3e15e394a55ba13674bab97ba8401c46</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>ad88d8bc2a75a72799b5ada4a07511277</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a1888b9f40d6bfb4c8241bee42b578804</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a8e800eac71d7ce33a35f4cafc09d800c</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a9f28f3f94a2dd3070ba0567735aa99a7</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a03592c03beb0430fa96705ee90bca1de</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation0</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a28028aa61a2bdfb67317134494c06a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation1</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a8871d12aecbed29e419ffb24783a2d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a25a1b9dd870728ca6b94eb42dc59884d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>aa358f359bd1b735dc6a4a55f270cc47f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>aa9846ffb82adb6d7519b9a8131bd7841</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>ad485e00f79616ce4802adf06f137b1ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPendulum</name>
      <anchorfile>classSoPendulum.html</anchorfile>
      <anchor>a167d38d39eb074f0ca88da2d3205265f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRotation</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a85cd42ea491be5acbe30b86a4b89ab25</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPerspectiveCamera</name>
    <filename>classSoPerspectiveCamera.html</filename>
    <base>SoCamera</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>a839ff00f39a495140824f7dc8bb59ba4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPerspectiveCamera</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>ae9c95ccbe347e52096e647d1dc29d631</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scaleHeight</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>ad8d86d60668c2ac204c2797e9769552e</anchor>
      <arglist>(float scalefactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbViewVolume</type>
      <name>getViewVolume</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>ab9e0fc50886b30aebeba93bfdb584d09</anchor>
      <arglist>(float useaspectratio=0.0f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>viewBoundingBox</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>abb3b80a6d65257800cd35649aa663f29</anchor>
      <arglist>(const SbBox3f &amp;box, float aspect, float slack)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>heightAngle</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>a93f52a6de7d2a5d6c1c7e423ca161a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>a858e79fb2e2983921259eedd23a44508</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPerspectiveCamera</name>
      <anchorfile>classSoPerspectiveCamera.html</anchorfile>
      <anchor>ac270d84b11e56917c2cf5042658dbe4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPickAction</name>
    <filename>classSoPickAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>aa4dcdb579a8e99250ee7bf8a1be69c18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a91d1b4b418832a2e6fdf6efbee333319</anchor>
      <arglist>(const SbViewportRegion &amp;newregion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>ac45ee1fb86e71eab3f6640a1dfef32df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCulling</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a8895fd2df360a3626aaee7850c9b0db0</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isCullingEnabled</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a1c6e5e959d567c72b282ff0763d99d58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a75b110192fe6049693a43de1279a059e</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a11f727c349a0c00867ca45df2baf789d</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a6f0b6fad3d403145cc702ddbfe285ae9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoPickAction</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a6ed6d76ab6b1a4a22f2b8faf42615a6f</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPickAction</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a03cbd902f92d220a73eae0ff8375dbe5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a08ec3ccd8cd0f5a01ff68e86dc49ae65</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbViewportRegion</type>
      <name>vpRegion</name>
      <anchorfile>classSoPickAction.html</anchorfile>
      <anchor>a08a0e09db22850dbfcabfa4dc24c3945</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPickedPoint</name>
    <filename>classSoPickedPoint.html</filename>
    <member kind="function">
      <type></type>
      <name>SoPickedPoint</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>adae5a2b092425ca7138d4fb0a94d9918</anchor>
      <arglist>(const SoPickedPoint &amp;pp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPickedPoint</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a1becb15a2e466624d2d8a115a5d0eb72</anchor>
      <arglist>(const SoPath *const path, SoState *const state, const SbVec3f &amp;objSpacePoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoPickedPoint</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>aa48f329405ffd09d81924d556d398a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SoPickedPoint *</type>
      <name>copy</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a33e209c55a30952eaef7f46a040a6171</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getPoint</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>acdbff9b2500ecf8d34494add1f2f09d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>ae6d2f6b4284650d311a0a1330ec7a2bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>getTextureCoords</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a42cbd1b11b75758e0b8f379a681306b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaterialIndex</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a84144b6931dbf83fb3f293f85ecf3de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>getPath</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a6f508f910532e54303450081b16f06a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isOnGeometry</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>af8d0bbaae906d46dd5b744d38b93028a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SoDetail *</type>
      <name>getDetail</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a9c1430a0ed4066ecb080afde7f382205</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getObjectToWorld</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a3dc84afe2333313ba07669990712a087</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getWorldToObject</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a692b91c8dddebcb3b43dab57df745525</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getObjectToImage</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a1d4cf29b62c3361bb22f908e9c1ee6b7</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>const SbMatrix &amp;</type>
      <name>getImageToObject</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>acd43eb93da1c5dd396765f60166e36ae</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getObjectPoint</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>ac2a7fe42f9c09488f6dadd973d0aed4f</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec3f</type>
      <name>getObjectNormal</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a03a4ebbe30a7431d1cf89d8cb98cfd0d</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>SbVec4f</type>
      <name>getObjectTextureCoords</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>abd05737d43c1af1e80ae87790dd573f5</anchor>
      <arglist>(const SoNode *const node=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectNormal</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a7f84dfc0ccea4f4e7681fa5e60a93515</anchor>
      <arglist>(const SbVec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectTextureCoords</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a211ab4a4a2eba8119bfa44bdb159a93a</anchor>
      <arglist>(const SbVec4f &amp;texCoords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterialIndex</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>a5cd46408f05dad94cb2784bb4842c303</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetail</name>
      <anchorfile>classSoPickedPoint.html</anchorfile>
      <anchor>ada0b8d4ce276eb3c3bd1a067de6681e2</anchor>
      <arglist>(SoDetail *detail, SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPickedPointList</name>
    <filename>classSoPickedPointList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoPickedPointList</name>
      <anchorfile>classSoPickedPointList.html</anchorfile>
      <anchor>a8e05dc5fa3140dbce320d5bb1eb63feb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPickedPointList</name>
      <anchorfile>classSoPickedPointList.html</anchorfile>
      <anchor>a63a03530b4d49f0c12c0ebe462bc44fd</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPickedPointList</name>
      <anchorfile>classSoPickedPointList.html</anchorfile>
      <anchor>a2a4d6d5e94746d453b63dfb3e4f62e68</anchor>
      <arglist>(const SoPickedPointList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>SoPickedPoint *</type>
      <name>operator[]</name>
      <anchorfile>classSoPickedPointList.html</anchorfile>
      <anchor>a85c2f1f0a14d840902983b8afc2e1737</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classSoPickedPointList.html</anchorfile>
      <anchor>aa777ed4003982edeb812aafaca2cd2c0</anchor>
      <arglist>(const int start, const int fit=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoPickedPointList.html</anchorfile>
      <anchor>aa80c6ec6371bb2a75fdaed60e4dd05b5</anchor>
      <arglist>(const int idx, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPickRayElement</name>
    <filename>classSoPickRayElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>af2a5367c5655a022d797801970bdec5d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>a29c81a500b0367f98d16ea6fd55e0d98</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>a592afa7ffce96d2c7c7012751998a62d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>af83a92685bdebe0fa7d3d0e6f2ff6aae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>a9eb4582d726cf4e1ac274db8125d702a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>ae56a1c7d576d56c831e4143c453fe01c</anchor>
      <arglist>(SoState *const state, const SbViewVolume &amp;volume)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbViewVolume &amp;</type>
      <name>get</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>a1cac8446c2f7d7c508e2588900e7f06a</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPickRayElement</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>a6108cf13cf835409b2fcbe6ad11474c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbViewVolume</type>
      <name>volume</name>
      <anchorfile>classSoPickRayElement.html</anchorfile>
      <anchor>abd6623e380acf63f358c4c8fbef54e72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPickStyle</name>
    <filename>classSoPickStyle.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHAPE</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910a8ae8ec595b7fe45f29d7ce88d1e8ab41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BOUNDING_BOX</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910add95380db49456848037da8e016153a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNPICKABLE</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910a110f32f99cd9ba0d4022a062ed39c302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHAPE_ON_TOP</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910a0fee7d1d7bbf9842727901529f9fb931</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BOUNDING_BOX_ON_TOP</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910a045b68eebd302c45ffd5260e7a97ab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHAPE_FRONTFACES</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8c23088ad3a4eb7bdeaa93ae5a29b910aeb3db5809eb2c0c42329b1b386544c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a598c4aad17f6af10df42312718b26c57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPickStyle</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>abdb60829515f29ff3eb4d21b05c7bf2c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>aefeef5e8db1e21ac4e750fca2c6a807c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a966a157ec8174d28be481881de1856ea</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>abf0c9ee342011e88cb045461f8261d5c</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>style</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a85089766be4c884fce884971ac8cbcac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a1ac1b56a4ff19af05622992ced810930</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPickStyle</name>
      <anchorfile>classSoPickStyle.html</anchorfile>
      <anchor>a8969b7fe748a0dc35b6c4835a4855978</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPickStyleElement</name>
    <filename>classSoPickStyleElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>aa8be905ec6ff573cf54db40b70a0eda5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>aeb584dec0f6a37a1b5792e63034c4654</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>a91f5c6a7e66ed64fefcb33ed15fe7237</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>adf64dce1fd641c3c2324d59d8aecfb15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>ac1d94b5453b26c146a9d4669c86223e0</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>a640be670fda2d6a2fd3daf90e7a96508</anchor>
      <arglist>(SoState *const state, const Style style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Style</type>
      <name>get</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>ae0ec416fb655a47ce63e18c6a011d01e</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Style</type>
      <name>getDefault</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>a8ebb08ab529f601a19809d9e6adc00c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPickStyleElement</name>
      <anchorfile>classSoPickStyleElement.html</anchorfile>
      <anchor>a5278b06605224592373df162fdda485a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPointDetail</name>
    <filename>classSoPointDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>ac1731ecdfe2eb9d8a8cd5e7adf7b6762</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPointDetail</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a785f9613d295f3b463c77d17de37067a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPointDetail</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>af6f0267affab84e2550abba05df8e369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>ac911b50e9e12ec7aff0c790dde90a516</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a18359f000c9244dcca35474b74870e34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaterialIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a40034eab6a3841c7910f83bc589b7289</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNormalIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>aff34db2e4b1033be14c738a875473bb1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTextureCoordIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a23cf9562c9149644e729701e3603f2b3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoordinateIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a2d8ca058bc13db4e06f8b235228ebe08</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterialIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>aa92849731bf7eba6ffd8727b017d7c85</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a7eab228fa2a4d7de3314e7293659fcac</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureCoordIndex</name>
      <anchorfile>classSoPointDetail.html</anchorfile>
      <anchor>a3f5c5a9fe17fa10db0d0f28bf4f1fbf2</anchor>
      <arglist>(const int idx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPointLight</name>
    <filename>classSoPointLight.html</filename>
    <base>SoLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPointLight.html</anchorfile>
      <anchor>a85278e58a14ad7f5b431eed70a6a6f9f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPointLight</name>
      <anchorfile>classSoPointLight.html</anchorfile>
      <anchor>a313211c4875a5b6faf55fe131083dd89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoPointLight.html</anchorfile>
      <anchor>ad748c88820b2fbb674b6dab700eb0df6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>location</name>
      <anchorfile>classSoPointLight.html</anchorfile>
      <anchor>ad35ae059a7556bbde5f6f875b348ca02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPointLight.html</anchorfile>
      <anchor>a89a929b6006f293add3a994406a351c7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPointLight</name>
      <anchorfile>classSoPointLight.html</anchorfile>
      <anchor>a8e638ba1135ce97831c710ba510b697d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPointLightDragger</name>
    <filename>classSoPointLightDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>ae0a3764dfc902bff3014b7f3083b3fb4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a36c70dcfb311a427986a201d39f3b9bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPointLightDragger</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a3487aadd4014c36a8484d08e3753cc03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a85712188ff90a6653b253a3b053913a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a7175def6478387ba4740e0bb323f148b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPointLightDragger</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a003cac25d30191b2272aa38839d52729</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>ac0308fc6fd0758360d04543e275c3295</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>ad769c527f6a93665f68eac68805019ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a4c8c4496bfbf83a7585fdf70a4a0de7b</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoPointLightDragger.html</anchorfile>
      <anchor>a42ee894f4a72a555438f12633c14bf07</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPointLightManip</name>
    <filename>classSoPointLightManip.html</filename>
    <base>SoPointLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>ad5abf0a04eb605c180924cdc6d6f7c2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPointLightManip</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>ae6869050d5f6e9cd889e81cc0be421a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoDragger *</type>
      <name>getDragger</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a2f847237cfb4567483c925b55049f479</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceNode</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a66e36c3ba501846588338be6f9e336be</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceManip</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a90189b1963b243840fe0ddc74865d6c9</anchor>
      <arglist>(SoPath *path, SoPointLight *newone) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a7d4597eeebd33e4fcb70498bec7f8cc6</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>aba8af3f8293fc5783fcd6ef2536821cf</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>acf5035fd9ca6493ff845d1d378e7ced2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a3dcb961b3c87b30509759e0598afa358</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>ab8b641220cdccf3d2a8a2d5c8ac14ff0</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>ab199d00ec8503679b5fc864599549018</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a951e1f9a20778fc9d0fa15e041b9ce0d</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>aa6501d264533b6a63f9341300d0f30e6</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a3a32abafa970b50767ca42dc36c44a04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a6841f7730313c73fdf11da53685d410a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPointLightManip</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a73f17c61149b1c92e2648222d8563329</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDragger</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>aef58cc2174106ef2e1d989e8add379b4</anchor>
      <arglist>(SoDragger *newdragger)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>aaedcb5ecb52fd437c743e80becb96e9f</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>transferFieldValues</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a94ce078a467cff54cf221758b4fb571f</anchor>
      <arglist>(const SoPointLight *from, SoPointLight *to)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a952242b9d6a8926cd994f3cab8f550ba</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>af98064b28f20d047c06d4967adb7afc4</anchor>
      <arglist>(void *f, SoSensor *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>locationFieldSensor</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a08bbb2e18f59c7500c15022ebf3f4838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>colorFieldSensor</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a12b64eae5a25a238c619a38a8b594445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoPointLightManip.html</anchorfile>
      <anchor>a0387379c4871f305f2e4e023f41daac6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPointSet</name>
    <filename>classSoPointSet.html</filename>
    <base>SoNonIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a007a14997d772f05637fc89334b87c33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a17f44d57e8a765972a1cd694e8f79339</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a6e4bac14c76a4560a2adcc5a312eaa3a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPointSet.html</anchorfile>
      <anchor>a8922c66fa1b576a4aaf9ddcdeca30247</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPointSizeElement</name>
    <filename>classSoPointSizeElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoPointSizeElement.html</anchorfile>
      <anchor>a6208ec6da33165c283213b7f94b0ac19</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPolygonOffset</name>
    <filename>classSoPolygonOffset.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a4db5d089190917a978b376151aa53065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a661536156716cb96796652cf318a8e15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPolygonOffset</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a02f8b7b8a83efc7dd4cfc7fc3cb5546b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>af8ea39daf2f80c17195d52b03a6807b3</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a53a5fdd10cc957be25ef4c64a10537aa</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>af73a45aa895542aa0fbc2a8caf05fe89</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>factor</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a512aaa43ae3841a504a4b022e9f464e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>units</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a838e7aeb2af1bb4f72e70ab84253f884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>styles</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a1a5a1927866204d123ee922b6c87d875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a1e6009d9e08a0dda75f6457ef7b0b8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>a9932386594bf505e22148a3d7edc19b9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPolygonOffset</name>
      <anchorfile>classSoPolygonOffset.html</anchorfile>
      <anchor>acc5e709aaf00f9e914901c9220e9fa9b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPolygonOffsetElement</name>
    <filename>classSoPolygonOffsetElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a41d8183c756acbb0cba40cc0fb4bab41</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoPolygonOffsetElement.html</anchorfile>
      <anchor>a242c5f194a4a3d98e402872ffafc1359</anchor>
      <arglist>(float factor, float units, Style styles, SbBool on)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPrimitiveVertex</name>
    <filename>classSoPrimitiveVertex.html</filename>
    <member kind="function">
      <type></type>
      <name>SoPrimitiveVertex</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a7e79937870f2277e08353c938348bf4e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoPrimitiveVertex</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a334877f887ff97983e0e51da3de7cc5f</anchor>
      <arglist>(const SoPrimitiveVertex &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoPrimitiveVertex</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a40c5330df46357e89b910bac75667192</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoPrimitiveVertex &amp;</type>
      <name>operator=</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a97844d1534385b06edc42e1506eb28bc</anchor>
      <arglist>(const SoPrimitiveVertex &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getPoint</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>ac3393e08d3b1cd60e926d9a2e2bf8680</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>ae218d0962df0a5cda4672cdc4da20b89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>getTextureCoords</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a6a49f2f2c5c734912f102805d58d6eb8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaterialIndex</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>aaab3d06c3f889498c640d82f3da1a15c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getPackedColor</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a2c0337f62a9cc1ffcd63bf450e9a0215</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoDetail *</type>
      <name>getDetail</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>acfab8e27113935ad9554d35d58b6ca17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a579d0dc78e73ac036a03e657203454f7</anchor>
      <arglist>(const SbVec3f &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>ac84c87633c0c51c48fe7e3da1f95b0f4</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a95518bf3e7bc4141a3d6a38841a869df</anchor>
      <arglist>(const SbVec3f &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a53296f548ea1342053078d38643e6535</anchor>
      <arglist>(float nx, float ny, float nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureCoords</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>ac2e53ba32a5d66ceca0c0395e5185b5d</anchor>
      <arglist>(const SbVec2f &amp;tex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureCoords</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>ac04a23e09567206b6fbc317b736dd5b0</anchor>
      <arglist>(float tx, float ty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureCoords</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a61285c4c3a1ea641dafd21801a1e5ac4</anchor>
      <arglist>(const SbVec3f &amp;tex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureCoords</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a651a05ef3d7da4b77e1a3f634df69ed5</anchor>
      <arglist>(float tx, float ty, float tz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureCoords</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a8aeec73929df581a885f1e93f9ccdb1b</anchor>
      <arglist>(const SbVec4f &amp;tex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterialIndex</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a91267d261b5a425032701058ce8df733</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPackedColor</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a6520a723b75e5b1b40728ee06b6cfaf2</anchor>
      <arglist>(uint32_t rgba)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDetail</name>
      <anchorfile>classSoPrimitiveVertex.html</anchorfile>
      <anchor>a8b13da6106766fef7579b3d40ed94a35</anchor>
      <arglist>(SoDetail *d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPrimitiveVertexCache</name>
    <filename>classSoPrimitiveVertexCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoPrimitiveVertexCache</name>
      <anchorfile>classSoPrimitiveVertexCache.html</anchorfile>
      <anchor>a3a3aa7bd1159b04af70e5034ae924067</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPrimitiveVertexCache</name>
      <anchorfile>classSoPrimitiveVertexCache.html</anchorfile>
      <anchor>a07945544b5c694532e604423d97ea05d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isValid</name>
      <anchorfile>classSoPrimitiveVertexCache.html</anchorfile>
      <anchor>a0d3f0e252499ac52b2be3cfc0c019569</anchor>
      <arglist>(const SoState *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classSoPrimitiveVertexCache.html</anchorfile>
      <anchor>aedcdb42a3fd8bfbbb03ab44765ebf58a</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfile</name>
    <filename>classSoProfile.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>adfabe7b73cf38b79b1bb398e71f80d0b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTrimCurve</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a74d5b0d86160f6b72db9db252e9a2dc1</anchor>
      <arglist>(SoState *state, int32_t &amp;numpoints, float *&amp;points, int &amp;floatspervec, int32_t &amp;numknots, float *&amp;knotvector)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a9f959456c283195a78c7c6ec4977ed2a</anchor>
      <arglist>(SoState *state, int32_t &amp;numvertices, SbVec2f *&amp;vertices)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoProfile.html</anchorfile>
      <anchor>a7e2cb1412a50c9163cd0d861293ce436</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfileCoordinate2</name>
    <filename>classSoProfileCoordinate2.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a734d5c42a0e0354d38a1907dad33f834</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoProfileCoordinate2</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>ac875afacda9d8461e66321c2ec8f71dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>ae2214aa16fe421527f37c1607ede871e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a56141357d6523b00360945c1359dbef1</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>ab4dfea889db07874300f9105e9b05fec</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a5925f1c9e9395661662cf5dfebd15aa7</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a1012bf2224bb07516ea88516f594653d</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a1dfd7c64d2ddb1ec29f47c28b5fb6d0a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>point</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a4d5fea11479fb8b72acbffb833490dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>a46106d623cc98fc66c17974a38f5bc5f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProfileCoordinate2</name>
      <anchorfile>classSoProfileCoordinate2.html</anchorfile>
      <anchor>aaed87ab48f0010a940e888797e852b9b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfileCoordinate3</name>
    <filename>classSoProfileCoordinate3.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a019b9e118da1781d39f25426b5c7018a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoProfileCoordinate3</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a83842009f7c1cba2b4ab1cecffc6445e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a1b275c3d5885520c05b33f9bde0c6536</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>aab08dc6ab88e6d319267bb33cff3343e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>abecd63f3a60bfa1b5ddc85495f2f9d03</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>af208d796dc9bae9b9d4d2f8a3ebfb224</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a26553b653aa7c2e07925c1cac41db356</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a0d51c0fa0fd10477d77634c808d80911</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>point</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>ae1f2958d22ff9e3965d7a83efd485c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a40749986f7983eef3de3b2d2e71bab3d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProfileCoordinate3</name>
      <anchorfile>classSoProfileCoordinate3.html</anchorfile>
      <anchor>a7bee50aa0ccfaec01cede91332577055</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfileCoordinateElement</name>
    <filename>classSoProfileCoordinateElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>acdf38a6e5d58979c1df6a36a55151a34</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a31bd9a63715f489ca8657684c0d0e0a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>get2</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a504a509ef1b2be5ace81afabe2991fe1</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f &amp;</type>
      <name>get3</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a263bfab58711603c08f9521c013be071</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>is2D</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a1ec6a574679fb1ea674f452f27d54c31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f *</type>
      <name>getArrayPtr2</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a1b593e5a8673d3bedd05d6b78a5f7b2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec3f *</type>
      <name>getArrayPtr3</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>aaae466db9d8718c9a49b82978c2eeecb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a23b7d9f47f0c625c22674f27f59fe0b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set2</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>af29242ef15da3e581fc4affcc288d7a8</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numCoords, const SbVec2f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set3</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>aa3c6c37779d378b349c7c34d95ecc57d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numCoords, const SbVec3f *const coords)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoProfileCoordinateElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>aed6cea0a2978c2a47243c98cd497915b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec2f</type>
      <name>getDefault2</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a80a27f098dbfe28f42eecb7244abb558</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbVec3f</type>
      <name>getDefault3</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a64e00fb8c0c6564f1d93d8c1dc70496b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProfileCoordinateElement</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a0994b5054e4d010e6e1959487be8d596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>numCoords</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a948ef3233625576775828ebc2a9a79e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SbVec2f *</type>
      <name>coords2</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a06b2a26b913d349800a6d1c9fc1f4061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SbVec3f *</type>
      <name>coords3</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a664641e352e5ae43645fc6ec749eb594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>coordsAre2D</name>
      <anchorfile>classSoProfileCoordinateElement.html</anchorfile>
      <anchor>a2f8259eb28b77483091d9008c5ebc614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfileElement</name>
    <filename>classSoProfileElement.html</filename>
    <base>SoAccumulatedElement</base>
    <member kind="enumeration">
      <type></type>
      <name>Profile</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>a4234a4d6f3cb31c005d99063c050c5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>a19d24518f79559cd94bb6da8be421024</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>ace26399dcc181e07e998881ac20615b2</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>a56552146db487f5cf847daef6dab973d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>aa5b2283aed09daa037e24f45ae88020f</anchor>
      <arglist>(SoState *const state, SoProfile *const profile)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoNodeList &amp;</type>
      <name>get</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>a4ec9eaaa0cc2c41dab0c475355839df8</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProfileElement</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>a47fbdaca0128c1b739b7a0f280e2347f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoNodeList</type>
      <name>profiles</name>
      <anchorfile>classSoProfileElement.html</anchorfile>
      <anchor>a7ca3481263badeed2a8efa4570706d8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfiler</name>
    <filename>classSoProfiler.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoProfiler.html</anchorfile>
      <anchor>a47f803f8270f533ecf57f4ea23291f11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enable</name>
      <anchorfile>classSoProfiler.html</anchorfile>
      <anchor>a7592f7d6b663eccdef997264062a2f22</anchor>
      <arglist>(SbBool enable=TRUE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isEnabled</name>
      <anchorfile>classSoProfiler.html</anchorfile>
      <anchor>aed3f5f5a4cf590d0faa0ced5aeedef6a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isOverlayActive</name>
      <anchorfile>classSoProfiler.html</anchorfile>
      <anchor>a619f5a8a8289e31647a7b725c444e19c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isConsoleActive</name>
      <anchorfile>classSoProfiler.html</anchorfile>
      <anchor>af2a37ad1edd28caee47cddf3ec004548</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfilerElement</name>
    <filename>classSoProfilerElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoProfilerElement.html</anchorfile>
      <anchor>a114223d0b05adacd04a9da5b88737bce</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoProfilerElement.html</anchorfile>
      <anchor>a72f7e11c9a33b0e7608c3d25ee49edf3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoProfilerElement.html</anchorfile>
      <anchor>abb9583407bd21212af546267e5e0f28c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoProfilerElement *</type>
      <name>get</name>
      <anchorfile>classSoProfilerElement.html</anchorfile>
      <anchor>acb148ed3cba6b30e7c8d33a8c22d5da9</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfilerStats</name>
    <filename>classSoProfilerStats.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a0b5b43b2e6d850d8b5aef52d46bac0b9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoProfilerStats</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a1ba56b69fe878bb11140c63a1aadbd8e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>adc652f0ce0e3299046ff3848d4fc25a6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a3b79a561786d92913da8d53cb8acfaef</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a0af42fb5b8eaca4d7a6d9b2b1b06b3cd</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a22e63be13ab094ce3ba72df36338f433</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>adaa326f20feb8c71a822c0624298c046</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>aa4cd6c322fe34cf483e8d8ea759f7372</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>aacacd8ec8201b99bcc243f826eed30fa</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>aa439458670b855842c7f9f64bf2610b7</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>aca954bdce909e11709e6c0eaf87747f2</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>ad0ae17901b51ab3e65b733b04dbfb281</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>aca6676e5bf6e40dbe2b431037e2132bc</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFName</type>
      <name>renderedNodeType</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>ab8f938eac96792ecd1614fdb0b615e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFTime</type>
      <name>renderingTimePerNodeType</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>ab09e6e0c199ef6d4ee738b4bd3740d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a33d541adc9c72ae71bdee04bc65a10f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProfilerStats</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a70c3ba16418d39590a1aa80b3e382858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoProfilerStats.html</anchorfile>
      <anchor>a512f26d25b1bd15cc389374145579e7d</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProfilingReportGenerator</name>
    <filename>classSoProfilingReportGenerator.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>a15c4a831bc56a2097078d2acf0630096</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbProfilingReportSortCriteria *</type>
      <name>getReportSortCriteria</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>af4eafba359310ac9059ac75bc7631b54</anchor>
      <arglist>(const SbList&lt; SortOrder &gt; &amp;order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbProfilingReportSortCriteria *</type>
      <name>getDefaultReportSortCriteria</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>a4a8e6acfcd8ad29c0495c8508f542f7e</anchor>
      <arglist>(DataCategorization category)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbProfilingReportPrintCriteria *</type>
      <name>getReportPrintCriteria</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>abd98e18e6d207093f30396383d82b513</anchor>
      <arglist>(const SbList&lt; Column &gt; &amp;order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbProfilingReportPrintCriteria *</type>
      <name>getDefaultReportPrintCriteria</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>a1f6cef986449b810646b99d1a03773a1</anchor>
      <arglist>(DataCategorization category)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generate</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>ae893e60273707681569f65e97797baed</anchor>
      <arglist>(const SbProfilingData &amp;data, DataCategorization categorization, SbProfilingReportSortCriteria *sort, SbProfilingReportPrintCriteria *print, int count, SbBool addheader, ReportCB *reportcallback, void *userdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CallbackResponse</type>
      <name>stdoutCB</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>ab9616b6991ef3b41a884d2cc4555ddf8</anchor>
      <arglist>(void *userdata, int entrynum, const char *text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CallbackResponse</type>
      <name>stderrCB</name>
      <anchorfile>classSoProfilingReportGenerator.html</anchorfile>
      <anchor>acf9cf9cadc77d38225a6bbcd955f2ad1</anchor>
      <arglist>(void *userdata, int entrynum, const char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProto</name>
    <filename>classSoProto.html</filename>
    <base>SoNode</base>
    <member kind="function">
      <type></type>
      <name>SoProto</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a38f68fbd1c410d8ed8285aff15659140</anchor>
      <arglist>(const SbBool externproto=FALSE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a825dee5b56cf6cbe8f338630d457eb8a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoProtoInstance *</type>
      <name>createProtoInstance</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a8fcd34f71bcf30147317347cbe0f99e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addISReference</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a96e895ad3df7545e810ae4a32dd9f4ac</anchor>
      <arglist>(SoNode *container, const SbName &amp;fieldname, const SbName &amp;interfacename)</arglist>
    </member>
    <member kind="function">
      <type>SbName</type>
      <name>findISReference</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a4c24eaf9746d284fff8f15de05ea3417</anchor>
      <arglist>(const SoFieldContainer *container, const SbName &amp;fieldname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReference</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a5b29336e72295effa7ebcfe06e58b7f3</anchor>
      <arglist>(const SbName &amp;name, SoBase *base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeReference</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a53f0e0fdf345a03c2f70c67fe8120b43</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>SoBase *</type>
      <name>findReference</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>af0f1601fb4447c25f44d0e298203e974</anchor>
      <arglist>(const SbName &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoute</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a470ce5ac79a2e0dd80d410ca703b182f</anchor>
      <arglist>(const SbName &amp;fromnode, const SbName &amp;fromfield, const SbName &amp;tonode, const SbName &amp;tofield)</arglist>
    </member>
    <member kind="function">
      <type>SbName</type>
      <name>getProtoName</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a77a53bb799e3aeef27ccb93306ab4948</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a79cc167fabff4ff755d06fb49567640f</anchor>
      <arglist>(SoInput *input, unsigned short flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>ae832cd06b9cea87764f0daf5e50987fc</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoProto *</type>
      <name>findProto</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a494cbebd186b0d58bd02f1d0a3d7666a</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProto</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>aaa03be2a304d1cab8aa6bc0be6bca858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classSoProto.html</anchorfile>
      <anchor>a2c430d9f50d1c1bb7e2e0f229c74bf31</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoProtoInstance</name>
    <filename>classSoProtoInstance.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>aac85124aa4b049ec68d10655d3176e76</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoProtoInstance</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a64eeba644c7beab7ed7d709f2169d332</anchor>
      <arglist>(SoProto *proto, const SoFieldData *deffielddata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootNode</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>ad12d0d9ebc785c8a4de49ebadccc2640</anchor>
      <arglist>(SoNode *root)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getRootNode</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a60eeb7519586034395b687e45f943c39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoProto *</type>
      <name>getProtoDefinition</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a9558e2db1647b4b06df81067a35c247e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbName</type>
      <name>getProtoName</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>acad45c7ebface9802b7493f165fce4f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a0200a509e4e6049f3bc77a1b043e2d8d</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoProtoInstance *</type>
      <name>findProtoInstance</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>ad5aaf492de15af375c77ee0e1d7849b9</anchor>
      <arglist>(const SoNode *rootnode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a498f5e529e87bd208c61aa603f82f74c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoProtoInstance</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a009065382215b3304c24f234ed19b14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>a5749cfa5b26678c8e0a39c632e456c07</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFileFormatName</name>
      <anchorfile>classSoProtoInstance.html</anchorfile>
      <anchor>abf5ac5d85a692ce09231e7dacde68604</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoPSVectorOutput</name>
    <filename>classSoPSVectorOutput.html</filename>
    <base>SoVectorOutput</base>
    <member kind="function">
      <type></type>
      <name>SoPSVectorOutput</name>
      <anchorfile>classSoPSVectorOutput.html</anchorfile>
      <anchor>af7d869932b81b4681b7644857f602765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoPSVectorOutput</name>
      <anchorfile>classSoPSVectorOutput.html</anchorfile>
      <anchor>a8e87520959156dc78351e8aa8bb49d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColored</name>
      <anchorfile>classSoPSVectorOutput.html</anchorfile>
      <anchor>a5597d89528eadf13180b02529eb054a7</anchor>
      <arglist>(SbBool flag=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>getColored</name>
      <anchorfile>classSoPSVectorOutput.html</anchorfile>
      <anchor>a21d4faddbc129e513fa5f4d181c8ccbf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVectorOutput</name>
      <anchorfile>classSoVectorOutput.html</anchorfile>
      <anchor>ab17c6218fe19f5636c8adb2787da056c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVectorOutput</name>
      <anchorfile>classSoVectorOutput.html</anchorfile>
      <anchor>ace1948df767acc89dcc5a7edc2fdd2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>openFile</name>
      <anchorfile>classSoVectorOutput.html</anchorfile>
      <anchor>a549c1a37d36a38f188b767cab728b4af</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeFile</name>
      <anchorfile>classSoVectorOutput.html</anchorfile>
      <anchor>a358eba46a36e6bb2e3738215e78bfdfe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>getFilePointer</name>
      <anchorfile>classSoVectorOutput.html</anchorfile>
      <anchor>ac926cd1f547382b0cebb351baaa72118</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoQuadMesh</name>
    <filename>classSoQuadMesh.html</filename>
    <base>SoNonIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>a1a0a036c6103de2ff1ae1f7b54e6ae19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoQuadMesh</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>a09af3a753f1a96185756c8b4ff8374d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>a333a726bbacb445e698431edaeeebb76</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>ad603319e47062bd6a389b5fb8c1dec7c</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>ac103058142beca3a46976b0572082953</anchor>
      <arglist>(SoState *state, SoNormalBundle *nb)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>verticesPerColumn</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>a94d6ba88c902d679fb3fcdcb99650618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>verticesPerRow</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>aa1a0a9413d7cd1b21d1fed1d1c10497d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>a92c4a779bf9b6131a20f2a37eba682f3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoQuadMesh</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>aa87bbf7bf8313b31a617ca7bc3d9ab06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>aa883a16a18b585c529b616728044477c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>aa84e90b7a45a470f8ee18023eda135f1</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoQuadMesh.html</anchorfile>
      <anchor>adeca0c1c50aa3c061d7e8aa8de2d602e</anchor>
      <arglist>(SoState *, SoNormalCache *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRayPickAction</name>
    <filename>classSoRayPickAction.html</filename>
    <base>SoPickAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a1e829cec1d44f322cb51a3ba3fcf0105</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRayPickAction</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a37dfa9cc373e091f90d44acd0e9f15c5</anchor>
      <arglist>(const SbViewportRegion &amp;viewportregion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRayPickAction</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a5a29e1620f7b13a1a285f9f44f42f0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a70e6bdc9b5a5a649b3a76763ba0a1757</anchor>
      <arglist>(const SbVec2s &amp;viewportPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalizedPoint</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a6e0d7dfc5120410e69d92fcf89967240</anchor>
      <arglist>(const SbVec2f &amp;normpoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a6bf83394f1cd7b6cbd7eb35c38045216</anchor>
      <arglist>(const float radiusinpixels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRay</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>aceef8d6b18e7ae88a2c67c305d6b6763</anchor>
      <arglist>(const SbVec3f &amp;start, const SbVec3f &amp;direction, float neardistance=-1.0, float fardistance=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPickAll</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a95f20477fd6206c4a7d5c6776918d44e</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isPickAll</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>aacb421565b5b7ea0bf9448717ca9d1d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoPickedPointList &amp;</type>
      <name>getPickedPointList</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a5016b47568897c0d5063c799fa383d01</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPickedPoint *</type>
      <name>getPickedPoint</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a5f0b0034166fe3a8e291d2dd66c5049a</anchor>
      <arglist>(const int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeWorldSpaceRay</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>ac18eed9a9c6b28a470aa4f070b917a4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasWorldSpaceRay</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>aad6922ca997c2092cc1bc30fa90bcabb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectSpace</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a7f897b7cda2949315969c7788f10895e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectSpace</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>afe9401227afb3b21c1ab78938d899b16</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a0d892e624bbc65bc1794723bd065bfdd</anchor>
      <arglist>(const SbVec3f &amp;v0, const SbVec3f &amp;v1, const SbVec3f &amp;v2, SbVec3f &amp;intersection, SbVec3f &amp;barycentric, SbBool &amp;front) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a5271fd7f31710162cb1ade43062999a1</anchor>
      <arglist>(const SbVec3f &amp;v0, const SbVec3f &amp;v1, SbVec3f &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>aa0217858e58d40ec1198d04cfc4d34cb</anchor>
      <arglist>(const SbVec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a6dddc8f8d808008cca6bc7fad1be0cb4</anchor>
      <arglist>(const SbBox3f &amp;box, const SbBool usefullviewvolume=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>intersect</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a91e7773175f002f020a13b23f28c2aef</anchor>
      <arglist>(const SbBox3f &amp;box, SbVec3f &amp;intersection, const SbBool usefullviewvolume=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewVolume &amp;</type>
      <name>getViewVolume</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a9005ceea2d4e5d07d8536e994b51eb9d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const SbLine &amp;</type>
      <name>getLine</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a31d06df83d998c24dff43eea854f830f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isBetweenPlanes</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>aedc5c6f951d8707630799adf1b46ef71</anchor>
      <arglist>(const SbVec3f &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>SoPickedPoint *</type>
      <name>addIntersection</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>acae017714b5f721830e4b46ea355d28f</anchor>
      <arglist>(const SbVec3f &amp;objectspacepoint, SbBool frontpick=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>af773d716c3fe7f26c59510c1dc63b6c9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a77b5147f4fd6c17eb49e687719c0d5bc</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a9592ef21c9795726f0647ab74d2cc795</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a0980a786784b0ea331a1479a1a41c715</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoRayPickAction.html</anchorfile>
      <anchor>a4660d704917cfe585b0b136bb3e582db</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoReadError</name>
    <filename>classSoReadError.html</filename>
    <base>SoError</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoReadError.html</anchorfile>
      <anchor>ab063fbf1debb6520b343d322d30a9466</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>post</name>
      <anchorfile>classSoReadError.html</anchorfile>
      <anchor>a0329c71b325e64cac0c5cf8b79cba58f</anchor>
      <arglist>(const SoInput *const input, const char *const format,...)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoErrorCBPtr</type>
      <name>getHandler</name>
      <anchorfile>classSoReadError.html</anchorfile>
      <anchor>a5888697ba98f08f2fa9a305b19b2c963</anchor>
      <arglist>(void *&amp;data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRenderManager</name>
    <filename>classSoRenderManager.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>RenderMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AS_IS</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eba41d5486d26e07494c0723fdadf3ac48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WIREFRAME</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eba0319a8ba1bf7ba758a8f90f0d944ca29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POINTS</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eba6dd6bd4a34ee379d4f174da7eaa94102</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WIREFRAME_OVERLAY</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eba529a9e9ee81756194229418bff577e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HIDDEN_LINE</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eba0bdce559dba0d05efbd360e6aaccdb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BOUNDING_BOX</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4b8d99cff0fd91e31bc2c5d33610f6eba9c2898a8743afd5e55fbdd06ca8e7ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StereoMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MONO</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26eaf233746e8954c7e4f9d201311aab2e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANAGLYPH</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26eae884638b7b5b349d4f314b2ad3734f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEPARATE_OUTPUT</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26ea7534ce29815527d9f009b0df2e90000d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUAD_BUFFER</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26ea317100d42d54cf314250b80d06f56498</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERLEAVED_ROWS</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26eacfda8c636cb70c8a7c54e0574a849b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERLEAVED_COLUMNS</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a34169ef6635a94765aa0d4f25537a26eaf1d738a792fa4f1011bf0290ee07f327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BufferType</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae8eb15bc16e3f7c72a8bfba2bd259f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUFFER_SINGLE</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae8eb15bc16e3f7c72a8bfba2bd259f9aad8db6700a3ec69a7521395f5f3f5528f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUFFER_DOUBLE</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae8eb15bc16e3f7c72a8bfba2bd259f9aab819b0aaa8ba8c5a0b19c61056f6712c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AutoClippingStrategy</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa73c943c31d9d7950858fc2ef24ea45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_AUTO_CLIPPING</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa73c943c31d9d7950858fc2ef24ea45fa6f64e23ca388796119edc531f4f881cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FIXED_NEAR_PLANE</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa73c943c31d9d7950858fc2ef24ea45fa68306b5c74257c54663ba03cd4d863de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VARIABLE_NEAR_PLANE</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa73c943c31d9d7950858fc2ef24ea45fa6c42d938a028ae69ea309846ec5f635b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRenderManager</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a0ae0a3ae845b26803c7c1e547a0762f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRenderManager</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a320aa074652f4dfcc76a9d17be235b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aaa6e81a59d435478a7a4ea36bbced468</anchor>
      <arglist>(const SbBool clearwindow=TRUE, const SbBool clearzbuffer=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae221f17497bac003a6f0ad5f569fcfc0</anchor>
      <arglist>(SoGLRenderAction *action, const SbBool initmatrices=TRUE, const SbBool clearwindow=TRUE, const SbBool clearzbuffer=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>Superimposition *</type>
      <name>addSuperimposition</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ac9dbf94aeabcb86533620551fb85b793</anchor>
      <arglist>(SoNode *scene, uint32_t flags=Superimposition::AUTOREDRAW|Superimposition::ZBUFFERON|Superimposition::CLEARZBUFFER)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSuperimposition</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa48569832076aa82cce0c243d7ec903f</anchor>
      <arglist>(Superimposition *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSceneGraph</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a65757fbbaff373bec7d0b570b5876d7e</anchor>
      <arglist>(SoNode *const sceneroot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getSceneGraph</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>abaa8f2c927edd8eea8c890175d25d3f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a1c41a7c3e97a5f5ad4e6cc9375e5a5a7</anchor>
      <arglist>(SoCamera *camera)</arglist>
    </member>
    <member kind="function">
      <type>SoCamera *</type>
      <name>getCamera</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a5c0a4c901070d884a371a9a2e76db98c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoClipping</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a9e8d39ab12f70dc6cf3059751cd52376</anchor>
      <arglist>(AutoClippingStrategy autoclipping)</arglist>
    </member>
    <member kind="function">
      <type>AutoClippingStrategy</type>
      <name>getAutoClipping</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a30a0d7c828967404b01515e317f868e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearPlaneValue</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a5f59f1429587b5bf12107d33935030e1</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getNearPlaneValue</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a6e7d949f20a864a86a475474172b930b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexturesEnabled</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a30e8314c16428850d7ebe2d55613e40c</anchor>
      <arglist>(const SbBool onoff)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTexturesEnabled</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a40d4befe540e49b524833af206414171</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoubleBuffer</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa3297d6d24da46e0eaeb23f2ed57a064</anchor>
      <arglist>(const SbBool enable)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isDoubleBuffer</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aadbf66be0d83b9e3146c0ceccbab79ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ad5322ddd59fbc8b77754eec17c45a8c3</anchor>
      <arglist>(const RenderMode mode)</arglist>
    </member>
    <member kind="function">
      <type>RenderMode</type>
      <name>getRenderMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a7a593b107a9b2c87eaea6b5d711ba956</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStereoMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>afb1d29761e7aa487799473b384423d4c</anchor>
      <arglist>(const StereoMode mode)</arglist>
    </member>
    <member kind="function">
      <type>StereoMode</type>
      <name>getStereoMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aee72d5da07a04880fa9c89ecb6d0553b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStereoOffset</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>af6bf09e76a510918e6d18b9a63c96a41</anchor>
      <arglist>(const float offset)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStereoOffset</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae01a4919f597e5f1245ce2549029b4ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderCallback</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a62b093b4687c42f4a9668d4b5334ef1d</anchor>
      <arglist>(SoRenderManagerRenderCB *f, void *const userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isAutoRedraw</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ad0c9e4103edf5b312837db4e3b318e46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRedrawPriority</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>adaa58cfd46a86e57356dc316fcc81edb</anchor>
      <arglist>(const uint32_t priority)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getRedrawPriority</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a42168cc57a99552b2176b55631570281</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleRedraw</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a6ce17404aa20fccf0bc6a64d9a3134d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a2bfcd506a76be364a7826f4dd78a83f9</anchor>
      <arglist>(const SbVec2s &amp;newsize)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getWindowSize</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a5a0f7c96a06551968a457755049220f4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ac3ae78e61148f0576744e283125067be</anchor>
      <arglist>(const SbVec2s &amp;newsize)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getSize</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ad414b6429956bd845eddf230e09ec405</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a824a71588513d16118b2bbcf828c933f</anchor>
      <arglist>(const SbVec2s &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a95438079f96e178d7fb0b8442dc2233b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aefae350517dde035dbad1409a0d75dcc</anchor>
      <arglist>(const SbViewportRegion &amp;newRegion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ac6150dc7eb4df2a7c538925b1943e50f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a541b2b59f3bc72d32146be948440f074</anchor>
      <arglist>(const SbColor4f &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const SbColor4f &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a65aa8686831a1b75a86235efe3ac2df7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlayColor</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a770ef264686d40b0f865b08ab00553ac</anchor>
      <arglist>(const SbColor4f &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>SbColor4f</type>
      <name>getOverlayColor</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ad8e87fd4ee7b1b77f6701883a9f9d57c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundIndex</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a215e56519f7ea8c48d21b381e1841995</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBackgroundIndex</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a591dfd41e81fdf535aa7eb880d485494</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRGBMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a676b8a84239b9c426b057d6314908e23</anchor>
      <arglist>(const SbBool onOrOff)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isRGBMode</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a896964dc226ede866b14a576f2404ce1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a7afcecbd7420c43a29307f07daed320e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>af34cd9780eedddfb82ce1863f787bc89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAntialiasing</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ad0d5aa9ecd0bc31f0a86fac0d7732a82</anchor>
      <arglist>(const SbBool smoothing, const int numPasses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAntialiasing</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ac5ea7dd16507c17ce6aa0673e40e1054</anchor>
      <arglist>(SbBool &amp;smoothing, int &amp;numPasses) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLRenderAction</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a8be5c7e2b1af9dafa38be71be45e33b4</anchor>
      <arglist>(SoGLRenderAction *const action)</arglist>
    </member>
    <member kind="function">
      <type>SoGLRenderAction *</type>
      <name>getGLRenderAction</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ababaefe531c3dd52231155d2e8e97e85</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAudioRenderAction</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>afa2f9dc4d6ab4f0df90998593e75d8d5</anchor>
      <arglist>(SoAudioRenderAction *const action)</arglist>
    </member>
    <member kind="function">
      <type>SoAudioRenderAction *</type>
      <name>getAudioRenderAction</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a64cd1acc8d3178b4f55c3933687bbc47</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPreRenderCallback</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a76d7c3dddabe07cad68eadbdc98c732b</anchor>
      <arglist>(SoRenderManagerRenderCB *cb, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePreRenderCallback</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a7725e8cc9f1b4e013b2a7ebfe5f452d8</anchor>
      <arglist>(SoRenderManagerRenderCB *cb, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPostRenderCallback</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a58329aea3262e2e23010b7531cc4b893</anchor>
      <arglist>(SoRenderManagerRenderCB *cb, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePostRenderCallback</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a12723c2556a6ae3e27454c6dae58a7a6</anchor>
      <arglist>(SoRenderManagerRenderCB *cb, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a81e3441ea669167335e6f5baf4d3cf2c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableRealTimeUpdate</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a0493a93fcbdde26fe6d22ae1b4e5a3cd</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isRealTimeUpdateEnabled</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a8182afec612458fec397160a0caa9ad7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getDefaultRedrawPriority</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a04f925ac3085e1dccdabc5e071880cf9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>isActive</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ab6d7629e5bcbf41f4558cbe909d1e47a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>af794bd8a89d7a0dcb497cb7a7052ef4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>renderScene</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae0a117546dc0c5ceeaf9904d6a0cde33</anchor>
      <arglist>(SoGLRenderAction *action, SoNode *scene, uint32_t clearmask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>actuallyRender</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aaa34c0d12f2b8f06238ff355e55137ea</anchor>
      <arglist>(SoGLRenderAction *action, const SbBool initmatrices=TRUE, const SbBool clearwindow=TRUE, const SbBool clearzbuffer=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>renderSingle</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>aa82554c456af93a00b24ab6edf367fc2</anchor>
      <arglist>(SoGLRenderAction *action, SbBool initmatrices, SbBool clearwindow, SbBool clearzbuffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>renderStereo</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>a4e7144a5d1746a0ad2ad0d42946b6715</anchor>
      <arglist>(SoGLRenderAction *action, SbBool initmatrices, SbBool clearwindow, SbBool clearzbuffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initStencilBufferForInterleavedStereo</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ad79cad741c75c7f4078346da075628bf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearBuffers</name>
      <anchorfile>classSoRenderManager.html</anchorfile>
      <anchor>ae631f68a83e94fadccb9c072276d6552</anchor>
      <arglist>(SbBool color, SbBool depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoReorganizeAction</name>
    <filename>classSoReorganizeAction.html</filename>
    <base>SoSimplifyAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a71cb68acd7d070f5b7e331134ff6f659</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoReorganizeAction</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>ab9d0e97cc83ffeefcb5222b4785586f4</anchor>
      <arglist>(SoSimplifier *simplifier=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoReorganizeAction</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a0d11c9913fbefa3a7137172a0fc8aee9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>aec487b8e9a8cb6501ec7901018e954d8</anchor>
      <arglist>(SoNode *root)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a6eb785a31b9cffbc0dbbc74d587b64c9</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a056620e91eb6f55bb51af9dc0efed5ae</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a0cecedc16815d13975e6140c0ba497a6</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>ae294bc452638aa2238ccefad901f8d08</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a9b7b6976d9ed22de414c03eead8ccfd4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoReorganizeAction.html</anchorfile>
      <anchor>a9bfa197339cfb4c8b730c4b3385777ff</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoReplacedElement</name>
    <filename>classSoReplacedElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoReplacedElement.html</anchorfile>
      <anchor>aca56a97e24325fb4892226e6ef43e23f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoResetTransform</name>
    <filename>classSoResetTransform.html</filename>
    <base>SoTransformation</base>
    <member kind="enumeration">
      <type></type>
      <name>ResetType</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>aff3d681c2399f5be778097f94b5598fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRANSFORM</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>aff3d681c2399f5be778097f94b5598fda30e7fa82d5edb52fd10ef75087eeea02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BBOX</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>aff3d681c2399f5be778097f94b5598fda1e28c5eef811d69f90d9b35a2a4281e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>aaa61a17140f62ee8bcf06d6d28b57151</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoResetTransform</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>a6f223c1f80bdaed3cf021e2ec1ab3fac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>a786e52fd7761b645eccc492a51c1d8ab</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>a58ade0f96858be2d49389b473bb0ac4a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>a3ddc94dda88983aef61664c54b11c54e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>afb5eb44b6a3b429625859f4509a002b7</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>ad00a46bc69090b2cb2f1d254384ac278</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>af6403b701a6942d564799045afd4a990</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>a174f1ad85fe18c5062e8dcd28d570b1b</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>whatToReset</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>afc3702d55c848d7e5b235f65aa20b40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>ab43066b5e78fbbeff4b4449a77bb9146</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoResetTransform</name>
      <anchorfile>classSoResetTransform.html</anchorfile>
      <anchor>a6e9f0ac70d6071466fb20283fa11e352</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRotateCylindricalDragger</name>
    <filename>classSoRotateCylindricalDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a2d015e5e42137896081a72b301d0dd22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a04d6fd604865f17f2028faa215671c6a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRotateCylindricalDragger</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a1576d6ec1c2fa52d52492ccda1754712</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjector</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a61e172fd0a872b4605fb7c5902e7870d</anchor>
      <arglist>(SbCylinderProjector *p)</arglist>
    </member>
    <member kind="function">
      <type>const SbCylinderProjector *</type>
      <name>getProjector</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a325853a7dc6ca28ddc48203ce0ffe1da</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a89906f8dd833222624b9cde2d239bfe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a52d47555f787b9ebcd334ce4adf778ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRotateCylindricalDragger</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>af2aba14beb5c43ad352f16d76ecd8f81</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>ae99ffb45d421fedf6cfd3c27282318a1</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a4de8d8137a749fa823fb6655e47e955b</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a587148eb9e57eb2754da618d830c44da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a74625712c2b7eeae4bc681ac4dcca959</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a16e5ae1322d35d8c4deb178d72abbc7c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a365fff9bd6a79f2c6f0b9e557ae97622</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>aafb368f2ed9f6b7c33676c5051a6e587</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>doneCB</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a23107d6770d73da8f0ce88cf6b417650</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>aecf1ea6c9c1d1b2ef1979a1003bb4408</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>ac37b6fb32f773f1f3f392c532fea7abf</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a8060a49fa34c4f86a473d718428cc9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbCylinderProjector *</type>
      <name>cylinderProj</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>a71b51e39aef999f7cd1e8362b3963d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>userProj</name>
      <anchorfile>classSoRotateCylindricalDragger.html</anchorfile>
      <anchor>afe3103c732a13e57cc7d52a3d7b6a007</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRotateDiscDragger</name>
    <filename>classSoRotateDiscDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a276df1361d13996e0a280ce45e61b176</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>aaeb9d2e4e2d15b3f0df359b025fab843</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRotateDiscDragger</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>ac5c60319ae6700651f7ea7ef37ccfbd9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a069a5c9dcf02b23418e2eeb0bced07fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>aa03057718261c27c805b3a21881ab8c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRotateDiscDragger</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>adb437a80cd73bdead836cd65fc147ec2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a921e4c679228b04e4e58a0665c7ca60e</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a16bc68f9ede7e33b60027f14602781db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a3cda5577b1318a54f4154cef1910aee2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>ae2d0fb22efa807eacc07d9181e6a377c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>ae093a5b08aee1e26cb3617cf91b64472</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>ac91297ac0091128061072900a6e55615</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>doneCB</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>aa92483f5f670b3f26ec0d8be90bd5acf</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a5cb4f8a6750f51de861634ce0c1fd26d</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>ae82f815ed76b150e05b94e337345938d</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a5aad4a074bb96fdb3623fb19af2f1df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlaneProjector *</type>
      <name>planeProj</name>
      <anchorfile>classSoRotateDiscDragger.html</anchorfile>
      <anchor>a03c75b8753db45e3496d59f076e26734</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRotateSphericalDragger</name>
    <filename>classSoRotateSphericalDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a8923a30ba906a813b785a630257cd7c1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a8e22f7ca80e5069073e1f0c986f6e368</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRotateSphericalDragger</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a1feff0d736ae22ffd2f6bc1be8cd0aba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjector</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>ae3825a3b498f47dfcf9c7fb58055f094</anchor>
      <arglist>(SbSphereProjector *p)</arglist>
    </member>
    <member kind="function">
      <type>const SbSphereProjector *</type>
      <name>getProjector</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a3fe455e036af1f289ace4789d5ab12f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a94ddf31783821b046146f0a3800bb010</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a2666d4c9478786b3e102b83f74e1877b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRotateSphericalDragger</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>aef28beaaf0db1d88307c4a4a2c6e3e03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a8aa0388c6731115f6e8e825257f1349d</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a5dd74d015b255ce0ff16196a1ff1bb8d</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>aefcafb68da8f20710cff3b398e7651b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a0bba9a063c2b125332524f066828110a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a113b5b601700cada470e9d7ea77c5337</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a5570f1b4d693f3e91a5372d4f53ac936</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a8e5753b12b20aacd0314221592b62fe8</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>doneCB</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a35bfa6e9fbebdcd67a98126afefb1be9</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>af988e14e76c6c1c77832395957d4746d</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a4573ed592f6d37fd15eae67c5977bf4a</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a673df6cdec09a303f4dab90ed82fd7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbMatrix</type>
      <name>prevMotionMatrix</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>aaca0e39d554e98d2227101c98fc749a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>prevWorldHitPt</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a5e75bf09769317d1bc22c3c748c0bd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbSphereProjector *</type>
      <name>sphereProj</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>ab0229ed1c29e2d55a254a23dff0ff001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>userProj</name>
      <anchorfile>classSoRotateSphericalDragger.html</anchorfile>
      <anchor>a38954f54b35212da972d69f2126805ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRotation</name>
    <filename>classSoRotation.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>a00960cfef491ac369a5a0dd6612d8d1b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoRotation.html</anchorfile>
      <anchor>ab1e426fcb1a8a7be44695603c83fe087</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRotationXYZ</name>
    <filename>classSoRotationXYZ.html</filename>
    <base>SoTransformation</base>
    <member kind="enumeration">
      <type></type>
      <name>Axis</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>afe6a3f9d0f3a142fd2b57309107df652</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a238ef7357c75a5bb8f8a7c2f3e73fd04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRotationXYZ</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a82135baa87e2cbafc71f759af2128c63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbRotation</type>
      <name>getRotation</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>ae13228a315a58efa60028a9a5ad32ae7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a443531482f75661c618f22fbe91e0e06</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a91151eb20d89f40741c3ac813fb6028a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>ada54450b77b2125c9544e1703a557d3c</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>acff15a0aa6f54da5d4adbcf3867d6e38</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>af38414390917f72aa8f0deaf837ed71e</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>aae2d92051f1d6d8e81bb1fab5f5e50c1</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a6405efe39290ac9d5455012bfb139f81</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>axis</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a48ba83de70eb76dd5c759a9a46df405d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>angle</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>aef535eb2cb783e7d471c69c260663e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>a3af368d511633f0eff62a23615bcda2f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRotationXYZ</name>
      <anchorfile>classSoRotationXYZ.html</anchorfile>
      <anchor>aece4b4636ac1a69b92ce6ccd9807582e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoRotor</name>
    <filename>classSoRotor.html</filename>
    <base>SoRotation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoRotor.html</anchorfile>
      <anchor>a79a3a90046026758eb796f44251d9db0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoRotor</name>
      <anchorfile>classSoRotor.html</anchorfile>
      <anchor>a3239f2beb405d148a8feb1a0c7cc0af9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoRotor.html</anchorfile>
      <anchor>a4ff0665a5105f700ea616b734e2e0762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoRotor.html</anchorfile>
      <anchor>a2d244bc7275f8e18e89c9dbeb9ae93ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoRotor.html</anchorfile>
      <anchor>ac17cb7238cd11c31abf18e13647766e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoRotor</name>
      <anchorfile>classSoRotor.html</anchorfile>
      <anchor>a976dd20ce4f6c5a9dd8185f2268b8a5c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScale</name>
    <filename>classSoScale.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>acf46b9652708b274e4d57d9f045d8bc7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoScale</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a7c1f8c21438519f68b55ae497093f835</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a13b33513fd03d57159f79e07716688bc</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a9a581bcc7062f8efb882a5c0b178815b</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a5a9e70ada8899868ffd30a1cfa1e8a76</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a26ace8bd21c4e4b87b38131446f71c14</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>ab70992289c7c98d1e696194e78c2985b</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a288ba850f2c90cb484cc68042c5ce5aa</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a2d033efcd51a17ce4affc02832d2f069</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>a2c15dfda105af447adf43732e6dc435d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>afea2283f7ef4a395b8be577fb5efa502</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoScale</name>
      <anchorfile>classSoScale.html</anchorfile>
      <anchor>aafe18b05caf5415e806c9791a507ffe3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScale1Dragger</name>
    <filename>classSoScale1Dragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a9e622008ca6db12ee70e67ade120f197</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a388152d2e8e2d63c99e1386c4c2b9dd7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoScale1Dragger</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>acde979a70d10da9e06a93214c997e0dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a2b22f368228ca79173060e08ef3c6833</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>aa191c1645f7a852807e7d93aaf660fc3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoScale1Dragger</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a8c2f307c1419e6563dbc7d7d742d5ca3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a60989a5645eb65650605c0ae50734fb5</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>ac8a4da3c02c861794e1fd8304309fa08</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>ab328301856bb4c91881bbf4a8cb9a464</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a88c7a0da9053acaeead1a4511c9071cd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a4d68fbe72ddcf18ef97feaa96c51e42f</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>ad6671e8ded80da32d413ac54d95f6488</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a1ca12e641755e03cc5cb0032e55ddc16</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a179154b8e63920a2d5d1c47c9aba9287</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a5fe948d97c701582d0a2eb4287444f81</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a1e9aaa7992bd63d099455692422739a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbLineProjector *</type>
      <name>lineProj</name>
      <anchorfile>classSoScale1Dragger.html</anchorfile>
      <anchor>a25f0b322918e79d9cef5bd77c901d9b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScale2Dragger</name>
    <filename>classSoScale2Dragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>afc3fb96c1577cda94d101714a032b0d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a888b5714c0d039e30ebaf5caea8164c3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoScale2Dragger</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a3a28953c0a7bdc84354977c40079687b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>aef6777f9908ab236fb6b71d0ee404796</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a54c3e06beb679119a3bab703df95ee73</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoScale2Dragger</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>afe00712c81c8ef7245d3607d5b9ba829</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>ab60ab35a1153006e383a0437602a0357</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>af8f708039384840c14ca813c1408f11d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>af9fd08100fd09a43f5eb27808624ef7f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a9613c4614f6ca8d676a5391267c69fdd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a27b640e6c194f3f497614e5650507245</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a4290e9c9b99ba1658e34e5bb769718d4</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>ad92900ac401291bbd88f0723b613c18d</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a2b812bdb928af8b75722bd3dc9b72ee6</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>addba00eb29278293c77a2e3576e730eb</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>a8e523be0ff6c5d8bf9723e7c75be2fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlaneProjector *</type>
      <name>planeProj</name>
      <anchorfile>classSoScale2Dragger.html</anchorfile>
      <anchor>aa76640487b6c8778e1378a61ae9ca861</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScale2UniformDragger</name>
    <filename>classSoScale2UniformDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a4f1b245c13e08aef0b685865c41fe6e5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>aba612162cccc9b94f7d79db023e16360</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoScale2UniformDragger</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a80c5220b90ae41b0812c464a6de76078</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a593f703d9ea5347e3342c3efc0da52d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a9cf1e366501bb235075afe954fa3b62f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoScale2UniformDragger</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a59f35fd89df0616c0c0807f3f371806e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a9fec784ea518252c32eb72ab1142ea25</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a224a4ae47ed96214db95dbef4fcd8cfe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a91c0e229a2f6dcc3471651c01f8329d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>aeb9a785e3e2fb26c2bdd38df0ae71e7d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a29e8b39ea478fdc5ac4f9dae3e12e7f0</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a318051f6db4cee2207ed38d5e28736c9</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>aae5f963139d44413fedc0b101ad14950</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>aa5ed45e317cfb462d492c75985e378f1</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>a699677ed37c5533a0ead9de9f5281b75</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>ac7c108b85a61466962eafafecfdf4b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbLineProjector *</type>
      <name>lineProj</name>
      <anchorfile>classSoScale2UniformDragger.html</anchorfile>
      <anchor>af4391e83645414aa15b9b394d638322e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScaleUniformDragger</name>
    <filename>classSoScaleUniformDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a77e63a6f0bc0b0f395c2e2a1b7543f1c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ad8a07b4975295534464f5d2084daaa71</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoScaleUniformDragger</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ac2530ac40d72d7256296f628de39cb50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a479906996b2b456ca9a99bde2de50331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a0fd8428e9ed86bee0fb8d00e88b2d09f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoScaleUniformDragger</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a7fa8b3ad306be1916cf4669b5c6bef32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a2018727ffa570638aa72538028ada561</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ae166f332746592d89502464e1b84934b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ae0dc7068b0ec55d36fa06c4dbb63bcfd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>adf4406d3bac0423745e83e5f3f52613b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a6b04d388f1fadad5907b13a130f334a9</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ae739733fedf6a1f3281104b0ae5a1ae0</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a0a14db706f1058c5d6f493442a963b19</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>aac5e76b37900577833c987aef6d89544</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ab1c98b3b8256a68f979927aa0f816b07</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>ab9e6c8e3165faeaa783cb0c3b0d31227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbLineProjector *</type>
      <name>lineProj</name>
      <anchorfile>classSoScaleUniformDragger.html</anchorfile>
      <anchor>a953ac58b6edac0c6fe863f6d98688d98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSceneKit</name>
    <filename>classSoSceneKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>ad720395694ac3a9715a0e33d0ee4eb46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>a5c9a13a0547ffb806704df910a8cc73f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSceneKit</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>a29306e4350339ca1b6b7e8604834cdbd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCameraNumber</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>a44698e6b485d82d53f5e99a61d7dd932</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraNumber</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>a9b0cbe5e738ff48e9fcd643a1d680b30</anchor>
      <arglist>(int camNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>ad0503e23ee8237faf31d802ac1f1d313</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>a0c498e62e50adf1d211536a0ac1522a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSceneKit</name>
      <anchorfile>classSoSceneKit.html</anchorfile>
      <anchor>a580c20f02f4127be29fa3732d9ee6546</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSceneManager</name>
    <filename>classSoSceneManager.html</filename>
    <member kind="function">
      <type></type>
      <name>SoSceneManager</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a9704986971846565065a072c99484806</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSceneManager</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a210e1ab4142ed3c45f1e476eab4b9bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a0cfa158a909124e3e720f9db8114c489</anchor>
      <arglist>(const SbBool clearwindow=TRUE, const SbBool clearzbuffer=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>aead5d7063b14361bd3a6d04285a3b33d</anchor>
      <arglist>(SoGLRenderAction *action, const SbBool initmatrices=TRUE, const SbBool clearwindow=TRUE, const SbBool clearzbuffer=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a7bd55a2fcc75c5cec4d18f421673c653</anchor>
      <arglist>(SoCamera *camera)</arglist>
    </member>
    <member kind="function">
      <type>SoCamera *</type>
      <name>getCamera</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ad233f21ae635bf5c90c39ebd4e4f1421</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processEvent</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a164724acbbba552857a20b55cb68cf8c</anchor>
      <arglist>(const SoEvent *const event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a0cef7afefe475fb47e0030b6693875a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleRedraw</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>afb650803938936b1fb57c73aa89dcf17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSceneGraph</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a1f41bd4e9b94ecd066a649f6c9b44b30</anchor>
      <arglist>(SoNode *const sceneroot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getSceneGraph</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a26a4b7740e81dbd521fe0c19e0d71712</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>afc73c9086f66e7474e11c25557a425a1</anchor>
      <arglist>(const SbVec2s &amp;newsize)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getWindowSize</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a32fb4f23b81fb2e64c824fd878bbe456</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a4cffa44277eeddbb65a94e0b4e76ba9c</anchor>
      <arglist>(const SbVec2s &amp;newsize)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getSize</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>aa99bc0ace36b4e2770f9e97c65b48f8d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a6853b808d00023c2dadc2547235eedc6</anchor>
      <arglist>(const SbVec2s &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2s &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ae693af509802bd2d8eee8869a9d1578b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewportRegion</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ac5299ca92d36220e4c273435135eb118</anchor>
      <arglist>(const SbViewportRegion &amp;newRegion)</arglist>
    </member>
    <member kind="function">
      <type>const SbViewportRegion &amp;</type>
      <name>getViewportRegion</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a1b8f9a7f6dddc580dcfe1649d813b0f5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a9aa44f74cb725133e94a98d1293cf282</anchor>
      <arglist>(const SbColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a8fcdebb874d57c73c5f097a18fc6f91d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundIndex</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>afa5be65f0d2cc11fcfa8c3a587e1e9cb</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBackgroundIndex</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a35062a43ff9c017974d21401714a156a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRGBMode</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ad2e05b78dc33de00413977cef0a35523</anchor>
      <arglist>(const SbBool onOrOff)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isRGBMode</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a5b75726263240c127a4b93b62a73925e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>af3fda334b83cac661f991216315d516d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deactivate</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>abaa12148fe20e11560eef2be8d4fa2a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderCallback</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a563bde529e8d5c10a1920fa62297857e</anchor>
      <arglist>(SoSceneManagerRenderCB *f, void *const userData=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isAutoRedraw</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>aa1da810d9ee8973d45b59b19c384881f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRedrawPriority</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>abb6debb37351d62af837e9f1780b049c</anchor>
      <arglist>(const uint32_t priority)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getRedrawPriority</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a227e82edc3db77e8ed8fdf338282d8df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAntialiasing</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a275795206d10f49d4c4c0d855ca413a9</anchor>
      <arglist>(const SbBool smoothing, const int numPasses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAntialiasing</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a5a864e97c8addf4893811911afe5f223</anchor>
      <arglist>(SbBool &amp;smoothing, int &amp;numPasses) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLRenderAction</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ad24401b58d7c4eb56448188db83d2b57</anchor>
      <arglist>(SoGLRenderAction *const action)</arglist>
    </member>
    <member kind="function">
      <type>SoGLRenderAction *</type>
      <name>getGLRenderAction</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a1fa9367322ac9b69776989cee3cf3aab</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAudioRenderAction</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a33b8c61c3e0741acba88e33d044b5a0e</anchor>
      <arglist>(SoAudioRenderAction *const action)</arglist>
    </member>
    <member kind="function">
      <type>SoAudioRenderAction *</type>
      <name>getAudioRenderAction</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>afb7e0aa921ebf7bb66772d301e077cc6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandleEventAction</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>acdfb0b6ad76497d2f1d8678aaf2202ce</anchor>
      <arglist>(SoHandleEventAction *hea)</arglist>
    </member>
    <member kind="function">
      <type>SoHandleEventAction *</type>
      <name>getHandleEventAction</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a109cbddba1b5534873fe9384071a8afe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getDefaultRedrawPriority</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a9c50781f068ea9640f33c3ce71985508</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableRealTimeUpdate</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a2ccbbe194653b58779339b4a6de58bc2</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isRealTimeUpdateEnabled</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>a30e5c9b856bd1bfaf344800372a3f8f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>isActive</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ab6e4d265c699bda2348415ab06fae7c0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classSoSceneManager.html</anchorfile>
      <anchor>ae0bd90533913635a4d55717c7daea18d</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSceneTexture2</name>
    <filename>classSoSceneTexture2.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Model</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a6b5f0308c57d4016c630c5bb12f86d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULATE</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a6b5f0308c57d4016c630c5bb12f86d26a8d78402c5c585f109f402d2d02daa36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECAL</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a6b5f0308c57d4016c630c5bb12f86d26ab3290d8558c5a14c6f1923aac08a9cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BLEND</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a6b5f0308c57d4016c630c5bb12f86d26adc5c23d133298648e6ab4e87fc918fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPLACE</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a6b5f0308c57d4016c630c5bb12f86d26ad3a76ad70950bb1127b4c586f66fb9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ab76f95aa60de5b5753520b9462b644c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPEAT</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ab76f95aa60de5b5753520b9462b644c2a3a5dbbdfa290a772587dcdcdbd76fdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLAMP</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ab76f95aa60de5b5753520b9462b644c2a7ad4a917801632a9fc7130f1019c489b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransparencyFunction</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a05be2984fe23a2a1f320c53d5a02e4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a05be2984fe23a2a1f320c53d5a02e4a8af7185d53d148a91d8769771b1568bcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALPHA_BLEND</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a05be2984fe23a2a1f320c53d5a02e4a8a451a224548eeafcbb13616799027af41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALPHA_TEST</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a05be2984fe23a2a1f320c53d5a02e4a8a18739148c37b2573b4a5a5c577befe83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ac5c5cf3ecdff226446e495cc5b9ef6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPTH</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ac5c5cf3ecdff226446e495cc5b9ef6a3af120c97884f90e00a510208cf917fd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGBA8</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ac5c5cf3ecdff226446e495cc5b9ef6a3a73b93c98d5ef0598897bc38ce4920eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGBA32F</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ac5c5cf3ecdff226446e495cc5b9ef6a3af1845ec8737673693d7621f7662f378e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a60ab68f6254b9d26a831591e46fa4093</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ab65e99503744fd8d90eac6fc646d1871</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a76db9ced3534a7046e789d6ad0aff119</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>aebc74a708a70231210c7c63e26fb4565</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>aff4d17c853098de5cb5cf6435f5556b7</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a665ce568af35750391b1d6365d86769f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a667716444a53b28810d1f09388bec8e2</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapS</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a50f193fabb2096001a52448f5f2b0131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapT</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>aaf8cb1279f6e34d53fc5dfb03c823f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>model</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>aab68d19aac299191e248189c7d7867e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>blendColor</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a77b6bbdb57d5cf9cdbe793bfb993b296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec4f</type>
      <name>backgroundColor</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a7eb407e7133231bda6ade026b0c67bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2s</type>
      <name>size</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>afa916aeb3b4db8e7a5c3451c27633df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>scene</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ac1785f4d6f43e5f0b129571e33d23720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>sceneTransparencyType</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>ac5d953499d9dd85190766d33a2015624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>transparencyFunction</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>acb58cd7c4e6ecd50681ab0cadb86b067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>type</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a22e47d847c67f2421740b9a637673e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSceneTexture2.html</anchorfile>
      <anchor>a2209d94316abddfc883545f600b4261c</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSceneTextureCubeMap</name>
    <filename>classSoSceneTextureCubeMap.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>adcf9dd1bac576f3b3981cafad407a4cc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSceneTextureCubeMap</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>ada91921ec94a28ba02eab9fa3735b8ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>a341273024331813eb0743b82990639d1</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>a7d566bb461e6749ec14de6b99b7756cc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>ab5ed3b2c1f789d7d7710f95cbaea6acf</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>a29fb4867b5a3af00a675385762e4218e</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>af5fa008644c21302a3075977710d9352</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSceneTextureCubeMap</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>abccfead98eb6832923bc926553f411b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoSceneTextureCubeMap.html</anchorfile>
      <anchor>a58a98e497e226431b9c92f4ee0796350</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLDollyTarget</name>
    <filename>classSoScXMLDollyTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a1ee91a0492ab642cb7795295b55cccab</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>BEGIN</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a10cf0f730733811a5ab19ed7f54893ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>UPDATE</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>aae93c9de169b372437741a3a7c8aea62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>END</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>ae1c37c441cc9217176457ea7ac924572</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>JUMP</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>ae2d75c12bf5fc6d8e762a6aecdf8bd33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>STEP_IN</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a2fa4b9c2854abb478dbeb2ace2b550f3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbName &amp;</type>
      <name>STEP_OUT</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a25e3623daf602108b97687a366f0e1a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jump</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a86ebbe38ca8a334c32513252ac344b1b</anchor>
      <arglist>(SoCamera *camera, float focaldistance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>step</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a17c2c4a1e7fcc247499e679051e887a3</anchor>
      <arglist>(SoCamera *camera, SbBool exponential, float diff, float min=0.0f, float max=0.0f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoScXMLDollyTarget</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a5d2d959f72c712e4f590f6a5648fc768</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLDollyTarget.html</anchorfile>
      <anchor>a1c06e7a3f0438d4253af4169dfba704d</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Data *</type>
      <name>getSessionData</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a98991c5e8856d863925b273d1ebb86a7</anchor>
      <arglist>(SbName sessionid, NewDataFunc *constructor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeSessionData</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a2c69c6524422c52b30787b8e9a68d43b</anchor>
      <arglist>(SbName sessionid)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbName</type>
      <name>getSessionId</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>abfbd0b1f3f7b37ccab125cf35737d47a</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ScXMLStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>aa19fb42cc5180d28f5c099537ef32767</anchor>
      <arglist>(const ScXMLEvent *event, SbName sessionid)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoScXMLStateMachine *</type>
      <name>getSoStateMachine</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a0b4cba074ddcec3edd9ab63773250bb3</anchor>
      <arglist>(const ScXMLEvent *event, SbName sessionid)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SoCamera *</type>
      <name>getActiveCamera</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>aa85d03bc972c8294f29f48cd8f6fcb96</anchor>
      <arglist>(const ScXMLEvent *event, SbName sessionid)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>getEventDouble</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a8e90b752ad87898b51a79f5b676f9362</anchor>
      <arglist>(const ScXMLEvent *event, const char *label, double &amp;dbl_out, SbBool required=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>getEventString</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a521c7aa4a5ea8c98491f532e1ab6e88b</anchor>
      <arglist>(const ScXMLEvent *event, const char *label, SbString &amp;str_out, SbBool required=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>getEventSbBool</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a5a359b0a4af419d6b422a5e367b4e245</anchor>
      <arglist>(const ScXMLEvent *event, const char *label, SbBool &amp;bool_out, SbBool required=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>getEventSbVec2f</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>ac891bf771c8ee3e632d0571f0541fe88</anchor>
      <arglist>(const ScXMLEvent *event, const char *label, SbVec2f &amp;vec_out, SbBool required=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>getEventSbVec3f</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a3324aac42850495b2ec375894dc597e3</anchor>
      <arglist>(const ScXMLEvent *event, const char *label, SbVec3f &amp;vec_out, SbBool required=TRUE)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>getEventSbRotation</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>a06fcf35662e7d7e737c112d0bf69076a</anchor>
      <arglist>(const ScXMLEvent *event, const char *label, SbRotation &amp;rot_out, SbBool required=TRUE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLEvent</name>
    <filename>classSoScXMLEvent.html</filename>
    <base>ScXMLEvent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLEvent.html</anchorfile>
      <anchor>a6ae22eed0d4e2cd17df5bf8ecdcd8e7e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSoEvent</name>
      <anchorfile>classSoScXMLEvent.html</anchorfile>
      <anchor>a330e3b8d16002b47434dfa99a13deb1d</anchor>
      <arglist>(const SoEvent *soevent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEvent *</type>
      <name>getSoEvent</name>
      <anchorfile>classSoScXMLEvent.html</anchorfile>
      <anchor>a9af99b031e2969a30747fcf07220697a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpIdentifier</name>
      <anchorfile>classSoScXMLEvent.html</anchorfile>
      <anchor>a3c1c64247943173c040bd1dc9bb65700</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLFlightControlTarget</name>
    <filename>classSoScXMLFlightControlTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLFlightControlTarget.html</anchorfile>
      <anchor>ac3849946fe9d97d2167f26c31ee5c4d1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLFlightControlTarget.html</anchorfile>
      <anchor>a41e426aa1e15ee506d1dfff2951c7138</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLMiscTarget</name>
    <filename>classSoScXMLMiscTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLMiscTarget.html</anchorfile>
      <anchor>a35d35e9114543c5cf9c413376df390e1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLMiscTarget.html</anchorfile>
      <anchor>a1bd9afdd566d4c21d66297d48f395e86</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLMotionTarget</name>
    <filename>classSoScXMLMotionTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLMotionTarget.html</anchorfile>
      <anchor>adceb9a357e9b06535cf697d526213aa5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLMotionTarget.html</anchorfile>
      <anchor>ab73bd1dc38be2b6b256b2a8e370a9d78</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLNavigation</name>
    <filename>classSoScXMLNavigation.html</filename>
  </compound>
  <compound kind="class">
    <name>SoScXMLNavigationTarget</name>
    <filename>classSoScXMLNavigationTarget.html</filename>
    <base>ScXMLEventTarget</base>
    <member kind="function" virtualness="pure">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLNavigationTarget.html</anchorfile>
      <anchor>ae069d9168c40e876a58fa4d0f53c4eb1</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLPanTarget</name>
    <filename>classSoScXMLPanTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLPanTarget.html</anchorfile>
      <anchor>a264f01552f7880e2fd436c11be5bdcdf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLPanTarget.html</anchorfile>
      <anchor>a1bc9ef9512f7c984e828860c1109fead</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLRotateTarget</name>
    <filename>classSoScXMLRotateTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLRotateTarget.html</anchorfile>
      <anchor>a40fb8445b1192d006e0ae464c08a6156</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLRotateTarget.html</anchorfile>
      <anchor>a1e80eef7d03f707782589f87bfe5a186</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLSeekTarget</name>
    <filename>classSoScXMLSeekTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLSeekTarget.html</anchorfile>
      <anchor>acf83169dad6fa437f4611857bf219812</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLSeekTarget.html</anchorfile>
      <anchor>a6d93cce7c9530a91ed42ebd2b52898b4</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLSpinTarget</name>
    <filename>classSoScXMLSpinTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLSpinTarget.html</anchorfile>
      <anchor>a22a33e91a378202624996b07227b5bfb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLSpinTarget.html</anchorfile>
      <anchor>a06264565ff274cc1ae96b912c7d98230</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLStateMachine</name>
    <filename>classSoScXMLStateMachine.html</filename>
    <base>ScXMLStateMachine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLStateMachine.html</anchorfile>
      <anchor>ae391bd0fa6d4ab1b3d0e71f5a80a48d9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processSoEvent</name>
      <anchorfile>classSoScXMLStateMachine.html</anchorfile>
      <anchor>aee8fb31d0e01eac95c8161f57da2c2c7</anchor>
      <arglist>(const SoEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getVariable</name>
      <anchorfile>classSoScXMLStateMachine.html</anchorfile>
      <anchor>a964c926574ea81750059586881ec830f</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoScXMLZoomTarget</name>
    <filename>classSoScXMLZoomTarget.html</filename>
    <base>SoScXMLNavigationTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoScXMLZoomTarget.html</anchorfile>
      <anchor>a42880764a260fa7187b524b8fc12ffd1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reset</name>
      <anchorfile>classSoScXMLZoomTarget.html</anchorfile>
      <anchor>acfac0326f5e9864c0ab2b0a40554ebb2</anchor>
      <arglist>(SoCamera *camera)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>processOneEvent</name>
      <anchorfile>classSoScXMLZoomTarget.html</anchorfile>
      <anchor>ab8a236de1f571a2db85a2a03011ac56e</anchor>
      <arglist>(const ScXMLEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSearchAction</name>
    <filename>classSoSearchAction.html</filename>
    <base>SoAction</base>
    <member kind="enumeration">
      <type></type>
      <name>LookFor</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a82f470ac3a858c80abcba30deb61ea08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Interest</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a822473f6d7fe12d1ba4c9e46f76fa3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a92729c3573fa93f2aa1398243b8e101c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSearchAction</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a615102a5076ad4e115b9bdaefe87b5b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSearchAction</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a16ed3d5859085ea213e0854f86191aab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNode</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a0240b3bfcb7841a2b77afd1b032f132c</anchor>
      <arglist>(SoNode *const node)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getNode</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>aa293134a17d8cc49dfc1aefd44110f72</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a039a4e9b35c52ba6c557ba70ca1c23c6</anchor>
      <arglist>(const SoType type, const SbBool chkderived=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>getType</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a66dbd9c7ea1dde4c634f54c4194a7049</anchor>
      <arglist>(SbBool &amp;chkderived) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a2add714af6079bf1687358dc36d4118b</anchor>
      <arglist>(const SbName name)</arglist>
    </member>
    <member kind="function">
      <type>SbName</type>
      <name>getName</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>ac5c7e4c7ad01fc1d352c06a51b6cda83</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFind</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a2ccf8e473dd95ccc9602237789318f0c</anchor>
      <arglist>(const int what)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFind</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a0a25674a44e9e0356e461bac3c9c987e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterest</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>af35db54377e6ba3903616490cba0f3ae</anchor>
      <arglist>(const Interest interest)</arglist>
    </member>
    <member kind="function">
      <type>Interest</type>
      <name>getInterest</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>ac5dbe8625bd71196c8a9dfd21e40b85f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSearchingAll</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>aa3410b208f67fbdf84288c0c0c890ef9</anchor>
      <arglist>(const SbBool searchall)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isSearchingAll</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a750ce734707e34ce9efdf993415420bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPath *</type>
      <name>getPath</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a7bda78192bd0fca30ccb57efa9513865</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPathList &amp;</type>
      <name>getPaths</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>ab64cca81e4ffae6c1d69de01e8ba8fc6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a89e481f720f0894135e2d7de907dd0df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFound</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a913ee98e24a2344167ec3bc5e5a445ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isFound</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a073a738bfa7960bb25d9045e38237eda</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a39c8cf8fbdf2428df3a3218458da0496</anchor>
      <arglist>(SoPath *const path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>ae3b38bc821e9cb6ed0612f0713264d53</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a42fdc9444d7eb7489ef0830f4858d62a</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static SbBool</type>
      <name>duringSearchAll</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a866921a3337fa2376a8437cacd45ca22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>a6ea3c49369645608aacba5a9025251a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoSearchAction.html</anchorfile>
      <anchor>af872bdd2e1a93beee4594cfaaef6ab5e</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSelection</name>
    <filename>classSoSelection.html</filename>
    <base>SoSeparator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a035cd10dec5133adc5054ed895118faa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>aa119fff3cff7236b688f971d42c9f7c1</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a51527ba98d1ed175c4bfc506eba30b2a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoSelection.html</anchorfile>
      <anchor>a8a5c2e9c70ef3faa6251bd1a3f971379</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSelectOne</name>
    <filename>classSoSelectOne.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>a8ce00c6a7af892236b372d55ff41eb07</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>ae5104db97d558d378af0f5478e96baea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>ab83d0b3445297decd7666d39697eac34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSelectOne</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>a57e993f7a5c578d4ce71e19bdb4c221d</anchor>
      <arglist>(SoType inputtype)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>index</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>ab437f04656386e512f6e545a2876a3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMField *</type>
      <name>input</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>af016b9b7a223cc0b14cad1474ec9cdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput *</type>
      <name>output</name>
      <anchorfile>classSoSelectOne.html</anchorfile>
      <anchor>aa4ecf9edff2e8739cd872d3260db829d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSensor</name>
    <filename>classSoSensor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>schedule</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a99166cb15447e892c5dc1085e3621f39</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unschedule</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>a706845e298a21e98af4be9f029017f82</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbBool</type>
      <name>isScheduled</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>abac04269436f8ff1c2e9cd5f0a0058c5</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trigger</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>aa26e7ea1cfa0abd0c72d15bba2bf5b31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SbBool</type>
      <name>isBefore</name>
      <anchorfile>classSoSensor.html</anchorfile>
      <anchor>ada04836f1895bd324dda8fc94a8b49cb</anchor>
      <arglist>(const SoSensor *s) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSensorManager</name>
    <filename>classSoSensorManager.html</filename>
    <member kind="function">
      <type></type>
      <name>SoSensorManager</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>abeccc05aac1a5c6f9dd1acd2d840b3b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoSensorManager</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>af814b68de590aa2f6c0969fd0fe9c545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertDelaySensor</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a61330b4c7025160d37bcc33a13f6cd4d</anchor>
      <arglist>(SoDelayQueueSensor *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTimerSensor</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a7fdfa6ddc1d24ddaa21353c07fa476b8</anchor>
      <arglist>(SoTimerQueueSensor *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDelaySensor</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a1566dfe9d1026d092bbbcf9135c31d5d</anchor>
      <arglist>(SoDelayQueueSensor *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimerSensor</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>ac2874c96dce48be7dc531fa0b3e005f8</anchor>
      <arglist>(SoTimerQueueSensor *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangedCallback</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a5039008fb24defa335d63723528bc915</anchor>
      <arglist>(void(*sensorQueueChangedCB)(void *), void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescheduleTimer</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a6b09f419c039fa5917c2725eab33b82f</anchor>
      <arglist>(SoTimerSensor *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRescheduledTimer</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a189348611c49f36d58af5077f920a162</anchor>
      <arglist>(SoTimerQueueSensor *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processDelayQueue</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>aa077dc9dd11e12cad63016c60e4c9af7</anchor>
      <arglist>(SbBool isidle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processImmediateQueue</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a1e6b511731fc72c3adb16f7f345d11d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processTimerQueue</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a3b5935cf5cdaeaf4825940260e5a142f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isDelaySensorPending</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a23dad9c29887f3039ddc3f751af2e501</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTimerSensorPending</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>ae598bb762c7a417b8f4f45f7a13fc80f</anchor>
      <arglist>(SbTime &amp;tm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelaySensorTimeout</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a017db6daa54156ec1a2f8198fb30d531</anchor>
      <arglist>(const SbTime &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const SbTime &amp;</type>
      <name>getDelaySensorTimeout</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a2a1df40e1496ae286e383b2a8f6ef2bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>doSelect</name>
      <anchorfile>classSoSensorManager.html</anchorfile>
      <anchor>a4733de33513041df15133146fe5910f0</anchor>
      <arglist>(int nfds, void *readfds, void *writefds, void *exceptfds, struct timeval *userTimeOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSeparator</name>
    <filename>classSoSeparator.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a20d6f746333fe5e5b51098e21e7fdd9d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSeparator.html</anchorfile>
      <anchor>a52d32f3065917031f817a6923aadcadd</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSeparatorKit</name>
    <filename>classSoSeparatorKit.html</filename>
    <base>SoBaseKit</base>
    <member kind="enumeration">
      <type></type>
      <name>CacheEnabled</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a9ca337b88c73bf3f95ad7392b51c7b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a1face2d55ba00a9247904daf0e4a4366</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>aba9ade6a20448167344463ddddd6d316</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSeparatorKit</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a777bd75c01c3e2ab37a4b4ddc1852e59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a142e7921678b5d075579caff99989951</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCaching</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a9a5381e3d24ca6f17892dce93792e83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>boundingBoxCaching</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>ac2fc2e42f3069a7e66b600af9e39999d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCulling</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a5237653e0daab24d986acf2301059f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>pickCulling</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>af7c5f3107bb073bb0ee7924d820c81e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a2545f85c784c643c5ac958bccd8db0db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSeparatorKit</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a35fc912085f04f68b30916cc935620a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a55d5caf5ef9514566542781affe6b142</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoSeparatorKit.html</anchorfile>
      <anchor>a25ea8d7e7a737be12ae8d67767f3e6a8</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBitMask</name>
    <filename>classSoSFBitMask.html</filename>
    <base>SoSFEnum</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBitMask.html</anchorfile>
      <anchor>af996b460e494a208a0367f1ab6d67289</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBitMask.html</anchorfile>
      <anchor>af1ec2052ee26ccb6a46cc7cb21105566</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBitMask.html</anchorfile>
      <anchor>ae34469daae6c0c4e7d49b54857f01851</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>ab716f5dad68b35454bf7d0b21095e17a</anchor>
      <arglist>(const SbName name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnums</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>add37440b47f91d4db1e6799a63fae22b</anchor>
      <arglist>(const int num, const int *vals, const SbName *names)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEnums</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a508e9b550fd973b9c9a777f7b8dcd582</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEnum</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a6b367c5d6adae8170b27540b3d58e525</anchor>
      <arglist>(const int idx, SbName &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSField</name>
      <anchorfile>classSoSField.html</anchorfile>
      <anchor>aec64dd05099f8ed4ad7b1c89277e9689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>findEnumValue</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>af0ae9cc8907eb12848e4f31c76b6be9a</anchor>
      <arglist>(const SbName &amp;name, int &amp;val)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>findEnumName</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a4f3fa72f7a349b8d91679f8f4c667715</anchor>
      <arglist>(int value, const SbName *&amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoSField</name>
      <anchorfile>classSoSField.html</anchorfile>
      <anchor>a8bcb2c917d24ab3e90078b4e4857ca78</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numEnums</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a96ffcd9247709d092d8f15e6a64caecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>enumValues</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a9da6555d0c2d479dea050d296428174c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbName *</type>
      <name>enumNames</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a4a80e7e93e9d44be8a52b2b9818e3392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>legalValuesSet</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>ad47b48109b72c570134c2bff1722b2d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBool</name>
    <filename>classSoSFBool.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBool.html</anchorfile>
      <anchor>a2590b331fa45ff4e972e5953c187a90c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBool.html</anchorfile>
      <anchor>a289e072851051783dae5ec910d439ce6</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBool.html</anchorfile>
      <anchor>a49cc43284901e3f89d9559cc4b0b3e6f</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox2d</name>
    <filename>classSoSFBox2d.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox2d.html</anchorfile>
      <anchor>a0abfddb4eaa76ad1db97de927c20ccb7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox2d.html</anchorfile>
      <anchor>a953c59a38f66c103eebd088f9c8ac0d4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox2d.html</anchorfile>
      <anchor>a9db3e83b16217ce2788ca21434a4a659</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2d.html</anchorfile>
      <anchor>a482eb744c2f66575967d31767062a7b7</anchor>
      <arglist>(double xmin, double ymin, double xmax, double ymax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2d.html</anchorfile>
      <anchor>ad841811ddc305454e8ba1e781dfb9598</anchor>
      <arglist>(const SbVec2d &amp;minvec, const SbVec2d &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox2d.html</anchorfile>
      <anchor>a549967147463564dbd1313df1cb6db16</anchor>
      <arglist>(SbBox2d &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox2f</name>
    <filename>classSoSFBox2f.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox2f.html</anchorfile>
      <anchor>a7aa9e97226fb95c12997336c16f588c2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox2f.html</anchorfile>
      <anchor>a7830583d67180c7b8e9eb57bfe8b42e6</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox2f.html</anchorfile>
      <anchor>a20bf8b7932cb75a7e90d29a02b1a1a12</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2f.html</anchorfile>
      <anchor>a2fbc1187acde93735e986b043f233b85</anchor>
      <arglist>(float xmin, float ymin, float xmax, float ymax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2f.html</anchorfile>
      <anchor>aa51741868e8c0d9512a4b5c09fb0def9</anchor>
      <arglist>(const SbVec2f &amp;minvec, const SbVec2f &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox2f.html</anchorfile>
      <anchor>ad9a5d106cd89c48d3c868f8b6c85151b</anchor>
      <arglist>(SbBox2f &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox2i32</name>
    <filename>classSoSFBox2i32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox2i32.html</anchorfile>
      <anchor>aa5ea7ef7c8cdb184933a0b9657e4a95b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox2i32.html</anchorfile>
      <anchor>a2fdb8b0491d5677d5b9e04a1dee1c0a4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox2i32.html</anchorfile>
      <anchor>a35a22ae4df15887dadb05d2489576d0a</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2i32.html</anchorfile>
      <anchor>aff0fad06adfe1ce309fd7f435923c48c</anchor>
      <arglist>(int32_t xmin, int32_t ymin, int32_t xmax, int32_t ymax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2i32.html</anchorfile>
      <anchor>a01ca38735b2f6a8ec8b570f6eac7ff02</anchor>
      <arglist>(const SbVec2i32 &amp;minvec, const SbVec2i32 &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox2i32.html</anchorfile>
      <anchor>abb1a08dea8c4d70b1ba9d793e34ea2cd</anchor>
      <arglist>(SbBox2i32 &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox2s</name>
    <filename>classSoSFBox2s.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox2s.html</anchorfile>
      <anchor>a2dbc590748add80003d535b2076c7932</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox2s.html</anchorfile>
      <anchor>a0c46cd26d789add9fd3e80d6bd120878</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox2s.html</anchorfile>
      <anchor>a41421eeb4da048e900f273775bf69db8</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2s.html</anchorfile>
      <anchor>a42ce056d508c117e67482a7bd4404f12</anchor>
      <arglist>(short xmin, short ymin, short xmax, short ymax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox2s.html</anchorfile>
      <anchor>a30632b1916be2ece4be17d2ef7c33e1f</anchor>
      <arglist>(SbVec2s minvec, SbVec2s maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox2s.html</anchorfile>
      <anchor>a8513a7d1a8eafaabc78b85f0d7c6a34f</anchor>
      <arglist>(SbBox2s &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox3d</name>
    <filename>classSoSFBox3d.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox3d.html</anchorfile>
      <anchor>afb5e5bca5e1e67f9ea0861714c7a9697</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox3d.html</anchorfile>
      <anchor>ae60f1f7df3402dcf73fa257a15644a1a</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox3d.html</anchorfile>
      <anchor>aea4675c1d3f8592707a74cb55be963d5</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3d.html</anchorfile>
      <anchor>a8caad1d4899f8925764fb7edf93ade00</anchor>
      <arglist>(double xmin, double ymin, double zmin, double xmax, double ymax, double zmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3d.html</anchorfile>
      <anchor>a45e0831843bb70907785f8d5964e93e3</anchor>
      <arglist>(const SbVec3d &amp;minvec, const SbVec3d &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox3d.html</anchorfile>
      <anchor>a69fa9173931f71d2a7df14b50fc03884</anchor>
      <arglist>(SbBox3d &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox3f</name>
    <filename>classSoSFBox3f.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox3f.html</anchorfile>
      <anchor>a90add1729783ba4663eed6e468c026e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox3f.html</anchorfile>
      <anchor>a8d46613b4ba932a6ed7c5d62a7c12369</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox3f.html</anchorfile>
      <anchor>a8181b12703addfefbc3b6f2db4c9a16c</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3f.html</anchorfile>
      <anchor>a5aa392e42e05f871128c09428c873ee3</anchor>
      <arglist>(float xmin, float ymin, float zmin, float xmax, float ymax, float zmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3f.html</anchorfile>
      <anchor>a1a95811639370e3d9f1f4f20eeab752c</anchor>
      <arglist>(const SbVec3f &amp;minvec, const SbVec3f &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox3f.html</anchorfile>
      <anchor>abd008c53de59de31e2fefbeaff948f74</anchor>
      <arglist>(SbBox3f &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox3i32</name>
    <filename>classSoSFBox3i32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox3i32.html</anchorfile>
      <anchor>aea523c3b21f7e7867760a55cfd3445bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox3i32.html</anchorfile>
      <anchor>a9e7d00d893bf3e8c1c864c6a3ca6f2cb</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox3i32.html</anchorfile>
      <anchor>a7ca2db7cc1f4627570078ccd9b1b8923</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3i32.html</anchorfile>
      <anchor>a9d8bd6312501158dfd1a9fab47704550</anchor>
      <arglist>(int32_t xmin, int32_t ymin, int32_t zmin, int32_t xmax, int32_t ymax, int32_t zmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3i32.html</anchorfile>
      <anchor>afbb88622535d17a192f827f879b56dfb</anchor>
      <arglist>(const SbVec3i32 &amp;minvec, const SbVec3i32 &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox3i32.html</anchorfile>
      <anchor>a94e3b893068d0cfa83529868a7c6d99b</anchor>
      <arglist>(SbBox3i32 &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFBox3s</name>
    <filename>classSoSFBox3s.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFBox3s.html</anchorfile>
      <anchor>ad7af31440876080426ffa1395fb2750e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFBox3s.html</anchorfile>
      <anchor>a67b935a216351b5d345e1a40bf19dc30</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFBox3s.html</anchorfile>
      <anchor>ac83135ba2b7082a13bc2b95f805cf436</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3s.html</anchorfile>
      <anchor>a0a09550d6f78c28e1eceb78a460f030f</anchor>
      <arglist>(short xmin, short ymin, short zmin, short xmax, short ymax, short zmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFBox3s.html</anchorfile>
      <anchor>ab35d5827d38fdca237cf00cac8f29aa9</anchor>
      <arglist>(const SbVec3s &amp;minvec, const SbVec3s &amp;maxvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFBox3s.html</anchorfile>
      <anchor>a998b80990ba4cbd874d313ebf4a5b5ea</anchor>
      <arglist>(SbBox3s &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFColor</name>
    <filename>classSoSFColor.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>ad540695b7db604e6f463423da7495751</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>aed378f9f2d6657fdd0f3094b00f8e533</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>a5f0f112335c7a720c8d9341561721b1d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>a4c1593d5b0619f7873d92cf2457ca5a6</anchor>
      <arglist>(const SbVec3f &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>a3c86c90e39733f9d449bae41a3fddb95</anchor>
      <arglist>(float red, float green, float blue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>afcf64b0594f5d66f42b7071ed53f02d0</anchor>
      <arglist>(const float rgb[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>a4fffe05880bd9a5355745bfd36a175f4</anchor>
      <arglist>(float h, float s, float v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoSFColor.html</anchorfile>
      <anchor>a163246c6de68a1b90ef7559d27459121</anchor>
      <arglist>(const float hsv[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFColorRGBA</name>
    <filename>classSoSFColorRGBA.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>a499db217f1f10365d6af2e276c0469fd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>ad841dddc23ef85240e3affd52560e27b</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>a7ec2413f3b42b651c9204cdd916c966a</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>aa257fa9d916abe47bd05d99a5a41e7d4</anchor>
      <arglist>(const SbVec4f &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>a9b4214be1587f499e870313f1d9b39d7</anchor>
      <arglist>(float red, float green, float blue, float alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>a191e7eafe1efa66d7278bca01045ecc9</anchor>
      <arglist>(const float rgba[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>a11e4dcc0b7c1b27147cd6437372a113f</anchor>
      <arglist>(float h, float s, float v, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHSVValue</name>
      <anchorfile>classSoSFColorRGBA.html</anchorfile>
      <anchor>a41c616fe1bcbdf794dfd2e1a0f3424e3</anchor>
      <arglist>(const float hsva[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFDouble</name>
    <filename>classSoSFDouble.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFDouble.html</anchorfile>
      <anchor>a95412c8f1b7049048d61a17e5f9cde3b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFDouble.html</anchorfile>
      <anchor>a021cedec6c0f5ba5825adf6c23e5e00c</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFDouble.html</anchorfile>
      <anchor>a3764cc65c3508dee814d2c3ec41d35cf</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFEngine</name>
    <filename>classSoSFEngine.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFEngine.html</anchorfile>
      <anchor>a1222f0a7fc1142fe2f93d137a46e7060</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFEngine.html</anchorfile>
      <anchor>a1cd6bb9fe526863daaf7b6fcd80e9acc</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFEngine.html</anchorfile>
      <anchor>aacd2f4971a924e0101cf13a44ce4aed3</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoSFEngine.html</anchorfile>
      <anchor>afdafcb093e09b6b91c1ee4e2a85a21d4</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoSFEngine.html</anchorfile>
      <anchor>ab16cc1ab455a0185d78d1e48541cb3c9</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFEnum</name>
    <filename>classSoSFEnum.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>afc786081034fdeccf7ac63cc9e194b86</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>acf6d727c78cada401dad1db90f93b398</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFEnum.html</anchorfile>
      <anchor>a0c50a39a7661658e9abbf68dcba1518a</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFFloat</name>
    <filename>classSoSFFloat.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFFloat.html</anchorfile>
      <anchor>ac71081328ad25d8a481ad13f169d1a9c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFFloat.html</anchorfile>
      <anchor>a52fe5875b96f27403ed52d16655da4ff</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFFloat.html</anchorfile>
      <anchor>a7890a64bcc411899f7c3bc5e10ac8e48</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSField</name>
    <filename>classSoSField.html</filename>
    <base>SoField</base>
  </compound>
  <compound kind="class">
    <name>SoSFImage</name>
    <filename>classSoSFImage.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a6dff3a19cc481d0f1a1612a9fa5068b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a8667a2c6d593b37aa2f3ae721e4cc678</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>acdfaa315d6c0b52603ec2e92dab252fb</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>getValue</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a33e149188a7d2d1002170f0c801acd8d</anchor>
      <arglist>(SbVec2s &amp;size, int &amp;nc) const </arglist>
    </member>
    <member kind="function">
      <type>const SbImage &amp;</type>
      <name>getValue</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>ae78f82fcf805ae5e54f46adba7647e81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a5880716aa92e2b3c19da773e6a48d48c</anchor>
      <arglist>(const SbVec2s &amp;size, const int nc, const unsigned char *pixels, CopyPolicy copypolicy=COPY)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a597ca849f52bdd6ea315ba05e5863b08</anchor>
      <arglist>(const SoSFImage &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a6a60d33eed8a7554f98eb259a2f184be</anchor>
      <arglist>(const SoSFImage &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>startEditing</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a6169d4cfdbf28ca74b71fcbf63ab1e13</anchor>
      <arglist>(SbVec2s &amp;size, int &amp;nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishEditing</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a4b49eeb7af4905941aa12be4fb9ea594</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubValue</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a2d300c97e241e37a6c1d218faea3bd93</anchor>
      <arglist>(const SbVec2s &amp;dims, const SbVec2s &amp;offset, unsigned char *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubValues</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a982c36b8a34aff95b3dac006351e7514</anchor>
      <arglist>(const SbVec2s *dims, const SbVec2s *offsets, int num, unsigned char **pixelblocks)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getSubTexture</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a7f79fa315a141dd3207b541dd93d99a6</anchor>
      <arglist>(int idx, SbVec2s &amp;dims, SbVec2s &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasSubTextures</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>ad7b9f62520e29b3fb607e2da64b915e0</anchor>
      <arglist>(int &amp;numsubtextures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeverWrite</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a2d8575f9eed381b9cdae5cb752b5a02a</anchor>
      <arglist>(SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isNeverWrite</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>ada1c34045547d005fd30a1edc3b3a100</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>hasTransparency</name>
      <anchorfile>classSoSFImage.html</anchorfile>
      <anchor>a135e863e5ea6e2b3ea514f3bf68653c7</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFImage3</name>
    <filename>classSoSFImage3.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a6c5017a7805e3116e5cbce9523be52c6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a6774ae69db13c7bfc639f3ad3fdf913e</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a843dd24a88e0457e63653e666607e03d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned char *</type>
      <name>getValue</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a79a3010c16852010cca62e4299c931cb</anchor>
      <arglist>(SbVec3s &amp;size, int &amp;nc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a9bd34f3ee9e3a8d958daedd2268fe28f</anchor>
      <arglist>(const SbVec3s &amp;size, const int nc, const unsigned char *bytes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>ab8ef3df9b63103a19c5186434c8d400b</anchor>
      <arglist>(const SoSFImage3 &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a3f9125d473e3ebace3d89c80d41512d0</anchor>
      <arglist>(const SoSFImage3 &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>startEditing</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a6050a26d3cec684589c7e908041b2117</anchor>
      <arglist>(SbVec3s &amp;size, int &amp;nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishEditing</name>
      <anchorfile>classSoSFImage3.html</anchorfile>
      <anchor>a8c84e01537f01fef2f1bac7414454743</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFInt32</name>
    <filename>classSoSFInt32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFInt32.html</anchorfile>
      <anchor>a9693bb8db1f55e2e694244b6f625fae7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFInt32.html</anchorfile>
      <anchor>a9e468769cabc838e362d44dae0ec5bdc</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFInt32.html</anchorfile>
      <anchor>a390607af6814f88c89bb50a184e86cf5</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFMatrix</name>
    <filename>classSoSFMatrix.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFMatrix.html</anchorfile>
      <anchor>aacf817893631150023d3519a9044b88d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFMatrix.html</anchorfile>
      <anchor>a8f583437e0afdbd2a315ea0c91116e35</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFMatrix.html</anchorfile>
      <anchor>a6ad93e13c7417ea9bbd06607743adaed</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFMatrix.html</anchorfile>
      <anchor>a948122a09e8639e8982f2fe4de0788fb</anchor>
      <arglist>(const float a11, const float a12, const float a13, const float a14, const float a21, const float a22, const float a23, const float a24, const float a31, const float a32, const float a33, const float a34, const float a41, const float a42, const float a43, const float a44)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFName</name>
    <filename>classSoSFName.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFName.html</anchorfile>
      <anchor>a670daebfa179ab2162e453cdc9f9c658</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFName.html</anchorfile>
      <anchor>a5c7c68c05f02f41cc110196ea31d67e6</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFName.html</anchorfile>
      <anchor>aac19ba9792bf7c36cb48650ffa083a1d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFName.html</anchorfile>
      <anchor>ae7e757657dec48d0c2c97c30dfcebef1</anchor>
      <arglist>(const char *const name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFNode</name>
    <filename>classSoSFNode.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFNode.html</anchorfile>
      <anchor>a5d4d8fced7b13e46f5d0d7626b447c77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFNode.html</anchorfile>
      <anchor>ac9f6cf8d1657fde9302672470d3600bf</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFNode.html</anchorfile>
      <anchor>ad397015eff13541c9503e378f76ca063</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoSFNode.html</anchorfile>
      <anchor>aa2f5f9e0ef5519fb9de6b46274b8d5c8</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoSFNode.html</anchorfile>
      <anchor>a8e8c75677892a764544c7cca1214f24b</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFPath</name>
    <filename>classSoSFPath.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFPath.html</anchorfile>
      <anchor>a2d4fb268c4dc1fbf5bcaebb52fbef239</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFPath.html</anchorfile>
      <anchor>ac0781fb1f346517f29e79bb2af80d56e</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFPath.html</anchorfile>
      <anchor>abfa11b7d9e9e88e16370a7fb31e3aa14</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoSFPath.html</anchorfile>
      <anchor>a9e901becab866677723bb6aae8ee4863</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixCopy</name>
      <anchorfile>classSoSFPath.html</anchorfile>
      <anchor>a60f6e7960364afce4547908db55fad00</anchor>
      <arglist>(SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>referencesCopy</name>
      <anchorfile>classSoSFPath.html</anchorfile>
      <anchor>a6621231c47762544cf9cd34648eb90f5</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFPlane</name>
    <filename>classSoSFPlane.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFPlane.html</anchorfile>
      <anchor>a372c9b9e32efc2ade70ceb18ad9d844c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFPlane.html</anchorfile>
      <anchor>a205738a40ecbbe8a0b0467f36c00f356</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFPlane.html</anchorfile>
      <anchor>a55bdd7dd5f635ddd5a0aa5aac8323cdf</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFRotation</name>
    <filename>classSoSFRotation.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>af8e14e98bcfbe1e6a159bb92d459db28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>ae7ad0bc4d552e0cbe39f6e98a9cbe74e</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>af45cc8ae129b3f3f9a482922f1f48804</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>aea53431d3b14eed6dd8b08bc9fef8d87</anchor>
      <arglist>(SbVec3f &amp;axis, float &amp;angle) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>add6a824aafb7fbf2ccd80a5045666141</anchor>
      <arglist>(const float q0, const float q1, const float q2, const float q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>a595a89e001362c09fbb5bf7fbfc8cb20</anchor>
      <arglist>(const float q[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFRotation.html</anchorfile>
      <anchor>af771d6204dc8070834564d81eef0eb26</anchor>
      <arglist>(const SbVec3f &amp;axis, const float angle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFShort</name>
    <filename>classSoSFShort.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFShort.html</anchorfile>
      <anchor>afe76039cc3e2a3bdb7464e421734ff49</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFShort.html</anchorfile>
      <anchor>a132400523b19890773b34d83078bc2d5</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFShort.html</anchorfile>
      <anchor>a19f94fb60d5a393c241fc7a9aed1b7f0</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFString</name>
    <filename>classSoSFString.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFString.html</anchorfile>
      <anchor>a208a26486892d95519db438f243ea3a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFString.html</anchorfile>
      <anchor>af5966cfe2665fc5fc3ce5aa5586b9231</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFString.html</anchorfile>
      <anchor>a8fa32a9f5fd4e189c9cb9337d5baa54b</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFString.html</anchorfile>
      <anchor>a4d2d0e11405314e1e966d023916342f1</anchor>
      <arglist>(const char *str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFTime</name>
    <filename>classSoSFTime.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFTime.html</anchorfile>
      <anchor>ae3930acf0b148b2f435739a907546ee7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFTime.html</anchorfile>
      <anchor>ab883d07da23c4e371d832bffc4ec592c</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFTime.html</anchorfile>
      <anchor>a32768ba49bf45915fe2981747f15bbb0</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFTrigger</name>
    <filename>classSoSFTrigger.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a69ec10177487c7562aabccbe33852a56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a597763a2971f5ef4031f6263a08326b5</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a2f35f4fb16af311de505ad59f3268230</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a045b573e883437b692d8c0c4edc67a72</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a561547d36093c3d75cd57525b1d15670</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>ac35caada131fa81f53d43ee7d7b6ed51</anchor>
      <arglist>(const SoSFTrigger &amp;trigger) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a497a2471a9715a6278a75defd69794ad</anchor>
      <arglist>(const SoSFTrigger &amp;trigger) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startNotify</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>abc5f31011bf42e2b4c5b4a383043609e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>a476fe11c5e7e807492e0a9214dd3ac01</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>touch</name>
      <anchorfile>classSoSFTrigger.html</anchorfile>
      <anchor>adb7f1ab13558de6281846da18a7d2fb7</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFUInt32</name>
    <filename>classSoSFUInt32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFUInt32.html</anchorfile>
      <anchor>a8aa809fa8d6e542074c8d2a92097e265</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFUInt32.html</anchorfile>
      <anchor>a5568b4441f1e980d98e13c3b3cc13aa2</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFUInt32.html</anchorfile>
      <anchor>a69493a2ba4ec852e84d8dcfcad570258</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFUShort</name>
    <filename>classSoSFUShort.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFUShort.html</anchorfile>
      <anchor>a21dd4f2dfaf23d321841914a12005e61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFUShort.html</anchorfile>
      <anchor>a52c477d044961baa59d3302df06d19c7</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFUShort.html</anchorfile>
      <anchor>a31f1eec83f4589ab312abdde2a357032</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec2b</name>
    <filename>classSoSFVec2b.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec2b.html</anchorfile>
      <anchor>a04509bfcae33e0f358912e1e7f2abdf5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec2b.html</anchorfile>
      <anchor>a7e3988333130143484b92f0cc4080eac</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec2b.html</anchorfile>
      <anchor>a4dc907ee0d6e9eba794a197865752ef7</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2b.html</anchorfile>
      <anchor>a76d163a6c2bf8918521c07ecd0061d98</anchor>
      <arglist>(int8_t x, int8_t y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2b.html</anchorfile>
      <anchor>a77d8ece2decbcf6a3720f5334042b595</anchor>
      <arglist>(const int8_t xy[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec2d</name>
    <filename>classSoSFVec2d.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec2d.html</anchorfile>
      <anchor>a448f05cdceb230a92738fe8856b7b082</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec2d.html</anchorfile>
      <anchor>a33067ffa65cbdbe8daa6c139fc8fa983</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec2d.html</anchorfile>
      <anchor>abd229d30868098fc5455e676ee80b831</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2d.html</anchorfile>
      <anchor>aca3e1cbe1242673a559f330eb394e350</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2d.html</anchorfile>
      <anchor>a26213d0aa89972fbc5dbea4261fd487c</anchor>
      <arglist>(const double xy[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec2f</name>
    <filename>classSoSFVec2f.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec2f.html</anchorfile>
      <anchor>a826772210401bfb32ddc4e4be10cf859</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec2f.html</anchorfile>
      <anchor>ac8e23785a5ee149e421f63b62a2ae8e4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec2f.html</anchorfile>
      <anchor>a8fbfbfb53823bd932932ce0c5bac7d33</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2f.html</anchorfile>
      <anchor>a437f86a176f211e17f39ff7db40cdc15</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2f.html</anchorfile>
      <anchor>aee28a456759b6969cecafe3850c43e70</anchor>
      <arglist>(const float xy[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec2i32</name>
    <filename>classSoSFVec2i32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec2i32.html</anchorfile>
      <anchor>acf007f6768dae3259488f6b533d90392</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec2i32.html</anchorfile>
      <anchor>ad4d7ed95f5a67402103741b875428897</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec2i32.html</anchorfile>
      <anchor>a4925ddc5a63861cc274825f6970f1488</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2i32.html</anchorfile>
      <anchor>a193f950abf20fe286863a35a394d325a</anchor>
      <arglist>(int32_t x, int32_t y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2i32.html</anchorfile>
      <anchor>af88e60906153eef2b178cbea14f86b61</anchor>
      <arglist>(const int32_t xy[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec2s</name>
    <filename>classSoSFVec2s.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec2s.html</anchorfile>
      <anchor>a3e5ef604dc8bf7883be2ba6dd2a8af8e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec2s.html</anchorfile>
      <anchor>aa616756b25616a0b43a119c596a9eefe</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec2s.html</anchorfile>
      <anchor>a8cf41f840819b68eefcde8f9db1d9d29</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2s.html</anchorfile>
      <anchor>a5eaad2bd13d5076c47e427ce4e0ae11e</anchor>
      <arglist>(short x, short y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec2s.html</anchorfile>
      <anchor>a6768fd29432c3694e5d38b4ce598ce20</anchor>
      <arglist>(const short xy[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec3b</name>
    <filename>classSoSFVec3b.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec3b.html</anchorfile>
      <anchor>aeb1625ca3072384bfe06d1e6ad9818ce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec3b.html</anchorfile>
      <anchor>a3fd4277f94a98e699efbccba09b778a3</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec3b.html</anchorfile>
      <anchor>a683b840510b5d256497362a6b7ac032e</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3b.html</anchorfile>
      <anchor>afd538b712b7d77f3dfdd0f2cc8667731</anchor>
      <arglist>(int8_t x, int8_t y, int8_t z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3b.html</anchorfile>
      <anchor>ae0d3435e0119b56a9b69e7ebaf2800fb</anchor>
      <arglist>(const int8_t xyz[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec3d</name>
    <filename>classSoSFVec3d.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec3d.html</anchorfile>
      <anchor>a882d52a28840297f576b7f0d3c08fed7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec3d.html</anchorfile>
      <anchor>a79b9ee87ce03ea8a6c73fb5b85cdf912</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec3d.html</anchorfile>
      <anchor>a6923d7f80963f15d5b97f3dd0d8d9574</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3d.html</anchorfile>
      <anchor>aefc4c9dab8bc77fd0fa134f3c3fda466</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3d.html</anchorfile>
      <anchor>a05459a7dc7d1bd938a2c2e8429bcae86</anchor>
      <arglist>(const double xyz[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec3f</name>
    <filename>classSoSFVec3f.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec3f.html</anchorfile>
      <anchor>a633a9c3abe5f581a4e353555448cd5ec</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec3f.html</anchorfile>
      <anchor>a5162520e6e5030ef02d3401d886eea6d</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec3f.html</anchorfile>
      <anchor>af210270615869f63654dc76f6d5ff9f6</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3f.html</anchorfile>
      <anchor>ae843e40538d57a93ea0e140d38ac59b1</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3f.html</anchorfile>
      <anchor>ac85373bbd89fd21fb06b9ec1bdb9ecd2</anchor>
      <arglist>(const float xyz[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec3i32</name>
    <filename>classSoSFVec3i32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec3i32.html</anchorfile>
      <anchor>ac43a1dd06692bb982dae6e65d281e372</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec3i32.html</anchorfile>
      <anchor>afe0e0603eebf6e950f077562c0ce8f02</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec3i32.html</anchorfile>
      <anchor>a576f97497d45ffb14d14a248e577776e</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3i32.html</anchorfile>
      <anchor>a59f5356363a1d3e71e39336b7671cc59</anchor>
      <arglist>(int32_t x, int32_t y, int32_t z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3i32.html</anchorfile>
      <anchor>aef91bf681ec20b4b36c5d3582a3267e7</anchor>
      <arglist>(const int32_t xyz[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec3s</name>
    <filename>classSoSFVec3s.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec3s.html</anchorfile>
      <anchor>a90d64d53e2aa23c5b77a6676893dbb93</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec3s.html</anchorfile>
      <anchor>a715bbfd6f0989a2c4b458e64a934e7f8</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec3s.html</anchorfile>
      <anchor>aba16053d4a863ce0f9e2894caf3141c2</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3s.html</anchorfile>
      <anchor>a4dcdd53a4e85660233502ab0105712e1</anchor>
      <arglist>(short x, short y, short z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec3s.html</anchorfile>
      <anchor>a377950934659241b3c586f6756ff1d90</anchor>
      <arglist>(const short xyz[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4b</name>
    <filename>classSoSFVec4b.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4b.html</anchorfile>
      <anchor>a4a9e457f11edb3a79778e0726d8f942b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4b.html</anchorfile>
      <anchor>a7c6359aa65f247bea6fa72504c6c5595</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4b.html</anchorfile>
      <anchor>a19356e46945f57e1a3bc96218246d76d</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4b.html</anchorfile>
      <anchor>ae55b86a29fdeea3d0ddea787418c732e</anchor>
      <arglist>(int8_t x, int8_t y, int8_t z, int8_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4b.html</anchorfile>
      <anchor>aa62f7363d22c066a43faaacd589bec27</anchor>
      <arglist>(const int8_t xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4d</name>
    <filename>classSoSFVec4d.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4d.html</anchorfile>
      <anchor>a565ba95d639f0ba28460380d06e70d1d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4d.html</anchorfile>
      <anchor>a741dfe1d41d931583d21b54336862e18</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4d.html</anchorfile>
      <anchor>ac067c5b5837c1dfa7e630e315c37b252</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4d.html</anchorfile>
      <anchor>a02356bad46358261fd25cfc8d2209c38</anchor>
      <arglist>(double x, double y, double z, double w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4d.html</anchorfile>
      <anchor>a54d7a7c6e4ea3ae6d7cd98d4dc69b9f5</anchor>
      <arglist>(const double xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4f</name>
    <filename>classSoSFVec4f.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4f.html</anchorfile>
      <anchor>a119057c9db67311a3d8b821bf12bc57e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4f.html</anchorfile>
      <anchor>a8b8f45c2792348464edfdbee57f2dd34</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4f.html</anchorfile>
      <anchor>ab261053aa921a791d0e53a0d21e0ee7c</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4f.html</anchorfile>
      <anchor>a94d3f34e431fef871efb81e021e29b01</anchor>
      <arglist>(float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4f.html</anchorfile>
      <anchor>a4c55a6c141788b7178c8f2b5187f4c73</anchor>
      <arglist>(const float xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4i32</name>
    <filename>classSoSFVec4i32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4i32.html</anchorfile>
      <anchor>a6dd0a821ee26c04d0fa3d15af8aa28a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4i32.html</anchorfile>
      <anchor>a92ce4a60a41c648fbbbb80292605c86c</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4i32.html</anchorfile>
      <anchor>a0efd89ec4b65c462d716ae9a6e339fe0</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4i32.html</anchorfile>
      <anchor>af441c842ab06cee76d8902fa378ed3c3</anchor>
      <arglist>(int32_t x, int32_t y, int32_t z, int32_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4i32.html</anchorfile>
      <anchor>add9ed6d9828a0ab150da951a15e4d185</anchor>
      <arglist>(const int32_t xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4s</name>
    <filename>classSoSFVec4s.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4s.html</anchorfile>
      <anchor>ace87082372eba650a57a9002074abf4b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4s.html</anchorfile>
      <anchor>a47fddf89b0a235401db945939e3956c4</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4s.html</anchorfile>
      <anchor>aafca84611e3d210c1540e0d4fd7c4ef7</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4s.html</anchorfile>
      <anchor>ab7e5d8ff558de1d61a4a511222dfdf62</anchor>
      <arglist>(short x, short y, short z, short w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4s.html</anchorfile>
      <anchor>a416f0d111d0393993e2838b34cd26f1c</anchor>
      <arglist>(const short xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4ub</name>
    <filename>classSoSFVec4ub.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4ub.html</anchorfile>
      <anchor>af81dd0a81f3c8ec706c0b6cfeeeb19c4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4ub.html</anchorfile>
      <anchor>a9a3e6d4e7d6ed57b2805f4a7b2c4cba2</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4ub.html</anchorfile>
      <anchor>a29419621b814dc040928cf40d60d8fcb</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4ub.html</anchorfile>
      <anchor>a95d6f245761ac14464f2e8ef6954e9ad</anchor>
      <arglist>(uint8_t x, uint8_t y, uint8_t z, uint8_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4ub.html</anchorfile>
      <anchor>a6c1cfa87d37384141116ec88860ff379</anchor>
      <arglist>(const uint8_t xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4ui32</name>
    <filename>classSoSFVec4ui32.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4ui32.html</anchorfile>
      <anchor>ae43e07d6f03ace29450221ede429fdb9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4ui32.html</anchorfile>
      <anchor>a76a855aa6b5978f8d9299ccc8c77f6d0</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4ui32.html</anchorfile>
      <anchor>a36fdea46247127aea4d22d5faa01ba17</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4ui32.html</anchorfile>
      <anchor>aa59cdaf50711332a75292fc69b372553</anchor>
      <arglist>(uint32_t x, uint32_t y, uint32_t z, uint32_t w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4ui32.html</anchorfile>
      <anchor>ad39b831962d752a49847884963e9be4a</anchor>
      <arglist>(const uint32_t xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSFVec4us</name>
    <filename>classSoSFVec4us.html</filename>
    <base>SoSField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSFVec4us.html</anchorfile>
      <anchor>a1016f2a766e869234c28b129d5919dcb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classSoSFVec4us.html</anchorfile>
      <anchor>aca58ee7bfe1ad5c0658ccc7bb9d97fa2</anchor>
      <arglist>(const SoField &amp;field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>isSame</name>
      <anchorfile>classSoSFVec4us.html</anchorfile>
      <anchor>afee12642bd67157b678472d9c617e2b1</anchor>
      <arglist>(const SoField &amp;field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4us.html</anchorfile>
      <anchor>a50244668688ea44c1f54f0bd71fc28f1</anchor>
      <arglist>(unsigned short x, unsigned short y, unsigned short z, unsigned short w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSoSFVec4us.html</anchorfile>
      <anchor>a741e7108e57b39283f3ce3af3ac2a7d1</anchor>
      <arglist>(const unsigned short xyzw[4])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShaderGenerator</name>
    <filename>classSoShaderGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>SoShaderGenerator</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a25a48d44118cf418fa132f6bfe7d2945</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoShaderGenerator</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a044ebf73335b28ff58890349671f9d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefine</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a515bb8a72fa37a6df55358c639b905b1</anchor>
      <arglist>(const SbString &amp;str, const SbBool checkexists)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDeclaration</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>ade982991776a5d0ded09dca3cae3a92c</anchor>
      <arglist>(const SbString &amp;str, const SbBool checkexists)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunction</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a18aa8b222f361957911767e91470e5bd</anchor>
      <arglist>(const SbString &amp;str, const SbBool checkexists)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNamedFunction</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a262f56b075202bd61538edf8e3a4088f</anchor>
      <arglist>(const SbName &amp;name, const SbBool checkexists)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMainStatement</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a0ac122267524c49384b8b7eb0621f67e</anchor>
      <arglist>(const SbString &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getShaderProgram</name>
      <anchorfile>classSoShaderGenerator.html</anchorfile>
      <anchor>a5b380d3fd89ddf54de54662e73bb5714</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShaderObject</name>
    <filename>classSoShaderObject.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>aa9848696949e3174b1c09b768d5231de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShaderObject.html</anchorfile>
      <anchor>a1a400224a0e397bf6d67958c8d7ebb58</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShaderParameter</name>
    <filename>classSoShaderParameter.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShaderParameter.html</anchorfile>
      <anchor>a11ca3652d15ded03532340d793c6ca48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoShaderParameter.html</anchorfile>
      <anchor>a649e46f0bf370ada745b707fa0dc61f9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShaderParameter.html</anchorfile>
      <anchor>af4dcf9dc58a6bc510740eb5c8920e6bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoShaderParameter</name>
      <anchorfile>classSoShaderParameter.html</anchorfile>
      <anchor>a7831841fb8ee3e6317dbf31206fc43f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShaderParameter</name>
      <anchorfile>classSoShaderParameter.html</anchorfile>
      <anchor>a366c8e9b2bd076faf5ceffa5bef51bd2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShaderProgram</name>
    <filename>classSoShaderProgram.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>af4366a5e12f08205d24ed3c512dbe59a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShaderProgram</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>a5c317028b250915a631803a722091c05</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnableCallback</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>a40df3fde0c5866b6ebdca47af14bc12f</anchor>
      <arglist>(SoShaderProgramEnableCB *cb, void *closure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>a3b3b52d9fbbe765e462403c5c0b0f04e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>a60aef430fb83bf5b3a0f7a5a0714bfed</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFNode</type>
      <name>shaderObject</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>ab9456609f30a7b9889a61833f0346121</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>a83b67a624086080016049bbffc14d820</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShaderProgram</name>
      <anchorfile>classSoShaderProgram.html</anchorfile>
      <anchor>a5ac9e10bf957f3de8639188d7312ed76</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShaderProgramCache</name>
    <filename>classSoShaderProgramCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoShaderProgramCache</name>
      <anchorfile>classSoShaderProgramCache.html</anchorfile>
      <anchor>a15dc1dfe3ea9f1d9b528c48bfa4b39b8</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShaderProgramCache</name>
      <anchorfile>classSoShaderProgramCache.html</anchorfile>
      <anchor>af054bb953982ff3de1d216242a2e8523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoShaderProgramCache.html</anchorfile>
      <anchor>ac989a77846603c48ad1acb86894bf963</anchor>
      <arglist>(const SbString &amp;program)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>get</name>
      <anchorfile>classSoShaderProgramCache.html</anchorfile>
      <anchor>a3ce38c2cc26a93e9d3e5c30546196932</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShadowCulling</name>
    <filename>classSoShadowCulling.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Mode</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>a660ad0cf711339bc72109fb48babf3da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AS_IS_CULLING</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>a660ad0cf711339bc72109fb48babf3daa222d58869d50ab39d60b1b6c0e11dc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_CULLING</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>a660ad0cf711339bc72109fb48babf3daa3aa79df88f51141ebac2e04de695ef4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>ad3f46de7e8d13f134414a2d5e2137be9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShadowCulling</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>acef775f4bc82900232f25867ef35ca47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>a670507772cef77d575c3d5792e499e9c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>mode</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>a5fa2b93eeb108f229fae399216d79933</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>a495e101ec30e40784360ee51638eaf6a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShadowCulling</name>
      <anchorfile>classSoShadowCulling.html</anchorfile>
      <anchor>ad5aba261b095d034ec24aed738fac2db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShadowDirectionalLight</name>
    <filename>classSoShadowDirectionalLight.html</filename>
    <base>SoDirectionalLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>ac84c1e455dcb4ad0232d639d3ecc9023</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShadowDirectionalLight</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>a51170d9014a218add175d673f44b1fc5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>ad6c159d427e190e2c891d3fadf54cbc3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>shadowMapScene</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>abe32ba27952afde217a46f87f7bc77fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>maxShadowDistance</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>abcd2d523a39688547a80a29c0ad1ce7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxCenter</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>a0736d43e5688a1ba8253afcca5edde98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxSize</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>a51326f83fc8e1fd2889ab0d3a1a3ea05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>a34924a98462b02378641aa26c34a81c5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShadowDirectionalLight</name>
      <anchorfile>classSoShadowDirectionalLight.html</anchorfile>
      <anchor>a5cd20d31d555ab9d18bc71855fc7f157</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShadowGroup</name>
    <filename>classSoShadowGroup.html</filename>
    <base>SoSeparator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>af3040ebeb0543e55a41212c064767ec0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShadowGroup</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>af2bc6876aa1d37a844f84187db5e83bf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>abab5ad841213f97491aa0d171e4cf29a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a136346e61d451925585c945bbeb148fc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a398e820ad8e9e3aef5abc1b89135e78b</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSubgraphSearchOnNotify</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>aed06c73226c44e9089a8eb6614b47a41</anchor>
      <arglist>(const SbBool onoff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSupported</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a11ff36f9230135d9be90a0c3da21988e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a4cf828608b7806c7a5049e24922eb818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>intensity</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>acf66e09f9678e42abc3199387e10fe3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>precision</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a13a263d9169beb50117fbe7decf4da3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>quality</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a1fc9e0cb707252d18cb85f5df9ccfc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>smoothBorder</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a19b392e9579d7f9fb24d63e635885c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>shadowCachingEnabled</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>ab1c1619072f4096a4d77bf1623a252df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>visibilityNearRadius</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a87e8ff6e0fa0ced46afb7f746efddb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>visibilityRadius</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a0024548d9379e28dfd3f500fc89d02ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>visibilityFlag</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a1923b011774abeed924c7dd8f38e06a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>epsilon</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a9c89b284d1df98f614cf69ff60a7024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>threshold</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>abcd4598f26c6418344f2ba6eba0ce68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>a611345f916d72b4a9fb7112cd11c7793</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShadowGroup</name>
      <anchorfile>classSoShadowGroup.html</anchorfile>
      <anchor>abed38bb31e3f53cf9cbc66719357e965</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShadowSpotLight</name>
    <filename>classSoShadowSpotLight.html</filename>
    <base>SoSpotLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a69950c25699e7e7c531d5d7db3a3696c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShadowSpotLight</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>acdf176ead7faef3bfaf1f024180ba050</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a13d71542e1c71aa0a2e1b4c9ac9df568</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSpotLight</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>ac8d939957124e6aad0ae2dcd641e670b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>shadowMapScene</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a5374a5c03aa915af2a36078e9eeae8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>nearDistance</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a5e78dc6434ea9d09f9ceeda0de2420e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>farDistance</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a29e941532f4a652b0b37916343f3e5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>location</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>a85c4fefdc2bf0d9653921b55fcef3756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>direction</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>af1d55d115b1f9751e23989ed39a238be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>dropOffRate</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>adbfe19389f27dfc2740a8cd7bac98448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>cutOffAngle</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>a71ea38384bdabc980dbc64aa472a7cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a40405a6fc6b1fccd2e9c52926f9870bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShadowSpotLight</name>
      <anchorfile>classSoShadowSpotLight.html</anchorfile>
      <anchor>a647380eaa80a46304a8e1de90d9ef251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSpotLight</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>a26d9222804846073a365508041ac621c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShadowStyle</name>
    <filename>classSoShadowStyle.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Style</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a61dc87f3fa93bf59ca5ea5798eac6c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SHADOWING</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a61dc87f3fa93bf59ca5ea5798eac6c30a4220d2411f102823e5bc0cc5d27dd50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CASTS_SHADOW</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a61dc87f3fa93bf59ca5ea5798eac6c30a98b569c69c1efe7b92128ea80301cd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHADOWED</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a61dc87f3fa93bf59ca5ea5798eac6c30a09f25ba237a999769a272f167adb008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CASTS_SHADOW_AND_SHADOWED</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a61dc87f3fa93bf59ca5ea5798eac6c30a2d060bee09e4077fa113336baebf2ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a97589dc23069b03a149c0a34cd6b332a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShadowStyle</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>aeb47f13106186f13d6fd7ce067c6feb5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a15e0bfdc4a862917f3cfe81e9c07df82</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>style</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a4e49949cb859732ba6ea89de529867c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a7997c3ae2362e8a350540bf2221ab0b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShadowStyle</name>
      <anchorfile>classSoShadowStyle.html</anchorfile>
      <anchor>a6a3f5e2a78eaa5a1fef88983fc676f55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShadowStyleElement</name>
    <filename>classSoShadowStyleElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>a0b065f9cecf4824416155b96849a26e2</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>a32dea8dd07849c954f1604e230964c55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>a625b61bd0bdd4c20c9513cc5fad0aeff</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int styleflags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>a1085445a8cd16d6e4323231ed5176607</anchor>
      <arglist>(SoState *const state, const int styleflags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>a55ac6d246c3f7480d69c93c32e54118d</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDefault</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>a31bfc2e44c2cf0943feff8b9e20706eb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShadowStyleElement</name>
      <anchorfile>classSoShadowStyleElement.html</anchorfile>
      <anchor>ab017f67e51834d152ed0d215af9e4be2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShape</name>
    <filename>classSoShape.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>aa353992a612b2f5da9e1caaa54f3d223</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShape.html</anchorfile>
      <anchor>a875fc9e984bbc48e77236cd857a23696</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShapeHints</name>
    <filename>classSoShapeHints.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>VertexOrdering</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a8b5f51cadba677ab1fb3abb6b5bb589f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ORDERING</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a8b5f51cadba677ab1fb3abb6b5bb589fa2f6030ff2a73dbcb19dd16a83d5bb9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLOCKWISE</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a8b5f51cadba677ab1fb3abb6b5bb589fa60096b3deefd82e621aa16d5c08c0495</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COUNTERCLOCKWISE</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a8b5f51cadba677ab1fb3abb6b5bb589fa35af3b282ec837d8d00027262431d2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ShapeType</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>adefced009b47d7b5debc6b2d3ce19cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_SHAPE_TYPE</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>adefced009b47d7b5debc6b2d3ce19cfbad947376acd1a4f2828ad8172c214aff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOLID</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>adefced009b47d7b5debc6b2d3ce19cfbab8299de0fecb6f5cee3ef42fee7e2e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FaceType</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a19a3acc8d0e36b7fa2b43339e1a4b964</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_FACE_TYPE</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a19a3acc8d0e36b7fa2b43339e1a4b964a6ef654ad4f56f00d5c8e1ac0ba394c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVEX</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a19a3acc8d0e36b7fa2b43339e1a4b964a41006d88add0b114dfaf545256a2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a2c129cf4033b56b09471bd7d0b4f2709</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShapeHints</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a1c36b751f6a5b31463cbd32d45816461</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a3bab27ddd4d4e6b89222297db8b0cbb2</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>aad936a2675c5af7ebce1e7354c4a60e1</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a6deab5e0c59f45c9c189c6119feb077e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a548c73331827f815e17b10a786ac49fa</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a1561331b58ecb6a3c97db298544264e7</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>vertexOrdering</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a1ad504e82e6f9478b1ffe3f8730107d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>shapeType</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a259749fdc51667b6a424862f43165790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>faceType</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>a8472cabcb2457e13d74034a3b6b8810a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>creaseAngle</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>ac801b32b6b907de13c07862fbbeb38c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>ab6a778a3cccf83d712dfc230be4dcf53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShapeHints</name>
      <anchorfile>classSoShapeHints.html</anchorfile>
      <anchor>ae68fff8678714750ead87cd5a822c51e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShapeHintsV10</name>
    <filename>classSoShapeHintsV10.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShapeHintsV10.html</anchorfile>
      <anchor>afb4b1ae26823a2041dd3017de95e9e7e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShapeHintsV10</name>
      <anchorfile>classSoShapeHintsV10.html</anchorfile>
      <anchor>a0615da49049e17a6a219a36f611f1713</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShapeHintsV10.html</anchorfile>
      <anchor>a1102ee203d87f7d670dcf5517e5bd0aa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShapeHintsV10</name>
      <anchorfile>classSoShapeHintsV10.html</anchorfile>
      <anchor>aa8ca72f6fd185c78b4c258435d343172</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShapeKit</name>
    <filename>classSoShapeKit.html</filename>
    <base>SoSeparatorKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShapeKit.html</anchorfile>
      <anchor>aed040cfe3c4c6ffc59e9e9667095fa75</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoShapeKit.html</anchorfile>
      <anchor>aaccf22b9045950898f67f4740cec8b20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShapeKit</name>
      <anchorfile>classSoShapeKit.html</anchorfile>
      <anchor>a6d241c016b38ca4d5e0d823df77a72bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShapeKit.html</anchorfile>
      <anchor>a059412d2a4723170072b32d5b34af6d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShapeKit</name>
      <anchorfile>classSoShapeKit.html</anchorfile>
      <anchor>a472b16e7c7dc374a0bed0ec129537c26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoShapeKit.html</anchorfile>
      <anchor>a996543f508a0e8aeebda0d3467b1d030</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShapeSimplifyAction</name>
    <filename>classSoShapeSimplifyAction.html</filename>
    <base>SoSimplifyAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>a4b3222bf2d547606e1ca607e3b2c9fcc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShapeSimplifyAction</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>a058f289274602c749a778f1087774b09</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShapeSimplifyAction</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>aabf79438e3f9592d22b84039d51fad0d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>affb7b2aa827c455ca18a751f75e02417</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>a7160e9f517f456dfb122bf64d6921657</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>afc1ced2f9a271d31e5f586ddd92debe0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoShapeSimplifyAction.html</anchorfile>
      <anchor>ad85a114d11f9f3507a4c9c568ed32036</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShapeStyleElement</name>
    <filename>classSoShapeStyleElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a4fa725cfef18e00da5d73034ba70a11f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ac2fcb1b64e89f14a1ee5e098d364a44d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>aee2f59ea38c1973ddf2f542035c73a1e</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a7199f5d61af39c1c2099bab58d5cb202</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>aee777f311a37db28cd295d6a1793ee3a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFlags</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a95427e44eb592718b4a23074d35d2ff4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>mightNotRender</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a8ac973079390b3bfc82a141be9bec3f9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>needNormals</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>aaa271fcfc4e06967b7bc258e3e8ec238</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>needTexCoords</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ad0ffebfe9f6a7e6889b5ac4e32352ceb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRenderCaseMask</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a0e91aab75b5a906a36a5f5def712c1f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isTextureFunction</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>aa75e2477f6a3ccd9e34fce899f304fe0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ae9157be3e0b6362f5787b41b5de99c26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ae37450781d40eb306b2db00eb69213f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoShapeStyleElement *</type>
      <name>get</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a6869e6bd5089d15cb35df00b06a1733f</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDrawStyle</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a07811720a2fd754e3fc706b6d21a3810</anchor>
      <arglist>(SoState *const state, const int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setComplexityType</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a925c8dd9bce2a11d623fb0cb0f85a17a</anchor>
      <arglist>(SoState *const state, const int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransparencyType</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a319c9d33388d29bf424170c2bf9627ac</anchor>
      <arglist>(SoState *const state, const int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTextureEnabled</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a4e63bec1bec1db1db602095afe9b790b</anchor>
      <arglist>(SoState *const state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTexture3Enabled</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a9bd71beca5c9ed74fcb3cf523c222f0a</anchor>
      <arglist>(SoState *const state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTextureFunction</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a1175af247afc664c65eb1144b7776b8f</anchor>
      <arglist>(SoState *const state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLightModel</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ac882dfc8652eed9977f8e751fe81600f</anchor>
      <arglist>(SoState *const state, const int32_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setOverrides</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ac6bcd1d2539ba494d3b2c2ae0041f0a4</anchor>
      <arglist>(SoState *const state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isScreenDoor</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a85da7fa4caf65e3ed8822256ef19d6eb</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getTransparencyType</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>aa8dda0dd85e2bcde43e15c10698c953c</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBumpmapEnabled</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a9fc65e94c039b6ffcec5f7a48f29001e</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBigImageEnabled</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>af9caa45406f8f3fb88d8d2f27f2361c0</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVertexArrayRendering</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ab81aeecfd56d97b661597ebf44d10b82</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransparentMaterial</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a2e475b10a0c87005d56841c2136c370b</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransparentTexture</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a33a00a6d2794ecbc9dc6b6b30434e182</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setShadowMapRendering</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>acce964dcdbe918ec684920a68b20e579</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setShadowsRendering</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>a3ba7afcd95c160080590d36454dc58f1</anchor>
      <arglist>(SoState *state, const SbBool value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShapeStyleElement</name>
      <anchorfile>classSoShapeStyleElement.html</anchorfile>
      <anchor>ad1de64f940bd9229ec070d825ab71827</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShininessElement</name>
    <filename>classSoShininessElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a17595677ae1b7bed5c104791cf1b582e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a41af4b18e940eb6cd263189a0b923519</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a69b7fd4cb23cd7838e0f3ca68ef696a7</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a7dc1e0bb9c17b1c414ed87bfe3912b42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a93142ba843596113cac37d52a632f579</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a85397ebd0ccf6972a75dc512bd7e296e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>ab13db7506cb4aa3be1af85e2d819aefb</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numvalues, const float *const values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoShininessElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>a770b3c8aa80b35d0ae7fb5f4a0e35dfc</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShininessElement</name>
      <anchorfile>classSoShininessElement.html</anchorfile>
      <anchor>ae1b6f6fc20639b4813812e65bdeb51bd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoShuttle</name>
    <filename>classSoShuttle.html</filename>
    <base>SoTranslation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>a326b721209f8e786a1d3d4e884c836f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoShuttle</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>a1e33f761c38de87c3394b22b072ee6d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>abf847261f74c7f25e544ba2585565b3e</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTranslation</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>af6e41e8b3707a211addc723baec1c5aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>ada85a1c1b76bc5cff92e87661cf0ad51</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a9d4ef82fd0e97dd059ad4b11578d8e65</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a2a9e82dd55148ae4312ceeb35ba2b758</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a5739d30a3a8acd401ea10180f76fca9f</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>aae7f53ea7be83b408d2e1e1eb54af8bd</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a497695b6baa1077e5ead36fc93a539f9</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a33df6c2fa2f6d481847f9173d2f6b149</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation0</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>a884ea58895419eb28ab08151b8ecb13a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation1</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>aece1c9161cc2129fe4a3de271e88ff7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>a011a8b3a88c365e69d4a4aa4ed9c7b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>a8db7104660970b90ce136eb55c4106a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a854b33585bc5271410059beac21531a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>a93f93735eb4c9eaff06c40cd98cfc1a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoShuttle</name>
      <anchorfile>classSoShuttle.html</anchorfile>
      <anchor>ac12e09a7c1124ced981042534a7e4e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTranslation</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a91e8adf5f8850681f5cee237eb928eb3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSimplifyAction</name>
    <filename>classSoSimplifyAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>a7452e1ec2ca46fe0b90394514a753e8c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>a32398e2178dca2897c49897bec6e171e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoSimplifyAction.html</anchorfile>
      <anchor>abc86509a2a38397f500a6d653a3dd487</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSoundElement</name>
    <filename>classSoSoundElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>acdef835502df5bfd8413a2696d6b5701</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a235c024d6bdcf724c0d480ca3a15a4d4</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>adf5dc94a2c61b143daa2bce187af1d44</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>acb2ac0c483433e4e8ef3705c14b32f53</anchor>
      <arglist>(FILE *file) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a3f717309fb39c10cc5fd7de25ef3a968</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>aec58268d4ef6ca95127ef30f964212c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>adcbe3f5a4e988ffcbc2ad6100b6a1798</anchor>
      <arglist>(SoState *const state, SoNode *const node, SbBool scenegraphhassoundnode, SbBool soundnodeisplaying, SbBool ispartofactivescenegraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>setSceneGraphHasSoundNode</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>adffdd83c6c06dd21898f0f8ba4ca21d8</anchor>
      <arglist>(SoState *const state, SoNode *const node, SbBool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>sceneGraphHasSoundNode</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a58ab6a98469d1b64f4060b6668295e30</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>setSoundNodeIsPlaying</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a87538d439df84233cdc4315b4df7d015</anchor>
      <arglist>(SoState *const state, SoNode *const node, SbBool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>soundNodeIsPlaying</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a1e79774762dd46d4091376dd6e11eb09</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>setIsPartOfActiveSceneGraph</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a134ce0dd5e073c4c35addedb0abbf045</anchor>
      <arglist>(SoState *const state, SoNode *const node, SbBool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isPartOfActiveSceneGraph</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>a9eff9335417e4a261ddecd2beed6eff1</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSoundElement</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>aa3c71a70155caac32669356f0ceb8d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDefaultValues</name>
      <anchorfile>classSoSoundElement.html</anchorfile>
      <anchor>ada685c185a56dbebbad680fee7b292fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSpaceballButtonEvent</name>
    <filename>classSoSpaceballButtonEvent.html</filename>
    <base>SoButtonEvent</base>
    <member kind="enumeration">
      <type></type>
      <name>Button</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>ac1a78099c48e9ca031d4abdbcb77a2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>a7490138d945bc36c85d08e2e889fd224</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSpaceballButtonEvent</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>a3416dbe940928a5bc3bf1f50289e3c51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSpaceballButtonEvent</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>ac7be0dec848059a6defff74f9517b014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setButton</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>a6c6888899a0f7a56be99afa80242df38</anchor>
      <arglist>(Button button)</arglist>
    </member>
    <member kind="function">
      <type>Button</type>
      <name>getButton</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>a7f5ec84ba34efe30e7ba4eef70779c66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>a293926ff676d0c5e1b6a5d96fc5c3ed8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isButtonPressEvent</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>a336e82ac863f054b65259218865e96c5</anchor>
      <arglist>(const SoEvent *e, Button whichButton)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isButtonReleaseEvent</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>af7938a0c14840faed13ecd51df17922c</anchor>
      <arglist>(const SoEvent *e, Button whichButton)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>enumToString</name>
      <anchorfile>classSoSpaceballButtonEvent.html</anchorfile>
      <anchor>adbeb95d0582781f7c67f2d72a8e3cc39</anchor>
      <arglist>(Button enumval, SbString &amp;stringrep)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSpecularColorElement</name>
    <filename>classSoSpecularColorElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>ad2ba8c03f8cf694074b26dbfb6c8021d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a29a22fd0bcdd9eb3f3860dcce7e75d2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor &amp;</type>
      <name>get</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a40c7d0ee7ec71f68f38a25511232eb2f</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const SbColor *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a8e0deb7072e888079f598303c43faa9c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a7c36e205ad4b51808038f9fe15655541</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>ad9c059951ee85307625800f4ecd3be5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a09ba69a9e254a18ef749691c76fdb474</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numColors, const SbColor *const colors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoSpecularColorElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a342beaed5ec8744a816a836943c76df1</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSpecularColorElement</name>
      <anchorfile>classSoSpecularColorElement.html</anchorfile>
      <anchor>a7fa238887359877c9e1a5ee04bf3f27a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSphere</name>
    <filename>classSoSphere.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>af33c53b5f17db259c0f1586ecf3b5974</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSphere</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>a5790f83b94eb551143967478abef4f2e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>a423d6458b4513f025f4ed440f9d77df2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>acfe560f1a77abc144b352085b6eb9bf9</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>a4f76403dde6842557694d1b770a55193</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>radius</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>aa2808fcef9f6d9e7479361ec92b5dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>a8401533f0b66d266eef510a1b5cb6fdc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSphere</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>a8277c308b7f45bb0f59b05661c9e77b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>a926994a9ef759541c705d7eb74ccf71c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoSphere.html</anchorfile>
      <anchor>ae05119d9f68f1d7666a53fb0be2f7efa</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSpotLight</name>
    <filename>classSoSpotLight.html</filename>
    <base>SoLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>a30e57635cd3b6e545ce71e538dca2999</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>ab4ab3fe645a571825096760bb1f85141</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSpotLight.html</anchorfile>
      <anchor>a103a122f32a68af11e45bfa84b85ee34</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSpotLightDragger</name>
    <filename>classSoSpotLightDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a8d7b712f4b9da5236abd199b7a380707</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>aaddf0827c52af9b173971b4b9d1e7f56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSpotLightDragger</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a626efa032719b819e682412906f3590d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a7eb22602492203436a681dcdb240d47f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>ac43d096d9a6ed8d8377f3746dfdfeda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>angle</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>ab543408556e5861784e506b52036fb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>add156ac0253b87e1a4eef607949e68de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSpotLightDragger</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a711d2485bd59a2fa11448c661c0f4b5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>ac9f51c0133d15f5011c632577176429a</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a54d8e06e3ddb2677d09cb5e4a17a8325</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a0b769920ba96776178bc508ad28d6587</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a41404c22247ef470972e25679924b444</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>abeccafcf97699934b4b37f05275cb970</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBeamScaleFromAngle</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>afeeaadec63915829ec9ff322942642ea</anchor>
      <arglist>(float beamangle)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a6a657ec41269fb8ba87db12655e79168</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a07e01494e3dde41ef76ee39b578a417c</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>doneCB</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a3c955a01348d1e60968a203de9296d0f</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a853bba928334fcbde8a4a8724df1d327</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>ae7c0b2cee5d971591aab5486b116ef85</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotFieldSensor</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a26a18ddf42aceae6d495272424c58210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>aebdeb4aa8646744668faf45be79cb528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>angleFieldSensor</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a0bad2bba32e250db880b8930caa1fe5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlaneProjector *</type>
      <name>planeProj</name>
      <anchorfile>classSoSpotLightDragger.html</anchorfile>
      <anchor>a558984aefc55d7a969522d6bfaa423bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSpotLightManip</name>
    <filename>classSoSpotLightManip.html</filename>
    <base>SoSpotLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>ad19a99305656ab6de8d1b6ac60947e0b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSpotLightManip</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a8c1de3fe32f01010314a0e5f1a410be9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoDragger *</type>
      <name>getDragger</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a1bbca8c91d1b6604fdf65c54f2270107</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceNode</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>ada5f4432cc5b08b16e27c3d697ac2943</anchor>
      <arglist>(SoPath *p)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>replaceManip</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>ab389be5cc4d634324cd79dda624896a2</anchor>
      <arglist>(SoPath *p, SoSpotLight *newone) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a6646ee084e267e2c0a9ad722ffb0b326</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a5f6dbcf334b10d45e8f03cdf6efe9616</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>adeeb8d205cca15a87346ca432feb5f3e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>ae6e88e4b78a1c78751e657c0bd6e4ab9</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a9032e4751cd3e6afcba96ae6165c38ac</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>abb99327f4543d06745601983549d1362</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>ad914402827774baec7965fa1385da130</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a11a3a1d746d7079c59f13ebb3fe9670d</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a3cf2ab6bd834c4e28b175b50ee2ace45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a7a9a2c25eb3e8d3b954d79c9420f0686</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSpotLightManip</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>abcf4f5e0bc4c9270e18fb01280b1d387</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDragger</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>ade7f23e2bc4cce0ac8be73cdbffed1da</anchor>
      <arglist>(SoDragger *newdragger)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a4597be6fde6a4f7ff8023f858be36566</anchor>
      <arglist>(const SoFieldContainer *fromfc, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>transferFieldValues</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>abf6823bea33cb96fd2b29182638e6361</anchor>
      <arglist>(const SoSpotLight *from, SoSpotLight *to)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a2bbc6eb794a8ae6426a7d1574c6d14df</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>af3675d1a35b59d431cfef1696719a070</anchor>
      <arglist>(void *f, SoSensor *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>locationFieldSensor</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a47e38fd14c0525f5bdeaa7bb800ef99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>directionFieldSensor</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a790e759444fe7341bb7b562d91ef2c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>angleFieldSensor</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a134fd59a4d0eb102382d1c0afb8436a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>colorFieldSensor</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a5b74b34c726321fecf29081cea7249db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoChildList *</type>
      <name>children</name>
      <anchorfile>classSoSpotLightManip.html</anchorfile>
      <anchor>a366d602a24f94e5d5dc6e49d4b27ec49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoState</name>
    <filename>classSoState.html</filename>
    <member kind="function">
      <type></type>
      <name>SoState</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>a94916d151a7e7c45aca1e5f684975a48</anchor>
      <arglist>(SoAction *action, const SoTypeList &amp;enabledelements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoState</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>ac158f1d8718173a61a9db10bd95d751d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoAction *</type>
      <name>getAction</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>a34f184c056e248b3539b1cce0ffab82b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoElement *</type>
      <name>getElement</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>aff4a1d584519c8b108ec273298a09860</anchor>
      <arglist>(const int stackindex)</arglist>
    </member>
    <member kind="function">
      <type>const SoElement *</type>
      <name>getConstElement</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>aa2d86fd440b34353659312850380d7c8</anchor>
      <arglist>(const int stackindex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>a3cfd0e43dfb2469eec5dd9701860ec9a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>a9bd01b48366dfda61f0b0b4f2a4fdac7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>a3041ab0d12b148abe9a1031ec91d4847</anchor>
      <arglist>(FILE *const file=stdout) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isElementEnabled</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>a53a979fb6cbd89f28a6756fa51186412</anchor>
      <arglist>(const int stackindex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>ac787e8d1182707207ed4012d9e2b5417</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheOpen</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>af478444cbaebe45de12946295a7c8318</anchor>
      <arglist>(const SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isCacheOpen</name>
      <anchorfile>classSoState.html</anchorfile>
      <anchor>ac457821352458e9c48aea1d7a13097e3</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSTLFileKit</name>
    <filename>classSoSTLFileKit.html</filename>
    <base>SoForeignFileKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>a41a2c51fd719080aa6a8b8d2c528a165</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>aaaed06920b89a910d508e6149caea24f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSTLFileKit</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>a7efe8b3b2a36f857a26f3eba9fc76581</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>canReadFile</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>ac0eabbe29ceb883291eb125c07eaf97d</anchor>
      <arglist>(const char *filename=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readFile</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>aba050f67e720fb9cfc4383ff245a8f1e</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>canWriteFile</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>af7b9178d8abe0dc7cb8c45d830fc6c98</anchor>
      <arglist>(const char *filename=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>writeFile</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>af3b8531fed50b43c4488494b3fe3a04d</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>readScene</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>ad33958b93faf06cadef44e7ef3ddaa84</anchor>
      <arglist>(SoNode *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoSeparator *</type>
      <name>convert</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>af555b6c9556f40107310110a0867e462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>ab89a68943f4e5f4387d62f3d78410f82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>identify</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>a32516b83224c254da61da25179c23971</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>aa66d3218c6bab52c31b28dbf93e87a2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSTLFileKit</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>a25214751672cdf6383604a60aea04d14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>a9117f9002f1bf4571b1d45194b49a270</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>addFacet</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>ab52e916900583e8a96f94df327898964</anchor>
      <arglist>(const SbVec3f &amp;v1, const SbVec3f &amp;v2, const SbVec3f &amp;v3, const SbVec3f &amp;normal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>organizeModel</name>
      <anchorfile>classSoSTLFileKit.html</anchorfile>
      <anchor>a3e6e53d423803f6973b522c0b23529c3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSurroundScale</name>
    <filename>classSoSurroundScale.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>aa45be99e52d804af95e23b770981d7e2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoSurroundScale</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a791040411db4476ca195fa3d5cfa684c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>ac9f775d75056826d60ed2d435239e53f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a742eef47ef7a8530f2b166ed18cc02fc</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoingTranslations</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a6e81c5ed5a4d2fc4c452d7edc0196e0f</anchor>
      <arglist>(const SbBool val)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isDoingTranslations</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a30b3fc1f1699a265532790cca6657a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numNodesUpToContainer</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a5d1f299c5c2ea15f3e1bfbf5ee662b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>numNodesUpToReset</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>af3d44b13f2df84250318b7d5ceae7e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a93321a036df49473ec63d4cfc05cc8a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSurroundScale</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a7dedffcd634b0bdfa508b9fbce23d838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a1cf434aa8a3125e889782cb838bcacfe</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a96b08e05de7d873d291b35b262572d99</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>aa30c5e96c21024c88ea091dbbd14f33c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>adb948487c8f7c4f8decfbf7f0217ec6b</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>acb0eb758ebeab44ae4520442480dd1d2</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMySurroundParams</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>ad48b0edbff1883860dbd270b90e681b8</anchor>
      <arglist>(SoAction *action, const SbMatrix &amp;inv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIgnoreInBbox</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>afb3ae75f4dd97dc3a1dab29476d3eb55</anchor>
      <arglist>(const SbBool val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>isIgnoreInBbox</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a15372ed13d1f6568577f949cd98d35d8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>cachedScale</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>aa92e44b97d7e26c81358f1e9e8cd110d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>cachedInvScale</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a3c9d171bf7fda76ab3113582100a943a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>cachedTranslation</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>aa4e1a9bd348d6bd988bc551786b808e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>cacheOK</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>a790f37525aa6147d1ca0aac8deb2160b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbBool</type>
      <name>doTranslations</name>
      <anchorfile>classSoSurroundScale.html</anchorfile>
      <anchor>ab9e591355b45ca4d78364621135d2c9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSwitch</name>
    <filename>classSoSwitch.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>ace2d13f9428ed2530d2bfeed56c24c66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a1527d49db95a9ed6eb73e8a8a561a66e</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a5025781a90ff400f64fa14e66fbbc9a1</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>a19b44d7e700ce3cd20e2b34e82b54a39</anchor>
      <arglist>(SoNotList *nl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoSwitch.html</anchorfile>
      <anchor>af5c95ccdf051a8d8e32327c57e39a83c</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoSwitchElement</name>
    <filename>classSoSwitchElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>a3e474493634ec34efd42d264aa7132af</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>ac5d5b93c8203c04cb43f53cc83b3e170</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>a94e3e3c441619f5e5522dfd0f70cbb63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>a85f285adf3a9085b224b677ad9902dfd</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>add1b0cbc66253404eb7d47344252e78f</anchor>
      <arglist>(SoState *const state, const int32_t index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>get</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>ae19002c87b9b801d955ac3bbf8143ee0</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getDefault</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>adba94f98abd905232316cdf515f69478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoSwitchElement</name>
      <anchorfile>classSoSwitchElement.html</anchorfile>
      <anchor>a53bc8d9f1fe768e8422edc3980a46add</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTabBoxDragger</name>
    <filename>classSoTabBoxDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>ae553b59930125a974fe3d4f9c663030e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a4355e44eae195a98e9041a58f9e5975c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTabBoxDragger</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a32cff5145eeb196c22a318ebcfc8d8ba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustScaleTabSize</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a085f1a07cac77b009c6f2209c01bc730</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a08eb8946fc17c0b8fcdc9ce38d88b0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a18ad7922ca14f4779224f22ded94e66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a3872ca346c6e97201bcffe8c056241ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTabBoxDragger</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>aad39c53ada6c2f52791d2c2a75738cc3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a682efac08e97d2ddce334d11992c1afc</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a6fa4ab12d17da4e89dad6bd112274ef9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>invalidateSurroundScaleCB</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a18e7a567340514942955b79c7aa06964</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a82a92fbbb02c188d16b1e43b81069f99</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a9552e42bb049fd42cc8886db0d4b3662</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>aa24497600959e9651343113215783299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoTabBoxDragger.html</anchorfile>
      <anchor>a2ad77a4f60cac51975ffa8dd0d3aec67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTabBoxManip</name>
    <filename>classSoTabBoxManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTabBoxManip.html</anchorfile>
      <anchor>a0b133f5ed254ff6950d15604c4d79d02</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTabBoxManip</name>
      <anchorfile>classSoTabBoxManip.html</anchorfile>
      <anchor>aa4dc49420032d118e3fad1f51cf0ef0a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTabBoxManip.html</anchorfile>
      <anchor>ae94c13f55a5d7dd7859b35168b676993</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTabBoxManip</name>
      <anchorfile>classSoTabBoxManip.html</anchorfile>
      <anchor>a80fb907d7965475b5542c37a7235a7b9</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTabPlaneDragger</name>
    <filename>classSoTabPlaneDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a74f4da09616b7999ef7b1c6da7a5a33f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a2c51716b480ce0fc374ee56cc36280d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTabPlaneDragger</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>afdb307c44c92ed13d7805a912f2523f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustScaleTabSize</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a4760303f4b8bbca163d73aa54c06d02e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a9034e26daced84f245bb1834c9093e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a9dad45effaac41a86e248bbe0c705cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a934694c21b4362556b1f597d3c3ed276</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTabPlaneDragger</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a2a7f2cce7714a0eecd7454ed8e6cd9c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>ae0c7f3d4d036c4b1dea15c04b587c5ba</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a725c417c0bf43edd66d77ac283fdcc25</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a2b3794e96be5b3b974c1b9591e411ba1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reallyAdjustScaleTabSize</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>ae3bf7567ef3f9852be02b47742816bea</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getXYScreenLengths</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a190847534b35d6ac27267bafa5905c3a</anchor>
      <arglist>(SbVec2f &amp;lengths, const SbMatrix &amp;localtoscreen, const SbVec2s &amp;winsize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>a497917bdc54288534711d72e1781e658</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>ad7747700b7090a7461921a9fe3215210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoTabPlaneDragger.html</anchorfile>
      <anchor>af0025733585103d3f4ff8ce2ab9656c2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTempPath</name>
    <filename>classSoTempPath.html</filename>
    <base>SoFullPath</base>
    <member kind="function">
      <type></type>
      <name>SoTempPath</name>
      <anchorfile>classSoTempPath.html</anchorfile>
      <anchor>a7e51fe25086b2d8b31240f1f1b3e238d</anchor>
      <arglist>(const int approxlength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simpleAppend</name>
      <anchorfile>classSoTempPath.html</anchorfile>
      <anchor>a6c5ffdcee8d8e15f837eee5b1e48f816</anchor>
      <arglist>(SoNode *const node, const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceTail</name>
      <anchorfile>classSoTempPath.html</anchorfile>
      <anchor>a596c12c349a7299afaa0b177892aa320</anchor>
      <arglist>(SoNode *const node, const int index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoText2</name>
    <filename>classSoText2.html</filename>
    <base>SoShape</base>
    <member kind="enumeration">
      <type></type>
      <name>Justification</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>a2b916b2cdf2af5de4e02289287055195</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>afa1d75cf990ede3c140a05bc2852fa4b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoText2</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>abce21ed959d467b28115c8a72fa88283</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>ab827c34aa2b59c5698377cad267c0cb8</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>ae6126a3954c8350cdb92fa6108149f12</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>a643eeacc05bf4a811c5c59c187df624a</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>string</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>a4942971760f490c3e62d809ceaaa97c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>spacing</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>abe85c0b6f6daed388cfbf38adbf36c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>justification</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>adaf2d2005e6420461e9d57c31f97f4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>af768b57907505654dbb67e39b36813b3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoText2</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>a0f1b8f79b7e79e29e28d8016dc7db302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>a384bdec1433d78bc9c088d6058789cd5</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoText2.html</anchorfile>
      <anchor>a73e0e438e413da41370d5f156c0f6828</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoText3</name>
    <filename>classSoText3.html</filename>
    <base>SoShape</base>
    <member kind="enumeration">
      <type></type>
      <name>Part</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a7a795bea518688db02b74ec9b99edd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FRONT</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a7a795bea518688db02b74ec9b99edd59ad1d4a00f85648a48b36aa6135ca10d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIDES</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a7a795bea518688db02b74ec9b99edd59aac8b4b6bf14c0e49926963773e758291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BACK</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a7a795bea518688db02b74ec9b99edd59ad9f89a1e9bd16f6d57fdebcc211d08ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALL</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a7a795bea518688db02b74ec9b99edd59a3a0fa1954a85f021098fc524bb398e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Justification</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a560b6a63e13298862b0e945ee4775584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a560b6a63e13298862b0e945ee4775584af994e589822a3f42b2857f127af15509</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a560b6a63e13298862b0e945ee4775584a685949a03f855fb9224bcf74e45fa637</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CENTER</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a560b6a63e13298862b0e945ee4775584ad42d86a8828cd5776f7c0d8afc0f7c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>aecf15e6d416224d239459ace6c127e3e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBox3f</type>
      <name>getCharacterBounds</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a220acf8612aaa63a89b506b42f6c6887</anchor>
      <arglist>(SoState *state, int stringindex, int charindex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a73d25411ae2a8486bf85662a30d87598</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a5ee161a6186d0180a643b7f08c865ec2</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>string</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>ae119c4be503e0357d61dedb6f8218332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>spacing</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a0292971c2f1bda6e4e4dac28f13dac57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>justification</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a3ca5396211268bccace35366372cfac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBitMask</type>
      <name>parts</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>aded5e059ecdc86184fbcfe02f6d302ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a40a1decae8a016a3d44e390f16084b48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>ae9dd5d05599692b2e5d6e1e81eae7d46</anchor>
      <arglist>(SoAction *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a598d3d340df34aeb70eb0d997027ae75</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createTriangleDetail</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>a4fd8c9254697231dfe2e25e5e3e3cd27</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3, SoPickedPoint *pp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoText3.html</anchorfile>
      <anchor>aa58b90aa633a2caa7c5ebf2a098aceb6</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextDetail</name>
    <filename>classSoTextDetail.html</filename>
    <base>SoDetail</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a8287afb399e8437773ec18fc9b747acb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextDetail</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a434003745414c03fc319eb99d53801d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextDetail</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a3691b78cee7a14315d1ede7438adef7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>copy</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a9fcc3201736df23f5ea93ace435d15ce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStringIndex</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a06783675d0ae4e18fd8f726fbf609957</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCharacterIndex</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a58928bb9680da910926084a76dffa47c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPart</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a9e9870155f78e3c447d4414cd469b82a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStringIndex</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>ad3c99a6b8153e9bb0ae41919f35917da</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharacterIndex</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a70e4793aa6ec2f2f6c4f8b1cbcea1f64</anchor>
      <arglist>(const int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPart</name>
      <anchorfile>classSoTextDetail.html</anchorfile>
      <anchor>a0e3b552237a0ea30516f6fbf3166eb00</anchor>
      <arglist>(const int idx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextOutlineEnabledElement</name>
    <filename>classSoTextOutlineEnabledElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>aa1e89dbe1c75a84954513e474b99a3ab</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a163c5e12a6ef749a94b8bdcd0b458c82</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a4c7618bea88a315a497f23634b9499eb</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a66eca1ff0f3005a29b5bbbe6289d3213</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a6f5ff361c70f57043143c2c51b47be8d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a150aaae42f30b3d03608ba1fdac57781</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbBool enabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a5b317d3f3d0ad5be83e035af977bd26e</anchor>
      <arglist>(SoState *const state, const SbBool enabled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>get</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>a77fa4e777ee02200791b393fa16fabcf</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getDefault</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>aad2c14d0845d8c2f57ed0143d62c214c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextOutlineEnabledElement</name>
      <anchorfile>classSoTextOutlineEnabledElement.html</anchorfile>
      <anchor>abbce72b1a7aaadaa8af8de33b17314f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTexture2</name>
    <filename>classSoTexture2.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Model</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>aacc5a62d12cbcfd22f198c8a4c5fdeb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULATE</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>aacc5a62d12cbcfd22f198c8a4c5fdeb8aa411b47520c2250d17b82cc8a0153fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECAL</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>aacc5a62d12cbcfd22f198c8a4c5fdeb8ac4948972ba4499ce7b3e7a56faff5b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BLEND</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>aacc5a62d12cbcfd22f198c8a4c5fdeb8a0c926c239fcce3cff4adbd999461acb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPLACE</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>aacc5a62d12cbcfd22f198c8a4c5fdeb8a252528ab66c1105afcef92d457452006</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a262a667689ef20bb704803f78ca2a0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPEAT</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a262a667689ef20bb704803f78ca2a0b1ae4162c6a9bb8c157aa996eff119a9b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLAMP</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a262a667689ef20bb704803f78ca2a0b1a65f9b3b9e0a215303e94475ea476aa27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>aa3ec9c5cf7acb20bc1df41f80094ecb5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTexture2</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a2d48f53a7d91ba143b69b503d83df500</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>ad373bf4c3ca8771ddbd7e72d5e8c3f60</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>adcd0eee183f36508b9e2b6635f8b146f</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a75dc62b95ee51450e6d5085715441423</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a27d02cf91961f00df1b5b87444fba78e</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>readImage</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>ad371311dd08cfb3ab5612596ec68e6bb</anchor>
      <arglist>(const SbString &amp;fname, int &amp;w, int &amp;h, int &amp;nc, unsigned char *&amp;bytes)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>filename</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>abf0223797fb828cff57c0b9b068a5f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>image</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>ab3c686f9f8507621fe7de352380c8e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapS</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>ae97f0350db45f30546844d27073210fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapT</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a8534cee0027273277829f7690439a5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>model</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a0fdf8aee8f0e47e106baec3cce128af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>blendColor</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a713331d8fe06a02caf20d248c2817d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enableCompressedTexture</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a417c61d6519dd1f0a6b1f270e96e96d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a883142d3474daa28e0dd5cda8f0809ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTexture2</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a5fef399fd7f6d483c30f4c07da27e968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a827c4df5de1bf087ca187d0c09de0590</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a0da64c1791ed400b72e6529318271b54</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getReadStatus</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>ad84532cceaf41cba9115367fcbb40225</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReadStatus</name>
      <anchorfile>classSoTexture2.html</anchorfile>
      <anchor>a11050c1af6e5de75e8fbd4ca5af97b74</anchor>
      <arglist>(int s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTexture2Convert</name>
    <filename>classSoTexture2Convert.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTexture2Convert.html</anchorfile>
      <anchor>ac850086c269d5961fb5e82f431901a52</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTexture2Convert.html</anchorfile>
      <anchor>ad71822518c8a51a35fb563e9f4053385</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoTexture2Convert.html</anchorfile>
      <anchor>ad23f2a94ac5dbb629b491f9136431fab</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTexture2Transform</name>
    <filename>classSoTexture2Transform.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>a13ce6d18c99ca21ee028664e935d5d51</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTexture2Transform</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>a52952684f9dfa9deeae22db92d5e8d9b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>ae28800e96141b07bcd4fdb4789da80a8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>ab9fd716be0eda9ed7de94eef35b09aa9</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>ac0c974b202cb6ec0abdc25fdb1bffddc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>acb4dc08706d95aff5810b2bb7367b68f</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>a99c02f79dce74ed87f0e4e3a43310037</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>translation</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>a9b2aa88f85dbf19298115dbf341461cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>rotation</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>af2b817f604c641011f41f694dcf55fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>adc6338f3bc505208cf0bd51b218eb325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>center</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>af2fe456ca53f60f1d0670c4336942506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>a1e2cecaba6c93e192e2b5412e829a8c7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTexture2Transform</name>
      <anchorfile>classSoTexture2Transform.html</anchorfile>
      <anchor>a43b01d7044543cf71b9cf38972da7632</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTexture3</name>
    <filename>classSoTexture3.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Model</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a98ab3107cd1bd52ae202989dbfc809a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULATE</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a98ab3107cd1bd52ae202989dbfc809a8a79dae03e7749fcab3496c37293f4e9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECAL</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a98ab3107cd1bd52ae202989dbfc809a8a0e0b40ebd156c3383aab083c89f75082</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BLEND</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a98ab3107cd1bd52ae202989dbfc809a8af2da28219d3990e5ed8bf497144f5475</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a381510e51ec9f972066f1af7ee0d245c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPEAT</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a381510e51ec9f972066f1af7ee0d245ca8dcfff5a34060f07dad2fc64f357cc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLAMP</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a381510e51ec9f972066f1af7ee0d245caed5662ca0ca171425e6c15169f858e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>abafc789344195e310b0ec675f0f7a603</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTexture3</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a16234b1816b02f037ec2afb27f032383</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a5482dc31ffa067bba5dd6e06420f65ba</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a77ad5603a2d65c0c69c0f33f45562bd4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>abb04a1905b6f4c6a7592c373ec542fbb</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>filenames</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>ab79744e8f63214b15bb00423955ea6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage3</type>
      <name>images</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a1522b5990c8f27e44a25a38180efb2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapR</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>ae9c7cd6e41c6417f489574d5c84b164f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapS</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a953a05d28fa897a49064eeaf876412da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapT</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a173aa7c8e036f6ba56b2e9d2cbe71096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>model</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a07bfa897eb639f7b9071c484fa6dc3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>blendColor</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a377f0e5316914f06fc115744790df2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enableCompressedTexture</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>acf81f40aceaa33ba10ce4bd60fe61d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a62b81eb0627c32744ca49833ffd779f0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTexture3</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>ad3e48c95669421a969a17692878570fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a998d13b15d66c3fc32e869c5f8008399</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a39f899dab0a0219012f52586e97e15ae</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getReadStatus</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>aba91153fb690088104be1278e87f4633</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReadStatus</name>
      <anchorfile>classSoTexture3.html</anchorfile>
      <anchor>a468d71011e3691066cdd36679e178143</anchor>
      <arglist>(int s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTexture3Transform</name>
    <filename>classSoTexture3Transform.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>ad9c8f52ad7826bbc1f2d1399aa6cf6a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTexture3Transform</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a7baa90e6be917cfbc76d29e95644dcfe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a6c0fa50550d63c7db922fec9597cc67b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a72ad5db3927047c3443891f0c6832dcd</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a8a9bf7c1507bb87a45f60807bb92a5e4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a2c8d0e5da24243e1e644ae1154164123</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>aa22b8b48c5c9f6ccd68053251b12d62e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a728491cfe9cdde4a2423db887dd23bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>af5a44b156eae31665e7dca015b8de82d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>aa7f05c7da16e6baa0d2ea4c5cae099e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>scaleOrientation</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a8b6d78f5b4a3970a9bdeab17a5ed0ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>aa90fee70ad09d977041720ba5875147e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>ad9ff84de0371793a97e2307df6240d8b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTexture3Transform</name>
      <anchorfile>classSoTexture3Transform.html</anchorfile>
      <anchor>a7fda9827c5e72cfe36f9eed67a42008a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCombine</name>
    <filename>classSoTextureCombine.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Source</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a8e49300812ff5ddc0fd8df6468a563f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIMARY_COLOR</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a8e49300812ff5ddc0fd8df6468a563f7a289208e9c8e6b74f66024068352a08fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TEXTURE</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a8e49300812ff5ddc0fd8df6468a563f7aa74c4f312285ff32e956975bf70d4d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONSTANT</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a8e49300812ff5ddc0fd8df6468a563f7a788c844c20a76689e5b67b133554ccd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PREVIOUS</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a8e49300812ff5ddc0fd8df6468a563f7a9392e6de4b5d8686b0cba1e52454c827</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Operand</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a1c478a93f2d16aa0bd36904113cacb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SRC_COLOR</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a1c478a93f2d16aa0bd36904113cacb0ba4644d9bcfd9bbfb18b68052598d8ab11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ONE_MINUS_SRC_COLOR</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a1c478a93f2d16aa0bd36904113cacb0bae22544b5c6b14b069c35068b8b54e0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SRC_ALPHA</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a1c478a93f2d16aa0bd36904113cacb0bab56e4e55a20e3d682a81c37d77706b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ONE_MINUS_SRC_ALPHA</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a1c478a93f2d16aa0bd36904113cacb0bade5433e9182f760b6f693a55f0358c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Operation</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPLACE</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823ad4796a15740bc352f448c8c765ded284</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULATE</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823a652a22bbd824b9018cc0ac974c964a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADD</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823a564b64d61191b80687aba92e4b762261</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADD_SIGNED</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823ac772e551c8a00bfb0eb06be255ef04bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUBTRACT</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823a8935c3cf32010f27fbede59ae6ffebf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERPOLATE</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823a582840e4db551b104f41b881b8895fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DOT3_RGB</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823a1dbd5c215b61b27412ea245898721ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DOT3_RGBA</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3794b6806a5a1a8f9aff631bafa19823a3b86dcfb5f4f79bea8cb28b3deb7a65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a315f53aeb4906a13ef6e352410ae160e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCombine</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>ac95a614a15bac7f50c94f2b63d28082a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a48b4e94b90ae1668a4a1b866431857eb</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a92e608c06fee202efea84ec4e05d0e73</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a7e3b1dc2e88c1535b669405ff339fbd6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>ad450f8c67472961ede29a92cf2a2ec60</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a40cc09494f16d66f8ee799debcc1faaa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>a3b20cf184807ad58832010c595f15c04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCombine</name>
      <anchorfile>classSoTextureCombine.html</anchorfile>
      <anchor>adf721d98143afd0d1850e63062078d90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCombineElement</name>
    <filename>classSoTextureCombineElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>aaebecff704dbd584a0e0bb12838dbe54</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>a084ed35521a7bbf8d7ed99d8c8192948</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>a7bfb267299e1102a7f7de3cd1b1ecfd4</anchor>
      <arglist>(const SoElement *elem) const </arglist>
    </member>
    <member kind="function">
      <type>SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>a41e188718de383508dd869ad0edaf8ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>a8c55e45f3a279aaa11a5f3410d8c03a4</anchor>
      <arglist>(const int unit, const uint32_t nodeid, const Operation rgboperation, const Operation alphaoperation, const Source *rgbsource, const Source *alphasource, const Operand *rgboperand, const Operand *alphaoperand, const SbColor4f &amp;constantcolor, const float rgbscale, const float alphascale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>af15e32cf1d8c891c295d45d283076f7a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>af2f15bdf2cacbd06b73a6fd313261e79</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>a06e256a7f153d0e8ba425a8648b3fad2</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int unit, const Operation rgboperation, const Operation alphaoperation, const Source *rgbsource, const Source *alphasource, const Operand *rgboperand, const Operand *alphaoperand, const SbColor4f &amp;constantcolor, const float rgbscale, const float alphascale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>a08230ba94b50d22e310b215196e3a268</anchor>
      <arglist>(SoState *const state, const int unit, Operation &amp;rgboperation, Operation &amp;alphaoperation, Source *rgbsource, Source *alphasource, Operand *rgboperand, Operand *alphaoperand, SbColor4f &amp;constantcolor, float &amp;rgbscale, float &amp;alphascale)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCombineElement</name>
      <anchorfile>classSoTextureCombineElement.html</anchorfile>
      <anchor>aff16d9d1d2c0f68fe3c0e46688146a86</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinate2</name>
    <filename>classSoTextureCoordinate2.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>a3826df5665a05e79ccdbd008df2fbc98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinate2</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>a04034bad8ef00f546aab002baa6c2d4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>a1db1a4276f387cf5fa76d6669fc1f9b4</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>ae2a3c3397bdf4e058bf22066b5afd751</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>aca2b464cd082d4f1edc504f3ea7a2458</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>ad63524a2e52b01e9dddd2346a316ee6e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>point</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>aaf440340d19a8b95159c28dc1391f7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>a9375cf9c2b70cf4eb2d2ba5e606d72b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinate2</name>
      <anchorfile>classSoTextureCoordinate2.html</anchorfile>
      <anchor>aebd155e1460b3627ffcab40c16782ddb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinate3</name>
    <filename>classSoTextureCoordinate3.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>ac2c804d5232490bb8b987366b08e6adc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinate3</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>aaf0862a9c633811a7c646c0bead9f3d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>ab0134efd6a69da5c75234546a7db5f7d</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>a318d06a4a366f2f5a5950cde232eba35</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>a2d584a8df006d960ed9123c54bba8ccf</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>aa4131640e6e410eab17eb9aa8d1ee254</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>point</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>ac71fd24dbaad23296182111afb1f2767</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>a4b79cff56482e1adb542d8b338058633</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinate3</name>
      <anchorfile>classSoTextureCoordinate3.html</anchorfile>
      <anchor>a46282dbb582877beaadc0e2093e4734d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateBinding</name>
    <filename>classSoTextureCoordinateBinding.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a38ef4fbbfae61ed60b8af0dc94601aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_VERTEX</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a38ef4fbbfae61ed60b8af0dc94601aa3a96f8bbf67cb8abe379d2c407df51954f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_VERTEX_INDEXED</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a38ef4fbbfae61ed60b8af0dc94601aa3a37a1ed62ad5fd9ed9ce4f6474249e9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFAULT</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a38ef4fbbfae61ed60b8af0dc94601aa3a61ad1c441b622620e5a439c8373c1ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a541f12521d23ba609ebbb0fe6669989e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateBinding</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a0487f25a20c78fa20606111dde3c56c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a9f3134129c279fdde2fd8bccf0fc2f98</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>aa64b11a69b45ae3588425bfc1c8c8af3</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a81a9381b8e9341f6e16bec6bb2cad325</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a5aaed24c90d02fbb012024f97fff22ce</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>value</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a02c023a54daa257da079ca4bdb4414a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a38b87ba15d1b536180b847567de52b61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateBinding</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a1a21fcce0be287d741ea69c4f9f73c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoTextureCoordinateBinding.html</anchorfile>
      <anchor>a1a89b971af633e8535d237b3c2a9c3c4</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateBindingElement</name>
    <filename>classSoTextureCoordinateBindingElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>aa2fa6c4d030ff22b9569ed99f2809a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>a328a7fa935a91749534cea16bc4c52a8</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>ac5c1b3c46206faa65faaa63d8f0b6057</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>a8c107ffc12148f781b63f16665145932</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>afa7b8de29716cea9a629e3c109b451bc</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>a762ec474c7585fffcf0988ceadf35ae5</anchor>
      <arglist>(SoState *const state, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>get</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>a55965abcfc9e8ed5ee8a60a94ae53ec9</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>getDefault</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>a17fb274e6e6a1a5373d9bcd784f9626a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateBindingElement</name>
      <anchorfile>classSoTextureCoordinateBindingElement.html</anchorfile>
      <anchor>a8fde4df373c3b86cd1057ee2f2426c6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateBundle</name>
    <filename>classSoTextureCoordinateBundle.html</filename>
    <base>SoBundle</base>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateBundle</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>a9d456842edf6e5ac864d57266bdf3994</anchor>
      <arglist>(SoAction *const action, const SbBool forRendering, const SbBool setUpDefault=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoTextureCoordinateBundle</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>a31b65806f765cf79cfa6875da4088c41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>needCoordinates</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>afc7ab6758da738d058852fed94ae1158</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isFunction</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>a192080eba3b09da1a8b82ae0798b09f7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>get</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>aa41dff2387722b75a0b9583b78370f6f</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec4f &amp;</type>
      <name>get</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>a5f3f3807411ef9195b2180d3cea1d5a0</anchor>
      <arglist>(const SbVec3f &amp;point, const SbVec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>a100b4c1a181b58d6a280d62c0e02454d</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>a06153e409089558e649d0ccb198ce2e7</anchor>
      <arglist>(const int index, const SbVec3f &amp;point, const SbVec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>needIndices</name>
      <anchorfile>classSoTextureCoordinateBundle.html</anchorfile>
      <anchor>ac3d2d04f4b4703031233bf865900f3d6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateCache</name>
    <filename>classSoTextureCoordinateCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateCache</name>
      <anchorfile>classSoTextureCoordinateCache.html</anchorfile>
      <anchor>ae4a5ab42ebb72b94f74666803ff654df</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateCache</name>
      <anchorfile>classSoTextureCoordinateCache.html</anchorfile>
      <anchor>a1a6611c141efc54335b8443416569a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classSoTextureCoordinateCache.html</anchorfile>
      <anchor>ad7eb3ff6737b46aae8e123fc20e73478</anchor>
      <arglist>(const SbBox3f &amp;bbox, const SbVec3f *vertices, const int numvertices)</arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f *</type>
      <name>get</name>
      <anchorfile>classSoTextureCoordinateCache.html</anchorfile>
      <anchor>aeb3b17a0a8e3f2f37d7fee082ba2b93a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNum</name>
      <anchorfile>classSoTextureCoordinateCache.html</anchorfile>
      <anchor>aad82632c3e8278acc1c146caabfbe924</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateCube</name>
    <filename>classSoTextureCoordinateCube.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>a0c8561c0f7dcb915704a2554f3819197</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateCube</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>abfa34e594ad66b91965c8e99d0693063</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>a9483c2e3fb4c912dfb65c46be08b372f</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>a62a0508779da275059b1c3eb5293e6bb</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>a69cf2200ae231105ff8cc538caafa398</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>a846116e32071428ec5d33b6fae9d030d</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>a957fc663c027c5081fe5194aa2ea5e68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateCube</name>
      <anchorfile>classSoTextureCoordinateCube.html</anchorfile>
      <anchor>ae56d669b100ec1fbeb841b4a904ef623</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateCylinder</name>
    <filename>classSoTextureCoordinateCylinder.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>a472cc3e3fed9b6aa921cfe38261cd613</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateCylinder</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>af9b7cd73513d14e01c453c5801a8a96a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>a2db5d66a1b9509dd8da1a7c3bcbdcbc5</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>ad141efeaa1bd8aba748047d2bbf0a795</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>ad0dd9e9b98622ced1ac90ef8a2d2987c</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>a658ea763cf760f33e55353c71ee39fe2</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>ab2d2636286003a1de6c71165ba671ba3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateCylinder</name>
      <anchorfile>classSoTextureCoordinateCylinder.html</anchorfile>
      <anchor>a50bdf5051905baa52db353b87ba5c79d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateDefault</name>
    <filename>classSoTextureCoordinateDefault.html</filename>
    <base>SoTextureCoordinateFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a0e7e6a0050f7e60cae97af0a890a4928</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateDefault</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a7f05c965a6067b7c9628ed070593da04</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a6f5dcc43f4565abc57c69bfd2c60e702</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>aea1ec72cc3b6bbf9f4c657007d700aef</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a6caa494e52ce944a5b69638f74417faf</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a4a1d7a344a2b612e24dfe1680609b6b1</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateFunction</name>
      <anchorfile>classSoTextureCoordinateFunction.html</anchorfile>
      <anchor>addaa6900305ad12a499ca3f3a96c9355</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a3a4ed0cd76cd4c883cc7f3d393afabd0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateDefault</name>
      <anchorfile>classSoTextureCoordinateDefault.html</anchorfile>
      <anchor>a611512f87eb65ed65aad56af5580dd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateFunction</name>
      <anchorfile>classSoTextureCoordinateFunction.html</anchorfile>
      <anchor>af9e7cd509a4f8bb963653a6c193ff387</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateEnvironment</name>
    <filename>classSoTextureCoordinateEnvironment.html</filename>
    <base>SoTextureCoordinateFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>af30952d5d019d7fd639e9ee2b7f0b2e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateEnvironment</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>a2eee8fc1dec5ffc9aa57f708a45399fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>a85d3cbe121edb0830db8c7b40cb364e2</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>aefcff7f59beaeaefd58782fff6291866</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>a84c9fbb8c2808a86bfd50bff1626ad2f</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>a0bbf6ab1ff6b4f176ff3883a39e5a44d</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>af926620d3d6461610f0a196be492ce98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateEnvironment</name>
      <anchorfile>classSoTextureCoordinateEnvironment.html</anchorfile>
      <anchor>aa624d47eb951116d524be91f59e42df3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateFunction</name>
    <filename>classSoTextureCoordinateFunction.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateFunction.html</anchorfile>
      <anchor>ab56f353e473e7e42256094636ad163a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateFunction.html</anchorfile>
      <anchor>af1b0b7d1c454ba7b3a03580b03d1bcbf</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateNormalMap</name>
    <filename>classSoTextureCoordinateNormalMap.html</filename>
    <base>SoTextureCoordinateFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>af5d750715140b9911b55e34e0686dec4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateNormalMap</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>a2a611a1cef746cd98bd85b0f1509d3e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>a034bc30100c0b9e4cbb433526ed2f639</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>a9ed5beebd987b9de4054ab1c717eb4b0</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>a0882afc5822b0606e78dfa342543dc28</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>a33f74b94e0745d73fbdc49314598a79a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>a5740dc0e8e2e6e458e12aef99f881d62</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateNormalMap</name>
      <anchorfile>classSoTextureCoordinateNormalMap.html</anchorfile>
      <anchor>ae65c2028baa4c36d0ccc22a774639f2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateObject</name>
    <filename>classSoTextureCoordinateObject.html</filename>
    <base>SoTextureCoordinateFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>aa8c32e3d58ae2e837afdd9dabb9d0880</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateObject</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>ac41227cbadf8a44dfd311129f77468dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a8a93a188ba558805f5e7a090a6a94d1b</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a6c4d85f9b185193eadb555eafd78c5af</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a75e68018bd0d18f48bcd33b86a21eea3</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>aaeb12e24e4bfa47bbd4d50392bbee1c8</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec4f</type>
      <name>factorS</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a8f3f8dbe05951c150577bb760f6885ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec4f</type>
      <name>factorT</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a363188f083dbfbc4d21b4860652f68f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec4f</type>
      <name>factorR</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a75851ee626f6bd820be62896816a1d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec4f</type>
      <name>factorQ</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>abf4c2adb455c749b62c839d0bb802dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>aacac89f91df92da6fe52d4dda18cffb9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateObject</name>
      <anchorfile>classSoTextureCoordinateObject.html</anchorfile>
      <anchor>a21289737ccc5e3cd9fd31c34bce56e7d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinatePlane</name>
    <filename>classSoTextureCoordinatePlane.html</filename>
    <base>SoTextureCoordinateFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>aeaab3e88499c6aba8eda99ba23052d15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinatePlane</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a082a7ec5ca337dda3d7e98680699fd58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a5d24320d9e8ef742fbe1fe67bed24961</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a2d1c157d8e2d7778e7baff163473f5e9</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>ae4e7128204f9fb2c0e4dd21edb5a1bc4</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>ad886e290722a0e533d54198b3e306229</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>directionS</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a84a9399478ef7d7da853d437689107ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>directionT</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a065fc09020b6e1e688a155120094335e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>directionR</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a4206678ad962100c66b6a82215e1d751</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a1c7efddb3bcfedf1c0c6c9541a113ab8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinatePlane</name>
      <anchorfile>classSoTextureCoordinatePlane.html</anchorfile>
      <anchor>a0063872a9be40fe32a739748efc22984</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateReflectionMap</name>
    <filename>classSoTextureCoordinateReflectionMap.html</filename>
    <base>SoTextureCoordinateFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>af665787cc88b435d2fc2efb5fdeed073</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateReflectionMap</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>ae90e5258b098b39236dee75e16902249</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>a279084a72ead2656555423c534f07be9</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>ac22dd1fad6821ba3c7968cebf81933e4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>a0c1c5f796bfbfbcf3381f5841a61fe37</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>a05aca7e1a12598b53371c6da2a1e7a71</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>a528ad48766ea1d9be1bb5707d38a8a7a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateReflectionMap</name>
      <anchorfile>classSoTextureCoordinateReflectionMap.html</anchorfile>
      <anchor>aaf297c2778bb7fbe6e2ec09d5c395f61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCoordinateSphere</name>
    <filename>classSoTextureCoordinateSphere.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>aba45397e470a8ee3ce451dc9b2195366</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCoordinateSphere</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>a0762fc3727c78a2a36fdcdf4e2bc3174</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>a182738061095d400c82c92b562b2a16c</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>a7ad5c3793df5922038d256aacf0115e5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>abefac8c3781ece5e8dea3c0c5af5639c</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>a18835c241c7bbb1b0c799f6e71e27f42</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>a8ed41028fcd478208a8dad6354927335</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCoordinateSphere</name>
      <anchorfile>classSoTextureCoordinateSphere.html</anchorfile>
      <anchor>aac1c05bb6d3fc5369231600cffe641b4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureCubeMap</name>
    <filename>classSoTextureCubeMap.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Model</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a14e9ad92c018f2723aaa980f438c6d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULATE</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a14e9ad92c018f2723aaa980f438c6d4ea52f7cca06c571b88a873f1b79db1777e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECAL</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a14e9ad92c018f2723aaa980f438c6d4ea0acb4a880e2bed4b1ec1b435f39aeb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BLEND</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a14e9ad92c018f2723aaa980f438c6d4ea5c980cce3946d8b2c997c16a2e310b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPLACE</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a14e9ad92c018f2723aaa980f438c6d4eadbca792497065b3faa6c8f0ec6aab2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wrap</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a7d0018c4069e00063d45f8c15649456a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPEAT</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a7d0018c4069e00063d45f8c15649456aa39b5c9796d9dc191e6aacdedafa73a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLAMP</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a7d0018c4069e00063d45f8c15649456aaf23b6be7930bb0cb5eb46c44d2b58dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>ae5778b36a7218e797b518771b64d91ef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureCubeMap</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a857b83fedd62d77af87adab0259bd14a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a036ac8335f85910e59ae940743be0c69</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a37169381b77a5a53532c6ba861e14ef4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a0412b7af23cd0bdd17643b64372da325</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a7704cad7eacc26f78d6f648177a57603</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>readImage</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>ae92acc1426859992cc1eb3589af18949</anchor>
      <arglist>(const SbString &amp;fname, int &amp;w, int &amp;h, int &amp;nc, unsigned char *&amp;bytes)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>filenames</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>aaaaa85f013c184a83b0b6c7a9dfb8c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>imagePosX</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>af522e938f83216a15138324fd3147a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>imageNegX</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>af30d1da3539824c3326555c0a7f5d3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>imagePosY</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>abffc7bd2da876b590b750d3e0d3557ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>imageNegY</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a6a48618a23eea08520c6eac4c4b82b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>imagePosZ</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>aa6a0ad089ddf900f94bab07da89eee73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFImage</type>
      <name>imageNegZ</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a890f63a7fa4ffd80ad6db0dbe5097a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapS</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a02bcc4d3d10848ec2b68845f98dd58eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>wrapT</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>ab47fdc1df1b2615663303a8df559000f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>model</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a315447076a425c0e4aa765f4a4b9a648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>blendColor</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a1632e55c5e818bac7c6bd9257dd8d9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>aef2db194979aa9a06c9f53066c72c172</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureCubeMap</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a170117489c3e7371a2a4f13cc8862251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>ae297bd0b532cfa5456db39689b8f6f1a</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a35c6ebc00af7bc0c9a8358d50ce11671</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getReadStatus</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>a56ff357e28d90a760c28a7ab5fc505e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReadStatus</name>
      <anchorfile>classSoTextureCubeMap.html</anchorfile>
      <anchor>addf1f3e1d5eb4aa9e8c79c2c77a58930</anchor>
      <arglist>(int s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureMatrixTransform</name>
    <filename>classSoTextureMatrixTransform.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a97ba1186fe81fc4a2a6eaf50e2ecebc9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureMatrixTransform</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a56d48843e456bbe7bab2ac6216311455</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>afe485cff88ed53f4389c0dcf10ffb5b6</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a7bbae21b3de91d1705998c0b1711d0e5</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a71c8b2d8e3157f1edab8b8947563e24b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a03f1e891c2f462c74bff1213c62db71c</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>ac6fa8eba20bedd7e845ef67c1fb0d9c6</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFMatrix</type>
      <name>matrix</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a2ec6943b6600f430affb99377be79b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>a0f6e74911886069b1416c05c739ebc7c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureMatrixTransform</name>
      <anchorfile>classSoTextureMatrixTransform.html</anchorfile>
      <anchor>af949cde2011641ea1c2dae1bc85bcd9d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureOverrideElement</name>
    <filename>classSoTextureOverrideElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>abfdf83b664d9f9456039504065cb9908</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>a5320e2e802cb3ffd001112e6e2897705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>a4f9bfafcbb40bd9512268df96d30c02f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>a489fdadd17298c1b520c7a8795e67cde</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>a6cb8bccdfd3fc5f22e3e3d88cd390a74</anchor>
      <arglist>(FILE *fp) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>a4b05e5ef9dde6842e4ac9683e289db76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>ac2e3771591d980cabf18c1d8338a03d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureOverrideElement</name>
      <anchorfile>classSoTextureOverrideElement.html</anchorfile>
      <anchor>acc8f0725f0a87056c0b6db15d4b207fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureQualityElement</name>
    <filename>classSoTextureQualityElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>a7222af71c406b291699f426449273a71</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>aae3f0d69904cd7966f2b18587fe1e960</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>accc107e38c129d9d38a4abe4fd509e89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>abac452c82a957d40770626fa1cbc47b9</anchor>
      <arglist>(SoState *const state, SoNode *const node, const float quality)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>aed79e08066d5257133f1bc95d506541a</anchor>
      <arglist>(SoState *const state, const float quality)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>ab42b7cdc3f145ada6f1b600315bc033a</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>a56aa8bdf6a9aea6341636974f1e30b84</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureQualityElement</name>
      <anchorfile>classSoTextureQualityElement.html</anchorfile>
      <anchor>a2f1406b4c605a3a9a20ea05f5982e9f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureScalePolicy</name>
    <filename>classSoTextureScalePolicy.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Policy</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>ad1ee79e58fcf154709872a43d293a6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USE_TEXTURE_QUALITY</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>ad1ee79e58fcf154709872a43d293a6d2afc12f9f2177049f04bda60b4284a1324</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCALE_DOWN</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>ad1ee79e58fcf154709872a43d293a6d2ab6ea37b16ac89c75d2acc5a060267590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCALE_UP</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>ad1ee79e58fcf154709872a43d293a6d2a4ed93ea8b482c135d17eabbc1f426309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FRACTURE</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>ad1ee79e58fcf154709872a43d293a6d2aa4c52ab6b6c7a5a8e8a157322d69e162</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>a7eb563fa2b2d02413c58994035f76449</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureScalePolicy</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>a445dd714e449008973d7affdd0c255d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>a0003c45c949badb805821e9ec17f0974</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>policy</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>af0625ec8f28fffb8d323cfa67644c836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>quality</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>a4e94cd1f44928b42bc118c0c425aa2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>ac19b664fa33fe12956714aebbc9c0c6f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureScalePolicy</name>
      <anchorfile>classSoTextureScalePolicy.html</anchorfile>
      <anchor>a47551ae6292b77261613c02e9fd53fdc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureScalePolicyElement</name>
    <filename>classSoTextureScalePolicyElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Policy</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a564660185b425a8508d9e2645fe1de7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a9110c7e01a7f0f10e02837a3a969791d</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>ab46026b7cf5d42c0225cb9076de326e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a6879f31506475ca0c85abd14dea97c82</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Policy policy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a028213a061f92e314456dd886ec8e863</anchor>
      <arglist>(SoState *const state, const Policy policy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Policy</type>
      <name>get</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a47cb500abfb18d1b4f5b8422cfc9baa1</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Policy</type>
      <name>getDefault</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a92b96e8850a21a4c998d1c4a30d32bdd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureScalePolicyElement</name>
      <anchorfile>classSoTextureScalePolicyElement.html</anchorfile>
      <anchor>a967f101948141615691fbbe3b87bf60d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureScaleQualityElement</name>
    <filename>classSoTextureScaleQualityElement.html</filename>
    <base>SoFloatElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureScaleQualityElement.html</anchorfile>
      <anchor>a747ae07310b25de082ef209816db7b70</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureScaleQualityElement.html</anchorfile>
      <anchor>ad998609a147f1f930e587cf27186ec42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureScaleQualityElement.html</anchorfile>
      <anchor>acd3acfd8a7a8641b5f27d6598ec4e9ee</anchor>
      <arglist>(SoState *state, SoNode *node, const float quality)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>classSoTextureScaleQualityElement.html</anchorfile>
      <anchor>a6a61e9839c0f49eb3fb47f825cac685e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getDefault</name>
      <anchorfile>classSoTextureScaleQualityElement.html</anchorfile>
      <anchor>a27a7925a53035f992c6827f3ece50881</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureScaleQualityElement</name>
      <anchorfile>classSoTextureScaleQualityElement.html</anchorfile>
      <anchor>a19584232726825e6e70d270276f34467</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureUnit</name>
    <filename>classSoTextureUnit.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>MappingMethod</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a0c361c86a03e38c6a1cd30a3f9e4032b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUMP_MAPPING</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a0c361c86a03e38c6a1cd30a3f9e4032bab4666e72887696cb3e20277fbf0c1aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IMAGE_MAPPING</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a0c361c86a03e38c6a1cd30a3f9e4032bab562974690423838d9913ebe311ca3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a6fdc613c809c1e37e026c222d265c5cb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTextureUnit</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>aebcfbc11c80a5318b53a0b3fdf72e573</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a6383bbfdbfc65f153ee560c5e4467b66</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a4c948da8f48d1c1b21dbe2b2c65bbbb1</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a2710823d8e70cd6705ce32bfa6f20a5a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>acc7b1dfec1c35a6d52e7777729e17b3b</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a5ec9f11856a0effd600a5bbb11cf18cf</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>afc618564351fac525993b3964dcf00eb</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getMaxTextureUnit</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>acaf55e4f4d7f4d0990465320a8267453</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>unit</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a2d464aee528fbb58fb9fb2b061cc8427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>mappingMethod</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a5372cbd6586ed4e5c27463650d8c978a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a4c816b685b148528fa722167db4da8e1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureUnit</name>
      <anchorfile>classSoTextureUnit.html</anchorfile>
      <anchor>a2838c7053037301076e0d9306aae3e4a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTextureUnitElement</name>
    <filename>classSoTextureUnitElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTextureUnitElement.html</anchorfile>
      <anchor>af6f396305ed63003e4ff2aa5cdf6010f</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTextureUnitElement.html</anchorfile>
      <anchor>a3d13fb3f7cfb267eae5c02d0a5ccb3cd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTextureUnitElement.html</anchorfile>
      <anchor>a45725c1b1b7d2a7954f01b9c328ed79a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTextureUnitElement.html</anchorfile>
      <anchor>a48f6219601d6d025b99da9fd4210d990</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int units)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get</name>
      <anchorfile>classSoTextureUnitElement.html</anchorfile>
      <anchor>afae881f7e104ae99be1b4f72da17c327</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTextureUnitElement</name>
      <anchorfile>classSoTextureUnitElement.html</anchorfile>
      <anchor>ac2c9b7bba52d1c3b4e1cd14fd9fc9373</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTimeCounter</name>
    <filename>classSoTimeCounter.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a2dc7ea123ed39f26c588a8fb9c50c289</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a80341c32b66f371b1e3ad321ac4f7e38</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a7000b730f1e29e76dc6e1c44709fb196</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTimeCounter</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a2ddc773605e346af9a96b0e030f4f99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>timeIn</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a245395bb7045c1f076c9012c30a72a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>min</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a8bf3d2899cc3fc47145acda7927b2a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>max</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a0a80975674943a3e2c323ba2b2965d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>step</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a7f218878ff5d277aad188ee2f895145d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a27aa79aea9c923859e743c381c461b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>frequency</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a17fc2c2480ce237e7d68089df9036790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>duty</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>aa4567fa6123fb110182893611ef5413b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFShort</type>
      <name>reset</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a23b03bb0f1c55dbdad256a87455a3eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>syncIn</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a1129afb45787f7b3ef141814e0af3815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>output</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>a0111c6cc9052c8f0f4c66a02dd256a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>syncOut</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>ab034a4b2530d4c210cfa78c69d6159ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTimeCounter</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>ab90c6806ea7f2cc733db7016e67be091</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>af520ae8a23d3e0f845625705893b0361</anchor>
      <arglist>(SoField *which)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInstance</name>
      <anchorfile>classSoTimeCounter.html</anchorfile>
      <anchor>af80dbfb5d2d88e72c805955507cd7bdf</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTimerQueueSensor</name>
    <filename>classSoTimerQueueSensor.html</filename>
    <base>SoSensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>schedule</name>
      <anchorfile>classSoTimerQueueSensor.html</anchorfile>
      <anchor>a21262b8464a737246dcc092b115e89ad</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTimerSensor</name>
    <filename>classSoTimerSensor.html</filename>
    <base>SoTimerQueueSensor</base>
    <member kind="function">
      <type></type>
      <name>SoTimerSensor</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a77911775db7512717797e64ee366883e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTimerSensor</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>ac7b810748d930cccbbacd62f87ea6ce9</anchor>
      <arglist>(SoSensorCB *func, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTimerSensor</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a9fd11388df463b0bebb02345aa75a372</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseTime</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a39b95dd1f164c05310c9119833ef7357</anchor>
      <arglist>(const SbTime &amp;base)</arglist>
    </member>
    <member kind="function">
      <type>const SbTime &amp;</type>
      <name>getBaseTime</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>ab08b63cf39c4f881d8a1c7be387b132f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterval</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>aba8f968935ab0c6ab79252f0b3e7478d</anchor>
      <arglist>(const SbTime &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>const SbTime &amp;</type>
      <name>getInterval</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a1f9474e0e32349d1292fbd04ce395746</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>schedule</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a40861c60dca0b4181ba39676a4489279</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unschedule</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a46022349d38a1d8372b385b91de337e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reschedule</name>
      <anchorfile>classSoTimerSensor.html</anchorfile>
      <anchor>a911ba001eaab612f16d40efb9ac751fa</anchor>
      <arglist>(const SbTime &amp;schedtime)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoToVRML2Action</name>
    <filename>classSoToVRML2Action.html</filename>
    <base>SoToVRMLAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>af517d4470706c767964634e273c22ddd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoToVRML2Action</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>ae9dfb4df29e6659a3e192e5a4e6d190d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoToVRML2Action</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a868097438817165ba7f671fca9fbf86b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a441e2ef02901cadc1a03f460d8fde1a6</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a7ed681262a6e1b92ece3712b355c325a</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a50f958020f0fff999c45a90862d22c25</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function">
      <type>class SoVRMLGroup *</type>
      <name>getVRML2SceneGraph</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a8cb032d7a73eefc86c4c869457e94eaa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reuseAppearanceNodes</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>ab575be05157126fe8c66b443bc9d0d89</anchor>
      <arglist>(SbBool appearance)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>doReuseAppearanceNodes</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a425c3f22d778405b6109b7ba1bc82b24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reusePropertyNodes</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a0e6471e6a88fd8720e67fd34c89d7963</anchor>
      <arglist>(SbBool property)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>doReusePropertyNodes</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a3eded0368bd48a8d4fd299206e91e4df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reuseGeometryNodes</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>ae6adaa8a8190c272b5c46ce29efed2fa</anchor>
      <arglist>(SbBool geometry)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>doReuseGeometryNodes</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>ac81b54e7b44d6b291b89bcd3080eaad8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoToVRMLAction</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>acc08b167cffde33b4c6d52544a470793</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoToVRMLAction</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>a19c98494b8bf380ec2a4c330687d7141</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a7fe000fd660af2b4d3c117f16a89932e</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>af8dcb257b57ea121250d8dc638a86a16</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>ac0df94a3e5b074caa12af293e1da6265</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>a47f756490237caf733073a93fcdceb11</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>a12fb9499cd961643ef2e719950050063</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoToVRML2Action.html</anchorfile>
      <anchor>ae48577473eb32dafeb9d825876c224f3</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoToVRMLAction</name>
    <filename>classSoToVRMLAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>a634d2e44aa6491200e3581f82fd02c56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>adc181fc090c32154320df859b2f0a7e8</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>a497e262d0da5975e96ac1e97c052db4f</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>a546fe08eb907daedd71c359901c18966</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>ae0853d23af42f8538c842503a8335c1b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoToVRMLAction.html</anchorfile>
      <anchor>a66a505d879aa7f4935483691ba54312a</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTrackballDragger</name>
    <filename>classSoTrackballDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a522f398dbfe8ccbb0c9e427d3c3b5384</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a2b1876c1f7d22a8bc2866d14d64ca10e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTrackballDragger</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a22f69efbf7cdb0b910a2eef36d75c3e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isAnimationEnabled</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a00900521586fa18ce56b945a413d95c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnimationEnabled</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>aed7560d09ea9c6ab9b5690f82bd9670a</anchor>
      <arglist>(SbBool newval)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a0d42dcfdf0a2b32f7347dcb48d862a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>aee98d39387b19b563eb48abc660f1f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a508c33941ee17f0d49ba1d866963ab57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTrackballDragger</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>aa30e985c36e055e935c3a3e185858240</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>aeda7dded61679e8db27a6d3903514196</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a353d48e9572f39fb410f87e52f4fc41c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a17d2d3c4e27d32a7774b709f23da4ebf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a361a7f1ec245a23461448cbc782f0468</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a48c00073a2aa13bcb930b582015d8c0e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAllPartsActive</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a473a7aa0a474d101d07f91a0178ff116</anchor>
      <arglist>(SbBool onoroff)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>aef00d938eca46ceddf49f5ac72cd92a9</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a6d553ce06b309efd685e3b981974493e</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a094391f50d81edf841c5086bd26c1df2</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>metaKeyChangeCB</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>ac212f88c34cade98c555c0cb2889b577</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a399d635608d7b8c77ec19dab0f5e8a2b</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a5b93bd2cb9cb1fffe874fe15b2b61fe3</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotFieldSensor</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>aa02522c1c54386b4e3d8a2ae82c12756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoTrackballDragger.html</anchorfile>
      <anchor>a7e32d3dc10e32e962340a9b9cbc542d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTrackballManip</name>
    <filename>classSoTrackballManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTrackballManip.html</anchorfile>
      <anchor>a99ad97cbd015940912e69031b4e666f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTrackballManip</name>
      <anchorfile>classSoTrackballManip.html</anchorfile>
      <anchor>a212915fe1be3ec6e49e79af2f8cbf3c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTrackballManip.html</anchorfile>
      <anchor>a9379a86d18192eb10c936ee83bfcd18a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTrackballManip</name>
      <anchorfile>classSoTrackballManip.html</anchorfile>
      <anchor>a38626b6361b86f319744039426b99d8b</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransform</name>
    <filename>classSoTransform.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a4fbaab62c7dc3bfc670e0a60778f1c61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a290ff634766ca5b27b1583644dfc6dda</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a79c0d7040d7a8457eec11b5f39d89adc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a1b0fd85ba23cde2fb6f1e0c5e901fa20</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>ac3417b4a37c719cbdbd93edbc7b5a5b7</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a659b88712cf2c7f109cc28eb000bb904</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a24eff17c4295739f58c13cc9def340a4</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransform.html</anchorfile>
      <anchor>a1362008813aa6f572d72137bca6ce8bb</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformation</name>
    <filename>classSoTransformation.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformation.html</anchorfile>
      <anchor>a54ace5dba750d0b4eaabbab707d2f5d8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformation.html</anchorfile>
      <anchor>a5628bf084dd4bdbc827d40ea3b1a6b53</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformBoxDragger</name>
    <filename>classSoTransformBoxDragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a38d1bbb3e5c82cc69e66d1bd931b3629</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>ae989ea8dc3caa720252a90d30e1fc415</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformBoxDragger</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a2f83c931ec3de0c670f1f7c9985e62d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>ab13644d4005af49dc79dbe24935ff205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a33b173d3dd35e1dcbf6064f49b39ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a63e0976d3a951ed4a394b4ab92b5a49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a7713613a1b810b7fb7534786126232c6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformBoxDragger</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a23d90c4e3956a48740befd28ff6d551b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a7c1a9c6d642ceab3afa84d2c528bee8c</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a82d32a084014ab40b30151da895473f4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>invalidateSurroundScaleCB</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a044772badd5a39118306170be81f0ec9</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>aae8b7911a85e997097fb1413bf3c1965</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a4b188ca3d2228ad3512e15f99b53dce8</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotFieldSensor</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>a400029604aa1b57510b69afd59ef054a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>ab23a5523cf09a0a71e87c7d77c4fa541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoTransformBoxDragger.html</anchorfile>
      <anchor>aa6057570edb16712b345e9ac0255a15d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformBoxManip</name>
    <filename>classSoTransformBoxManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformBoxManip.html</anchorfile>
      <anchor>ad531bcfa2af84980ffac7c615c6ee1f3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformBoxManip</name>
      <anchorfile>classSoTransformBoxManip.html</anchorfile>
      <anchor>a0fd107292871def40115342f806ef476</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformBoxManip.html</anchorfile>
      <anchor>af5fcfd72900423601b33e7261e8a42ba</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformBoxManip</name>
      <anchorfile>classSoTransformBoxManip.html</anchorfile>
      <anchor>a98ee5552e5695eafdb2f3f3e8571568f</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformerDragger</name>
    <filename>classSoTransformerDragger.html</filename>
    <base>SoDragger</base>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a9825d5a31d3c729607cbe603cc9729de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ad6575027a6c1ef86611fc268a6438fa4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a5ceb785fd50409cf509607cc2785509e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformerDragger</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>aaefd9ade573a8557be06e7e89e4ad047</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getCurrentState</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>adafae81d62e863072b0fd9a7de56950c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a9d97adc46c878ae41b89f3e6d9b8c5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a612344bad5471fd851ad8e005462f06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scaleFactor</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ab64d63c77e98e307e85c316a6853d4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ac979db2446ace49bb29ee98a4532843c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformerDragger</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a145f784d4ede047689e9632dbc33d847</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a39ced9b172ffe6161f6afa0379afc8b4</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultOnNonWritingFields</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>afb2072b9c629d4cdc9aafdfa313d31fd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a6a3c75add832daab20e9b5d2678b16c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ad7f5a69c3c3c6e3ed871b6e7fcbd00f7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ad89ddd11ae3c378cdb3bc7a586b2756c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMouseGestureDirection</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a825cacba654369871a0b839fd7699ae3</anchor>
      <arglist>(SbBool x_ok, SbBool y_ok, SbBool z_ok)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ae960d16f3d9cfcf1c9dd0522a17e85c9</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>abdf3235f81841a336c26c251c1dad522</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>ac36185c45feb999fe863bbedbc40e05c</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>metaKeyChangeCB</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a286ace9732652ec4f2b543b2439508a2</anchor>
      <arglist>(void *, SoDragger *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a02fedef6a8a4c5f3654175a0f1711818</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a13324f74b79f93e79a3a1bb3809438fd</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getIgnoreAxis</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>adbe2b2dde90aee795b72717e93d5fe48</anchor>
      <arglist>(SbVec2f axis[3][2], SbBool x_ok, SbBool y_ok, SbBool z_ok)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>makeMinorAxisPerpendicularIfColinear</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a4341d5fcd19bfbb0dade41cf56d53da0</anchor>
      <arglist>(SbVec2f origin, SbVec2f axisends[3][2], int index_a, int index_b)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SbBool</type>
      <name>isColinear</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a0fe7ae500aa6bd13fd400e53718861ab</anchor>
      <arglist>(SbVec2f a1[2], SbVec2f a2[2], int pixels)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>translFieldSensor</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>adfeba0008fc32a6ea12430726c370611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>scaleFieldSensor</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>afb207ca702619e298f3d765ae1671317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>rotateFieldSensor</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a5378a65457eaba74c45914e11419999e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoNodeList</type>
      <name>antiSquishList</name>
      <anchorfile>classSoTransformerDragger.html</anchorfile>
      <anchor>a8152204f253943257242a1f954c370af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformerManip</name>
    <filename>classSoTransformerManip.html</filename>
    <base>SoTransformManip</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>a3ab0eebade8322c8ecf7c81d27d05ad1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformerManip</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>ab01c937875f96aef1a7173b85dd52de9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isLocateHighlighting</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>afa53e0437d3610427cc32d7a04e1d2fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocateHighlighting</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>a4d56cc04a9598abca70405e4cb191461</anchor>
      <arglist>(SbBool onoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsquishKnobs</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>a77a5a8bef8b98b3238d9db994db32cc3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>a583db8e8beab2152d611d7e04ec3e6af</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformerManip</name>
      <anchorfile>classSoTransformerManip.html</anchorfile>
      <anchor>a34745d5a34e438b83faee527d74f3879</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformManip</name>
    <filename>classSoTransformManip.html</filename>
    <base>SoTransform</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>aaa55a6f0f4c26bad187d96613fca8775</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformManip.html</anchorfile>
      <anchor>a9e5d74003ff1905441396c9202cb8767</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformSeparator</name>
    <filename>classSoTransformSeparator.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a26f7c7a71c76c1d97c9659560764fa09</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformSeparator</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a9447cf3feb7a9ec031d6fb432594667a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformSeparator</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a383d755cfc1b8f63092038a6f3060151</anchor>
      <arglist>(int nChildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a86073506786f508d595f2632604e0bee</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a4e4b32f713beb1ee566b8b5a692a300a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>ac276546b3e03072b4ce6ec42efb59691</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>af081c77489d9a6dc8f14ac197f5ea640</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>aaff524378699df79642f23e2dd7d7c31</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>acc1d11a86608b193db9b367fd699ae43</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a7cc362c0ed04cf9624f23e96cb4d8cbf</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>aeeb0541dff8998b519ba580d275232e5</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a6c15443c8d019f0ed7957b03f2e9df53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformSeparator</name>
      <anchorfile>classSoTransformSeparator.html</anchorfile>
      <anchor>a43ec59016324f3aba80d3f8f7782fec7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransformVec3f</name>
    <filename>classSoTransformVec3f.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>abc8e283dbba20d81ec5eac68beac3697</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>ad4c3958c3f511abf3846120e47718083</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>a4ccce9d81cd3e187038993f3f5a782ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransformVec3f</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>afc9a11fdd55de846ec2308ed3db81a8a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>vector</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>ae8323f236e1cc448ff3f2dbb3c0179a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFMatrix</type>
      <name>matrix</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>a1146278035c096012c90dc4e075f68fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>point</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>a31fa491efb4ece7524a0b8d439c53c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>direction</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>aa5d6794f9d11f73b276a0c84f899887d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>normalDirection</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>af9fc6b552e3e5333ee9e8cbe61f30ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransformVec3f</name>
      <anchorfile>classSoTransformVec3f.html</anchorfile>
      <anchor>a643589d8e889061f762ce481f4de4d88</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTranslate1Dragger</name>
    <filename>classSoTranslate1Dragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a56de82bab4b69708a7c84248bbd98850</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a0a298eba34d2a57bfd059a043c540945</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTranslate1Dragger</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a4572f91b8880e3b539f0ca9aac63115a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a64974280a576a036499031149ba700f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>minTranslation</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a6de4841505d6d51d66b453c8c0815055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>maxTranslation</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>ada4c3089b7898f66e6dccd31490d00d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a52f64563310b4790fa0ad95968e8d89d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTranslate1Dragger</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>aa4732a336ccfc0dc43d0da1eff1bde25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a8b8df9f74c1b70473f789efa54684131</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setMotionMatrix</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a268f872c57b312a322dafa8cd55e1ecd</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a92785a3b06efe5c17f13067773c90949</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a0e9620f7adac429254be2973de039854</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>ac0ef26a04a71f2636c0ffaadc7a4140a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>ac7bc97110eee728a6bf8fb63c99552e3</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>ae242d0118589912bb4a757f3ea0d4267</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a2f41e425546f8495c279786f7d179b30</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a615cd0f47f6a7396f34cccb61aec2da1</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>ad282857cd89a095fa7de48ee6bef0080</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a8fd147ba3487a7cc2440ce96a61d2eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbLineProjector *</type>
      <name>lineProj</name>
      <anchorfile>classSoTranslate1Dragger.html</anchorfile>
      <anchor>a0178f754b69f7165d1bf7ca68bb97352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTranslate2Dragger</name>
    <filename>classSoTranslate2Dragger.html</filename>
    <base>SoDragger</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a7075e0bf259aaf06edf672182d05583b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a6ec578d249ae2e0688ff0e0007c5d7bb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTranslate2Dragger</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>ae73a533e36fcd51ddfa9525e0065284b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a520d3bb910fd1965f00d08b1239d0983</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a1e50d9e0625bbf57a62337f2319c1c9e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTranslate2Dragger</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a933428bffdb576b1d51a2644f073340d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>setUpConnections</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a6b7a26db1e4cf86537d55c3576170394</anchor>
      <arglist>(SbBool onoff, SbBool doitalways=FALSE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setMotionMatrix</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a2ceb370e94ea153a9f74a62c64bd6770</anchor>
      <arglist>(const SbMatrix &amp;m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragStart</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a9f5dd4ff1dee5d2a6e681534727441a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drag</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>abaeab902a79c8ec0affea34ef1dfdd27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dragFinish</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>ab13fa50f566b65a037aa16d98e4e2cf1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>startCB</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a45f9f9c870b38001d1215fe06676a6e5</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>motionCB</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a379178cb680ddeaa5960de01637cba24</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>finishCB</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>acd5dc7f28ea4bfa726b5b710cec0d3c5</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>metaKeyChangeCB</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>ae0fbb31c2a2d1bb5d24a1af72dc693c5</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fieldSensorCB</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a1ed66f0506c8400a819ebed3528128be</anchor>
      <arglist>(void *f, SoSensor *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>valueChangedCB</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a2b661fc0b991a2ea20fe73c52183131c</anchor>
      <arglist>(void *f, SoDragger *d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoFieldSensor *</type>
      <name>fieldSensor</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>a5c65bbc7e3841d567fda6731a85e1d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbVec3f</type>
      <name>worldRestartPt</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>ad2b69b0d2b084fb6fcd0671b54553b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbPlaneProjector *</type>
      <name>planeProj</name>
      <anchorfile>classSoTranslate2Dragger.html</anchorfile>
      <anchor>ad70fca7b6325f044675dd754d8029ce1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTranslation</name>
    <filename>classSoTranslation.html</filename>
    <base>SoTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>a6da7369ec3e6ee5594a737a9e7d75499</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTranslation.html</anchorfile>
      <anchor>afca672e5def46bc78303fd1deaea2299</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransparencyElement</name>
    <filename>classSoTransparencyElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>a5448b2db8e7e96b4cafea758a8d55156</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNum</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>ae0e69925570a27f1be2612f6624e8684</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>a09c2dc7fcddf97d1007ffeee359099d5</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getArrayPtr</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>a3bed82d27c83189ce1c95c4177d0dd4b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>a97cbe7a1127f0251b82f9a40e2497902</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>aa24b199be76999c9aa72794b2a22ee5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>ae88f8a968593f29e04e0c98ee2aecc94</anchor>
      <arglist>(SoState *const state, SoNode *const node, const int32_t numvalues, const float *const values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoTransparencyElement *</type>
      <name>getInstance</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>ae3b30098cdad07b7267f628b307dbb3c</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransparencyElement</name>
      <anchorfile>classSoTransparencyElement.html</anchorfile>
      <anchor>a0661ad74537a987c5bf5bea2952c04b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTransparencyType</name>
    <filename>classSoTransparencyType.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>a58e29a623706a68dd3df042720f0a29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>abc357c2985f4dc03c01f8b0147922f21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTransparencyType</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>a9595d27d3c8a4e0197c4ca8564a69e5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>a9fbdba3dd648424faa07a996ad9151cd</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>ace32a038e07bf51f164c6d4702cac1a4</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>a9504395a236913b3086c9c1b1228b501</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>value</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>a2a6d579c076626d6beefd5c6f5bb24e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>af49bba7c4980bef318947e916d041055</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTransparencyType</name>
      <anchorfile>classSoTransparencyType.html</anchorfile>
      <anchor>ad4e4ce0b7ab6dc2c8bbd75cab8c4abfb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTriangleStripSet</name>
    <filename>classSoTriangleStripSet.html</filename>
    <base>SoNonIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a75e4cb705db5be28679f483f53833ce8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTriangleStripSet</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>aee24fce4a080fe54a2859eca8819492f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a082e4b85f6102a6857d92046242f923c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>aa5236879d7ff8df12bda1c14656fc58b</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a526a264fe5107784d739c350c592c4f5</anchor>
      <arglist>(SoState *state, SoNormalBundle *nb)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>numVertices</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a2a23abcfec17ee852a2863d242ed1b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a58358662595cebdb9001a3b760ddc0c6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTriangleStripSet</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a47025bb1883c0702953423f5cab9ef9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a370730065c45cc35a13763b35f081e62</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a18cbbae1c08be88debe726bc6654b7b7</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoTriangleStripSet.html</anchorfile>
      <anchor>a5290d11d39f504ac182dfa7e41560de4</anchor>
      <arglist>(SoState *, SoNormalCache *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTriggerAny</name>
    <filename>classSoTriggerAny.html</filename>
    <base>SoEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>af1143749f87a78acf6c5986596172d58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a27a71a781841d90fa9e43766e4cf7e2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a9098eb073cff962fd4d278f975506b73</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTriggerAny</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>abaf7f16270023b7c69baea216d8e48fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input0</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>ac2f4b27ba5ed0db6580b72a6f3c8cc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input1</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a46af4d77fc97e66587863c1004880e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input2</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a749b67a2a51edd23edd70494bcad33f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input3</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a1b72a48dedb9931e6c51f432cf72bb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input4</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>acfe8f0b8cf54318cae79541d192f91c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input5</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>ac36dcfd27d7fc5d087e9cf925e450f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input6</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a6d488438c4bffd9b20d806ed08c066b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input7</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>aa4dc8664dc977d488495b5752e435302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input8</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>ad6eb0a047d9d13ac16cfe8d36db45713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTrigger</type>
      <name>input9</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>aca9f2ceb0f11bfde383aee81b3ef787b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>output</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a951748b23e9e3272ee799c3d9a05d286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoTriggerAny</name>
      <anchorfile>classSoTriggerAny.html</anchorfile>
      <anchor>a587863571b723fb3f578c8a655d9acae</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoType</name>
    <filename>classSoType.html</filename>
    <member kind="typedef">
      <type>void *(*</type>
      <name>instantiationMethod</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>ad4e992c9f4f237e8b1f90f2c7d9ea0e0</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="function">
      <type>SbName</type>
      <name>getName</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a70d3e5e79eaf6fbea2d17d10acd3a404</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SoType</type>
      <name>getParent</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a7e0a5dbf0f2608f06d2c3caf89147861</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isDerivedFrom</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a47d76d1214d6619378cb3f526f84acaf</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>canCreateInstance</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a7a2c76fb3ad9c6aa435ce7144e38f0d7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>createInstance</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>ade14200baeb5a24d96f609dd35ca9d5a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getData</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>aa367cd2fa878465342ebad636f459f87</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getKey</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a58025bc3f4893c0894124ab7e84901ed</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator==</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a3eba0d7f90d55a73951a250536282d01</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator!=</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>afdcfd8c229a6417812ef0604aad8b880</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&lt;</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a9cac9297261115f78f0717e2967b9e95</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>ace52d81bf1ab231950a6802b2e48c071</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a1d8885de7c0a45c318203dbbed374687</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>operator&gt;</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>aa09aea578fd4fc296770ca6512c30b37</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isBad</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a330d23e8ba545dfdafc733d25132d119</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeInternal</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a6b19939a099ae72b8c1e8c472eaf33b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isInternal</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a025b931ccbf5f20054c43e4df3006098</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>instantiationMethod</type>
      <name>getInstantiationMethod</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a9165197329f22058d5b34816ba30d6ec</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>fromName</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a32355c5795bc7e6ceaee4328ab583508</anchor>
      <arglist>(const SbName name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getAllDerivedFrom</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a4fe130354575c729054120bc398985a4</anchor>
      <arglist>(const SoType type, SoTypeList &amp;list)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoType</type>
      <name>createType</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>aa4200b3ddb678fb3c2902d34c42c5443</anchor>
      <arglist>(const SoType parent, const SbName name, const instantiationMethod method=NULL, const uint16_t data=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SoType</type>
      <name>overrideType</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a36903e04d0ecc67ad2225b8e3e3b4ade</anchor>
      <arglist>(const SoType originalType, const instantiationMethod method=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>removeType</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a6ba60b5150de1971b39e6d8c35bb5a82</anchor>
      <arglist>(const SbName &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a4900790cb69fea0b427e313b72b71b4a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>fromKey</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>aa4393cacc51ae15107ba15f7207426c1</anchor>
      <arglist>(uint16_t key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>badType</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a08a5653a56fb7a1999eea6bf42a787f6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumTypes</name>
      <anchorfile>classSoType.html</anchorfile>
      <anchor>a77a7edd33c300deb2aeca8641521ff82</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoTypeList</name>
    <filename>classSoTypeList.html</filename>
    <base>SbPList</base>
    <member kind="function">
      <type></type>
      <name>SoTypeList</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>a423c69204767b1dc4035ad90f0961105</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTypeList</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>ac397dd08d4a6a2c617f02ec1edae492b</anchor>
      <arglist>(const int sizehint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoTypeList</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>a9de58b3985afd2fcdf3b10e865a8cc08</anchor>
      <arglist>(const SoTypeList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>a254aa4cd0438896953dc3edd03ef6fff</anchor>
      <arglist>(const SoType type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>a2713e96326da53ff7db21aff389b9d47</anchor>
      <arglist>(const SoType type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>ae6ea0c2a6293f7cfbe41f5d3da7bcd06</anchor>
      <arglist>(const SoType type, const int insertbefore)</arglist>
    </member>
    <member kind="function">
      <type>SoType</type>
      <name>operator[]</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>a55bd2da5390e2b016ca9bf0ca610da49</anchor>
      <arglist>(const int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSoTypeList.html</anchorfile>
      <anchor>a7f5d6f49a1a47f7113b7ad6663ffcbe9</anchor>
      <arglist>(const int index, const SoType item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoUnits</name>
    <filename>classSoUnits.html</filename>
    <base>SoTransformation</base>
    <member kind="enumeration">
      <type></type>
      <name>Units</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a73e9abb855f619e3fe22894fad707edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a41dbed684fcc93ebad343d54a4c5f128</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoUnits</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a4228c9591d7ed73023c6e06b0e2ebc71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a2e3f830f5e74631050a8903eaf1a1366</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a562cea31cad758ff555da60244952faf</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a6a88420757cc7f7ed26ef66d8d8fe47e</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a27a9614b150474bbe4356268cc754ff2</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a97abf130989e4982ed50b4184f55dae3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a0f35a38df21126538ac05b4c6bd8196e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>adba83e449b733ca4c97534b337ae10da</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>units</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>ad4eab30ab199ad174827c4b5dd050c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a2620e0e6a85e54462eb7eaa135d4d522</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoUnits</name>
      <anchorfile>classSoUnits.html</anchorfile>
      <anchor>a3cbd1f8310f96411faf8f2f8ca1c2e16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoUnitsElement</name>
    <filename>classSoUnitsElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Units</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a7b6aeddcdbd72e05970985c8ada0b842</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a50e027b5104ec4768930e46a126b0d0e</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a0fec3d88211e824f45c95a3e489afc24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a48d2569b1f102860867d9ca043614202</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>ad13b027fd2feeeb45117612edb7b7e0d</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Units units)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a64424f5e8ad80fd91308ee42a722ccb3</anchor>
      <arglist>(SoState *const state, const Units units)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Units</type>
      <name>get</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a417bc53619dd6d9b787a81a671525e10</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Units</type>
      <name>getDefault</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>a554f8b8aab7f5ac27cd25cf644629a91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoUnitsElement</name>
      <anchorfile>classSoUnitsElement.html</anchorfile>
      <anchor>af5d9b3b175742ad8f3bd5d60bee1ecce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoUpgrader</name>
    <filename>classSoUpgrader.html</filename>
    <member kind="function" static="yes">
      <type>static SoBase *</type>
      <name>tryCreateNode</name>
      <anchorfile>classSoUpgrader.html</anchorfile>
      <anchor>a111b948f9be3793d65fac528e1cfc8e9</anchor>
      <arglist>(const SbName &amp;name, const float ivversion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoBase *</type>
      <name>createUpgrade</name>
      <anchorfile>classSoUpgrader.html</anchorfile>
      <anchor>acb55686a9b52295aa70d7990d9545063</anchor>
      <arglist>(const SoBase *base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVBO</name>
    <filename>classSoVBO.html</filename>
    <member kind="function">
      <type></type>
      <name>SoVBO</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a685b09edf83932b37fc2c49ce323459f</anchor>
      <arglist>(const GLenum target=0x8892, const GLenum usage=0x88E4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoVBO</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a1224edf4b0d2e96659f48bba908ed126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBufferData</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>adda1f522992fa72fe90a85f93926eb6d</anchor>
      <arglist>(const GLvoid *data, intptr_t size, uint32_t dataid=0)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocBufferData</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>af7d4af09beb1bc88672136f96691f655</anchor>
      <arglist>(intptr_t size, uint32_t dataid=0)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getBufferDataId</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a63d3f909bb3caf8e924415af2cd8ff04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBufferData</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a3c180d01817405a293f5d859b281f149</anchor>
      <arglist>(const GLvoid *&amp;data, intptr_t &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindBuffer</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a06ff8c20c585276740ae7a8274984dd6</anchor>
      <arglist>(uint32_t contextid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVertexCountLimits</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a3960b175fa41cd98c2cfc7975f3a9a2f</anchor>
      <arglist>(const int minlimit, const int maxlimit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getVertexCountMinLimit</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>a4f51a893793ac3f7acc119306600cd6a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getVertexCountMaxLimit</name>
      <anchorfile>classSoVBO.html</anchorfile>
      <anchor>ab426ca34ea317566b5bcd98769c59f00</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVBOCache</name>
    <filename>classSoVBOCache.html</filename>
    <base>SoCache</base>
    <member kind="function">
      <type></type>
      <name>SoVBOCache</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>a1b6809d5b782550cb016f2bee450bda6</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVBOCache</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>a343ad235fba622670ccf33d14ad6cb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SoVertexArrayIndexer *</type>
      <name>getVertexArrayIndexer</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>acf1587370043f4e099727180123c8fe5</anchor>
      <arglist>(const SbBool createifnull=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SoVBO *</type>
      <name>getCoordVBO</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>a00929355eff8fc0aa7ccce4f99939abc</anchor>
      <arglist>(const SbBool createifnull=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SoVBO *</type>
      <name>getNormalVBO</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>adff06c15a45c5ad65ad2985010f387bf</anchor>
      <arglist>(const SbBool createifnull=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SoVBO *</type>
      <name>getColorVBO</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>ab75055599aa10209636a58723081d17c</anchor>
      <arglist>(const SbBool createifnull=TRUE)</arglist>
    </member>
    <member kind="function">
      <type>SoVBO *</type>
      <name>getTexCoordVBO</name>
      <anchorfile>classSoVBOCache.html</anchorfile>
      <anchor>a7de848088c3b6f83114617249640cfca</anchor>
      <arglist>(const int unit, const SbBool createifnull=TRUE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVectorizeAction</name>
    <filename>classSoVectorizeAction.html</filename>
    <base>SoCallbackAction</base>
    <member kind="enumeration">
      <type></type>
      <name>DimensionUnit</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ac07b28146ca5ccb7afa3a560e2d4c822</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>af5b4dae5c682ec7a8d4ec1246ec2e2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PageSize</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A0</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aae5796440e222f2864e7abdc656979277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A1</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aabf76f945847e5190a1837670381b8ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A2</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aaa7dfa7c834023e6dac083d4d6b100652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A3</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aaca6f13741e987b4c4b94cb6e980593e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A4</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aa3a0760c9451c3e62d56668452ed7fc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A5</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aa73fc34f6ac8929bec158a8522d15a862</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A6</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aabc2575f581a7fc88fc726f6860aa196f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A7</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aa726975b0d145a3b1cf9a00e62a50c66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A8</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aa0623b6aedb6f8330d5b6c3bfb253d65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A9</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aa46d4049d062aa87dd3e7b849c7941c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A10</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7fc8ac7c81ca974b55807f39f715f83aa1359610ce17c214cfd15f9573dc1a771</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a1945e3dc46d9004454f6be5e90947f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CIRCLE</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a1945e3dc46d9004454f6be5e90947f8faaf2712ae869d411e9bb5abc19613f0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SQUARE</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a1945e3dc46d9004454f6be5e90947f8fa5fad4d4fe72d7cb27bcc861f697b1b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ac8c7b763386d01722b4bd04a819f1e14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVectorizeAction</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a36a60fe56b8e533bf44cba92a0400b19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVectorizeAction</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa4c61beb77a645cd9b4f36be04d41a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SoVectorOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>afaee47012cb2e9bbf90e4120fc66dd37</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a2334e87ea188bdff9d427ac193cdbabf</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a05f24215a4bc5181420ba6ad84e95d38</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a234f6b57215673eb7199765c0cc6d994</anchor>
      <arglist>(const SoPathList &amp;pathlist, SbBool obeysrules=FALSE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginPage</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7b6f705de8320c9667329a54cf40c1dd</anchor>
      <arglist>(const SbVec2f &amp;startpagepos, const SbVec2f &amp;pagesize, DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endPage</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a9e399efdcc1a05b5dbe0346e7d5220d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calibrate</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa485eedafc71a9d1c45ab66b28519073</anchor>
      <arglist>(const SbViewportRegion &amp;vp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginViewport</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa36735f1077ca7102ce223617d13df27</anchor>
      <arglist>(const SbVec2f &amp;startpos=SbVec2f(-1.0f, 1.0f), const SbVec2f &amp;size=SbVec2f(-1.0f,-1.0f), DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endViewport</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a5ba2d871f0a4b735a082bdc8833bf300</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrientation</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa080256adbcf2311a6e73846eb062d7c</anchor>
      <arglist>(Orientation o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Orientation</type>
      <name>getOrientation</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a466ee474c8abf128d570259750c6dbb3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7916e8d0cc643bac003b1738bb0e2248</anchor>
      <arglist>(SbBool bg, const SbColor &amp;col=SbColor(0.0f, 0.0f, 0.0f))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>getBackgroundColor</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>afc614fa2e1e74b4d8e90e2f74b2522e6</anchor>
      <arglist>(SbColor &amp;col) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNominalWidth</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>afc6caea4d2d8fda0583ddddf46acb52a</anchor>
      <arglist>(float w, DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixelImageSize</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>acee61960e4525f49a016343433b100db</anchor>
      <arglist>(float w, DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getPixelImageSize</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a1ce946a7faee98e289c5acc73c34b12b</anchor>
      <arglist>(DimensionUnit u=MM) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPointStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a899ba21b934ac060481b89df170c06a3</anchor>
      <arglist>(const PointStyle &amp;style)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointStyle</type>
      <name>getPointStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ac75a1f415cdd054ca1294b8af89632fb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getPageStartpos</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a8d8b9f3938f1ca2e136063e74431b409</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const SbVec2f &amp;</type>
      <name>getPageSize</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>abc4ec75b7a52f111b9a4b22ae276c412</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDrawingDimensions</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa9387c841cd2c018a8e4e580437667d8</anchor>
      <arglist>(const SbVec2f &amp;d, DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec2f</type>
      <name>getDrawingDimensions</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a43f0c19163a2158418083648bec13413</anchor>
      <arglist>(DimensionUnit u=MM) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartPosition</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a9cadf6163a009475a5b95756213848a4</anchor>
      <arglist>(const SbVec2f &amp;p, DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbVec2f</type>
      <name>getStartPosition</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>affeb3ed0c04811a6c9ae100161e53810</anchor>
      <arglist>(DimensionUnit u=MM) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColorTranslationMethod</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ab2c6fccd7627e5df4accb9acd2b31b6a</anchor>
      <arglist>(ColorTranslationMethod method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorTranslationMethod</type>
      <name>getColorTranslationMethod</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa9462207f761a3a20755fb3f49a5ee99</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineEndStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a74a770a39bb94ef3e0c4c1a1146ed595</anchor>
      <arglist>(EndLineStyle style)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EndLineStyle</type>
      <name>getLineEndStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a82d24d29cbef48b1a4c9b96334f31bb0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineJoinsStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ac60b8ce09de15238a6fc4db84e7fe307</anchor>
      <arglist>(JoinLineStyle style)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinLineStyle</type>
      <name>getLineJoinsStyle</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>abdfb8028e2f050805abfb92a7e049adc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHLHSRMode</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a90193bc873d92108373eb781b692da3c</anchor>
      <arglist>(HLHSRMode mode)</arglist>
    </member>
    <member kind="function">
      <type>HLHSRMode</type>
      <name>getHLHSRMode</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ae89520407fbb190a67842be7d83d3362</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBorder</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a45f08a44b28830dbd90ea216191e5c2c</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBorder</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a24a3685b8f73309b72e86157667d5888</anchor>
      <arglist>(float width, SbColor color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMiterLimit</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a57e2e496b704825f785e162ebb3f3063</anchor>
      <arglist>(float limit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPenDescription</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ad5871a5a14f2660203494874dbb70870</anchor>
      <arglist>(int num_pens, const SbColor *colors=0, const float *widths=0, DimensionUnit u=MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPenDescription</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a9266be1ae98635a9dd96409bcec4215b</anchor>
      <arglist>(SbColor *colors, float *widths, DimensionUnit u=MM) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPenNum</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a7b79fd263d61efa903d9294d38f8755d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColorPriority</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a1ec820270d7b03c165b04602efb50bcb</anchor>
      <arglist>(SbBool priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>getColorPriority</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa5c3d843916ee51349239fd3be82cc6f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableLighting</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a68835613d8b5e490b67c19c9f2fedff3</anchor>
      <arglist>(SbBool flag)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isLightingEnabled</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>afec1d8fe1d9bf0e2e0bf213a436bd5db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ad781513f48ddcc954e98b79a84fcaf15</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a5f7a063737e4e95288bbcfea19b7227e</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>afc82e32d64315c09b580d5c54c08f13d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOutput</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a772d9f7757a94df924b41a902f0efa7f</anchor>
      <arglist>(SoVectorOutput *output)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual float</type>
      <name>pixelsToUnits</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a5035e536bdbf4366cf9ac6367d70c70b</anchor>
      <arglist>(const int pixels)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>printHeader</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>abf1106083ea7ea62afd61b3365adf8ed</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printFooter</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a4eb81eaf6d8519398f188e0ffc53871f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printBackground</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a106f129923de79829598ccb9d3371bd8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>printItem</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a0d713882c3a01e57593e192c000131c8</anchor>
      <arglist>(const SoVectorizeItem *item) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printViewport</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>ac7d4827426855449038b54db05618e68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbVec2f</type>
      <name>getRotatedViewportStartpos</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a1206a5478b630fcd5f17bd3dc5d9b5f0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbVec2f</type>
      <name>getRotatedViewportSize</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>a8c77118544c50b439fba030881b0a1ef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbBSPTree &amp;</type>
      <name>getBSPTree</name>
      <anchorfile>classSoVectorizeAction.html</anchorfile>
      <anchor>aa8f4114167b69af0dde3cc8801b6e7bd</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVectorizePSAction</name>
    <filename>classSoVectorizePSAction.html</filename>
    <base>SoVectorizeAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>ab60d6e2c7826d4265ed3da843deec6bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVectorizePSAction</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>aa7adbb9b58f6a7ca7a926b8ac88f3adf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVectorizePSAction</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a4a0a6f2a65d59dfac5c59fe711fcadb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefault2DFont</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>aa6c5daa662b5c82cfba94c9f5648444d</anchor>
      <arglist>(const SbString &amp;fontname)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getDefault2DFont</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>ae80666ed2413de697b0a7025a3e392a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGouraudThreshold</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>acd4450ea6b1803cb530afcde1fb4ffd7</anchor>
      <arglist>(const double eps)</arglist>
    </member>
    <member kind="function">
      <type>SoPSVectorOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a7333bf9d813750d672e395266f955274</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SoPSVectorOutput *</type>
      <name>getPSOutput</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a0c2561cc8dfd98ede39250afc020f25a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a84f7e824ef28fc17eefc8708fe5ddf91</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a0e8895ce07e67d8c184fdf96e278a4eb</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>ac4c5721d95f80a21709c57ce19c61333</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printHeader</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a40cea3361f95b291613b753b9716da3a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printFooter</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>ab9a4f84258fe93e967ae6dd794f412bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printBackground</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a43f6f09e9901aa30dd692f52ca69aa8d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printItem</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>ac9a2a8c974fb1560481c64706c8d5664</anchor>
      <arglist>(const SoVectorizeItem *item) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printViewport</name>
      <anchorfile>classSoVectorizePSAction.html</anchorfile>
      <anchor>a740f63d51bdecd99b047bb0e4a118f1d</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVectorOutput</name>
    <filename>classSoVectorOutput.html</filename>
  </compound>
  <compound kind="class">
    <name>SoVertexArrayIndexer</name>
    <filename>classSoVertexArrayIndexer.html</filename>
    <member kind="function">
      <type></type>
      <name>SoVertexArrayIndexer</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>af714c4fe92207a47c396235d6dc30fe1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoVertexArrayIndexer</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a6d6f41cf7e9f72f718804532ab94a921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a2a70281db1ec8eee1fcbb803859cedb3</anchor>
      <arglist>(const int32_t v0, const int32_t v1, const int32_t v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLine</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>acd9b648b22ffd19b85266aa9b2cb3b73</anchor>
      <arglist>(const int32_t v0, const int32_t v1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>ad85d439c12561e74f5d356b0e08d0e5a</anchor>
      <arglist>(const int32_t v0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuad</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a93f8d6fc67b96f076a780c7463c397f4</anchor>
      <arglist>(const int32_t v0, const int32_t v1, const int32_t v2, const int32_t v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginTarget</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>aad0a8b68415c01d53078ba318524f03b</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetVertex</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a2b51aa15c302359241aa54f6b881220e</anchor>
      <arglist>(GLenum target, const int32_t v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endTarget</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>ad2d507cbeb59d633847ad4242aa9b34a</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a783c7421278e0ebf163403e02351e8dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>af6684255b9b9caa20f448cd356a24acb</anchor>
      <arglist>(const cc_glglue *glue, const SbBool renderasvbo, const uint32_t vbocontextid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVertices</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a65a20a818436791aec1f3691302a8649</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIndices</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a92bafb44b30dbad535564c62084ce6ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const GLint *</type>
      <name>getIndices</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>aa48bd2fd352409a826bcf8209d876899</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>GLint *</type>
      <name>getWriteableIndices</name>
      <anchorfile>classSoVertexArrayIndexer.html</anchorfile>
      <anchor>a6ab3b93fb5ef5c506a739e66d9bdc960</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexAttribute</name>
    <filename>classSoVertexAttribute.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>a6baf9af04e10c1bed93ca67f9a4d53df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>a8dae15bcc05e1d6ee3b7073a5f778ccb</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>a16b929a7369249c75e1e4a120a52c0a3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>ad173231e5f4b2fd959de8a2a64fab904</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>a811dfa6a553237732ce7233bd216f345</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconnections)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>a55b513546b43d79c0e087b687c5a78eb</anchor>
      <arglist>(SoNotList *l)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVertexAttribute.html</anchorfile>
      <anchor>ae823260d3ce363947664e4e02a41980b</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexAttributeBinding</name>
    <filename>classSoVertexAttributeBinding.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a487b2a913378a6db93102eeb0ca67561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OVERALL</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a487b2a913378a6db93102eeb0ca67561a799db6488607a13eb43387eff613dd61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_VERTEX</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a487b2a913378a6db93102eeb0ca67561a54b08b9169a78c653a4ef19828808c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PER_VERTEX_INDEXED</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a487b2a913378a6db93102eeb0ca67561a4ebec5f70ff35da4a209f84ac6b8edb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a01cf0097b5e7aa0cc56ba4d44cbadc2b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVertexAttributeBinding</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>aa21e31f61be68f36175f1a9bffb9503e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a29f3b93990883f252aca4dfdfe6d5097</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a73661db6fef2bf20154253a3a13d08dc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a08e7c9dc39339034a9fa3ff410cea04f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a9e0dc43146b2e3785d9670fc1fa67849</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>a0ae1ef6dfb5c0e0530e0c31961eda8b5</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>value</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>ae972c8ffe99c6f0c9696b668cf617c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>ac5c1de069ba83384de4e4bb36f137087</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVertexAttributeBinding</name>
      <anchorfile>classSoVertexAttributeBinding.html</anchorfile>
      <anchor>ae617d57d6f60089fbbb3e8e223ecb32e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexAttributeBindingElement</name>
    <filename>classSoVertexAttributeBindingElement.html</filename>
    <base>SoInt32Element</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>a545715f4fd780f6683c783a75c4168ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>af2815d37cfeb131212d33ec72ebebe79</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>a656015f29e0242868e6f7901c609378b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>a976d3908ae1eb7cec22a0789d570c3c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>aff4e70f95bac074f48c318cd9e62c35a</anchor>
      <arglist>(SoState *const state, SoNode *const node, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>ab32a840bf3a8b59664b9c51426bee9b5</anchor>
      <arglist>(SoState *const state, const Binding binding)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>get</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>ad84cbd0b0cbf7b54fb176b2d6d901dca</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Binding</type>
      <name>getDefault</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>a6eeee84a2b4c08c2cfabbf6b0763e34b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVertexAttributeBindingElement</name>
      <anchorfile>classSoVertexAttributeBindingElement.html</anchorfile>
      <anchor>abb5d795b8e3c051a859a18d006de740e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexAttributeBundle</name>
    <filename>classSoVertexAttributeBundle.html</filename>
    <base>SoBundle</base>
    <member kind="function">
      <type></type>
      <name>SoVertexAttributeBundle</name>
      <anchorfile>classSoVertexAttributeBundle.html</anchorfile>
      <anchor>a1a4b220a133626a5ad3cfee0b36bdd3f</anchor>
      <arglist>(SoAction *action, SbBool forrendering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoVertexAttributeBundle</name>
      <anchorfile>classSoVertexAttributeBundle.html</anchorfile>
      <anchor>a00dd7916a4979024791e0f153130846d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classSoVertexAttributeBundle.html</anchorfile>
      <anchor>afb0f4511ceb0599e9f68ad0e2cccefcf</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexProperty</name>
    <filename>classSoVertexProperty.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>Binding</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>ae1f992082c87c0ecf261cac7966c257f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a81b9c33259f49b612c168efe9eda22bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVertexProperty</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a9209e60fb34b7cf6bfbce35aa6329846</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>ae0cb327fde4ac03f8d6eb537948c3da9</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a8b074e98a7148c647589aeecb6f5ea66</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a441af7fae0de0dde84741a18605ac702</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>aada84a66098cc1db82cfe0adb12ebcf9</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a3dba84f4df710d889a398527aaa1f447</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a262ff8ba5962a9c9c19c9af5f39400cc</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>vertex</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>ab749824eac1b6d52d1e8423c4c188b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>texCoord</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>ab7573e322d6fa4903c17204c04476303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>texCoord3</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>ab41630937a56e39988550112cf23b046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>normal</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a2c5a32722c7ef09fa10c150d140de054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>normalBinding</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a60cf16c8607fe5cd120e1edb6286501f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFUInt32</type>
      <name>orderedRGBA</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a863e26ab8c979e8e7f99a124add086cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>materialBinding</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a0d554a89d4e1d378e4049b83357971d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>textureUnit</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a2ceff3bb905564c62f0f3b0152e7347e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a44a1862d5fa778bb76e0c6ef8a35a50c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVertexProperty</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>a225cc1bc982088407a565f3eb112e800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVertexProperty.html</anchorfile>
      <anchor>ad062599d13037ae06bd765b459215287</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexShader</name>
    <filename>classSoVertexShader.html</filename>
    <base>SoShaderObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVertexShader.html</anchorfile>
      <anchor>a319924866a892b915aad0f83616b533d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVertexShader</name>
      <anchorfile>classSoVertexShader.html</anchorfile>
      <anchor>ad50c9e89cbf35474317d4d926b8d701c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVertexShader</name>
      <anchorfile>classSoVertexShader.html</anchorfile>
      <anchor>af69a431b1d5bf70bdea188235cd054b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>isSupported</name>
      <anchorfile>classSoVertexShader.html</anchorfile>
      <anchor>a0d0300dbc37c50dcfa944153aa5a42d3</anchor>
      <arglist>(SourceType sourceType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVertexShader.html</anchorfile>
      <anchor>aa38ff231120271547e2543d472f8fdd1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVertexShape</name>
    <filename>classSoVertexShape.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>ab6fd1500c0d4ee1f5b87e0773ed5c2aa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVertexShape.html</anchorfile>
      <anchor>a776f2f9246f9feffcccc8197ae332018</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoViewingMatrixElement</name>
    <filename>classSoViewingMatrixElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>ae94d35655692f2b982b4ca1783e45eab</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoViewingMatrixElement.html</anchorfile>
      <anchor>a7ef23d1b151ced18ee1dc011f5bcddaf</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoViewportRegionElement</name>
    <filename>classSoViewportRegionElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>a5eb87ef43462bf7f23309af613e2fa41</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setElt</name>
      <anchorfile>classSoViewportRegionElement.html</anchorfile>
      <anchor>a9753ec30f69f528adbff9682a626e894</anchor>
      <arglist>(const SbViewportRegion &amp;viewportRegion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoViewVolumeElement</name>
    <filename>classSoViewVolumeElement.html</filename>
    <base>SoReplacedElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>a5caa858c999aaea4a45d729f4fddb122</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>adbcff9228f06c8413bb9b7018214b4d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initClass</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>ab9bb1f0f2b26e162d3cf70cabeb64ef9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>aa9879367757c24d6497c2fb499067b5c</anchor>
      <arglist>(SoState *const state, SoNode *const node, const SbViewVolume &amp;viewVolume)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbViewVolume &amp;</type>
      <name>get</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>afeb53be7495f1e48f9d16c661c2d4e9b</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoViewVolumeElement</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>ae90fa28f3f220f16220882220901feab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SbViewVolume</type>
      <name>viewVolume</name>
      <anchorfile>classSoViewVolumeElement.html</anchorfile>
      <anchor>a7de0c7cd0089d6bdd8262cb552a6943d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLAnchor</name>
    <filename>classSoVRMLAnchor.html</filename>
    <base>SoVRMLParent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>a1b7b85534e7b1bd5874e5ab633995856</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLAnchor</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>aa4b1cf45e10bf6bb0841629910d33b82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>aedacb689989e8f38d45b516c08ba0498</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>aa4fa98b0faa20e51ab0242b01949d708</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>acb7adb11e13a8de6c57be39e430c909c</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>ad918c1c196ee41dfdcddf6bf4312cde9</anchor>
      <arglist>(SoNode *child, int idx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoNode *</type>
      <name>getChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a9e3d851ef7fc5ab62e637434276448f7</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a8f3106836d01e0f778a5ea9b4d224b7d</anchor>
      <arglist>(const SoNode *child) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildren</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>ab9742a3d2b45ada986861671f5e691da</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a89002d27caddd6bca9bf3ff6205326f3</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a2ff385d9c93c7df1c3f16544c478cce7</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAllChildren</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a029e9112733403d0c1342fe997aa1bb7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>replaceChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a5e9425d0404c4630341c003ebf136a2d</anchor>
      <arglist>(int idx, SoNode *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>replaceChild</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a79ed1b60a7b753e7f0b4a533aa5c8a22</anchor>
      <arglist>(SoNode *old, SoNode *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>af380b90d9d6474ab957bd26decd914ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a79a427449b3867826e3156b30e76ff67</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a06dc040c6b705d87fa8b84cb30cc6cf9</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a030241c232ab7cb8aa1467f0f44d2268</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>ae683b13b028cd2b084c42b22ea119397</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFetchURLCallBack</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>a7e7282394296b7a11b0089cac1f7891b</anchor>
      <arglist>(SoVRMLAnchorCB *, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateChildList</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a2a0aca7e6f330a7dbb31ee34131862d2</anchor>
      <arglist>(const SoNode *const *nodes, const int numnodes, SoChildList &amp;cl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateChildList</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>ac9616e88edc302ca6e85fae3c1bb5971</anchor>
      <arglist>(SoNode *nodewithsfnode, SoChildList &amp;cl)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>url</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>a655d1792053708ef8dd6000d90ae2846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>description</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>a2e0b8fb3f1918dd509800afdb011042f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>parameter</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>aed76a28529c2efcc8007cd5996146fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxCenter</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>ab104e4b7a16a9954bd7c8e793a1716f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxSize</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>afefa17ab1fabdd7fae490bfcd5afd950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFNode</type>
      <name>children</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>ae3944cbc5c196fbe4c4a17c11a7aae9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>a18396d94790bc827e9f03c387e54ce1b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLAnchor</name>
      <anchorfile>classSoVRMLAnchor.html</anchorfile>
      <anchor>a7e6f345e2acd07bb5f27c33dc04dd1b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLParent</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a89cf05cdf1ba310539cf1edb3088e4df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLParent</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>ae7c5181165358da54af87e33d472dfb8</anchor>
      <arglist>(int approxchildren)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLParent</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a1483b74f02317680fc8f4b16cee77f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>af95b404de5f3d2c4ab8d3be675cc3ac2</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>aa5245bd14d8b67408253d3b7d8352bdb</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>aee731ea5d71c7f3c24b4e4cb4577dfae</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyConn)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoMFNode</type>
      <name>addChildren</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>af4f153e36f9cd06bee689ced37b0f5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoMFNode</type>
      <name>removeChildren</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a5f0aaa164b318387a7f91f093a2529a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLAppearance</name>
    <filename>classSoVRMLAppearance.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>aa9652c2ed5d0afeb33c1996c69ee6364</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLAppearance</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a417578d565012308470a83e6b8974bc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a7f5b88eab2dece2b96e0b27eeff537fc</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a945188dfcb5d4661f9b11bf0637a494f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>af61ebea276c6fb3b5ac51e8171c05ef7</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>af1df4cdc04488650a9c146a8168b0c2f</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a2fcc1203206c3b08231e059b8d7357e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>aa6475b23b0b43e12826205e7768c3933</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a241f870f2da7f05fe0f1e9b929278355</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyConn)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>material</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>aee92ba2327c810931c1f0417bca4c675</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>texture</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a5a0927b74cb151cd697d9417cb1bbf2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>textureTransform</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>ae7a7cffab0d28d8e18dbfa20ae55703d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a0d024af71506eb3add07a20ba43e6c8d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLAppearance</name>
      <anchorfile>classSoVRMLAppearance.html</anchorfile>
      <anchor>a8957094f29822b1593a128bbfa442344</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLAudioClip</name>
    <filename>classSoVRMLAudioClip.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a2140d1ca6246814d0d997c80accd44a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLAudioClip</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a681f6b1fb4d52e10e4f4b8b6e5af1f64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>open</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>afe6198dde9f8ddee42487853dd3f7eb3</anchor>
      <arglist>(const SbStringList &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>read</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a606542ecf4f1e95969391017ba60b5a6</anchor>
      <arglist>(void *datasource, void *buffer, int numframes, int &amp;channels)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>aee030b650cda87dd96cece13b07f85d9</anchor>
      <arglist>(void *datasource, long offset, int whence)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>tell</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a0073833e784578df1c14724124c45ba1</anchor>
      <arglist>(void *datasource)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>af403effbd3eabf1067d0f6fb8e8d6866</anchor>
      <arglist>(void *datasource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallbacks</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a01a0a94edea3e02e7daf44a7491f367c</anchor>
      <arglist>(open_func *opencb, read_func *readcb, seek_func *seekcb, tell_func *tellcb, close_func *closecb, void *userdataptr)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>description</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>ae388c19b9324349d0498bb4ae10ac5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>loop</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a3983cd64411e3f64dd3f1af1acffb866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>pitch</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a48ba211831de526d07fafb63ba1e9dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>startTime</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>afbb12cba6b586f0a50707b7dcf330645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>stopTime</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>af805356fd4676241006a788327b6a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>url</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a01b0f006a62977e9d1e38145008bd64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a147f9e804a64216f1dbdc04610ab59bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLAudioClip</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a0065953b2802454f61f1de545ff6e06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFTime</type>
      <name>duration_changed</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>a6fcc85520ddc4a6f399e829e71f6a5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoVRMLAudioClip.html</anchorfile>
      <anchor>aaa6bb5c5a2eb2441de6a9a7cb9de2746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLBackground</name>
    <filename>classSoVRMLBackground.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>a672d2659495307d5e00df2f05fbfbb89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLBackground</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>a46c8c0387355bdef6a2c5f9c630bed8a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>a6cde19c7dc1529a4500d4ddbdadea88e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>a90f42930393d22fc7d20f0ce3aa7c3b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>a39a832937320bbb29586ad353e5b9119</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>a454b103cea31090170da95232f1adc88</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLBackground</name>
      <anchorfile>classSoVRMLBackground.html</anchorfile>
      <anchor>acf0e891be3d85009ee8e7e8a6d8fe4ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLBillboard</name>
    <filename>classSoVRMLBillboard.html</filename>
    <base>SoVRMLParent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>ac6e94561ddcef32332f80d6d5b37212c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLBillboard</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a08dab472f7bdae384281d2ee7ce2e1ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLBillboard</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>afc6bce81f3008844ba466e67a3ec4914</anchor>
      <arglist>(int numchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>abf9cc28064f5f59499e1fbcb8dae2539</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a749863b7ec3246d97b7f79fe64b09c66</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a1a53d50d15941ca265fb71811d2ed39a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>ab35fecd29163ec9eabcbb3731aa3d1b2</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a09354c5b935b5e1289b5b1c280c29356</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>ab3cfc5193d3af8dac900e643004e296c</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>ac15402947bc721bb0fa1201457025bc3</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a6f113f5bf223fd68c40c8ab6e9a65722</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a6caca80902a6213967b3d131a9a97cce</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a36685da969f034d678a18efc4117dd7f</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>ae6ec8ed8d73ef86d2d6c9e6bd43aaab0</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>axisOfRotation</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a6eae673b28c15e326a3d69d073ab2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxCenter</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>ab2afd5e2a19a8a4ede855060f48dfe35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxSize</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a0067a78be925a2142830e5389c672721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a8f81025a398e1e7ee5ed1e5a2da63823</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLBillboard</name>
      <anchorfile>classSoVRMLBillboard.html</anchorfile>
      <anchor>a3268315e8dac8dc83fcc1f25c1bd7454</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLBox</name>
    <filename>classSoVRMLBox.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>a1c8b44d2b8d7fc5b1f3b9c0f4b4beced</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLBox</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>ac2b3e30fe2dc96674b33b43fffb33e80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>a1884075a97693e0fbec5bfe92783a584</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>a88f96493cd43da3502e31edae7d5a40f</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>af9623bea3556fb1f77e8296f7c4e6bb7</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>acf9d848589e057362aa463a56f72b355</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a3e2115d010d723bd949974b3856dca09</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyConn)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>size</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>ac27b4bfbb66d747b6b1e652d11a55d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>a75e32be91af1fa94a652405c1eb1f12c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLBox</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>a87d2db3f60a8e7b1b0394bdeac788bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>a9b64d5788148a620ed2881acea1eeb08</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLBox.html</anchorfile>
      <anchor>abb8921ad351502da43bfc5504fc301ac</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLGeometry</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a1249729d7829c800928aa609e2273e02</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLGeometry</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a3ea4a2d656eb563718faa43138666950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupShapeHints</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>acbe5def39d0a938a1f10b9a204bd3ad4</anchor>
      <arglist>(SoState *state, const SbBool ccw, const SbBool solid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGLRender</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a7ee86523c13aafaa473184882fe083a2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a34ce5ee822aaba41ec71875543767ac1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a978c768df07910d74e8086a965fa8683</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLCollision</name>
    <filename>classSoVRMLCollision.html</filename>
    <base>SoVRMLGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a35d03169c5b9c737d70418a694088f51</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLCollision</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a343d9ad30b1ee63ccffda3e0e44f527a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLCollision</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a5e842590cdd7c6eaad526e87852596d0</anchor>
      <arglist>(int numchildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>aa6b0f482087b103163489dd797237381</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>ae1c548660fea3409c80584f5acba1d58</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLGroup</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>ae981a7a94eae2e1390d2316186196a78</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLGroup</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a54e9e2a21856da98166e6ce22b0058e3</anchor>
      <arglist>(int numChildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a382b94e1fc0d2a1067f6a4fd3adcd0dc</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>aa1c764daa811bb84c33158de30b969f5</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>aef4b3271396fc741c30fdc72ea11ba00</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>ad37ce35b5669a9d9db2d4c36b76c9cef</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a4aa4936341cecaa2386d1c2f13b9d840</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>ac487dbd5feb7871bfde43e4883fda344</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a5a2c5bd82ca57625c0def475ed4d841c</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a4bfc319730bc1a1fc0c494727dd5b68d</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a125c581459bdbc58572e07a92997b0ab</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a64d868c95ef244957538eb9a32d50eae</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>aa542400a28cffd35942f0e41c24a46fd</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a38a393de67a1c424f6c2ed167eecfd44</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNumRenderCaches</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a359c5178bc0c2879b9163bfdcc867487</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumRenderCaches</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a691ab624b5fa31a320be9bfd0fa242ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>collide</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a6e77e76247390a34a71060d22c66674c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>proxy</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a6b1a5b50585a58d512fa8b83dd36091e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>collideTime</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a384725f991882f6c089c5d65dd4410b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>a18885eb15424480971124febd39068c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLCollision</name>
      <anchorfile>classSoVRMLCollision.html</anchorfile>
      <anchor>ae8ccc84633f6aaa63b2d4c02cd5df018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLGroup</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a176c761bf3360780ca214cd3a1d7c019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>cullTest</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a051cd9adf1479c2c214aa3597a6e2160</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLColor</name>
    <filename>classSoVRMLColor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>a02bc80c3620e0e509cf95c3ff077f300</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLColor</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>aa57ace2f9592c7b32b50ff4dcfbe96a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>a227bf6c85766623160b7198e058b43c4</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>a9a975c68739022c4c0df2548182ba6ff</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>a2ed36744d6c638930a8c2351140ad7dc</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>color</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>af110fec359048bd1bd2c2b5185b069a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>a16ddbd9c181b4997c6438edfe6e1d139</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLColor</name>
      <anchorfile>classSoVRMLColor.html</anchorfile>
      <anchor>a73a919db9a5745ae65b94a726bbaefac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLColorInterpolator</name>
    <filename>classSoVRMLColorInterpolator.html</filename>
    <base>SoVRMLInterpolator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>a78a22bdc5dd097999cfb8e5e852c7b9b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>a71b0bce36bc768fc6bfe151a152c748d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLColorInterpolator</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>a7333a749a292966e50bca95349f67d7c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFColor</type>
      <name>keyValue</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>ae487f470703b111ca01e33f88bab5127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>value_changed</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>afd87fcd652e7ce805429a8d721021396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>key</name>
      <anchorfile>classSoVRMLInterpolator.html</anchorfile>
      <anchor>a47633457c9b9c0554ca7a7390d4afff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>set_fraction</name>
      <anchorfile>classSoVRMLInterpolator.html</anchorfile>
      <anchor>a4daa7dff0ab0cdf122a8bf91a48dfa77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>a86ed578e8fe84a079a79ecd20573ee46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLColorInterpolator</name>
      <anchorfile>classSoVRMLColorInterpolator.html</anchorfile>
      <anchor>adc07c061f64adb6448d22548e3cd6307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getKeyValueIndex</name>
      <anchorfile>classSoVRMLInterpolator.html</anchorfile>
      <anchor>a34cb6717e0afe7b3a1bc39a077a69ab9</anchor>
      <arglist>(float &amp;interp, int numvalues)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLCone</name>
    <filename>classSoVRMLCone.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>ace06fc923cd7651482dba6af832e2c97</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLCone</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>ae5a532e32fb09cdca0acdfc45f765fb8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>ae67548a0ef64b3850323c28f2e980135</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a9464bf9e1b29830f89f568d30790742c</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>afed3a787fc8b2e1bf913b5f509274251</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>bottomRadius</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a07d7aa8928f151fd07fa492b9ae8cd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>height</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>af8788558b8df13623d16dc76101c6602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>side</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>ac98131a280461621ef9b3a6b4ca1f65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>bottom</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a66faf5d7cf434b6eb65e0a481dde2cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a8bed471d3cb8d591092fb61752a08d96</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLCone</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a77352cebd06ce128f49a6f03eb3e532b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a79703bc34113698ec6d2831acf068e1e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLCone.html</anchorfile>
      <anchor>a9e60c2f7e638e2b199a41e2f63314b43</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLCoordinate</name>
    <filename>classSoVRMLCoordinate.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>abc0eb5c34d1c0bc379245a4b48aaaffd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLCoordinate</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>a91fa3bcf5f82775a034fae50da4a60ba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>ad93e7c962285ae3596efe76c33facbd8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>aea91a19683cd7eb076fd281dd82a2135</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>aa9ae499996ae3bed3b385c289b4452a3</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>a2200bf74c4ee14e2a7284ef69f0a94b3</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>ae3d15744d8754a9f7e1cf6037e9955d3</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>point</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>af54c9a9bd64b67d2bd75a26c96c762e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>ab60cd131282ecc777dc6453de320a9b6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLCoordinate</name>
      <anchorfile>classSoVRMLCoordinate.html</anchorfile>
      <anchor>a27b8da97682b4215b2841f994c0bdd17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLCoordinateInterpolator</name>
    <filename>classSoVRMLCoordinateInterpolator.html</filename>
    <base>SoVRMLInterpolator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLCoordinateInterpolator.html</anchorfile>
      <anchor>a5808f2cf367a7aa32a7bf13d676b7857</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLCoordinateInterpolator.html</anchorfile>
      <anchor>a47820aee01c083c6f16178195f26fc5c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLCoordinateInterpolator.html</anchorfile>
      <anchor>adfa932ec194c0b5e84f8bdf5bde3d35e</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLCylinder</name>
    <filename>classSoVRMLCylinder.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>af17ec5036eaae4271620de92a8f969e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLCylinder</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>a7a4a4c9f5354e94bf4c4ec523c524f39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>ad8ea8210837ebdc1cd4f77902d647604</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>af7ec34dbd86cf370a437f70cd7815662</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>ad7cc319ca10aff5255b92c161510b4d5</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>radius</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>ad7ec456db93bf11b1b1e1b8e565d64ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>height</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>abdbaf27a8843aa6024c637cb20b8fce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>side</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>a97c53d11222ab783ed840a01ef8e958d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>top</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>a82d8042a1ca47200f6e3a3cede8e823a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>bottom</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>a291fe9664fa7e8e693c91547f289fb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>a4b85ec06e68c979deda2bf837c479ee0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLCylinder</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>aaa12227078228e0152894afc68835a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>aaf4cb6507ff9993387f37934028b5f03</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLCylinder.html</anchorfile>
      <anchor>aeb815f07e4c983d3745ec073aadfdf63</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLCylinderSensor</name>
    <filename>classSoVRMLCylinderSensor.html</filename>
    <base>SoVRMLDragSensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a3d8422c390616624e1b869adf65a7d98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLCylinderSensor</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a2983e1866b74fe3e1ce8543c0c3a0d5d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a4d1edea66748efd9058e42b70c3bf142</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>diskAngle</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a6d15fcb871dde4d62e821b6f81e6b877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>maxAngle</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>aa0f8c4c40cd22a4fbf9cbbd841075e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>minAngle</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a5d1749cd183f854227f98dc9a23596e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>offset</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>af24c72833855c27d712de7470eedd880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation_changed</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a0b4411df3decbdf8425e052d0b982132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>trackPoint_changed</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>ac57f2580f6f6bb939683133fde27c478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>autoOffset</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a0ed66a1fc9b97c577b2d4be38cd1ac87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a9e1dee9450b76850224fce35b020564f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>dragStart</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>abb8b6beb57dd678e33c0ac967454513e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drag</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>a23f86bac089665f66ebc1039fc5d4e3e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dragFinish</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>adce8766b703c151d1dc76f5618f0cd0b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLCylinderSensor</name>
      <anchorfile>classSoVRMLCylinderSensor.html</anchorfile>
      <anchor>aa6bddffcdc70f141eb74022de1fc4017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLDragSensor</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>ab81ead7bfc709ab53c08a690f33099ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLDragSensor</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a2ce25dfffcb38ba5aa35736508f3683b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbVec3f &amp;</type>
      <name>getLocalStartingPoint</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>ab0e3e00b17f2145a3603b223e0f5cfc1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbMatrix &amp;</type>
      <name>getLocalToWorldMatrix</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>ab9712abff974c3d92e9cba187468cbc6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbMatrix &amp;</type>
      <name>getWorldToLocalMatrix</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a7ca5437c6fede98d5107626a2dc23bda</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbViewVolume &amp;</type>
      <name>getViewVolume</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>aa5a94bd5df3027cf0e3c7e4814ec8c28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SbVec2f &amp;</type>
      <name>getNormalizedLocaterPosition</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a06ccdc588c9dba176a1d7499427c9fb7</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLDirectionalLight</name>
    <filename>classSoVRMLDirectionalLight.html</filename>
    <base>SoVRMLLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLDirectionalLight.html</anchorfile>
      <anchor>af914f60619214ba82c32a6d8fd5c0a87</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLDirectionalLight</name>
      <anchorfile>classSoVRMLDirectionalLight.html</anchorfile>
      <anchor>a730050f7bdfd1becfb8f8cd6ba238f4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLDirectionalLight.html</anchorfile>
      <anchor>a3f43e4f0902e8fa6d661aa1aac9e1e07</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>direction</name>
      <anchorfile>classSoVRMLDirectionalLight.html</anchorfile>
      <anchor>a54c10b930a2f77e81716323970cacfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>on</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>a0c3fcaae3ef801041794a5c44dcf6957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>intensity</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>a68f520116001f60b183da454c0ec9664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>color</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>a9a6da131c1fe87068d2c4ec75c73735a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>ambientIntensity</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>a3e1e7c5cbfc6812e544a3a40b8f4b260</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLDirectionalLight.html</anchorfile>
      <anchor>af0959a0e5c1536f3257ed61b167f455a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLDirectionalLight</name>
      <anchorfile>classSoVRMLDirectionalLight.html</anchorfile>
      <anchor>a204f1d2272828f5d95524d50a5ed9016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLLight</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>ae7cd25854743fd0d0174eb8da2909a44</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLLight</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>a1e7df9e0af2184d65a056db03590a65b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLDragSensor</name>
    <filename>classSoVRMLDragSensor.html</filename>
    <base>SoVRMLSensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a28b79257433a12aca3225472f7076f0d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a4e393ba3dda48eebe2cd3e8c21a999b7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual SbBool</type>
      <name>dragStart</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>ae1d71390276f2ac5ee1b555e009d8193</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>drag</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>ab1c5aa1d9c137442a015d589368ac446</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>dragFinish</name>
      <anchorfile>classSoVRMLDragSensor.html</anchorfile>
      <anchor>a68b183b88bfcee7cd96d9c30c9a65166</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLElevationGrid</name>
    <filename>classSoVRMLElevationGrid.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a0381381211267d4488146a9a5586f9d8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLElevationGrid</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a298f77a2a4ea876ff060fc040dee8508</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>ac1fda8e60c09a40b2058cbd7d531caa2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a001c2a58df4e9555288966cdf102c43a</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a0dd0292415102af8593beedb27620c02</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>ccw</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>aac1bc6b7a8b354e2f6605dcad32e78e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>solid</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a09278ac8bbb0071a34fc1f8c87068996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>creaseAngle</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a86bf224b46866978cbe5365b180c6fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>zDimension</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>acb38ce52c15e41f2de672815fb1df9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>xDimension</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a6c0209bf28d982d8cbe8755d264844af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>zSpacing</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a4fd1d1f4bff069a5a30d525c9b8c0ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>xSpacing</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a0c1d776299001713d3f5f0da994f7eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>height</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a7c243df28c7fb9aa42df9c58414d2af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>texCoord</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a90f090e3e3e82ec6d56ee073637440d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>normal</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a13dcda5929d09d7a85756c7b64c321ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>color</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a146f9217088458eb8541073aba23fde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>colorPerVertex</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>ad9007f182baab51119638e48e208dc05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>normalPerVertex</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a236aac9596059ad89860c972a4177f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a0798a773448ae90f47bfe32aab6d3b56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLElevationGrid</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a4d7cb37b53669fae6fcbea5f96cef497</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a0deea7273da00e9147825e68d26d591a</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>aa198ef2f04ad6b8ca118b664e4574d88</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLElevationGrid.html</anchorfile>
      <anchor>a654e92d6e16812b4b90157eb948b62d0</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;bbox, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLExtrusion</name>
    <filename>classSoVRMLExtrusion.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>a481bb397f9059c5ec157a21c059b2102</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLExtrusion</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>a2e9871642eafd8329e9348664c2346f6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>aed99e266538f5713c292366a289b0c86</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>aa9de24299445cd44e5cb1a630b905f10</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>a414ae8fb52c0ba0d669a66f854fa5098</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;bbox, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>af78a2b35409c8ef43810562148009812</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLExtrusion</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>aefaa2b3a3cc77b2927f7d5ce4690ab11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>a1a80d77bd5684698e3efcd682234850e</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>a98de0dd0d2e6a09c202c76b9ee68a08d</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SoDetail *</type>
      <name>createTriangleDetail</name>
      <anchorfile>classSoVRMLExtrusion.html</anchorfile>
      <anchor>a3bc79a87d02e1b0aab66db0840ca046a</anchor>
      <arglist>(SoRayPickAction *action, const SoPrimitiveVertex *v1, const SoPrimitiveVertex *v2, const SoPrimitiveVertex *v3, SoPickedPoint *pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLFog</name>
    <filename>classSoVRMLFog.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a7e6106f565a8603a0a9fdcc5096a6ede</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLFog</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>aed43851b1836bacd8e18a82375604205</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a0ba38452cb86592b7b7a049b3e8e9ccd</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>fogType</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a6a2f6a009454cbe2357ab3d56fd5b369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>visibilityRange</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a78dc52c559aa4ce9abdf182d3d7d2e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>color</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a05c88d07fac245d4b368c4b57abfa3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a5479894c9e71b0fd4c6f4db5badee57d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLFog</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a81791fb8028da56408198999652a30da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFBool</type>
      <name>set_bind</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>a3447044972e1a01dbdfc7082a5d8b2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFBool</type>
      <name>isBound</name>
      <anchorfile>classSoVRMLFog.html</anchorfile>
      <anchor>ad6dcb8aacac8464162a2042a332a56b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLFontStyle</name>
    <filename>classSoVRMLFontStyle.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a3028eaae580d695533dd4c0b5279e084</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLFontStyle</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a6c6d3389450f8a865abd321f0dec32ad</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>af7dfa1578a47427da42f8d12982987ae</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a089bfac3bacdbbf20783b3d6092ef52a</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>acf3ef515553b0f7b165dddb29126fda8</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a9e65bc769324815287f5cf01fb93ccd4</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a60de83c55666d64959c07c25970fb9eb</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a9de203b2c267f719475eaee9c852bb48</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoType</type>
      <name>getClassTypeId</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>ac40be8effbeef755db274f310c171986</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a9e93326078e940f5730c7e2a02ed9d6a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLFontStyle</name>
      <anchorfile>classSoVRMLFontStyle.html</anchorfile>
      <anchor>a65395159d168be8c0a14822436c555c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLGeometry</name>
    <filename>classSoVRMLGeometry.html</filename>
    <base>SoShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a277a86f904a86382b39b2358ff7fff16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLGeometry.html</anchorfile>
      <anchor>a810ee0f09c9fc13d4261dbb94b0c2dbd</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLGroup</name>
    <filename>classSoVRMLGroup.html</filename>
    <base>SoVRMLParent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a034e62f9963706c7500dabeb4bc0853f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a10f7262f363a3407372948637732749b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>afe1f661e8caae17549c7dd0a303229b5</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLGroup.html</anchorfile>
      <anchor>a4ed276802849b53d5b699929df2efe49</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLImageTexture</name>
    <filename>classSoVRMLImageTexture.html</filename>
    <base>SoVRMLTexture</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>ad79544483fc1f7a13fd48a3ebeb41fff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLImageTexture</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a24d473e359ef43b05e49ecbdf7eaee7f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allowPrequalifyFile</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a6f58b7ef9258737be5e5024151e83d04</anchor>
      <arglist>(SbBool enable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>aa60a6c1df54e54030b31fe501a9141d8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a94446f15fe5e43a9e9ae447c1d59fa25</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>aae9ce2c06e5c9808155a61d355cf7aee</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>ab8454ef54593b8f012faa255430724fc</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a6d2e5655db315bc237f30a1ee21a628b</anchor>
      <arglist>(const SbImage &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>const SbImage *</type>
      <name>getImage</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a977418b568ca658bafc13897db15e968</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDelayFetchURL</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a7781aad2bd49b16da0d53f529021c099</anchor>
      <arglist>(const SbBool onoff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPrequalifyFileCallBack</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a0b2aed4d660b05f10294d1796d192307</anchor>
      <arglist>(VRMLPrequalifyFileCallback *cb, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setImageDataMaxAge</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>aca83156b7b0f93250a13cb980435f0da</anchor>
      <arglist>(const uint32_t maxage)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>repeatS</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>a0fc43d8947f2ff636c751b1160987827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>repeatT</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>ae876c98d737a286575cbf563b801717f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a184885ae010d0bb7e222c263ca45e48e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLImageTexture</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a951821b44ab2be65876383122afed873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>aea38331b932611fc4415a1fa2b77a6d8</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getReadStatus</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>aa7929b2334a4e5bcc7dfb0deda28d744</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReadStatus</name>
      <anchorfile>classSoVRMLImageTexture.html</anchorfile>
      <anchor>a339eb286f857ee408e233bbc0f584647</anchor>
      <arglist>(int status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLTexture</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>a0d938c35a057abe4b198f964ae605184</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLTexture</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>a0334b089e09ce53d26da8d29dcac794f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLIndexedFaceSet</name>
    <filename>classSoVRMLIndexedFaceSet.html</filename>
    <base>SoVRMLIndexedShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a9803bbffdedaba8e97e8b4845057432a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLIndexedFaceSet</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a8b3e04e48e99eae472f8a805cac1cddf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a694a42c1bb80a2dcacc71f0c6104f60e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a26311205f56a075a6fc9adc56152dfd8</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a8cea640c4e28f580b1e2a44b7250ecca</anchor>
      <arglist>(SoState *s, SoNormalBundle *nb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a7a073913fd0bc70135e3c8900b1252e0</anchor>
      <arglist>(SoState *state, SoNormalCache *nc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>aa60494383ef2d6304cd5538341c7b4d8</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a396ca6a13f9b146f68484c7674159cc3</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>aea258e23f77795a0baa961f72cc7fd7c</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>ae9508b5fc768c0fa47f90d2b8dbda42e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>ccw</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>af9d6ee8de9b2140bb40d382a4a962c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>solid</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a1aba1f317454f8bf1e4441ca9ce579ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>convex</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>a333792cbe18b684c0a5e930ceed9a901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>creaseAngle</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>aafc6f44a47e2100e729d1fd8c5c1e7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>coordIndex</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>a13ea8cfaa4d4d1a6b53744481dcc8018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>colorIndex</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>ab8fcf28c572590b4af4d3c492d13d35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>normalIndex</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>a05bf8640e603924c1791e2c5d0ed1551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFInt32</type>
      <name>texCoordIndex</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>afdce0df08372e44c8bda8dd8f52c9dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>coord</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a7c717d8590b4b4c7aa949cbb450bf4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>texCoord</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a46fabe9d5b58ba72d629d8bd6a634889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>normal</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a0626b40f24dc971527035c680af52813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>color</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a0a15befdc06e301bdea041539b24f4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>colorPerVertex</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a4bee626d10f23a70941417a9f7312d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>normalPerVertex</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>ad26f29ad789978575ad061a8a6c7b3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>afbb7388baac8c6a7493fac204020b67c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLIndexedFaceSet</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>ad50d34b811cad0e4fc01e710d06fd607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLIndexedFaceSet.html</anchorfile>
      <anchor>aa4aac1eea940f4993ee10bd5f738163a</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLIndexedShape</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>ae23b13263a42fb81903d663b7c504e30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLIndexedShape</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>a262f8271f54e2f0b00dcdb7ae1ade139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>acc94ee30222ef7341e19bc78b9c7ebf6</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SbBool</type>
      <name>getVertexData</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>a4366e0b58045463f0d01925ff7cce089</anchor>
      <arglist>(SoState *state, const SoCoordinateElement *&amp;coords, const SbVec3f *&amp;normals, const int32_t *&amp;cindices, const int32_t *&amp;nindices, const int32_t *&amp;tindices, const int32_t *&amp;mindices, int &amp;numcindices, const SbBool neednormals, SbBool &amp;normalcacheused)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLVertexShape</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>ae840f9b64433ed85ef747cf4f9706745</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLVertexShape</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a97b1c04fbcf93b400eef6243935f661b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGLRender</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a68ac7889b1a9aada07385b60ea123b11</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoNormalCache *</type>
      <name>generateAndReadLockNormalCache</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a5d18b31ca5a3c5a1758c0bb45b756f6f</anchor>
      <arglist>(SoState *const state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexData</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a029f30862c97a1be285faf4baf997f07</anchor>
      <arglist>(SoState *state, const SoCoordinateElement *&amp;coords, const SbVec3f *&amp;normals, const SbBool neednormals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readLockNormalCache</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a820f747097d2c5c0cad633a3c1cce62b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readUnlockNormalCache</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>aedad4ad2668360229fc6a50b500101d8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLIndexedLine</name>
    <filename>classSoVRMLIndexedLine.html</filename>
    <base>SoVRMLVertexLine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLIndexedLine.html</anchorfile>
      <anchor>a855d21710dacf33570ab6cf4567442ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a78c1d5abc55a7d5d5c1c41d128947969</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>aca38539875d2b1134c91669686f53400</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a3a1c8fb8d522df83ff486e16850f7699</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a831788b396b8f8199c19a685f9a6edcb</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a274b41d83192c82176ff2243b84d67bd</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>coord</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a62b406c7e856e0be8362d81647f05ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>color</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a4ef412d7e14f577838f955a57848d3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>colorPerVertex</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a0fe2645af8007a153590728b3fe1d762</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLIndexedLine.html</anchorfile>
      <anchor>a65b92b1a00bc408afa053f03188f06ba</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLIndexedLine.html</anchorfile>
      <anchor>afa4f265c876116d86a593657d5b565e3</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLIndexedLine.html</anchorfile>
      <anchor>a045e5e972d397119999185a0ba9e4620</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLVertexLine</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a368ba67a0b9f4bf0e80c182c94863153</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLVertexLine</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>ac62b078b9f52d4f865ecbdba7b1fa58a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGLRender</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>aacdf4937e9ea4f5017a2221789faf2fc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLIndexedLineSet</name>
    <filename>classSoVRMLIndexedLineSet.html</filename>
    <base>SoVRMLIndexedLine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>a433f055c6a9f740d80737617f960e3bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>ab17a4616c160c7764f8bf9a8a982a596</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>afaec6c637491fb60211d995ada44f0a0</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>ad83df5b9824bd8c03254df7a734b0f19</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>ac68b71b0005964a63acccd47b000dbde</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>a82ede737040aac2471ab0a9452e1a8db</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLIndexedLineSet.html</anchorfile>
      <anchor>ad692f02cd73eb4f1a0c5d70970652a28</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLIndexedShape</name>
    <filename>classSoVRMLIndexedShape.html</filename>
    <base>SoVRMLVertexShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>aeab0c29ff13128b6bf6d424b073a131d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>ab5de75bbe9b3c7b7eb410a97ec1c754b</anchor>
      <arglist>(SoState *s, SoNormalBundle *nb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>generateDefaultNormals</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a4b7670362a45993067b59eeaf3ae12d9</anchor>
      <arglist>(SoState *s, SoNormalCache *nc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a584e3bf7d8addc544062e182e97043b1</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>a1f36908f74ddd7976f6ef5e3e946eb58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLIndexedShape.html</anchorfile>
      <anchor>a5facb4facfa571071a762ad613194b73</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLInline</name>
    <filename>classSoVRMLInline.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>BboxVisibility</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ad53d79209d6a39c929c3025b673695c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEVER</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ad53d79209d6a39c929c3025b673695c0ad27f7364faedceaf429553ef533d3a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_LOADED</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ad53d79209d6a39c929c3025b673695c0ab438ce0ef5ed762d02fc5ebaf8ef4f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALWAYS</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ad53d79209d6a39c929c3025b673695c0ab33a4dedbe8bc9af4155265e6cc60a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ac59c56e139884b66f2c3bd262a36c627</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLInline</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a82eacfcbb552f788942d12ad7a9e38c8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullURLName</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a346ede7a3b6c43c0fe87dcfe0e6eddb7</anchor>
      <arglist>(const SbString &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getFullURLName</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a75642ac91c353f79edc0d4cbdc814190</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoGroup *</type>
      <name>copyChildren</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a10885ce92b1214d9ec4e70d52e34b81a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestURLData</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>adde69cd6dbf423b1ff9400e3f2931cd8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isURLDataRequested</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a120fe959b4ce2822eed7e9566e299505</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isURLDataHere</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a4797f7eb18c985bda8214a8c286b92de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelURLDataRequest</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a6c50befe43cd14353e8e6c4fa058aee7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildData</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a9e216e6d52b239d4b247b92ec86c4175</anchor>
      <arglist>(SoNode *urlData)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getChildData</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a581aaa2eaeef1d6cf07679fb55d6924e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a51d655faf4ec1cf2e1c137ba5a7bb979</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ac609228f1f882474a9d797703a0bf9ae</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a425296e7fe6031717012ce8a937c6e18</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a307464c35350f36841f569ae82708e46</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a22abda1f35f196fa0bdb5d6ef7ca1dc7</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ae9f360b1f4671de9bc905e4126ce789b</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a72fe69226a4df3007e622df8b1cce209</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a4c071001c0b16f0755705f4555220be5</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a3c9504d32cd748c1f500a4ab63bd2f3b</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>afd54d9960895b8a6faab83d479262a5f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFetchURLCallBack</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a95fe7b1543642d09b58685ae80fe1917</anchor>
      <arglist>(SoVRMLInlineFetchURLCB *f, void *closure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBoundingBoxVisibility</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a3ab876a0c62b7eca3f84883c14de145a</anchor>
      <arglist>(BboxVisibility b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BboxVisibility</type>
      <name>getBoundingBoxVisibility</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>aa6a9c11497cde5008177f4e2ae276252</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBoundingBoxColor</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>ac74b150391318cc831c5d1c498d6bb8f</anchor>
      <arglist>(SbColor &amp;color)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbColor &amp;</type>
      <name>getBoundingBoxColor</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a071d0d3ff34f14c33610745a87a01547</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setReadAsSoFile</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>a5f6938836a017fa9b3aa8e6d19d91d69</anchor>
      <arglist>(SbBool enable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getReadAsSoFile</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>abab96994d641539bf5f1e110f69730c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>aeff46ce36c83a8c92d91908cdafa00ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLInline</name>
      <anchorfile>classSoVRMLInline.html</anchorfile>
      <anchor>aa07494e11d516189792365ec61eb3ffc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLInterpolator</name>
    <filename>classSoVRMLInterpolator.html</filename>
    <base>SoNodeEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLInterpolator.html</anchorfile>
      <anchor>a189bfcc69f78e2c650ca2341548c0147</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLInterpolator.html</anchorfile>
      <anchor>a2a5c8ba946b3e44ac4d933912ea33e7f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLInterpolator.html</anchorfile>
      <anchor>a97d1ff87867673dda75694bcf0f7e93b</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLLight</name>
    <filename>classSoVRMLLight.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>adae035f4b1c29bde08ddf6c1c5a61b21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>a10fa7d89c8c2ea1d89a968ddd65e7332</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLLight.html</anchorfile>
      <anchor>afba1a9e71f9ec8879858432bf14fd3f4</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLLOD</name>
    <filename>classSoVRMLLOD.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a5749946d5edda5771a338b5c4365dd98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLLOD</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a3c8c29830493cc1f5c8f175166b19584</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLLOD</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a38af223042db40f2dfa34ba1ddf921e1</anchor>
      <arglist>(int levels)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ae70ec41b5e8279bf031a591ce99a0e69</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a1e2ad5c6f82d32c3066d4fbe8330168f</anchor>
      <arglist>(SoNode *level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a749deaccaaaa38acfe29735cc5da1430</anchor>
      <arglist>(SoNode *level, int idx)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a8d3ac8c635f376a6ce2b6a0bd1683e52</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a8cf98d0e993cf23408724565fa0102c3</anchor>
      <arglist>(const SoNode *level) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLevels</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>af04425dad2e022385187babf1f48d995</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ad8c77c50caddff7b882eed3489c16328</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a11dd860b663a28b34a8a594eda301c01</anchor>
      <arglist>(SoNode *level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllLevels</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a2f2e544eac9881dba8a580e49f659a89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a6c6cd5a1333466a8c86ba5423968d323</anchor>
      <arglist>(int idx, SoNode *level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceLevel</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a09eaa735b64afb5ed148b7acfb63ec09</anchor>
      <arglist>(SoNode *old, SoNode *level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a35058363a60e6f6925119ba2ac6f0339</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>aa7a402b5baa54d1642081d30d451576b</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a7b71003c93594561420760533767ac68</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a1faec4e304e7c871b3fb36745648a83f</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a80704b90e838b66c0c717a384be83563</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>aaa0babfa215a59c0211d0d79e8cf8615</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a61269891f5cc848e4a9db02f6f71552c</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ab66f2f934244fe96fdbf5f0f4f4a3341</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ae62ff630f1c42e50e612d342a1939bbb</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a7bb1b274641b3f71144ceb5af781504c</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a6b072fbf520fffa2bd563229f578abdc</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderOffPath</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ae8b7846423052f178a540812fc0c9da6</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a3eb70ed274f18691523ecc9f8b23b037</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ade9c137f523fbac7c7e39d9d48f3e6f8</anchor>
      <arglist>(SoNode *child, int idx)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a68cb21aa634a329ec8c7a0c56773a612</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>aca574a6cfb8fc95955ee18a8924618c9</anchor>
      <arglist>(const SoNode *child) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildren</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a2c51772052e1d0782168d469230b31e2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a92ff6e24e58559eec42c5773e7463b9a</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a86269fb43724e3528f7a017b0b084fb9</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a48f274eb9427d79de2b07dad5defc652</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a84b8cef2ce1ef3ae6c51a768a5e9b625</anchor>
      <arglist>(int idx, SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>aa96417982a15191a8e463f6a6a670e4b</anchor>
      <arglist>(SoNode *old, SoNode *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a89cfc7842d7c913dec199d06fcc4eb96</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>range</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a14c8ec09e99f52bb9efba69da0dd5513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a3e42863eeff9bc9c697d8b91894bb355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFNode</type>
      <name>level</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a9ff23ff7db8b5f2e15811df617ebe704</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a6badb5f1dd68bb8036fcf9546426728a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLLOD</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a87bd06dd557ca768e65cdb7630e32f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a5eff7dd8da6d92b36e6dae99b1dd9310</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>a38653993d875e6af822f36ddb3481388</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>ac87ec4a85bee0c8fed5d912d98018c7e</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyConn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>whichToTraverse</name>
      <anchorfile>classSoVRMLLOD.html</anchorfile>
      <anchor>aacc0c4d2769f6c6e470f70991e45e6e3</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLMaterial</name>
    <filename>classSoVRMLMaterial.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a1b90e395c93b64b201480d0aedd2684c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLMaterial</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a23ed288fff8e4e1bde8fd232a05556f3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a4c3840327f1d28b5db3e4eb4e819bf07</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>ae7a3aef291e465fc0e52ebaa6b48f607</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>ad11e3be9c724d0748ef7bbc0586a5e71</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>diffuseColor</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>ad9d43dc7f80bbff103b38a8083c2b528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>ambientIntensity</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a30e043072a799eb87e43781a55e3716d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>specularColor</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>ad4b392c9e053271298e44684ec515cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFColor</type>
      <name>emissiveColor</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a163db289a2fb0035cba31b71040a1dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>shininess</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a928cc4168441de4cdc516ad5fc7e9d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>transparency</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a0b314ac72919ebd93fb42ca6c550d86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>a150c93f5c2efa6b6518e1bfe0b8927ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLMaterial</name>
      <anchorfile>classSoVRMLMaterial.html</anchorfile>
      <anchor>ade0bf641e9a97a060406ebb4bd93524f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLMovieTexture</name>
    <filename>classSoVRMLMovieTexture.html</filename>
    <base>SoVRMLTexture</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a6db49649b96bb34a4b9172c78222a0f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLMovieTexture</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a4fbb34a21c72f6ae381b1483a919b0b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>aeb3a0a568bcf64cb58f5743c47c497ce</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>loop</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a6b9b4189ebde712676db7b78bc90c058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>acfa02921ab72dc8c32a0e4d2e7a78889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>startTime</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a1e189e2cb8cae81fd9b6d2ac7507cc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>stopTime</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a0899b031f73caf2b3994b09edae449a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>url</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a193b493ce5bf0f4f6f64d122a4db0c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>duration_changed</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>ace8ff2579ece5418f955fb597ea5f585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a878815f9863da1ad61e9d5b98913209e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a50a42caa075768d1f411c6eb4d7d424e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLMovieTexture</name>
      <anchorfile>classSoVRMLMovieTexture.html</anchorfile>
      <anchor>a6121312e226835a8002d4844f8cb6e00</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLNavigationInfo</name>
    <filename>classSoVRMLNavigationInfo.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>ae656a27d06f0837dab1a3ccc4bcb876a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLNavigationInfo</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>a4a213ce5033413841168619778e88799</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>a201b32996ec596e737fec44d0e67aca3</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>type</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>aab4250ecb36c2acf735563b9d91f3d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>speed</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>a9469e04cba0ceb693faa020e3c2678ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>avatarSize</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>aade12b9eb610fc44e14bff252e8acad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>visibilityLimit</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>a1ca37a8c22092dbb0706f644d0c0cb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>headlight</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>affb7e09e8acfdeccbbc1d26b145ce2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>a2b4650f508db719b34d368f3dcf541c6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLNavigationInfo</name>
      <anchorfile>classSoVRMLNavigationInfo.html</anchorfile>
      <anchor>ad8ff7933a47fd08f783aa40c5c317053</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLNormal</name>
    <filename>classSoVRMLNormal.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>a4687590d5b732f0ac7c7e39b0cc97d88</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLNormal</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>a42455718046082d764d51ab1dc7e7bc9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>a120b769f40cf2a408d4405b0567599d1</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>ab556a653c27b8414b3beccf7c5d75a5a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>a7b1040a9430663c8300a8c6920e86c33</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>afbe8e19a72915db1d5ba83386581a085</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>a0101da74d010cbf6bb165cad5144c2fd</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>vector</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>a55a6e5c71e73b78392196491f69bab4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>af3ca5649258e56077e08c9421a6b8d74</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLNormal</name>
      <anchorfile>classSoVRMLNormal.html</anchorfile>
      <anchor>aa41b22c76a5a703a6f336d31801792b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLNormalInterpolator</name>
    <filename>classSoVRMLNormalInterpolator.html</filename>
    <base>SoVRMLInterpolator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>ae3529492618ac554b53f87cbac889130</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>ace349e1fde505bd07971a85e794f4d2a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLNormalInterpolator</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>a46a3501439786e5d82b27fd4c1e2aeb9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>keyValue</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>a302dc06fb397966a009775c909cf907f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>value_changed</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>a1fb52ef6b4a01eff067a889d678a0910</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>a3baf730194cebf1b7c179dba422e43a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLNormalInterpolator</name>
      <anchorfile>classSoVRMLNormalInterpolator.html</anchorfile>
      <anchor>a8c063a109fa74191bd1a8bf66d08f4bb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLOrientationInterpolator</name>
    <filename>classSoVRMLOrientationInterpolator.html</filename>
    <base>SoVRMLInterpolator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>a4ae49af20c56c4083dc9e6cb7f87af6c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>a56fd354bcfe9e87a835c73ba425aabc5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLOrientationInterpolator</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>a1a9a2a5b16bd6065876e5b12ad5f3348</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFRotation</type>
      <name>keyValue</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>a1b7a951e59b47a4abcfe5523590b08d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>value_changed</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>ac24a4da0cf54223bdbbae15990779303</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>ac1185e7574223e6a6dec4f679b9558d5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLOrientationInterpolator</name>
      <anchorfile>classSoVRMLOrientationInterpolator.html</anchorfile>
      <anchor>a4c8b2f8ee4ed0e09fe1decc2cc770d35</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLParent</name>
    <filename>classSoVRMLParent.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>abde7eb22215130276b5338c6e05526dc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLParent.html</anchorfile>
      <anchor>a3b25ef46011fbf1ab5a0019d033efad1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLPixelTexture</name>
    <filename>classSoVRMLPixelTexture.html</filename>
    <base>SoVRMLTexture</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>abb82b582e19c3994232632f79a72a2fb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLPixelTexture</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a910ed2734cd75cc2ae0bf2dc066e39c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a2b8cfa1ad4847092fa52dc53db06b0de</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a6684d4fc1e01b14ce0e9538fbb0b2b5f</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a0b59f02474c1d7204f79bd065cb0bd04</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>adbe21c02648bbf7345b53033d8b71777</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a5b62f122e0acbebd97efb3cddc53327d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLPixelTexture</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a2925890cc1593c560f2122868682c389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a6f472aa8548f2d6c8b354811ba78f8ae</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLPixelTexture.html</anchorfile>
      <anchor>a943b1499dd38021c117e0ce6c024ed88</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLPlaneSensor</name>
    <filename>classSoVRMLPlaneSensor.html</filename>
    <base>SoVRMLDragSensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a0324713c15914382240bf22985b77115</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLPlaneSensor</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>ac13050161d79c74ddd20309ed9b43cfb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>minPosition</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>abbb6dca59f18675c41126560404223e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>maxPosition</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a6474b0b5f30066f6f90333ba7da0fbef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>offset</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a3d8e7a99d2b6c84c1909fc3f742b02be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation_changed</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a64ccee5c4fa2d174ffa68540118d479c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a35360aeed20b5fb413cfb6f609633436</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>dragStart</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a3c878a09eeef697d5ad011214d45b9bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drag</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a8f845abc98253d4cd11162f07db57b96</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dragFinish</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>a57ae32196bbfab5e9912219e80fb0121</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLPlaneSensor</name>
      <anchorfile>classSoVRMLPlaneSensor.html</anchorfile>
      <anchor>af04632fab17952da62f617c2033d34d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLPointLight</name>
    <filename>classSoVRMLPointLight.html</filename>
    <base>SoVRMLLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>a9a822a9d805870a6d7499a882147b43a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLPointLight</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>a6d1b81eb4506550cc2e22538cec2fa46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>a5c5354e03050e6261f628d71d4ddfb72</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>location</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>aba9c6333e4e3a012a44a69a945b8b288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>radius</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>a074b360514876e054a87e56963a8cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>attenuation</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>a8cc48a427c0b304a3adc3452decd70d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>ad70bb59c9c011991d6dbb91c4fc4a652</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLPointLight</name>
      <anchorfile>classSoVRMLPointLight.html</anchorfile>
      <anchor>aaf1a9b62ae8b339ec9378f7f9d854644</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLPointSet</name>
    <filename>classSoVRMLPointSet.html</filename>
    <base>SoVRMLVertexPoint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>a4a91d32c12722afd117732079a066e48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLPointSet</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>a8bdf091a45f5b41cd8b6de3bf92877af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>acfa23c82a3ff1d68eebd93318497786a</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>a2c643bd2623f74fab65d92f756221938</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>adce69e91b2a95860f948b18956c8d72d</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a9b2dfaf059262bff209aeb47a524ff83</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>ac0f7d2b6b079a4480525243f200ec51e</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a3263cefd6dd95d1ef182e5074d24f912</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a1ba3270b1f95847d8c4ccb414fa5985d</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>afab7aef2dc3528197202e157b0c014bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLPointSet</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>aa35c2bd67c1a4848a895f2176672acf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLPointSet.html</anchorfile>
      <anchor>ab660849647b657377727e44ff7a4caa5</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoVRMLVertexPoint</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a466706f70b4960d45bfcd1f57a365b95</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLVertexPoint</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a03b0a60eafd3f663e2034b503ab05ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldGLRender</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a1e60d5dc1d50975264122ba767a90d92</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a0c04dccbaa54eaea471d8727692ed838</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>coord</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a63d8e420f283d419afc2c69c69738e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>color</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a28bcebbf0abeb58ae8b13a5f3b2e5800</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLPositionInterpolator</name>
    <filename>classSoVRMLPositionInterpolator.html</filename>
    <base>SoVRMLInterpolator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>a019335f611c7390fcaec9216860ec3d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>a8ad5dc3f6a3839f9d021da685e329209</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLPositionInterpolator</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>a390e1729d6a47998317f4a3aec2820ae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec3f</type>
      <name>keyValue</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>a8d62a2739d64c8e4f52e7e3158e85312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>value_changed</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>acd0923ad96906e42e36220b900430761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>a2a17c84aa02285c63cb2ad167a8d442b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLPositionInterpolator</name>
      <anchorfile>classSoVRMLPositionInterpolator.html</anchorfile>
      <anchor>afaf3ff17f1b7c542b032ef60d35826d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLProximitySensor</name>
    <filename>classSoVRMLProximitySensor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a86f12cd68c14da935b1e425faba44800</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLProximitySensor</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a8326fbb2a834e38dc51895829df56acb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>ad771e93a2dbf2186319d13acd78f4f86</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>ac425ab9dfbd788b1c9771175a074d511</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>ad46798648cf7b65dd3f92bde7aa0d009</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a3e3a3c4650d210cd0a0980f77f4db06e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a36b70462a7bae7a4bb8edd7630b9cf64</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>ac3179d3dd0c2d5d58e6747230a9a7f5c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a9b182c5c5aa37e178f93f1574d6d8cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>size</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a82309d1aacd36886023a76e89d878b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enabled</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>aea108fd2d564ee087e154a8485b74107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a3a260f82699ea69b86e23b9588f24fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>position_changed</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a43b83a5834b222f73647be686a3b9c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>orientation_changed</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a39221908c61d9c6264880916ba5c158f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>enterTime</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>ad6904ce53a287ecabc2c00026155884b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>exitTime</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a6fda45f77514b7ae289c498528106cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a7a9415abfac4317565d5eb719025dc6d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLProximitySensor</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a339ad99105319b221a03243509450f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLProximitySensor.html</anchorfile>
      <anchor>a7a6d8c5980991380dff29f484e642b64</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLScalarInterpolator</name>
    <filename>classSoVRMLScalarInterpolator.html</filename>
    <base>SoVRMLInterpolator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>af90e233f982928b26fc461fb73601442</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>aacc547bb86e6f2390b4f8fe5d203acfb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLScalarInterpolator</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>a0e07a45c36e74a2bcddc59831f9d5255</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>keyValue</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>a6c542ff407ed3e0c6080d0fddf26a31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>value_changed</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>ab173b9a90723efb65824128506940ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>a38345e65cd2ad80d1627e3f21dd818f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLScalarInterpolator</name>
      <anchorfile>classSoVRMLScalarInterpolator.html</anchorfile>
      <anchor>ae8d5a27ff7746c14f8149ebd3f102d7c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLScript</name>
    <filename>classSoVRMLScript.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a9a18456b39587c8806c33f890653a474</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>ad49fe6230250f68efa243b661d921eb2</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>aa789135e4ea75409aeca898635b2c006</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a427de4f67009a9699fd2a88021fcbcc2</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a57677b15cddecab92db9b70f9954ae21</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a8d0e9936ac612db73baddfee316b6688</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a9b212245ad702d44723855266c8aa434</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a26dd9d8b67363953a5d210ca53eebe33</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScriptEvaluateCB</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a054cf34321d25fd49f3d6502db23d5a1</anchor>
      <arglist>(SoVRMLScriptEvaluateCB *cb, void *closure)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>a02518378b8d20f8c8c95352503396819</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyconn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLScript.html</anchorfile>
      <anchor>abe01703f8592ec2901d0f643112251d9</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLSensor</name>
    <filename>classSoVRMLSensor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLSensor.html</anchorfile>
      <anchor>ae235dafff0668ce76f40ac41ea105a92</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLSensor.html</anchorfile>
      <anchor>ac200df8485e91c56f98624451501d1c7</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLShape</name>
    <filename>classSoVRMLShape.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>CacheEnabled</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>aa100ca2f9e5442727d71113adbad85c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OFF</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>aa100ca2f9e5442727d71113adbad85c6af73ea2c1267b746aca51e351eb75236b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ON</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>aa100ca2f9e5442727d71113adbad85c6ab10a303d47ab6cf319e43c06719c398a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AUTO</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>aa100ca2f9e5442727d71113adbad85c6a6f6bba0db240fb8850965caa5bd95936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a4f30d5be9b3e15354ffd71213dc688e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>af4785f6fa15f6ede0e32614bf019e62e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a44bada1e793770bbf4287bd70af15c57</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a31c99006ac4ba31af3a2b86924492f6f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a369fc93b94f2c8a64683551791859327</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>ac181d952d51961823c9a912e9605edca</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>afa6eb0a31271457b6aa46234f5443154</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a072409c5f82a171cbc5fea29a04bd3cc</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>abeb1eeddc2c0171221c2411859f1b7d6</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a868d973c10fd6e7a8d7a6631e42d9acc</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a6901aa9ecf865300e85f759f8b3b7106</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>ab59872ef4a00f400cb4ba60fe859ec51</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a2c6ec7451a852dc0d0e5828190cbab17</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyConn)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>appearance</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a835cee2dff431953c6ceaa33b817dfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>geometry</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>ad63c581b3ba3f8deb55dac04d1e43d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>renderCaching</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a434f71cc04829d7f76d5b88f15293927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>boundingBoxCaching</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a4ed3d5c109f15de603a0deb2642121c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLShape.html</anchorfile>
      <anchor>a378fa27cd774ef66c8f55204c432312a</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLSound</name>
    <filename>classSoVRMLSound.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>af7947df2296a64e06e5ef286917a50f2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLSound</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a4a9ae59b226f467fa7c87c166e9118da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDopplerVelocity</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>aac5a9efd4b80a91c0864daa717689b73</anchor>
      <arglist>(float velocity)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDopplerVelocity</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a1f7d0ba34eb362490305e6dc88a005cf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDopplerFactor</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a2dc21963e4ff38e8a14cd1fdf810cf23</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDopplerFactor</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a06345e4efc7ca2d4cb630689245644a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startPlaying</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a9f078df5cfede11fbdd68236a10e7b08</anchor>
      <arglist>(SoPath *path, void *userdataptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopPlaying</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a4dbbd83f86206eaf3c8eb28efda9a9fa</anchor>
      <arglist>(SoPath *path, void *userdataptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a335b11c2838a94b5f5ab13f1aeae9a06</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>source</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a685771e42e9a6bdf169b965aef59a1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>intensity</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a5b223d9f5c81c650d837ed3ee3560e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>priority</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a115c4570fa081acb7f2474cbbde42b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>location</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a9209c110ffd5cf1226fd59b9a8cbba7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>direction</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a515ec6e04a23f5f7e27768f17fcfa8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>minFront</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a6700821eeaf8b1bf1905938103aea9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>maxFront</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a688c96684d4a4d85d20a04f965bc6673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>minBack</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a7f092c629c91db1c56c5c868c00f5217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>maxBack</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a443d32437969a1d6cdc9221ca2f78adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>spatialize</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>aa6974aef0559a8727b25d399dd78d5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a007569680d6e57ed9340d4e23bac56a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLSound</name>
      <anchorfile>classSoVRMLSound.html</anchorfile>
      <anchor>a1626276a9d3a94e7c1628eadfde7455c</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLSphere</name>
    <filename>classSoVRMLSphere.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a9dcbf67045382f1274e062066f6be683</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLSphere</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>aef280d689481746d878cc4b5837052a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a50ad0a0cb50bf24475b16be396d60b51</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a45629510a0075f45281259901b683603</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a91fe265dfb51e287e6a30fa82ad36d7f</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>radius</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>acaa2a5f01e870855124e7ba06cb6c7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a55c279dcd80aea42aaf03117c08c85a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLSphere</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a9ea4f57ddc83c13b68a631a9e518ffef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>a861649a7422cd875170e21a242375978</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLSphere.html</anchorfile>
      <anchor>ac226a9535711fe98f18ce964ba2adcd2</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLSphereSensor</name>
    <filename>classSoVRMLSphereSensor.html</filename>
    <base>SoVRMLDragSensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>a30ebdf004530c710b853034f3b12822a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLSphereSensor</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>a9cb07744f654fb21dd5fda1a6026384b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>offset</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>a950813e99e9be0ab8d651a540084f2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation_changed</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>abbf9c6ff2fce9731ccb05ff1d4f7badf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>acd7308d4166afd6c255b9ab229bd1704</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>dragStart</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>ab8929f2a862dea0698e4323040589e58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drag</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>ae504d4a82c735fa738517bfed397d250</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dragFinish</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>a40e81d1963f438f22b65139dbd17caec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLSphereSensor</name>
      <anchorfile>classSoVRMLSphereSensor.html</anchorfile>
      <anchor>a4582f1ae7c12de768a57fbd26b80d42f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLSpotLight</name>
    <filename>classSoVRMLSpotLight.html</filename>
    <base>SoVRMLLight</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a8ef4cfc4b29cffb81b7e8a91eb7860b8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLSpotLight</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a5a1ab4cd021acd363e98e6a62332bc1f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a5e22cfdaad451532cbb40407cdacd784</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>location</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a3896ebdedc6d67089eaf5df7922761cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>direction</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a8b289d54536e854c2574a2023dec131d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>beamWidth</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a56f645be340ce62bd7a49a1f180fc0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>cutOffAngle</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>acc177d979682d8670ebe32568500cfd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>radius</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>aaa107c11f195b6fb6d28dfb3e79d9a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>attenuation</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a754ef2d3392bbcfddff4cab7fd909559</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>a89999d05cd6774eb276acd134cc5a0ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLSpotLight</name>
      <anchorfile>classSoVRMLSpotLight.html</anchorfile>
      <anchor>ad7c7c4b355176325e2ff7a991d303f7e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLSwitch</name>
    <filename>classSoVRMLSwitch.html</filename>
    <base>SoGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>abdcc0fda079b5de798a3c0db61841590</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLSwitch</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a9dea685c0d06cf41bacdec8892bcbed7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLSwitch</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a62fc7b8bd01663a932f043654ff8e74f</anchor>
      <arglist>(int choices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a5b37eca81ea768c5821b1aefd24a2975</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>af496e1b610956686a1d75f84de5c510a</anchor>
      <arglist>(SoNode *choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>aa146c9cde3bad8469d0eb2835cd31bb0</anchor>
      <arglist>(SoNode *choice, int idx)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ace13ad843d4ca4064309073736142383</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a15ffb06579f339fd4fc7e9252e36f499</anchor>
      <arglist>(SoNode *choice) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChoices</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ae54398b8515c9a305da37b59a6fbbb8b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a0d57fa28d593cb0c39ebc1822ee17f2a</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>afc874289ddfe98c17e9fddcbf1157c60</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChoices</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ac2b7b540cb33f1fcf8a3a5978758ef76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a456f2b881d245eb31431b661a863a696</anchor>
      <arglist>(int idx, SoNode *choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>aaaff685a4bf5360439e9fbff6b066163</anchor>
      <arglist>(SoNode *old, SoNode *choice)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a5863fde32a26cd583a8030ce62ec7d5d</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a23a4cdac8e73d452b080b0ed555bbfd3</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a3a9778ddb4d8bafc61c263bc92b91a9b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>acb2421714b1d2a4bf93a3e209f141286</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ad04de20135b1e790f7eba67b90e7c59c</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a73a8ef8be23b20fdb5aa0bf2b5fd5320</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ab65fdaf801d57086af9a3f60266b8ac8</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a967b2c76de7638a257741823574c9cf2</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>af7dc296d70c5cfe4fab3344f8d2d3554</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ac69430a5dc63039071d76a859be0fcb7</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a3017ebafd8f7dd02f5e9efcb66b4bfd1</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a513f49cf5455224d223cc9a57f83cb72</anchor>
      <arglist>(SoNode *child, int idx)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ac4e891153096046d887bff19a02074be</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a56fbdc24ad7a327b64605f1dd511b6bb</anchor>
      <arglist>(const SoNode *child) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildren</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a91217822b0d9b714ca26123656543125</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a12a40748ec5418f66409b0e66282bb80</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a404add4adc63d92e6ac6c35ef91fcd06</anchor>
      <arglist>(SoNode *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a0ca0f303931964dc88b9278bff2cf860</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a8c416686ff8e7a8a637bca34623c93e1</anchor>
      <arglist>(int idx, SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>aaaf8e8ece3f525432ddf19d6c2cca567</anchor>
      <arglist>(SoNode *old, SoNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ab02edeec051e30254a538f6490f4b25b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFNode</type>
      <name>choice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ae2326c51230aa566dd08d9c8de5aa890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFInt32</type>
      <name>whichChoice</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a4fb7e1426017494a24668de069cf2901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a9913501e8080c581cca20d0f642c5fd3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLSwitch</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a7249d65a36a381f6671d21abbffdc69e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>ae0b74a0d6fca26becbf5aceafb5b486f</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a1747c3853571d9539dac98f1e28051f1</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoVRMLSwitch.html</anchorfile>
      <anchor>a75ba44d55865eb2a931d103440f23655</anchor>
      <arglist>(const SoFieldContainer *from, SbBool copyConn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLText</name>
    <filename>classSoVRMLText.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a48554f8a090ea9b973774e01e4c4e681</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLText</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a77979d2767cb56a70cb7c994b1431bc6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>aabb3f2afe8e59566357880218900650e</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a3c4b5c4e94a67cfa350545cfbb2bef75</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a9111dda6cb1b968fefd3991f77f71030</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a6b9ac47daa16d84dd0cf8a16c8a60cd1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>string</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a24efee6697822a0704fd652890a37003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>fontStyle</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a7ee0fbdb88554b32a90333b3d59d2834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>maxExtent</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a32da788e819e214fca0a7072f1c799df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFFloat</type>
      <name>length</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>aa6efa406dfdac2583b6ea1498f9b2cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a9660a084b75893e2663580528f56b937</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLText</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>afa16d614feb3d6f2ed3205e1b9f86f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeBBox</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>aff8cfcc781d1aeca2618e523b1ac2953</anchor>
      <arglist>(SoAction *action, SbBox3f &amp;box, SbVec3f &amp;center)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generatePrimitives</name>
      <anchorfile>classSoVRMLText.html</anchorfile>
      <anchor>a77f1cea6757484969f75b806f1ed43c2</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLTexture</name>
    <filename>classSoVRMLTexture.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>aa4ca99e24b0cc43c779e3fbcd65e2a83</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>a0f0758e5695a7526b6785220f97d2a14</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLTexture.html</anchorfile>
      <anchor>aaf6224eb1980bf648a1f3816105104eb</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLTextureCoordinate</name>
    <filename>classSoVRMLTextureCoordinate.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a5cd5a05dfa911b65080ade86a7a5a3db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLTextureCoordinate</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a6837eb3bfdbd2299c33755a5cc0d1097</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a1fdb77be01dda0621eeda40f3597bc07</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a8aa5ea1d5842fe487242b2b6722b8c1d</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a04e74eb56394c7b9a18857655e00eef5</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a51af0ae14a53a6e10e2323b2eabe4097</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>af63998c0a1795231c91e0ef33d687aa9</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoMFVec2f</type>
      <name>point</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>abf43b93738a77d2f86961cabf5da9a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a238c344ed2e1a77683e2216a712b18d2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLTextureCoordinate</name>
      <anchorfile>classSoVRMLTextureCoordinate.html</anchorfile>
      <anchor>a183dd50c307a940c632260da6ec6b61b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLTextureTransform</name>
    <filename>classSoVRMLTextureTransform.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a9a63c754902fadeab530f944963bfd0c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLTextureTransform</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a2bdcb78ccdfc547f1b4fb106c9dedd27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>abf80a46c63d22bb9b9a63ae5592b400e</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a70b2e55c6e063d03263d381ed563906e</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a124ae5f5eb65094a21f6601bfc36ce93</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>ad7fbc9baa27903b2db0c2e33063fa188</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>ad095022ee4ff1710625490e94ef1ef9a</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>translation</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a9489cb29c6f65d648f18d03fea090921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>rotation</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a8ef14f4f774d62843f0fdcd91836ea45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>scale</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>ad6e1773507743176e2a34dbf69ffaa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>center</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a66759449706ca769a176ee7c8e6f286a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a9d4c96c2cf863c4800fba626202e41c7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLTextureTransform</name>
      <anchorfile>classSoVRMLTextureTransform.html</anchorfile>
      <anchor>a52cbf48349b3a7c97a92ecf3df4323eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLTimeSensor</name>
    <filename>classSoVRMLTimeSensor.html</filename>
    <base>SoNodeEngine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>acfe63d2d381f37ff04f14e94915ba7bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoEngineOutputData *</type>
      <name>getOutputData</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>ad8ea39995833b2fd6a9eac47f089514f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLTimeSensor</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>ac1de6c45b1af62ac3513c6450c8bdb5b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a43e28ac567f3dbd52bb0daa9c2404a14</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>ac24136e7d2d62ef96fc389addf57c05e</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a9cff8780e9b658c8d86ea38c079b68c5</anchor>
      <arglist>(SoWriteAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>cycleInterval</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a3a8298b9d2d313c60458e536dbc34351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enabled</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>aba7e950b3889357709a82c9f0dba78ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>loop</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a0d9ab093795a77626fceeeab84bc1810</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>startTime</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a58ee7997b2ef219cbc653d85876d41e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>stopTime</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a08037d651cb86af0bf55722b21a18a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>cycleTime</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a7df2018e3b2b9aa234a5a5fb93d15f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>fraction_changed</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a5b43d3af42e796cd540c11c25a0cd71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>isActive</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a86d73335623a21e2465f82ef51a83a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoEngineOutput</type>
      <name>time</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>ab05b7a84ad2d7e3acb8a631c1c0e7401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a68e4ae3683d13809956a09dd4d7b868f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLTimeSensor</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>a48f1aa332d1a4096f1af81873372df2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>inputChanged</name>
      <anchorfile>classSoVRMLTimeSensor.html</anchorfile>
      <anchor>af1fda6386455ab736f53544e422cb720</anchor>
      <arglist>(SoField *whichInput)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLTouchSensor</name>
    <filename>classSoVRMLTouchSensor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>aa4cf3913e8fb8445164fa2a5be3594a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLTouchSensor</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>a277b91154f08a2fcdcf9aa198814b123</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>affectsState</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>ae78f8e295ca34fcb84a4dbcc29d63488</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>a509a2c47d551c5db32890a2480351bb4</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enabled</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>afe274706fb309fcf2664eaafb81ebf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>hitNormal_changed</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>a01bcc31ac42f8a1d43a1e675eb2cf279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>hitPoint_changed</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>ab3e9a1a82f45e33b97d63e34fd3936c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec2f</type>
      <name>hitTexCoord_changed</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>a20b8523cda40ff9b0284d51de72d66e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>af54c5568293044f35dd9e06056effaea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isOver</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>aee31622ad3ada5b9eeca2a8cd7061695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>touchTime</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>afc10b0a9c32ea599619145ea7a0a39d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>aa1c8408ec6ca9ea040167d835246c4ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLTouchSensor</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>a1d91955d7b6c97ca15fc739c9cc3129d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLTouchSensor.html</anchorfile>
      <anchor>a36374ddd1ad625f947de592f53a491ef</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLTransform</name>
    <filename>classSoVRMLTransform.html</filename>
    <base>SoVRMLGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a8c820562d6269895df6bab91e354470c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLTransform</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a3cb0427cba49d7708dda0e5101920532</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLTransform</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a6060b4444e645193bf731d638635c2db</anchor>
      <arglist>(int children)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointAt</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a3b4d43d58098348f458a81dac7320841</anchor>
      <arglist>(const SbVec3f &amp;from, const SbVec3f &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScaleSpaceMatrix</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>ab62972571407b96d71567fd5788c5167</anchor>
      <arglist>(SbMatrix &amp;matrix, SbMatrix &amp;inverse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRotationSpaceMatrix</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a3a13086a30769b7465de569b633acaa5</anchor>
      <arglist>(SbMatrix &amp;matrix, SbMatrix &amp;inverse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTranslationSpaceMatrix</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>ae20b9cb42d7845ef506ae0c94dba71d3</anchor>
      <arglist>(SbMatrix &amp;matrix, SbMatrix &amp;inverse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multLeft</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a57b70254d7fe1c0b51df9dc42796b250</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multRight</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a727b2b8c7d1563a561cb1af010b3418a</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combineLeft</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>aca5613fc1e55d68abd07475faedf1910</anchor>
      <arglist>(SoVRMLTransform *leftnode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combineRight</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a5d63f393d1b95c3f9400e92c177b9e44</anchor>
      <arglist>(SoVRMLTransform *rightnode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>aace4bf71fcd41d230f666db71a01cfa8</anchor>
      <arglist>(const SbMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recenter</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a58aab05b8e75a5c4309624a6fd19e67c</anchor>
      <arglist>(const SbVec3f &amp;newcenter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a882fefe64f7f65cb2ab4fb760e831a72</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a463543c9e4f5b056596cc53e6e32674f</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a5b25af4ac7ba1f9c9ce36a90364a7ef6</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a2d74ab2bb223438e64e8eac4bb4fc9e0</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rayPick</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>acc8a408b0bea2319c61ac88c3b4dc7f5</anchor>
      <arglist>(SoRayPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>accb941a7846e2bf61f13fd20affd3c00</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a22c2ece60e28f91677c680392dd58357</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderBelowPath</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a14fc845984e6b21de866a570e2c23b9b</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRenderInPath</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>ab2066d0aed37b9e9ddcbf2703740377f</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>ac4a4f72d9accd8bf0194126e2a0d12fe</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>translation</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a6bcd4143e1f5dc4a2b2e1d987dac0440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>rotation</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>addc3a0539bed7ddb64e3a0b62f9443a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>scale</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>ad6d1207e80e88bb0f38f346e9af6a54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>scaleOrientation</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>ac94e40d4509152e45fe352f5c295f5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a25c026af634a91cb9cea7ec6bf5a6e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>a2a36588629722606b65ab6fa3a95392f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLTransform</name>
      <anchorfile>classSoVRMLTransform.html</anchorfile>
      <anchor>aca09ba0e575d683e9d46de5f666f84e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLVertexLine</name>
    <filename>classSoVRMLVertexLine.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>ab4b0ab0d51861bd605b22ae37cc771d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>a136970b38fc84f03cec183966ace2aae</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLVertexLine.html</anchorfile>
      <anchor>ab71a82ceea4aac430db284c72a8bdfbf</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLVertexPoint</name>
    <filename>classSoVRMLVertexPoint.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a509f00056a7f85510fbdf446006fc3de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>a33a5351f7f0cbaca0cae4d206642ff84</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>aa2cae0b739e41ed480d5e2c1e6741b85</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLVertexPoint.html</anchorfile>
      <anchor>aa3a86d18004549994c8ffb0f97beb7c3</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLVertexShape</name>
    <filename>classSoVRMLVertexShape.html</filename>
    <base>SoVRMLGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a1ca94fadaf2e1186abc0ce82ebc95409</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>ad2e438368abe6fb40f4c912490e176cb</anchor>
      <arglist>(SoNotList *list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLVertexShape.html</anchorfile>
      <anchor>a2f8f96060839bcbdf33e636a44be5de2</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLViewpoint</name>
    <filename>classSoVRMLViewpoint.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a3ee156c46d9116f11d71f81813847623</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLViewpoint</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a87350da2d8b9ea8c844eace2e679ba36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a387c2544498e570c151fa60aa80b769d</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>position</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>ae2ad0bd390aba927898dedfe15248f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFRotation</type>
      <name>orientation</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>ac77c46575b6c0896f9781714d5de1088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFFloat</type>
      <name>fieldOfView</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a4d2924ed0bc18ae401757ec38aba4376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>description</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>af143420228111539c80ef9e55f525c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>jump</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a4add4ec8a888ff30e3872cebd7b71231</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a4e63b994eb12512598d012d9ca02d234</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLViewpoint</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a5c70dd6ccb8fbd2a7ff417a439987b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFBool</type>
      <name>set_bind</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>a747eed7031d65fd425f56003ee9a7900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFTime</type>
      <name>bindTime</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>ac547590bd2008a8fad1eef79db1cc432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoSFBool</type>
      <name>isBound</name>
      <anchorfile>classSoVRMLViewpoint.html</anchorfile>
      <anchor>abda9023f7c95c808cd915913f8da580f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLVisibilitySensor</name>
    <filename>classSoVRMLVisibilitySensor.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a3eb4f6d28464616b07da6dd6d0191ee8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLVisibilitySensor</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a21557cd67fe0c42afd497b7a6ca910ed</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a2b2841814fd43c1a7f7516ce0b67e152</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>center</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a96379fdff96d8e5bab3c5c9066199992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>size</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a83cd13893f63f85ed28d21ef8902f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>enabled</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a3297b60923a0d02171985844b310a7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>enterTime</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a368f163a0210e1b12461eeaf83ee62c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFTime</type>
      <name>exitTime</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>abcc93123e4f56a0ea2c42ebfed4d5bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFBool</type>
      <name>isActive</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a0df795fca86af3c9a72fd0efd9dddcef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>ac1f723c634c7939e2a057ea8c4364792</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLVisibilitySensor</name>
      <anchorfile>classSoVRMLVisibilitySensor.html</anchorfile>
      <anchor>a3c18d5cf30e682fb285d1e1cffcd76bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoVRMLWorldInfo</name>
    <filename>classSoVRMLWorldInfo.html</filename>
    <base>SoNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoVRMLWorldInfo.html</anchorfile>
      <anchor>a4d32baec56eb2d2e248d3d72460acead</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoVRMLWorldInfo</name>
      <anchorfile>classSoVRMLWorldInfo.html</anchorfile>
      <anchor>aa4300f5c91e7eb53b773b71098a5d0b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>title</name>
      <anchorfile>classSoVRMLWorldInfo.html</anchorfile>
      <anchor>acc5089449bf7ca7f3fa71b65aa58136e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoMFString</type>
      <name>info</name>
      <anchorfile>classSoVRMLWorldInfo.html</anchorfile>
      <anchor>a91baa3c51e3ab78defe089a67aad0961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoVRMLWorldInfo.html</anchorfile>
      <anchor>ae7e7bed391afb01a9d5eb90fdfbc6ed0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoVRMLWorldInfo</name>
      <anchorfile>classSoVRMLWorldInfo.html</anchorfile>
      <anchor>acfc7fced42b99050b5ce2f272d93ee4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoWindowElement</name>
    <filename>classSoWindowElement.html</filename>
    <base>SoElement</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a64447fb7ff7ff57cc76a0173cf9e2bbf</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a13986805b89596d36a95bb0a291631d6</anchor>
      <arglist>(SoState *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pop</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a1b2859841016b1597103f8f29b39d901</anchor>
      <arglist>(SoState *state, const SoElement *prevTopElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>matches</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>ad339f8741215fede0bb2563761aa862f</anchor>
      <arglist>(const SoElement *element) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoElement *</type>
      <name>copyMatchInfo</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>aafec2c7d53badb84bfde7ad29a212acd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createInstance</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>aa25858bb25d174688f91436b7dc57b1c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a160f295450d2b776038e8c107e984623</anchor>
      <arglist>(SoState *state, void *window, void *context, void *display, SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a5c1f18ed41ab539e0e3da401853e6337</anchor>
      <arglist>(SoState *state, void *&amp;window, void *&amp;context, void *&amp;display, SoGLRenderAction *&amp;action)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoWindowElement</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a4234d13baaaae326df32d8a39e3903a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>window</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>a61155020fc511e751e7ca79d2debbbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>context</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>afa0dbdc1945575ec7b069b1487b54fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>display</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>ad6fed883ec6520ff93e1693c4078d381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SoGLRenderAction *</type>
      <name>glRenderAction</name>
      <anchorfile>classSoWindowElement.html</anchorfile>
      <anchor>ad0050a9eb2b3b69131b91c85f82c9ab6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoWrapperKit</name>
    <filename>classSoWrapperKit.html</filename>
    <base>SoSeparatorKit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoWrapperKit.html</anchorfile>
      <anchor>a86b6e33321bf617f46d7502b17049a4c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SoNodekitCatalog *</type>
      <name>getNodekitCatalog</name>
      <anchorfile>classSoWrapperKit.html</anchorfile>
      <anchor>addaaed5bd49f53880d16ca36a9cf934d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoWrapperKit</name>
      <anchorfile>classSoWrapperKit.html</anchorfile>
      <anchor>ada263e36e88802b46b5e85f5e07c8e35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoWrapperKit.html</anchorfile>
      <anchor>a7a7692f0297dd2050fa9006610661c5e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoWrapperKit</name>
      <anchorfile>classSoWrapperKit.html</anchorfile>
      <anchor>ac4cecf97816e2c93e04422ba0a7e2e96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoWriteAction</name>
    <filename>classSoWriteAction.html</filename>
    <base>SoAction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>aff156b105dec5ef66da8f40c4588b44a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoWriteAction</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>ae3870bc0cc5a2850cde8b2f37db28577</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoWriteAction</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a92cd196abb1a9729ee6423ab954f3280</anchor>
      <arglist>(SoOutput *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SoWriteAction</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>aa08cfdef688d71893feae53a7b3b70b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoOutput *</type>
      <name>getOutput</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a62b090e93a51b2c5c9fec072d2ce108b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>continueToApply</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a19a3c7f211ce13fbd62cbe558cc335db</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>continueToApply</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a0e7d46d16822b5a8214a771f6321b418</anchor>
      <arglist>(SoPath *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addMethod</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a8e175f9bcfd8ece3ca4d99a3cddc6c0e</anchor>
      <arglist>(const SoType type, SoActionMethod method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableElement</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a4d2d5806041ed71baf0418d249b94c0f</anchor>
      <arglist>(const SoType type, const int stackindex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoEnabledElementsList &amp;</type>
      <name>getEnabledElements</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a21ec5ea842fdde86b22e18b0642d0094</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginTraversal</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a64c4bd195eedb675edfbbcd4fb94f402</anchor>
      <arglist>(SoNode *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>shouldCompactPathLists</name>
      <anchorfile>classSoWriteAction.html</anchorfile>
      <anchor>a4b84f1c711e3a368da9d56a19f97fac2</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoWWWAnchor</name>
    <filename>classSoWWWAnchor.html</filename>
    <base>SoLocateHighlight</base>
    <member kind="enumeration">
      <type></type>
      <name>Mapping</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a2a4580c6e9b0c8fab426187220cdd189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a2a4580c6e9b0c8fab426187220cdd189a32bf6285508c67925bc28e7a42943bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POINT</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a2a4580c6e9b0c8fab426187220cdd189aec04d56e0e9fcf51b054b4310703b8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a71d2b8b2e3c9d297fe00c92e2a94e668</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoWWWAnchor</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a35fb89db784a9ab190bf22afee21f895</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullURLName</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a5fc51c17700a1f8b9f60363ad40eb28e</anchor>
      <arglist>(const SbString &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getFullURLName</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a51934e950ad8a49db4ce1173582161e9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>afe706b5178807c52884c06383a78f39d</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFetchURLCallBack</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>acac8d9626af7544006a55009fa06f376</anchor>
      <arglist>(SoWWWAnchorCB *f, void *userData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHighlightURLCallBack</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a15d8a8959d59e332f0ff6aa7b4ad4326</anchor>
      <arglist>(SoWWWAnchorCB *f, void *userData)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>name</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a4f74a7ccfc6835b944512050043f2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>description</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a428199dd1c076d07965f3e8458161c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFEnum</type>
      <name>map</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a12db930014d56bccc298ad1a687bdf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>a874c425f3ea130442ec709f18b2bd667</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoWWWAnchor</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>afd6fd7ed6126815a97bcc09a22baeaf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>redrawHighlighted</name>
      <anchorfile>classSoWWWAnchor.html</anchorfile>
      <anchor>abfec756a06338bae8bb5c6e6f523f354</anchor>
      <arglist>(SoAction *act, SbBool isNowHighlighting)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SoWWWInline</name>
    <filename>classSoWWWInline.html</filename>
    <base>SoNode</base>
    <member kind="enumeration">
      <type></type>
      <name>BboxVisibility</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a18f5489bc37aac80927579f502098bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEVER</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a18f5489bc37aac80927579f502098bbaa9afd4dfd4f4518636b42e4f1827a28ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_LOADED</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a18f5489bc37aac80927579f502098bbaa4f9801db08c57544e62ce41cc06fea4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALWAYS</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a18f5489bc37aac80927579f502098bbaaa625c2a99ff5afa329dc49df6f47a9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoType</type>
      <name>getTypeId</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>aea5461cbd3dd59f7b1c04327d9dd5e7c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoWWWInline</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a68c18674bd02430b5ed369d84e9cee61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullURLName</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>ae60cc8607f031bbfad4d54bec9520fbd</anchor>
      <arglist>(const SbString &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>const SbString &amp;</type>
      <name>getFullURLName</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>ab115980a10c77eb203a481dd5865f6b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SoGroup *</type>
      <name>copyChildren</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a6a188edfb188709d7ddc95c2640405f8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestURLData</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a891996bb530f769017cc0e23ecc85804</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isURLDataRequested</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>ae5867cc89694a4c640b52a74af9f9a97</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>isURLDataHere</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a921f1c235018cea83c78b8a19ee6e9e7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelURLDataRequest</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a629f858440109635143b966fd1d4cd51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildData</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a08c1205a27bca45ad6ebba9645bc49a1</anchor>
      <arglist>(SoNode *urldata)</arglist>
    </member>
    <member kind="function">
      <type>SoNode *</type>
      <name>getChildData</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a44c8b5a0861218c3db99dac5310ec30a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoChildList *</type>
      <name>getChildren</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a8763cf06fe4e4eb8e7c47e4edd85bd2c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doAction</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a847a88250c42bfd62a7c68b8ab7dc1da</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doActionOnKidsOrBox</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>ab73c33934bfe08aa77387902fb8cd22f</anchor>
      <arglist>(SoAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callback</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>aa5e4cbccda3b51a5f8b7fd5bf876c5dc</anchor>
      <arglist>(SoCallbackAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GLRender</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a9983a4a8246393ac104eaf1844d0c3fe</anchor>
      <arglist>(SoGLRenderAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoundingBox</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>afb6187d58399bb64da34c5e481d4d332</anchor>
      <arglist>(SoGetBoundingBoxAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatrix</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a6d12064311798072b0c5e4580f21172d</anchor>
      <arglist>(SoGetMatrixAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a4fe522df4be85452b33dc769f8ef6360</anchor>
      <arglist>(SoHandleEventAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>search</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a1a607488cf5b7c82abe319d825345496</anchor>
      <arglist>(SoSearchAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pick</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a6eb1c580ce4765bc81401758a3134922</anchor>
      <arglist>(SoPickAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPrimitiveCount</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>ac5c29c2710ae9823f5ef60aa988b37c4</anchor>
      <arglist>(SoGetPrimitiveCountAction *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>audioRender</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>aeecdfc7c6091b6437bace72832ea270d</anchor>
      <arglist>(SoAudioRenderAction *action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFetchURLCallBack</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a7d6a9ae13e1e6686e39c0803343a878f</anchor>
      <arglist>(SoWWWInlineFetchURLCB *f, void *userdata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBoundingBoxVisibility</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a2673ee66bfbe022561bd25a16e0477dc</anchor>
      <arglist>(BboxVisibility b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BboxVisibility</type>
      <name>getBoundingBoxVisibility</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>af8489da03299049291419383834472c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBoundingBoxColor</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a706b7e9bf089fbdd91c32f292579298b</anchor>
      <arglist>(SbColor &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SbColor &amp;</type>
      <name>getBoundingBoxColor</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a27050aae3ab596e6d6aa3f1a4b55e755</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setReadAsSoFile</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a4ff3e81b4d7a38ecf2ac43ff537a838a</anchor>
      <arglist>(SbBool onoff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SbBool</type>
      <name>getReadAsSoFile</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a4cc0e73f9e3d454738e6c463dad4c4a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>SoSFString</type>
      <name>name</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a159d4fcea61be137b8fbbbbac86449fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxCenter</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>ad31888d169955f6c49a5b4636ec22b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFVec3f</type>
      <name>bboxSize</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>af6ab3633187f00e2f1357d837323aca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SoSFNode</type>
      <name>alternateRep</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a5337971a1acc874c2dcc556a628ee256</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const SoFieldData *</type>
      <name>getFieldData</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a25ea57ed2d6961a57c4ff789e0c641f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoWWWInline</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>adf5bddeaacaa0d140dcca325eaecdbd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addBoundingBoxChild</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a831bf26c3daeba4c2a16bdc975a6f7b5</anchor>
      <arglist>(SbVec3f center, SbVec3f size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SbBool</type>
      <name>readInstance</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>a5b52aaf9dbabf710e2e6cc6031a28983</anchor>
      <arglist>(SoInput *in, unsigned short flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyContents</name>
      <anchorfile>classSoWWWInline.html</anchorfile>
      <anchor>aecbd5170b14e0ee34223ac7a325373ee</anchor>
      <arglist>(const SoFieldContainer *fromfC, SbBool copyconnections)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{document.cpp}</name>
    <filename>namespaceanonymous__namespace_02document_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SbName.cpp}</name>
    <filename>namespaceanonymous__namespace_02SbName_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SbViewVolume.cpp}</name>
    <filename>namespaceanonymous__namespace_02SbViewVolume_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{ScXMLParallelElt.cpp}</name>
    <filename>namespaceanonymous__namespace_02ScXMLParallelElt_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{ScXMLSendElt.cpp}</name>
    <filename>namespaceanonymous__namespace_02ScXMLSendElt_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{ScXMLStateElt.cpp}</name>
    <filename>namespaceanonymous__namespace_02ScXMLStateElt_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoDebug.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoDebug_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoFaceSet.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoFaceSet_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoGL.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoGL_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoLineSet.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoLineSet_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoNodeVisualize.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoNodeVisualize_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoPrimitiveVertexCache.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoPrimitiveVertexCache_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoProfiler.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoProfiler_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoProfilerOverlayKit.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoProfilerOverlayKit_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoProfilingReportGenerator.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoProfilingReportGenerator_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoQuadMesh.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoQuadMesh_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoSceneTexture2.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoSceneTexture2_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLDollyTarget.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLDollyTarget_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLEvent.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLEvent_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLPanTarget.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLPanTarget_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLRotateTarget.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLRotateTarget_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLSeekTarget.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLSeekTarget_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLSpinTarget.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLSpinTarget_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoScXMLZoomTarget.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoScXMLZoomTarget_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoShadowGroup.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoShadowGroup_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{SoTriangleStripSet.cpp}</name>
    <filename>namespaceanonymous__namespace_02SoTriangleStripSet_8cpp_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>CoinResources</name>
    <filename>namespaceCoinResources.html</filename>
    <namespace>CoinResources::anonymous_namespace{CoinResources.cpp}</namespace>
    <member kind="function">
      <type>SbByteBuffer</type>
      <name>get</name>
      <anchorfile>namespaceCoinResources.html</anchorfile>
      <anchor>a27c6790b3c9c18123a8e640cfb28fcb2</anchor>
      <arglist>(const char *resloc)</arglist>
    </member>
    <member kind="function">
      <type>SbBool</type>
      <name>set</name>
      <anchorfile>namespaceCoinResources.html</anchorfile>
      <anchor>a8b0569648e56b569b882cf31566ed47b</anchor>
      <arglist>(const char *resloc, const SbByteBuffer &amp;buffer, ResourceFlags flags=NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeLoadedExternals</name>
      <anchorfile>namespaceCoinResources.html</anchorfile>
      <anchor>a17ffc0db272f8e5d86c8773f6ef59f72</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CoinResources::anonymous_namespace{CoinResources.cpp}</name>
    <filename>namespaceCoinResources_1_1anonymous__namespace_02CoinResources_8cpp_03.html</filename>
  </compound>
  <compound kind="dir">
    <name>actions</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/actions/</path>
    <filename>dir_84280a7e8f5a28c199a63c690e50895b.html</filename>
    <file>SoAction.h</file>
    <file>SoAudioRenderAction.h</file>
    <file>SoBoxHighlightRenderAction.h</file>
    <file>SoCallbackAction.h</file>
    <file>SoGetBoundingBoxAction.h</file>
    <file>SoGetMatrixAction.h</file>
    <file>SoGetPrimitiveCountAction.h</file>
    <file>SoGlobalSimplifyAction.h</file>
    <file>SoGLRenderAction.h</file>
    <file>SoHandleEventAction.h</file>
    <file>SoLineHighlightRenderAction.h</file>
    <file>SoPickAction.h</file>
    <file>SoRayPickAction.h</file>
    <file>SoReorganizeAction.h</file>
    <file>SoSearchAction.h</file>
    <file>SoShapeSimplifyAction.h</file>
    <file>SoSimplifyAction.h</file>
    <file>SoSubAction.h</file>
    <file>SoToVRML2Action.h</file>
    <file>SoToVRMLAction.h</file>
    <file>SoWriteAction.h</file>
  </compound>
  <compound kind="dir">
    <name>actions</name>
    <path>C:/Users/Roy/Documents/coin/src/actions/</path>
    <filename>dir_50f4f2c9743af8411fac4875667b3032.html</filename>
    <file>SoAction.cpp</file>
    <file>SoActionP.h</file>
    <file>SoAudioRenderAction.cpp</file>
    <file>SoBoxHighlightRenderAction.cpp</file>
    <file>SoCallbackAction.cpp</file>
    <file>SoGetBoundingBoxAction.cpp</file>
    <file>SoGetMatrixAction.cpp</file>
    <file>SoGetPrimitiveCountAction.cpp</file>
    <file>SoGlobalSimplifyAction.cpp</file>
    <file>SoGLRenderAction.cpp</file>
    <file>SoHandleEventAction.cpp</file>
    <file>SoLineHighlightRenderAction.cpp</file>
    <file>SoPickAction.cpp</file>
    <file>SoRayPickAction.cpp</file>
    <file>SoReorganizeAction.cpp</file>
    <file>SoSearchAction.cpp</file>
    <file>SoShapeSimplifyAction.cpp</file>
    <file>SoSimplifyAction.cpp</file>
    <file>SoToVRML2Action.cpp</file>
    <file>SoToVRMLAction.cpp</file>
    <file>SoWriteAction.cpp</file>
  </compound>
  <compound kind="dir">
    <name>annex</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/</path>
    <filename>dir_f229426dd6bc0db097fb9a87a8e36d8a.html</filename>
    <dir>ForeignFiles</dir>
    <dir>FXViz</dir>
    <dir>HardCopy</dir>
    <dir>Profiler</dir>
  </compound>
  <compound kind="dir">
    <name>base</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/base/</path>
    <filename>dir_3735903465cb36b73fbabfbf6f051e72.html</filename>
    <file>hash.h</file>
    <file>heap.h</file>
    <file>memalloc.h</file>
    <file>rbptree.h</file>
    <file>string.h</file>
    <file>time.h</file>
  </compound>
  <compound kind="dir">
    <name>base</name>
    <path>C:/Users/Roy/Documents/coin/src/base/</path>
    <filename>dir_86d14fe3713cdb48a4d3f2818a46b18f.html</filename>
    <file>dict.cpp</file>
    <file>hash.cpp</file>
    <file>heap.cpp</file>
    <file>memalloc.cpp</file>
    <file>namemap.cpp</file>
    <file>rbptree.cpp</file>
    <file>SbBox2d.cpp</file>
    <file>SbBox2f.cpp</file>
    <file>SbBox2i32.cpp</file>
    <file>SbBox2s.cpp</file>
    <file>SbBox3d.cpp</file>
    <file>SbBox3f.cpp</file>
    <file>SbBox3i32.cpp</file>
    <file>SbBox3s.cpp</file>
    <file>SbBSPTree.cpp</file>
    <file>SbClip.cpp</file>
    <file>SbColor.cpp</file>
    <file>SbColor4f.cpp</file>
    <file>SbCylinder.cpp</file>
    <file>SbDict.cpp</file>
    <file>SbDPLine.cpp</file>
    <file>SbDPMatrix.cpp</file>
    <file>SbDPPlane.cpp</file>
    <file>SbDPRotation.cpp</file>
    <file>SbDPViewVolume.cpp</file>
    <file>SbHeap.cpp</file>
    <file>SbImage.cpp</file>
    <file>SbLine.cpp</file>
    <file>SbMatrix.cpp</file>
    <file>SbName.cpp</file>
    <file>SbOctTree.cpp</file>
    <file>SbPlane.cpp</file>
    <file>SbRotation.cpp</file>
    <file>SbSphere.cpp</file>
    <file>SbString.cpp</file>
    <file>SbTesselator.cpp</file>
    <file>SbTime.cpp</file>
    <file>SbVec2b.cpp</file>
    <file>SbVec2d.cpp</file>
    <file>SbVec2f.cpp</file>
    <file>SbVec2i32.cpp</file>
    <file>SbVec2s.cpp</file>
    <file>SbVec2ub.cpp</file>
    <file>SbVec2ui32.cpp</file>
    <file>SbVec2us.cpp</file>
    <file>SbVec3b.cpp</file>
    <file>SbVec3d.cpp</file>
    <file>SbVec3f.cpp</file>
    <file>SbVec3i32.cpp</file>
    <file>SbVec3s.cpp</file>
    <file>SbVec3ub.cpp</file>
    <file>SbVec3ui32.cpp</file>
    <file>SbVec3us.cpp</file>
    <file>SbVec4b.cpp</file>
    <file>SbVec4d.cpp</file>
    <file>SbVec4f.cpp</file>
    <file>SbVec4i32.cpp</file>
    <file>SbVec4s.cpp</file>
    <file>SbVec4ub.cpp</file>
    <file>SbVec4ui32.cpp</file>
    <file>SbViewportRegion.cpp</file>
    <file>SbViewVolume.cpp</file>
    <file>SbXfBox3d.cpp</file>
    <file>SbXfBox3f.cpp</file>
    <file>string.cpp</file>
    <file>time.cpp</file>
  </compound>
  <compound kind="dir">
    <name>build</name>
    <path>C:/Users/Roy/Documents/coin/build/</path>
    <filename>dir_62a62b3367428e0bec56bb27f60345c0.html</filename>
    <dir>msvc9</dir>
  </compound>
  <compound kind="dir">
    <name>bundles</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/bundles/</path>
    <filename>dir_bfcf66134160713a46afae247188ce4b.html</filename>
    <file>SoBundle.h</file>
    <file>SoMaterialBundle.h</file>
    <file>SoNormalBundle.h</file>
    <file>SoTextureCoordinateBundle.h</file>
    <file>SoVertexAttributeBundle.h</file>
  </compound>
  <compound kind="dir">
    <name>bundles</name>
    <path>C:/Users/Roy/Documents/coin/src/bundles/</path>
    <filename>dir_61923b3e77f25b719fc6e6bf2942e334.html</filename>
    <file>SoBundle.cpp</file>
    <file>SoMaterialBundle.cpp</file>
    <file>SoNormalBundle.cpp</file>
    <file>SoTextureCoordinateBundle.cpp</file>
    <file>SoVertexAttributeBundle.cpp</file>
  </compound>
  <compound kind="dir">
    <name>C</name>
    <path>C:/Users/Roy/Documents/coin/build/msvc9/include/Inventor/C/</path>
    <filename>dir_29d8dd3b4b7969b2f4dafc6fb5a7885d.html</filename>
    <file>basic.h</file>
  </compound>
  <compound kind="dir">
    <name>C</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/</path>
    <filename>dir_29eff1be544a8e8922a2585c3723a444.html</filename>
    <dir>base</dir>
    <dir>errors</dir>
    <dir>glue</dir>
    <dir>threads</dir>
    <dir>XML</dir>
    <file>tidbits.h</file>
  </compound>
  <compound kind="dir">
    <name>caches</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/caches/</path>
    <filename>dir_90cfdcfa739236720ee64580d65cf5c9.html</filename>
    <file>SoBoundingBoxCache.h</file>
    <file>SoCache.h</file>
    <file>SoConvexDataCache.h</file>
    <file>SoGLCacheList.h</file>
    <file>SoGLRenderCache.h</file>
    <file>SoNormalCache.h</file>
    <file>SoPrimitiveVertexCache.h</file>
    <file>SoTextureCoordinateCache.h</file>
  </compound>
  <compound kind="dir">
    <name>caches</name>
    <path>C:/Users/Roy/Documents/coin/src/caches/</path>
    <filename>dir_d26732a09df3c5bbcbda67339d721a3c.html</filename>
    <file>SoBoundingBoxCache.cpp</file>
    <file>SoCache.cpp</file>
    <file>SoConvexDataCache.cpp</file>
    <file>SoGLCacheList.cpp</file>
    <file>SoGLRenderCache.cpp</file>
    <file>SoGlyphCache.cpp</file>
    <file>SoGlyphCache.h</file>
    <file>SoNormalCache.cpp</file>
    <file>SoPrimitiveVertexCache.cpp</file>
    <file>SoShaderProgramCache.cpp</file>
    <file>SoShaderProgramCache.h</file>
    <file>SoTextureCoordinateCache.cpp</file>
    <file>SoVBOCache.cpp</file>
    <file>SoVBOCache.h</file>
  </compound>
  <compound kind="dir">
    <name>coin</name>
    <path>C:/Users/Roy/Documents/coin/</path>
    <filename>dir_a9ece42214747b742bd480fef70b9eec.html</filename>
    <dir>build</dir>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>collision</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/collision/</path>
    <filename>dir_2a5ec08c44797fd55459d62d582e813a.html</filename>
    <file>SoIntersectionDetectionAction.h</file>
  </compound>
  <compound kind="dir">
    <name>collision</name>
    <path>C:/Users/Roy/Documents/coin/src/collision/</path>
    <filename>dir_2c5367ab71c23b54f84ac16f49073e1d.html</filename>
    <file>SbTri3f.cpp</file>
    <file>SbTri3f.h</file>
    <file>SoIntersectionDetectionAction.cpp</file>
  </compound>
  <compound kind="dir">
    <name>details</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/details/</path>
    <filename>dir_e2c2cdd9a24e98f95451224e7a2955e3.html</filename>
    <file>SoConeDetail.h</file>
    <file>SoCubeDetail.h</file>
    <file>SoCylinderDetail.h</file>
    <file>SoDetail.h</file>
    <file>SoFaceDetail.h</file>
    <file>SoLineDetail.h</file>
    <file>SoNodeKitDetail.h</file>
    <file>SoPointDetail.h</file>
    <file>SoTextDetail.h</file>
  </compound>
  <compound kind="dir">
    <name>details</name>
    <path>C:/Users/Roy/Documents/coin/src/details/</path>
    <filename>dir_36c8bf7727089109f23fcd7457c5d4d5.html</filename>
    <file>SoConeDetail.cpp</file>
    <file>SoCubeDetail.cpp</file>
    <file>SoCylinderDetail.cpp</file>
    <file>SoDetail.cpp</file>
    <file>SoFaceDetail.cpp</file>
    <file>SoLineDetail.cpp</file>
    <file>SoNodeKitDetail.cpp</file>
    <file>SoPointDetail.cpp</file>
    <file>SoTextDetail.cpp</file>
  </compound>
  <compound kind="dir">
    <name>doc</name>
    <path>C:/Users/Roy/Documents/coin/src/doc/</path>
    <filename>dir_3e9c245001cff79296dc848f20f6499e.html</filename>
    <file>environment.dox.h</file>
  </compound>
  <compound kind="dir">
    <name>draggers</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/draggers/</path>
    <filename>dir_f54cd47140b7528157badeb37c617a9a.html</filename>
    <file>SoCenterballDragger.h</file>
    <file>SoDirectionalLightDragger.h</file>
    <file>SoDragger.h</file>
    <file>SoDragPointDragger.h</file>
    <file>SoHandleBoxDragger.h</file>
    <file>SoJackDragger.h</file>
    <file>SoPointLightDragger.h</file>
    <file>SoRotateCylindricalDragger.h</file>
    <file>SoRotateDiscDragger.h</file>
    <file>SoRotateSphericalDragger.h</file>
    <file>SoScale1Dragger.h</file>
    <file>SoScale2Dragger.h</file>
    <file>SoScale2UniformDragger.h</file>
    <file>SoScaleUniformDragger.h</file>
    <file>SoSpotLightDragger.h</file>
    <file>SoTabBoxDragger.h</file>
    <file>SoTabPlaneDragger.h</file>
    <file>SoTrackballDragger.h</file>
    <file>SoTransformBoxDragger.h</file>
    <file>SoTransformerDragger.h</file>
    <file>SoTranslate1Dragger.h</file>
    <file>SoTranslate2Dragger.h</file>
  </compound>
  <compound kind="dir">
    <name>draggers</name>
    <path>C:/Users/Roy/Documents/coin/src/draggers/</path>
    <filename>dir_0d8ddc6346e902702e10f708840730cc.html</filename>
    <file>SoCenterballDragger.cpp</file>
    <file>SoDirectionalLightDragger.cpp</file>
    <file>SoDragger.cpp</file>
    <file>SoDragPointDragger.cpp</file>
    <file>SoHandleBoxDragger.cpp</file>
    <file>SoJackDragger.cpp</file>
    <file>SoPointLightDragger.cpp</file>
    <file>SoRotateCylindricalDragger.cpp</file>
    <file>SoRotateDiscDragger.cpp</file>
    <file>SoRotateSphericalDragger.cpp</file>
    <file>SoScale1Dragger.cpp</file>
    <file>SoScale2Dragger.cpp</file>
    <file>SoScale2UniformDragger.cpp</file>
    <file>SoScaleUniformDragger.cpp</file>
    <file>SoSpotLightDragger.cpp</file>
    <file>SoTabBoxDragger.cpp</file>
    <file>SoTabPlaneDragger.cpp</file>
    <file>SoTrackballDragger.cpp</file>
    <file>SoTransformBoxDragger.cpp</file>
    <file>SoTransformerDragger.cpp</file>
    <file>SoTranslate1Dragger.cpp</file>
    <file>SoTranslate2Dragger.cpp</file>
  </compound>
  <compound kind="dir">
    <name>elements</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/elements/</path>
    <filename>dir_405bd30c7e2fbe263c3160046db857ed.html</filename>
    <file>SoProfilerElement.h</file>
  </compound>
  <compound kind="dir">
    <name>elements</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/FXViz/elements/</path>
    <filename>dir_864e75028bd1a027419f5bac70195431.html</filename>
    <file>SoGLShadowCullingElement.h</file>
    <file>SoShadowStyleElement.h</file>
  </compound>
  <compound kind="dir">
    <name>elements</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/elements/</path>
    <filename>dir_3155689ef45ee1dabaaef80ca59304f3.html</filename>
    <file>SoAccumulatedElement.h</file>
    <file>SoAmbientColorElement.h</file>
    <file>SoAnnoText3CharOrientElement.h</file>
    <file>SoAnnoText3FontSizeHintElement.h</file>
    <file>SoAnnoText3RenderPrintElement.h</file>
    <file>SoBBoxModelMatrixElement.h</file>
    <file>SoBumpMapCoordinateElement.h</file>
    <file>SoBumpMapElement.h</file>
    <file>SoBumpMapMatrixElement.h</file>
    <file>SoCacheElement.h</file>
    <file>SoCacheHintElement.h</file>
    <file>SoClipPlaneElement.h</file>
    <file>SoComplexityElement.h</file>
    <file>SoComplexityTypeElement.h</file>
    <file>SoCoordinateElement.h</file>
    <file>SoCreaseAngleElement.h</file>
    <file>SoCullElement.h</file>
    <file>SoDecimationPercentageElement.h</file>
    <file>SoDecimationTypeElement.h</file>
    <file>SoDepthBufferElement.h</file>
    <file>SoDiffuseColorElement.h</file>
    <file>SoDrawStyleElement.h</file>
    <file>SoElement.h</file>
    <file>SoEmissiveColorElement.h</file>
    <file>SoEnvironmentElement.h</file>
    <file>SoFloatElement.h</file>
    <file>SoFocalDistanceElement.h</file>
    <file>SoFontNameElement.h</file>
    <file>SoFontSizeElement.h</file>
    <file>SoGeoElement.h</file>
    <file>SoGLCacheContextElement.h</file>
    <file>SoGLClipPlaneElement.h</file>
    <file>SoGLColorIndexElement.h</file>
    <file>SoGLCoordinateElement.h</file>
    <file>SoGLDepthBufferElement.h</file>
    <file>SoGLDisplayList.h</file>
    <file>SoGLDrawStyleElement.h</file>
    <file>SoGLEnvironmentElement.h</file>
    <file>SoGLLazyElement.h</file>
    <file>SoGLLightIdElement.h</file>
    <file>SoGLLinePatternElement.h</file>
    <file>SoGLLineWidthElement.h</file>
    <file>SoGLModelMatrixElement.h</file>
    <file>SoGLMultiTextureCoordinateElement.h</file>
    <file>SoGLMultiTextureEnabledElement.h</file>
    <file>SoGLMultiTextureImageElement.h</file>
    <file>SoGLMultiTextureMatrixElement.h</file>
    <file>SoGLNormalElement.h</file>
    <file>SoGLPointSizeElement.h</file>
    <file>SoGLPolygonOffsetElement.h</file>
    <file>SoGLProjectionMatrixElement.h</file>
    <file>SoGLRenderPassElement.h</file>
    <file>SoGLShapeHintsElement.h</file>
    <file>SoGLTextureEnabledElement.h</file>
    <file>SoGLUpdateAreaElement.h</file>
    <file>SoGLVBOElement.h</file>
    <file>SoGLVertexAttributeElement.h</file>
    <file>SoGLViewingMatrixElement.h</file>
    <file>SoGLViewportRegionElement.h</file>
    <file>SoInt32Element.h</file>
    <file>SoLazyElement.h</file>
    <file>SoLightAttenuationElement.h</file>
    <file>SoLightElement.h</file>
    <file>SoLightModelElement.h</file>
    <file>SoLinePatternElement.h</file>
    <file>SoLineWidthElement.h</file>
    <file>SoListenerDopplerElement.h</file>
    <file>SoListenerGainElement.h</file>
    <file>SoListenerOrientationElement.h</file>
    <file>SoListenerPositionElement.h</file>
    <file>SoLocalBBoxMatrixElement.h</file>
    <file>SoMaterialBindingElement.h</file>
    <file>SoModelMatrixElement.h</file>
    <file>SoMultiTextureCoordinateElement.h</file>
    <file>SoMultiTextureEnabledElement.h</file>
    <file>SoMultiTextureImageElement.h</file>
    <file>SoMultiTextureMatrixElement.h</file>
    <file>SoNormalBindingElement.h</file>
    <file>SoNormalElement.h</file>
    <file>SoOverrideElement.h</file>
    <file>SoPickRayElement.h</file>
    <file>SoPickStyleElement.h</file>
    <file>SoPointSizeElement.h</file>
    <file>SoPolygonOffsetElement.h</file>
    <file>SoProfileCoordinateElement.h</file>
    <file>SoProfileElement.h</file>
    <file>SoProjectionMatrixElement.h</file>
    <file>SoReplacedElement.h</file>
    <file>SoShapeHintsElement.h</file>
    <file>SoShapeStyleElement.h</file>
    <file>SoShininessElement.h</file>
    <file>SoSoundElement.h</file>
    <file>SoSpecularColorElement.h</file>
    <file>SoSubElement.h</file>
    <file>SoSwitchElement.h</file>
    <file>SoTextOutlineEnabledElement.h</file>
    <file>SoTextureCombineElement.h</file>
    <file>SoTextureCoordinateBindingElement.h</file>
    <file>SoTextureOverrideElement.h</file>
    <file>SoTextureQualityElement.h</file>
    <file>SoTextureUnitElement.h</file>
    <file>SoTransparencyElement.h</file>
    <file>SoUnitsElement.h</file>
    <file>SoVertexAttributeBindingElement.h</file>
    <file>SoVertexAttributeElement.h</file>
    <file>SoViewingMatrixElement.h</file>
    <file>SoViewportRegionElement.h</file>
    <file>SoViewVolumeElement.h</file>
    <file>SoWindowElement.h</file>
  </compound>
  <compound kind="dir">
    <name>elements</name>
    <path>C:/Users/Roy/Documents/coin/src/elements/</path>
    <filename>dir_5dcf309160a90b9c0caefcbd4aa871bb.html</filename>
    <dir>GL</dir>
    <file>SoAccumulatedElement.cpp</file>
    <file>SoAmbientColorElement.cpp</file>
    <file>SoAnnoText3CharOrientElement.cpp</file>
    <file>SoAnnoText3FontSizeHintElement.cpp</file>
    <file>SoAnnoText3RenderPrintElement.cpp</file>
    <file>SoBBoxModelMatrixElement.cpp</file>
    <file>SoBumpMapCoordinateElement.cpp</file>
    <file>SoBumpMapElement.cpp</file>
    <file>SoBumpMapMatrixElement.cpp</file>
    <file>SoCacheElement.cpp</file>
    <file>SoCacheHintElement.cpp</file>
    <file>SoClipPlaneElement.cpp</file>
    <file>SoComplexityElement.cpp</file>
    <file>SoComplexityTypeElement.cpp</file>
    <file>SoCoordinateElement.cpp</file>
    <file>SoCreaseAngleElement.cpp</file>
    <file>SoCullElement.cpp</file>
    <file>SoDecimationPercentageElement.cpp</file>
    <file>SoDecimationTypeElement.cpp</file>
    <file>SoDepthBufferElement.cpp</file>
    <file>SoDiffuseColorElement.cpp</file>
    <file>SoDrawStyleElement.cpp</file>
    <file>SoElement.cpp</file>
    <file>SoEmissiveColorElement.cpp</file>
    <file>SoEnvironmentElement.cpp</file>
    <file>SoFloatElement.cpp</file>
    <file>SoFocalDistanceElement.cpp</file>
    <file>SoFontNameElement.cpp</file>
    <file>SoFontSizeElement.cpp</file>
    <file>SoInt32Element.cpp</file>
    <file>SoLazyElement.cpp</file>
    <file>SoLightAttenuationElement.cpp</file>
    <file>SoLightElement.cpp</file>
    <file>SoLightModelElement.cpp</file>
    <file>SoLinePatternElement.cpp</file>
    <file>SoLineWidthElement.cpp</file>
    <file>SoListenerDopplerElement.cpp</file>
    <file>SoListenerGainElement.cpp</file>
    <file>SoListenerOrientationElement.cpp</file>
    <file>SoListenerPositionElement.cpp</file>
    <file>SoLocalBBoxMatrixElement.cpp</file>
    <file>SoMaterialBindingElement.cpp</file>
    <file>SoModelMatrixElement.cpp</file>
    <file>SoMultiTextureCoordinateElement.cpp</file>
    <file>SoMultiTextureEnabledElement.cpp</file>
    <file>SoMultiTextureImageElement.cpp</file>
    <file>SoMultiTextureMatrixElement.cpp</file>
    <file>SoNormalBindingElement.cpp</file>
    <file>SoNormalElement.cpp</file>
    <file>SoOverrideElement.cpp</file>
    <file>SoPickRayElement.cpp</file>
    <file>SoPickStyleElement.cpp</file>
    <file>SoPointSizeElement.cpp</file>
    <file>SoPolygonOffsetElement.cpp</file>
    <file>SoProfileCoordinateElement.cpp</file>
    <file>SoProfileElement.cpp</file>
    <file>SoProjectionMatrixElement.cpp</file>
    <file>SoReplacedElement.cpp</file>
    <file>SoShapeHintsElement.cpp</file>
    <file>SoShapeStyleElement.cpp</file>
    <file>SoShininessElement.cpp</file>
    <file>SoSoundElement.cpp</file>
    <file>SoSpecularColorElement.cpp</file>
    <file>SoSwitchElement.cpp</file>
    <file>SoTextOutlineEnabledElement.cpp</file>
    <file>SoTextureCombineElement.cpp</file>
    <file>SoTextureCoordinateBindingElement.cpp</file>
    <file>SoTextureOverrideElement.cpp</file>
    <file>SoTextureQualityElement.cpp</file>
    <file>SoTextureScalePolicyElement.cpp</file>
    <file>SoTextureScalePolicyElement.h</file>
    <file>SoTextureScaleQualityElement.cpp</file>
    <file>SoTextureScaleQualityElement.h</file>
    <file>SoTextureUnitElement.cpp</file>
    <file>SoTransparencyElement.cpp</file>
    <file>SoUnitsElement.cpp</file>
    <file>SoVertexAttributeBindingElement.cpp</file>
    <file>SoVertexAttributeElement.cpp</file>
    <file>SoViewingMatrixElement.cpp</file>
    <file>SoViewportRegionElement.cpp</file>
    <file>SoViewVolumeElement.cpp</file>
    <file>SoWindowElement.cpp</file>
  </compound>
  <compound kind="dir">
    <name>engines</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/engines/</path>
    <filename>dir_2a14eac50189fb6c09af2157cd50c1b6.html</filename>
    <file>SoBoolOperation.h</file>
    <file>SoCalculator.h</file>
    <file>SoComposeMatrix.h</file>
    <file>SoComposeRotation.h</file>
    <file>SoComposeRotationFromTo.h</file>
    <file>SoComposeVec2f.h</file>
    <file>SoComposeVec3f.h</file>
    <file>SoComposeVec4f.h</file>
    <file>SoComputeBoundingBox.h</file>
    <file>SoConcatenate.h</file>
    <file>SoCounter.h</file>
    <file>SoDecomposeMatrix.h</file>
    <file>SoDecomposeRotation.h</file>
    <file>SoDecomposeVec2f.h</file>
    <file>SoDecomposeVec3f.h</file>
    <file>SoDecomposeVec4f.h</file>
    <file>SoElapsedTime.h</file>
    <file>SoEngine.h</file>
    <file>SoEngineOutput.h</file>
    <file>SoFieldConverter.h</file>
    <file>SoGate.h</file>
    <file>SoHeightMapToNormalMap.h</file>
    <file>SoInterpolate.h</file>
    <file>SoInterpolateFloat.h</file>
    <file>SoInterpolateRotation.h</file>
    <file>SoInterpolateVec2f.h</file>
    <file>SoInterpolateVec3f.h</file>
    <file>SoInterpolateVec4f.h</file>
    <file>SoNodeEngine.h</file>
    <file>SoOneShot.h</file>
    <file>SoOnOff.h</file>
    <file>SoOutputData.h</file>
    <file>SoSelectOne.h</file>
    <file>SoTexture2Convert.h</file>
    <file>SoTimeCounter.h</file>
    <file>SoTransformVec3f.h</file>
    <file>SoTriggerAny.h</file>
  </compound>
  <compound kind="dir">
    <name>engines</name>
    <path>C:/Users/Roy/Documents/coin/src/engines/</path>
    <filename>dir_34e4a45256aa917010fac0a43fddd191.html</filename>
    <file>SoBoolOperation.cpp</file>
    <file>SoCalculator.cpp</file>
    <file>SoComposeMatrix.cpp</file>
    <file>SoComposeRotation.cpp</file>
    <file>SoComposeRotationFromTo.cpp</file>
    <file>SoComposeVec2f.cpp</file>
    <file>SoComposeVec3f.cpp</file>
    <file>SoComposeVec4f.cpp</file>
    <file>SoComputeBoundingBox.cpp</file>
    <file>SoConcatenate.cpp</file>
    <file>SoCounter.cpp</file>
    <file>SoDecomposeMatrix.cpp</file>
    <file>SoDecomposeRotation.cpp</file>
    <file>SoDecomposeVec2f.cpp</file>
    <file>SoDecomposeVec3f.cpp</file>
    <file>SoDecomposeVec4f.cpp</file>
    <file>SoElapsedTime.cpp</file>
    <file>SoEngine.cpp</file>
    <file>SoEngineOutput.cpp</file>
    <file>SoFieldConverter.cpp</file>
    <file>SoGate.cpp</file>
    <file>SoHeightMapToNormalMap.cpp</file>
    <file>SoInterpolate.cpp</file>
    <file>SoInterpolateFloat.cpp</file>
    <file>SoInterpolateRotation.cpp</file>
    <file>SoInterpolateVec2f.cpp</file>
    <file>SoInterpolateVec3f.cpp</file>
    <file>SoInterpolateVec4f.cpp</file>
    <file>SoNodeEngine.cpp</file>
    <file>SoOneShot.cpp</file>
    <file>SoOnOff.cpp</file>
    <file>SoOutputData.cpp</file>
    <file>SoSelectOne.cpp</file>
    <file>SoTexture2Convert.cpp</file>
    <file>SoTimeCounter.cpp</file>
    <file>SoTransformVec3f.cpp</file>
    <file>SoTriggerAny.cpp</file>
  </compound>
  <compound kind="dir">
    <name>errors</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/errors/</path>
    <filename>dir_9d977e215413ece1e53d1d93b3924618.html</filename>
    <file>SoDebugError.h</file>
    <file>SoError.h</file>
    <file>SoMemoryError.h</file>
    <file>SoReadError.h</file>
  </compound>
  <compound kind="dir">
    <name>errors</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/errors/</path>
    <filename>dir_36aa6eb7f3a30b77f72bf455afb2bc31.html</filename>
    <file>debugerror.h</file>
    <file>error.h</file>
  </compound>
  <compound kind="dir">
    <name>errors</name>
    <path>C:/Users/Roy/Documents/coin/src/errors/</path>
    <filename>dir_1d80aaa04ec7c641b0abf44e053aac40.html</filename>
    <file>debugerror.cpp</file>
    <file>error.cpp</file>
    <file>SoDebugError.cpp</file>
    <file>SoError.cpp</file>
    <file>SoMemoryError.cpp</file>
    <file>SoReadError.cpp</file>
  </compound>
  <compound kind="dir">
    <name>events</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/events/</path>
    <filename>dir_c4ce17c828022263432a3964f7a0f303.html</filename>
    <file>SoButtonEvent.h</file>
    <file>SoEvent.h</file>
    <file>SoKeyboardEvent.h</file>
    <file>SoLocation2Event.h</file>
    <file>SoMotion3Event.h</file>
    <file>SoMouseButtonEvent.h</file>
    <file>SoSpaceballButtonEvent.h</file>
  </compound>
  <compound kind="dir">
    <name>events</name>
    <path>C:/Users/Roy/Documents/coin/src/events/</path>
    <filename>dir_ba500250dcedd691c16792fc2384940e.html</filename>
    <file>SoButtonEvent.cpp</file>
    <file>SoEvent.cpp</file>
    <file>SoKeyboardEvent.cpp</file>
    <file>SoLocation2Event.cpp</file>
    <file>SoMotion3Event.cpp</file>
    <file>SoMouseButtonEvent.cpp</file>
    <file>SoSpaceballButtonEvent.cpp</file>
  </compound>
  <compound kind="dir">
    <name>fields</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/fields/</path>
    <filename>dir_ba48c9e7882709ea734c35613c3621b1.html</filename>
    <file>SoField.h</file>
    <file>SoFieldContainer.h</file>
    <file>SoFieldData.h</file>
    <file>SoMFBitMask.h</file>
    <file>SoMFBool.h</file>
    <file>SoMFColor.h</file>
    <file>SoMFColorRGBA.h</file>
    <file>SoMFDouble.h</file>
    <file>SoMFEngine.h</file>
    <file>SoMFEnum.h</file>
    <file>SoMFFloat.h</file>
    <file>SoMField.h</file>
    <file>SoMFInt32.h</file>
    <file>SoMFMatrix.h</file>
    <file>SoMFName.h</file>
    <file>SoMFNode.h</file>
    <file>SoMFPath.h</file>
    <file>SoMFPlane.h</file>
    <file>SoMFRotation.h</file>
    <file>SoMFShort.h</file>
    <file>SoMFString.h</file>
    <file>SoMFTime.h</file>
    <file>SoMFUInt32.h</file>
    <file>SoMFUShort.h</file>
    <file>SoMFVec2b.h</file>
    <file>SoMFVec2d.h</file>
    <file>SoMFVec2f.h</file>
    <file>SoMFVec2i32.h</file>
    <file>SoMFVec2s.h</file>
    <file>SoMFVec3b.h</file>
    <file>SoMFVec3d.h</file>
    <file>SoMFVec3f.h</file>
    <file>SoMFVec3i32.h</file>
    <file>SoMFVec3s.h</file>
    <file>SoMFVec4b.h</file>
    <file>SoMFVec4d.h</file>
    <file>SoMFVec4f.h</file>
    <file>SoMFVec4i32.h</file>
    <file>SoMFVec4s.h</file>
    <file>SoMFVec4ub.h</file>
    <file>SoMFVec4ui32.h</file>
    <file>SoMFVec4us.h</file>
    <file>SoSFBitMask.h</file>
    <file>SoSFBool.h</file>
    <file>SoSFBox2d.h</file>
    <file>SoSFBox2f.h</file>
    <file>SoSFBox2i32.h</file>
    <file>SoSFBox2s.h</file>
    <file>SoSFBox3d.h</file>
    <file>SoSFBox3f.h</file>
    <file>SoSFBox3i32.h</file>
    <file>SoSFBox3s.h</file>
    <file>SoSFColor.h</file>
    <file>SoSFColorRGBA.h</file>
    <file>SoSFDouble.h</file>
    <file>SoSFEngine.h</file>
    <file>SoSFEnum.h</file>
    <file>SoSFFloat.h</file>
    <file>SoSField.h</file>
    <file>SoSFImage.h</file>
    <file>SoSFImage3.h</file>
    <file>SoSFInt32.h</file>
    <file>SoSFMatrix.h</file>
    <file>SoSFName.h</file>
    <file>SoSFNode.h</file>
    <file>SoSFPath.h</file>
    <file>SoSFPlane.h</file>
    <file>SoSFRotation.h</file>
    <file>SoSFShort.h</file>
    <file>SoSFString.h</file>
    <file>SoSFTime.h</file>
    <file>SoSFTrigger.h</file>
    <file>SoSFUInt32.h</file>
    <file>SoSFUShort.h</file>
    <file>SoSFVec2b.h</file>
    <file>SoSFVec2d.h</file>
    <file>SoSFVec2f.h</file>
    <file>SoSFVec2i32.h</file>
    <file>SoSFVec2s.h</file>
    <file>SoSFVec3b.h</file>
    <file>SoSFVec3d.h</file>
    <file>SoSFVec3f.h</file>
    <file>SoSFVec3i32.h</file>
    <file>SoSFVec3s.h</file>
    <file>SoSFVec4b.h</file>
    <file>SoSFVec4d.h</file>
    <file>SoSFVec4f.h</file>
    <file>SoSFVec4i32.h</file>
    <file>SoSFVec4s.h</file>
    <file>SoSFVec4ub.h</file>
    <file>SoSFVec4ui32.h</file>
    <file>SoSFVec4us.h</file>
    <file>SoSubField.h</file>
  </compound>
  <compound kind="dir">
    <name>fields</name>
    <path>C:/Users/Roy/Documents/coin/src/fields/</path>
    <filename>dir_69690f1e5ae78f4e8eba1b02333b1766.html</filename>
    <file>SoField.cpp</file>
    <file>SoFieldContainer.cpp</file>
    <file>SoFieldData.cpp</file>
    <file>SoMFBitMask.cpp</file>
    <file>SoMFBool.cpp</file>
    <file>SoMFColor.cpp</file>
    <file>SoMFColorRGBA.cpp</file>
    <file>SoMFDouble.cpp</file>
    <file>SoMFEngine.cpp</file>
    <file>SoMFEnum.cpp</file>
    <file>SoMFFloat.cpp</file>
    <file>SoMField.cpp</file>
    <file>SoMFInt32.cpp</file>
    <file>SoMFMatrix.cpp</file>
    <file>SoMFName.cpp</file>
    <file>SoMFNode.cpp</file>
    <file>SoMFPath.cpp</file>
    <file>SoMFPlane.cpp</file>
    <file>SoMFRotation.cpp</file>
    <file>SoMFShort.cpp</file>
    <file>SoMFString.cpp</file>
    <file>SoMFTime.cpp</file>
    <file>SoMFUInt32.cpp</file>
    <file>SoMFUShort.cpp</file>
    <file>SoMFVec2b.cpp</file>
    <file>SoMFVec2d.cpp</file>
    <file>SoMFVec2f.cpp</file>
    <file>SoMFVec2i32.cpp</file>
    <file>SoMFVec2s.cpp</file>
    <file>SoMFVec3b.cpp</file>
    <file>SoMFVec3d.cpp</file>
    <file>SoMFVec3f.cpp</file>
    <file>SoMFVec3i32.cpp</file>
    <file>SoMFVec3s.cpp</file>
    <file>SoMFVec4b.cpp</file>
    <file>SoMFVec4d.cpp</file>
    <file>SoMFVec4f.cpp</file>
    <file>SoMFVec4i32.cpp</file>
    <file>SoMFVec4s.cpp</file>
    <file>SoMFVec4ub.cpp</file>
    <file>SoMFVec4ui32.cpp</file>
    <file>SoMFVec4us.cpp</file>
    <file>SoSFBitMask.cpp</file>
    <file>SoSFBool.cpp</file>
    <file>SoSFBox2d.cpp</file>
    <file>SoSFBox2f.cpp</file>
    <file>SoSFBox2i32.cpp</file>
    <file>SoSFBox2s.cpp</file>
    <file>SoSFBox3d.cpp</file>
    <file>SoSFBox3f.cpp</file>
    <file>SoSFBox3i32.cpp</file>
    <file>SoSFBox3s.cpp</file>
    <file>SoSFColor.cpp</file>
    <file>SoSFColorRGBA.cpp</file>
    <file>SoSFDouble.cpp</file>
    <file>SoSFEngine.cpp</file>
    <file>SoSFEnum.cpp</file>
    <file>SoSFFloat.cpp</file>
    <file>SoSField.cpp</file>
    <file>SoSFImage.cpp</file>
    <file>SoSFImage3.cpp</file>
    <file>SoSFInt32.cpp</file>
    <file>SoSFMatrix.cpp</file>
    <file>SoSFName.cpp</file>
    <file>SoSFNode.cpp</file>
    <file>SoSFPath.cpp</file>
    <file>SoSFPlane.cpp</file>
    <file>SoSFRotation.cpp</file>
    <file>SoSFShort.cpp</file>
    <file>SoSFString.cpp</file>
    <file>SoSFTime.cpp</file>
    <file>SoSFTrigger.cpp</file>
    <file>SoSFUInt32.cpp</file>
    <file>SoSFUShort.cpp</file>
    <file>SoSFVec2b.cpp</file>
    <file>SoSFVec2d.cpp</file>
    <file>SoSFVec2f.cpp</file>
    <file>SoSFVec2i32.cpp</file>
    <file>SoSFVec2s.cpp</file>
    <file>SoSFVec3b.cpp</file>
    <file>SoSFVec3d.cpp</file>
    <file>SoSFVec3f.cpp</file>
    <file>SoSFVec3i32.cpp</file>
    <file>SoSFVec3s.cpp</file>
    <file>SoSFVec4b.cpp</file>
    <file>SoSFVec4d.cpp</file>
    <file>SoSFVec4f.cpp</file>
    <file>SoSFVec4i32.cpp</file>
    <file>SoSFVec4s.cpp</file>
    <file>SoSFVec4ub.cpp</file>
    <file>SoSFVec4ui32.cpp</file>
    <file>SoSFVec4us.cpp</file>
  </compound>
  <compound kind="dir">
    <name>fonts</name>
    <path>C:/Users/Roy/Documents/coin/src/fonts/</path>
    <filename>dir_3f0a598268e67bae00bbfe2089d2dde8.html</filename>
    <file>fontlib_wrapper.cpp</file>
  </compound>
  <compound kind="dir">
    <name>ForeignFiles</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/ForeignFiles/</path>
    <filename>dir_9921d61afe27305be0d0863f2b5e8662.html</filename>
    <file>SoForeignFileKit.h</file>
    <file>SoSTLFileKit.h</file>
  </compound>
  <compound kind="dir">
    <name>foreignfiles</name>
    <path>C:/Users/Roy/Documents/coin/src/foreignfiles/</path>
    <filename>dir_b7ea4e14b1232cd8226b28226cbb801a.html</filename>
    <file>SoForeignFileKit.cpp</file>
    <file>SoSTLFileKit.cpp</file>
  </compound>
  <compound kind="dir">
    <name>FXViz</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/FXViz/</path>
    <filename>dir_07a2c7cdc9cdb7acb18a2e33a9ced5e5.html</filename>
    <dir>elements</dir>
    <dir>nodes</dir>
  </compound>
  <compound kind="dir">
    <name>geo</name>
    <path>C:/Users/Roy/Documents/coin/src/geo/</path>
    <filename>dir_43b221028ca1895b7dc766ef5fb390d8.html</filename>
    <file>SoGeoCoordinate.cpp</file>
    <file>SoGeoElement.cpp</file>
    <file>SoGeoLocation.cpp</file>
    <file>SoGeoOrigin.cpp</file>
    <file>SoGeoSeparator.cpp</file>
  </compound>
  <compound kind="dir">
    <name>GL</name>
    <path>C:/Users/Roy/Documents/coin/src/elements/GL/</path>
    <filename>dir_8b79ee05f309203af630838c8ce20e8f.html</filename>
    <file>SoGLCacheContextElement.cpp</file>
    <file>SoGLClipPlaneElement.cpp</file>
    <file>SoGLColorIndexElement.cpp</file>
    <file>SoGLCoordinateElement.cpp</file>
    <file>SoGLDepthBufferElement.cpp</file>
    <file>SoGLDisplayList.cpp</file>
    <file>SoGLDrawStyleElement.cpp</file>
    <file>SoGLEnvironmentElement.cpp</file>
    <file>SoGLLazyElement.cpp</file>
    <file>SoGLLightIdElement.cpp</file>
    <file>SoGLLinePatternElement.cpp</file>
    <file>SoGLLineWidthElement.cpp</file>
    <file>SoGLModelMatrixElement.cpp</file>
    <file>SoGLMultiTextureCoordinateElement.cpp</file>
    <file>SoGLMultiTextureEnabledElement.cpp</file>
    <file>SoGLMultiTextureImageElement.cpp</file>
    <file>SoGLMultiTextureMatrixElement.cpp</file>
    <file>SoGLNormalElement.cpp</file>
    <file>SoGLPointSizeElement.cpp</file>
    <file>SoGLPolygonOffsetElement.cpp</file>
    <file>SoGLProjectionMatrixElement.cpp</file>
    <file>SoGLRenderPassElement.cpp</file>
    <file>SoGLShapeHintsElement.cpp</file>
    <file>SoGLUpdateAreaElement.cpp</file>
    <file>SoGLVBOElement.cpp</file>
    <file>SoGLVertexAttributeElement.cpp</file>
    <file>SoGLViewingMatrixElement.cpp</file>
    <file>SoGLViewportRegionElement.cpp</file>
    <file>SoResetMatrixElement.cpp</file>
    <file>SoResetMatrixElement.h</file>
  </compound>
  <compound kind="dir">
    <name>glue</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/glue/</path>
    <filename>dir_f556b851a9d88744cfaa8ed93da93e9f.html</filename>
    <file>dl.h</file>
    <file>spidermonkey.h</file>
  </compound>
  <compound kind="dir">
    <name>glue</name>
    <path>C:/Users/Roy/Documents/coin/src/glue/</path>
    <filename>dir_8bef1f795f7351f51d5fe53dfe1fde1e.html</filename>
    <file>dl.cpp</file>
    <file>gl.cpp</file>
    <file>spidermonkey.cpp</file>
  </compound>
  <compound kind="dir">
    <name>HardCopy</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/HardCopy/</path>
    <filename>dir_8e0fce2f1d952482a06c197a13ed7d6b.html</filename>
    <file>SoHardCopy.h</file>
    <file>SoPSVectorOutput.h</file>
    <file>SoVectorizeAction.h</file>
    <file>SoVectorizePSAction.h</file>
    <file>SoVectorOutput.h</file>
  </compound>
  <compound kind="dir">
    <name>hardcopy</name>
    <path>C:/Users/Roy/Documents/coin/src/hardcopy/</path>
    <filename>dir_af4bbc36f6e5d1479f9533e4c437ad8d.html</filename>
    <file>HardCopy.cpp</file>
    <file>PSVectorOutput.cpp</file>
    <file>VectorizeAction.cpp</file>
    <file>VectorizePSAction.cpp</file>
    <file>VectorOutput.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>C:/Users/Roy/Documents/coin/build/msvc9/include/</path>
    <filename>dir_d5f37cf8419624cf563683bcce61419f.html</filename>
    <dir>Inventor</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>C:/Users/Roy/Documents/coin/include/</path>
    <filename>dir_fdbfa34857ac648aae3e8a271b12381a.html</filename>
    <dir>Inventor</dir>
    <file>SoDebug.h</file>
  </compound>
  <compound kind="dir">
    <name>Inventor</name>
    <path>C:/Users/Roy/Documents/coin/build/msvc9/include/Inventor/</path>
    <filename>dir_252a65015a50114adf44b35d7fc22651.html</filename>
    <dir>C</dir>
  </compound>
  <compound kind="dir">
    <name>Inventor</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/</path>
    <filename>dir_1133be6d58fbee1b084ebb5dc646be42.html</filename>
    <dir>actions</dir>
    <dir>annex</dir>
    <dir>bundles</dir>
    <dir>C</dir>
    <dir>caches</dir>
    <dir>collision</dir>
    <dir>details</dir>
    <dir>draggers</dir>
    <dir>elements</dir>
    <dir>engines</dir>
    <dir>errors</dir>
    <dir>events</dir>
    <dir>fields</dir>
    <dir>lists</dir>
    <dir>lock</dir>
    <dir>manips</dir>
    <dir>misc</dir>
    <dir>navigation</dir>
    <dir>nodekits</dir>
    <dir>nodes</dir>
    <dir>projectors</dir>
    <dir>scxml</dir>
    <dir>sensors</dir>
    <dir>system</dir>
    <dir>VRMLnodes</dir>
    <file>SbBasic.h</file>
    <file>SbBox2d.h</file>
    <file>SbBox2f.h</file>
    <file>SbBox2i32.h</file>
    <file>SbBox2s.h</file>
    <file>SbBox3d.h</file>
    <file>SbBox3f.h</file>
    <file>SbBox3i32.h</file>
    <file>SbBox3s.h</file>
    <file>SbBSPTree.h</file>
    <file>SbClip.h</file>
    <file>SbColor.h</file>
    <file>SbColor4f.h</file>
    <file>SbCylinder.h</file>
    <file>SbDict.h</file>
    <file>SbDPLine.h</file>
    <file>SbDPMatrix.h</file>
    <file>SbDPPlane.h</file>
    <file>SbDPRotation.h</file>
    <file>SbDPViewVolume.h</file>
    <file>SbHeap.h</file>
    <file>SbImage.h</file>
    <file>SbLine.h</file>
    <file>SbMatrix.h</file>
    <file>SbName.h</file>
    <file>SbOctTree.h</file>
    <file>SbPlane.h</file>
    <file>SbRotation.h</file>
    <file>SbSphere.h</file>
    <file>SbString.h</file>
    <file>SbTesselator.h</file>
    <file>SbTime.h</file>
    <file>SbTypeInfo.h</file>
    <file>SbVec2b.h</file>
    <file>SbVec2d.h</file>
    <file>SbVec2f.h</file>
    <file>SbVec2i32.h</file>
    <file>SbVec2s.h</file>
    <file>SbVec2ub.h</file>
    <file>SbVec2ui32.h</file>
    <file>SbVec2us.h</file>
    <file>SbVec3b.h</file>
    <file>SbVec3d.h</file>
    <file>SbVec3f.h</file>
    <file>SbVec3i32.h</file>
    <file>SbVec3s.h</file>
    <file>SbVec3ub.h</file>
    <file>SbVec3ui32.h</file>
    <file>SbVec3us.h</file>
    <file>SbVec4b.h</file>
    <file>SbVec4d.h</file>
    <file>SbVec4f.h</file>
    <file>SbVec4i32.h</file>
    <file>SbVec4s.h</file>
    <file>SbVec4ub.h</file>
    <file>SbVec4ui32.h</file>
    <file>SbViewportRegion.h</file>
    <file>SbViewVolume.h</file>
    <file>SbXfBox3d.h</file>
    <file>SbXfBox3f.h</file>
    <file>SoDB.h</file>
    <file>SoEventManager.h</file>
    <file>SoFullPath.h</file>
    <file>SoInput.h</file>
    <file>SoInteraction.h</file>
    <file>SoNodeKitPath.h</file>
    <file>SoOffscreenRenderer.h</file>
    <file>SoOutput.h</file>
    <file>SoPath.h</file>
    <file>SoPickedPoint.h</file>
    <file>SoPrimitiveVertex.h</file>
    <file>SoRenderManager.h</file>
    <file>SoSceneManager.h</file>
    <file>SoType.h</file>
  </compound>
  <compound kind="dir">
    <name>io</name>
    <path>C:/Users/Roy/Documents/coin/src/io/</path>
    <filename>dir_8524082a5155dc8eece58975c760a91d.html</filename>
    <file>SoInput.cpp</file>
    <file>SoInputP.h</file>
    <file>SoOutput.cpp</file>
    <file>SoWriterefCounter.cpp</file>
    <file>SoWriterefCounter.h</file>
  </compound>
  <compound kind="dir">
    <name>lists</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/lists/</path>
    <filename>dir_862b6504ca426ed299bac67946922626.html</filename>
    <file>SbIntList.h</file>
    <file>SbList.h</file>
    <file>SbPList.h</file>
    <file>SbStringList.h</file>
    <file>SbVec3fList.h</file>
    <file>SoActionMethodList.h</file>
    <file>SoAuditorList.h</file>
    <file>SoBaseList.h</file>
    <file>SoCallbackList.h</file>
    <file>SoDetailList.h</file>
    <file>SoEnabledElementsList.h</file>
    <file>SoEngineList.h</file>
    <file>SoEngineOutputList.h</file>
    <file>SoFieldList.h</file>
    <file>SoNodeList.h</file>
    <file>SoPathList.h</file>
    <file>SoPickedPointList.h</file>
    <file>SoTypeList.h</file>
  </compound>
  <compound kind="dir">
    <name>lists</name>
    <path>C:/Users/Roy/Documents/coin/src/lists/</path>
    <filename>dir_23fd5a64f8677581e106b57fa1b8d4ca.html</filename>
    <file>SbIntList.cpp</file>
    <file>SbList.cpp</file>
    <file>SbPList.cpp</file>
    <file>SbStringList.cpp</file>
    <file>SbVec3fList.cpp</file>
    <file>SoActionMethodList.cpp</file>
    <file>SoAuditorList.cpp</file>
    <file>SoBaseList.cpp</file>
    <file>SoCallbackList.cpp</file>
    <file>SoDetailList.cpp</file>
    <file>SoEnabledElementsList.cpp</file>
    <file>SoEngineList.cpp</file>
    <file>SoEngineOutputList.cpp</file>
    <file>SoFieldList.cpp</file>
    <file>SoNodeList.cpp</file>
    <file>SoPathList.cpp</file>
    <file>SoPickedPointList.cpp</file>
    <file>SoTypeList.cpp</file>
  </compound>
  <compound kind="dir">
    <name>lock</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/lock/</path>
    <filename>dir_2a46a4e0db4db55f4d3753fb1ceab83d.html</filename>
    <file>SoLockMgr.h</file>
  </compound>
  <compound kind="dir">
    <name>manips</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/manips/</path>
    <filename>dir_62999b0f01bb5e9d5f0f460b2c1423f0.html</filename>
    <file>SoCenterballManip.h</file>
    <file>SoClipPlaneManip.h</file>
    <file>SoDirectionalLightManip.h</file>
    <file>SoHandleBoxManip.h</file>
    <file>SoJackManip.h</file>
    <file>SoPointLightManip.h</file>
    <file>SoSpotLightManip.h</file>
    <file>SoTabBoxManip.h</file>
    <file>SoTrackballManip.h</file>
    <file>SoTransformBoxManip.h</file>
    <file>SoTransformerManip.h</file>
    <file>SoTransformManip.h</file>
  </compound>
  <compound kind="dir">
    <name>manips</name>
    <path>C:/Users/Roy/Documents/coin/src/manips/</path>
    <filename>dir_cb08680d7c8cfe6cc5005c2a11ffdb36.html</filename>
    <file>commoncode.cpp</file>
    <file>SoCenterballManip.cpp</file>
    <file>SoClipPlaneManip.cpp</file>
    <file>SoDirectionalLightManip.cpp</file>
    <file>SoHandleBoxManip.cpp</file>
    <file>SoJackManip.cpp</file>
    <file>SoPointLightManip.cpp</file>
    <file>SoSpotLightManip.cpp</file>
    <file>SoTabBoxManip.cpp</file>
    <file>SoTrackballManip.cpp</file>
    <file>SoTransformBoxManip.cpp</file>
    <file>SoTransformerManip.cpp</file>
    <file>SoTransformManip.cpp</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/misc/</path>
    <filename>dir_d0a2ac40e6a9b4be5f5929babb804d63.html</filename>
    <file>CoinResources.h</file>
    <file>SoAudioDevice.h</file>
    <file>SoBase.h</file>
    <file>SoChildList.h</file>
    <file>SoContextHandler.h</file>
    <file>SoGLBigImage.h</file>
    <file>SoGLCubeMapImage.h</file>
    <file>SoGLDriverDatabase.h</file>
    <file>SoGLImage.h</file>
    <file>SoGlyph.h</file>
    <file>SoJavaScriptEngine.h</file>
    <file>SoLightPath.h</file>
    <file>SoNormalGenerator.h</file>
    <file>SoNotification.h</file>
    <file>SoNotRec.h</file>
    <file>SoProto.h</file>
    <file>SoProtoInstance.h</file>
    <file>SoState.h</file>
    <file>SoTempPath.h</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>C:/Users/Roy/Documents/coin/src/misc/</path>
    <filename>dir_1dda0901b302ab0ab80053fefe7ad392.html</filename>
    <file>CoinResources.cpp</file>
    <file>SoAudioDevice.cpp</file>
    <file>SoBase.cpp</file>
    <file>SoChildList.cpp</file>
    <file>SoCompactPathList.cpp</file>
    <file>SoCompactPathList.h</file>
    <file>SoContextHandler.cpp</file>
    <file>SoDB.cpp</file>
    <file>SoDebug.cpp</file>
    <file>SoEventManager.cpp</file>
    <file>SoFullPath.cpp</file>
    <file>SoGlyph.cpp</file>
    <file>SoInteraction.cpp</file>
    <file>SoJavaScriptEngine.cpp</file>
    <file>SoLightPath.cpp</file>
    <file>SoLockManager.cpp</file>
    <file>SoNormalGenerator.cpp</file>
    <file>SoNotification.cpp</file>
    <file>SoNotRec.cpp</file>
    <file>SoPath.cpp</file>
    <file>SoPickedPoint.cpp</file>
    <file>SoPrimitiveVertex.cpp</file>
    <file>SoProto.cpp</file>
    <file>SoProtoInstance.cpp</file>
    <file>SoSceneManager.cpp</file>
    <file>SoShaderGenerator.cpp</file>
    <file>SoShaderGenerator.h</file>
    <file>SoState.cpp</file>
    <file>SoTempPath.cpp</file>
    <file>SoType.cpp</file>
  </compound>
  <compound kind="dir">
    <name>msvc9</name>
    <path>C:/Users/Roy/Documents/coin/build/msvc9/</path>
    <filename>dir_5abf37982bef8f7e48d1ede0edd30dca.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>navigation</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/navigation/</path>
    <filename>dir_d6ef8d14214a3d32688fcaf986e9a056.html</filename>
    <file>SoScXMLDollyTarget.h</file>
    <file>SoScXMLFlightControlTarget.h</file>
    <file>SoScXMLMiscTarget.h</file>
    <file>SoScXMLMotionTarget.h</file>
    <file>SoScXMLNavigation.h</file>
    <file>SoScXMLNavigationTarget.h</file>
    <file>SoScXMLPanTarget.h</file>
    <file>SoScXMLRotateTarget.h</file>
    <file>SoScXMLSeekTarget.h</file>
    <file>SoScXMLSpinTarget.h</file>
    <file>SoScXMLZoomTarget.h</file>
  </compound>
  <compound kind="dir">
    <name>navigation</name>
    <path>C:/Users/Roy/Documents/coin/src/navigation/</path>
    <filename>dir_5b8b07711dc86d8162955f9aeb0ce060.html</filename>
    <file>SoScXMLDollyTarget.cpp</file>
    <file>SoScXMLFlightControlTarget.cpp</file>
    <file>SoScXMLMiscTarget.cpp</file>
    <file>SoScXMLMotionTarget.cpp</file>
    <file>SoScXMLNavigation.cpp</file>
    <file>SoScXMLNavigationTarget.cpp</file>
    <file>SoScXMLPanTarget.cpp</file>
    <file>SoScXMLRotateTarget.cpp</file>
    <file>SoScXMLSeekTarget.cpp</file>
    <file>SoScXMLSpinTarget.cpp</file>
    <file>SoScXMLZoomTarget.cpp</file>
  </compound>
  <compound kind="dir">
    <name>nodekits</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/nodekits/</path>
    <filename>dir_f51d40daab95fd703853ab3343b36b0d.html</filename>
    <file>SoNodeVisualize.h</file>
    <file>SoProfilerOverlayKit.h</file>
  </compound>
  <compound kind="dir">
    <name>nodekits</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodekits/</path>
    <filename>dir_281c327e66dddcac6545477f2db5f7a4.html</filename>
    <file>SoAppearanceKit.h</file>
    <file>SoBaseKit.h</file>
    <file>SoCameraKit.h</file>
    <file>SoInteractionKit.h</file>
    <file>SoLightKit.h</file>
    <file>SoNodeKit.h</file>
    <file>SoNodekitCatalog.h</file>
    <file>SoNodeKitListPart.h</file>
    <file>SoSceneKit.h</file>
    <file>SoSeparatorKit.h</file>
    <file>SoShapeKit.h</file>
    <file>SoWrapperKit.h</file>
  </compound>
  <compound kind="dir">
    <name>nodekits</name>
    <path>C:/Users/Roy/Documents/coin/src/nodekits/</path>
    <filename>dir_c85eb476f4c7e4be27cfd808ccb59e31.html</filename>
    <file>SoAppearanceKit.cpp</file>
    <file>SoBaseKit.cpp</file>
    <file>SoCameraKit.cpp</file>
    <file>SoInteractionKit.cpp</file>
    <file>SoLightKit.cpp</file>
    <file>SoNodeKit.cpp</file>
    <file>SoNodekitCatalog.cpp</file>
    <file>SoNodeKitListPart.cpp</file>
    <file>SoNodeKitPath.cpp</file>
    <file>SoSceneKit.cpp</file>
    <file>SoSeparatorKit.cpp</file>
    <file>SoShapeKit.cpp</file>
    <file>SoWrapperKit.cpp</file>
  </compound>
  <compound kind="dir">
    <name>nodes</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/FXViz/nodes/</path>
    <filename>dir_a6594b1e07ea4bff96bfafe7a8dd3f9e.html</filename>
    <file>SoShadowCulling.h</file>
    <file>SoShadowDirectionalLight.h</file>
    <file>SoShadowGroup.h</file>
    <file>SoShadowSpotLight.h</file>
    <file>SoShadowStyle.h</file>
  </compound>
  <compound kind="dir">
    <name>nodes</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/nodes/</path>
    <filename>dir_c3a561f76f86b2cfab28c09c9cab6a2d.html</filename>
    <file>SoProfilerStats.h</file>
  </compound>
  <compound kind="dir">
    <name>nodes</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/nodes/</path>
    <filename>dir_de6cf2fea76d952f30f101be42f97e4b.html</filename>
    <file>SoAlphaTest.h</file>
    <file>SoAnnotation.h</file>
    <file>SoAntiSquish.h</file>
    <file>SoArray.h</file>
    <file>SoAsciiText.h</file>
    <file>SoBaseColor.h</file>
    <file>SoBlinker.h</file>
    <file>SoBumpMap.h</file>
    <file>SoBumpMapCoordinate.h</file>
    <file>SoBumpMapTransform.h</file>
    <file>SoCacheHint.h</file>
    <file>SoCallback.h</file>
    <file>SoCamera.h</file>
    <file>SoClipPlane.h</file>
    <file>SoColorIndex.h</file>
    <file>SoComplexity.h</file>
    <file>SoCone.h</file>
    <file>SoCoordinate3.h</file>
    <file>SoCoordinate4.h</file>
    <file>SoCube.h</file>
    <file>SoCylinder.h</file>
    <file>SoDepthBuffer.h</file>
    <file>SoDirectionalLight.h</file>
    <file>SoDrawStyle.h</file>
    <file>SoEnvironment.h</file>
    <file>SoEventCallback.h</file>
    <file>SoExtSelection.h</file>
    <file>SoFaceSet.h</file>
    <file>SoFile.h</file>
    <file>SoFont.h</file>
    <file>SoFontStyle.h</file>
    <file>SoFragmentShader.h</file>
    <file>SoFrustumCamera.h</file>
    <file>SoGeoCoordinate.h</file>
    <file>SoGeoLocation.h</file>
    <file>SoGeometryShader.h</file>
    <file>SoGeoOrigin.h</file>
    <file>SoGeoSeparator.h</file>
    <file>SoGroup.h</file>
    <file>SoImage.h</file>
    <file>SoIndexedFaceSet.h</file>
    <file>SoIndexedLineSet.h</file>
    <file>SoIndexedMarkerSet.h</file>
    <file>SoIndexedNurbsCurve.h</file>
    <file>SoIndexedNurbsSurface.h</file>
    <file>SoIndexedPointSet.h</file>
    <file>SoIndexedShape.h</file>
    <file>SoIndexedTriangleStripSet.h</file>
    <file>SoInfo.h</file>
    <file>SoLabel.h</file>
    <file>SoLevelOfDetail.h</file>
    <file>SoLight.h</file>
    <file>SoLightModel.h</file>
    <file>SoLinearProfile.h</file>
    <file>SoLineSet.h</file>
    <file>SoListener.h</file>
    <file>SoLocateHighlight.h</file>
    <file>SoLOD.h</file>
    <file>SoMarkerSet.h</file>
    <file>SoMaterial.h</file>
    <file>SoMaterialBinding.h</file>
    <file>SoMatrixTransform.h</file>
    <file>SoMultipleCopy.h</file>
    <file>SoNode.h</file>
    <file>SoNonIndexedShape.h</file>
    <file>SoNormal.h</file>
    <file>SoNormalBinding.h</file>
    <file>SoNurbsCurve.h</file>
    <file>SoNurbsProfile.h</file>
    <file>SoNurbsSurface.h</file>
    <file>SoOrthographicCamera.h</file>
    <file>SoPackedColor.h</file>
    <file>SoPathSwitch.h</file>
    <file>SoPendulum.h</file>
    <file>SoPerspectiveCamera.h</file>
    <file>SoPickStyle.h</file>
    <file>SoPointLight.h</file>
    <file>SoPointSet.h</file>
    <file>SoPolygonOffset.h</file>
    <file>SoProfile.h</file>
    <file>SoProfileCoordinate2.h</file>
    <file>SoProfileCoordinate3.h</file>
    <file>SoQuadMesh.h</file>
    <file>SoResetTransform.h</file>
    <file>SoRotation.h</file>
    <file>SoRotationXYZ.h</file>
    <file>SoRotor.h</file>
    <file>SoScale.h</file>
    <file>SoSceneTexture2.h</file>
    <file>SoSceneTextureCubeMap.h</file>
    <file>SoSelection.h</file>
    <file>SoSeparator.h</file>
    <file>SoShaderObject.h</file>
    <file>SoShaderParameter.h</file>
    <file>SoShaderProgram.h</file>
    <file>SoShape.h</file>
    <file>SoShapeHints.h</file>
    <file>SoShuttle.h</file>
    <file>SoSphere.h</file>
    <file>SoSpotLight.h</file>
    <file>SoSubNode.h</file>
    <file>SoSurroundScale.h</file>
    <file>SoSwitch.h</file>
    <file>SoText2.h</file>
    <file>SoText3.h</file>
    <file>SoTexture.h</file>
    <file>SoTexture2.h</file>
    <file>SoTexture2Transform.h</file>
    <file>SoTexture3.h</file>
    <file>SoTexture3Transform.h</file>
    <file>SoTextureCombine.h</file>
    <file>SoTextureCoordinate2.h</file>
    <file>SoTextureCoordinate3.h</file>
    <file>SoTextureCoordinateBinding.h</file>
    <file>SoTextureCoordinateCube.h</file>
    <file>SoTextureCoordinateCylinder.h</file>
    <file>SoTextureCoordinateDefault.h</file>
    <file>SoTextureCoordinateEnvironment.h</file>
    <file>SoTextureCoordinateFunction.h</file>
    <file>SoTextureCoordinateNormalMap.h</file>
    <file>SoTextureCoordinateObject.h</file>
    <file>SoTextureCoordinatePlane.h</file>
    <file>SoTextureCoordinateReflectionMap.h</file>
    <file>SoTextureCoordinateSphere.h</file>
    <file>SoTextureCubeMap.h</file>
    <file>SoTextureMatrixTransform.h</file>
    <file>SoTextureScalePolicy.h</file>
    <file>SoTextureUnit.h</file>
    <file>SoTransform.h</file>
    <file>SoTransformation.h</file>
    <file>SoTransformSeparator.h</file>
    <file>SoTranslation.h</file>
    <file>SoTransparencyType.h</file>
    <file>SoTriangleStripSet.h</file>
    <file>SoUnits.h</file>
    <file>SoVertexAttribute.h</file>
    <file>SoVertexAttributeBinding.h</file>
    <file>SoVertexProperty.h</file>
    <file>SoVertexShader.h</file>
    <file>SoVertexShape.h</file>
    <file>SoWWWAnchor.h</file>
    <file>SoWWWInline.h</file>
  </compound>
  <compound kind="dir">
    <name>nodes</name>
    <path>C:/Users/Roy/Documents/coin/src/nodes/</path>
    <filename>dir_0aeaa7f242b91137435e60a4f7c824aa.html</filename>
    <file>SoAlphaTest.cpp</file>
    <file>SoAnnotation.cpp</file>
    <file>SoAntiSquish.cpp</file>
    <file>SoArray.cpp</file>
    <file>SoBaseColor.cpp</file>
    <file>SoBlinker.cpp</file>
    <file>SoBumpMap.cpp</file>
    <file>SoBumpMapCoordinate.cpp</file>
    <file>SoBumpMapTransform.cpp</file>
    <file>SoCacheHint.cpp</file>
    <file>SoCallback.cpp</file>
    <file>SoCamera.cpp</file>
    <file>SoClipPlane.cpp</file>
    <file>SoColorIndex.cpp</file>
    <file>SoComplexity.cpp</file>
    <file>SoCoordinate3.cpp</file>
    <file>SoCoordinate4.cpp</file>
    <file>SoDepthBuffer.cpp</file>
    <file>SoDirectionalLight.cpp</file>
    <file>SoDrawStyle.cpp</file>
    <file>SoEnvironment.cpp</file>
    <file>SoEventCallback.cpp</file>
    <file>SoExtSelection.cpp</file>
    <file>SoFile.cpp</file>
    <file>SoFont.cpp</file>
    <file>SoFontStyle.cpp</file>
    <file>SoFrustumCamera.cpp</file>
    <file>SoGroup.cpp</file>
    <file>SoInfo.cpp</file>
    <file>SoLabel.cpp</file>
    <file>SoLevelOfDetail.cpp</file>
    <file>SoLight.cpp</file>
    <file>SoLightModel.cpp</file>
    <file>SoLinearProfile.cpp</file>
    <file>SoListener.cpp</file>
    <file>SoLocateHighlight.cpp</file>
    <file>SoLOD.cpp</file>
    <file>SoMaterial.cpp</file>
    <file>SoMaterialBinding.cpp</file>
    <file>SoMatrixTransform.cpp</file>
    <file>SoMultipleCopy.cpp</file>
    <file>SoNode.cpp</file>
    <file>SoNormal.cpp</file>
    <file>SoNormalBinding.cpp</file>
    <file>SoNurbsProfile.cpp</file>
    <file>SoOrthographicCamera.cpp</file>
    <file>SoPackedColor.cpp</file>
    <file>SoPathSwitch.cpp</file>
    <file>SoPendulum.cpp</file>
    <file>SoPerspectiveCamera.cpp</file>
    <file>SoPickStyle.cpp</file>
    <file>SoPointLight.cpp</file>
    <file>SoPolygonOffset.cpp</file>
    <file>SoProfile.cpp</file>
    <file>SoProfileCoordinate2.cpp</file>
    <file>SoProfileCoordinate3.cpp</file>
    <file>SoResetTransform.cpp</file>
    <file>SoRotation.cpp</file>
    <file>SoRotationXYZ.cpp</file>
    <file>SoRotor.cpp</file>
    <file>SoScale.cpp</file>
    <file>SoSceneTexture2.cpp</file>
    <file>SoSceneTextureCubeMap.cpp</file>
    <file>SoSelection.cpp</file>
    <file>SoSeparator.cpp</file>
    <file>SoShapeHints.cpp</file>
    <file>SoShuttle.cpp</file>
    <file>SoSpotLight.cpp</file>
    <file>SoSurroundScale.cpp</file>
    <file>SoSwitch.cpp</file>
    <file>SoTexture.cpp</file>
    <file>SoTexture2.cpp</file>
    <file>SoTexture2Transform.cpp</file>
    <file>SoTexture3.cpp</file>
    <file>SoTexture3Transform.cpp</file>
    <file>SoTextureCombine.cpp</file>
    <file>SoTextureCoordinate2.cpp</file>
    <file>SoTextureCoordinate3.cpp</file>
    <file>SoTextureCoordinateBinding.cpp</file>
    <file>SoTextureCoordinateCube.cpp</file>
    <file>SoTextureCoordinateCylinder.cpp</file>
    <file>SoTextureCoordinateDefault.cpp</file>
    <file>SoTextureCoordinateEnvironment.cpp</file>
    <file>SoTextureCoordinateFunction.cpp</file>
    <file>SoTextureCoordinateNormalMap.cpp</file>
    <file>SoTextureCoordinateObject.cpp</file>
    <file>SoTextureCoordinatePlane.cpp</file>
    <file>SoTextureCoordinateReflectionMap.cpp</file>
    <file>SoTextureCoordinateSphere.cpp</file>
    <file>SoTextureCubeMap.cpp</file>
    <file>SoTextureMatrixTransform.cpp</file>
    <file>SoTextureScalePolicy.cpp</file>
    <file>SoTextureUnit.cpp</file>
    <file>SoTransform.cpp</file>
    <file>SoTransformation.cpp</file>
    <file>SoTransformSeparator.cpp</file>
    <file>SoTranslation.cpp</file>
    <file>SoTransparencyType.cpp</file>
    <file>SoUnits.cpp</file>
    <file>SoVertexAttribute.cpp</file>
    <file>SoVertexAttributeBinding.cpp</file>
    <file>SoVertexProperty.cpp</file>
    <file>SoWWWAnchor.cpp</file>
    <file>SoWWWInline.cpp</file>
  </compound>
  <compound kind="dir">
    <name>Profiler</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/</path>
    <filename>dir_65aa6294cbb023bd2398c2de5e0cd6a3.html</filename>
    <dir>elements</dir>
    <dir>nodekits</dir>
    <dir>nodes</dir>
    <dir>utils</dir>
    <file>SbProfilingData.h</file>
    <file>SoProfiler.h</file>
  </compound>
  <compound kind="dir">
    <name>profiler</name>
    <path>C:/Users/Roy/Documents/coin/src/profiler/</path>
    <filename>dir_7e973fcb259d1386d6d0b4f83d98ce0d.html</filename>
    <file>SbProfilingData.cpp</file>
    <file>SoNodeVisualize.cpp</file>
    <file>SoProfiler.cpp</file>
    <file>SoProfilerElement.cpp</file>
    <file>SoProfilerOverlayKit.cpp</file>
    <file>SoProfilerP.h</file>
    <file>SoProfilerStats.cpp</file>
    <file>SoProfilingReportGenerator.cpp</file>
  </compound>
  <compound kind="dir">
    <name>projectors</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/projectors/</path>
    <filename>dir_5ee4389d427e046bb9c12f987f25b2c4.html</filename>
    <file>SbCylinderPlaneProjector.h</file>
    <file>SbCylinderProjector.h</file>
    <file>SbCylinderSectionProjector.h</file>
    <file>SbCylinderSheetProjector.h</file>
    <file>SbLineProjector.h</file>
    <file>SbPlaneProjector.h</file>
    <file>SbProjector.h</file>
    <file>SbSpherePlaneProjector.h</file>
    <file>SbSphereProjector.h</file>
    <file>SbSphereSectionProjector.h</file>
    <file>SbSphereSheetProjector.h</file>
  </compound>
  <compound kind="dir">
    <name>projectors</name>
    <path>C:/Users/Roy/Documents/coin/src/projectors/</path>
    <filename>dir_f782d0b535c323e1998906b3c803213b.html</filename>
    <file>SbCylinderPlaneProjector.cpp</file>
    <file>SbCylinderProjector.cpp</file>
    <file>SbCylinderSectionProjector.cpp</file>
    <file>SbCylinderSheetProjector.cpp</file>
    <file>SbLineProjector.cpp</file>
    <file>SbPlaneProjector.cpp</file>
    <file>SbProjector.cpp</file>
    <file>SbSpherePlaneProjector.cpp</file>
    <file>SbSphereProjector.cpp</file>
    <file>SbSphereSectionProjector.cpp</file>
    <file>SbSphereSheetProjector.cpp</file>
  </compound>
  <compound kind="dir">
    <name>rendering</name>
    <path>C:/Users/Roy/Documents/coin/src/rendering/</path>
    <filename>dir_64e933e3943fb7fc247337fd20d4263c.html</filename>
    <file>SoGL.cpp</file>
    <file>SoGLBigImage.cpp</file>
    <file>SoGLCubeMapImage.cpp</file>
    <file>SoGLDriverDatabase.cpp</file>
    <file>SoGLImage.cpp</file>
    <file>SoOffscreenRenderer.cpp</file>
    <file>SoRenderManager.cpp</file>
    <file>SoVBO.cpp</file>
    <file>SoVBO.h</file>
    <file>SoVertexArrayIndexer.cpp</file>
    <file>SoVertexArrayIndexer.h</file>
  </compound>
  <compound kind="dir">
    <name>scxml</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/scxml/</path>
    <filename>dir_7e629947195c933be0789627d8bd73a2.html</filename>
    <file>ScXML.h</file>
    <file>ScXMLAbstractStateElt.h</file>
    <file>ScXMLAnchorElt.h</file>
    <file>ScXMLAssignElt.h</file>
    <file>ScXMLCoinEvaluator.h</file>
    <file>ScXMLContentElt.h</file>
    <file>ScXMLDataElt.h</file>
    <file>ScXMLDataModelElt.h</file>
    <file>ScXMLDocument.h</file>
    <file>ScXMLECMAScriptEvaluator.h</file>
    <file>ScXMLElseElt.h</file>
    <file>ScXMLElseIfElt.h</file>
    <file>ScXMLElt.h</file>
    <file>ScXMLEvaluator.h</file>
    <file>ScXMLEvent.h</file>
    <file>ScXMLEventElt.h</file>
    <file>ScXMLEventTarget.h</file>
    <file>ScXMLExecutableElt.h</file>
    <file>ScXMLFinalElt.h</file>
    <file>ScXMLFinalizeElt.h</file>
    <file>ScXMLHistoryElt.h</file>
    <file>ScXMLIfElt.h</file>
    <file>ScXMLInitialElt.h</file>
    <file>ScXMLInvokeElt.h</file>
    <file>ScXMLLogElt.h</file>
    <file>ScXMLMinimumEvaluator.h</file>
    <file>ScXMLObject.h</file>
    <file>ScXMLOnEntryElt.h</file>
    <file>ScXMLOnExitElt.h</file>
    <file>ScXMLParallelElt.h</file>
    <file>ScXMLParamElt.h</file>
    <file>ScXMLScriptElt.h</file>
    <file>ScXMLScxmlElt.h</file>
    <file>ScXMLSendElt.h</file>
    <file>ScXMLStateElt.h</file>
    <file>ScXMLStateMachine.h</file>
    <file>ScXMLTransitionElt.h</file>
    <file>ScXMLValidateElt.h</file>
    <file>ScXMLXPathEvaluator.h</file>
    <file>SoScXMLEvent.h</file>
    <file>SoScXMLStateMachine.h</file>
  </compound>
  <compound kind="dir">
    <name>scxml</name>
    <path>C:/Users/Roy/Documents/coin/src/scxml/</path>
    <filename>dir_d71e63141d8a1f4bb18fb35abb3fcb16.html</filename>
    <file>ScXML.cpp</file>
    <file>ScXMLAbstractStateElt.cpp</file>
    <file>ScXMLAnchorElt.cpp</file>
    <file>ScXMLAssignElt.cpp</file>
    <file>ScXMLContentElt.cpp</file>
    <file>ScXMLDataElt.cpp</file>
    <file>ScXMLDataModelElt.cpp</file>
    <file>ScXMLDocument.cpp</file>
    <file>ScXMLECMAScriptEvaluator.cpp</file>
    <file>ScXMLElseElt.cpp</file>
    <file>ScXMLElseIfElt.cpp</file>
    <file>ScXMLElt.cpp</file>
    <file>ScXMLEvaluator.cpp</file>
    <file>ScXMLEvent.cpp</file>
    <file>ScXMLEventElt.cpp</file>
    <file>ScXMLEventTarget.cpp</file>
    <file>ScXMLExecutableElt.cpp</file>
    <file>ScXMLFinalElt.cpp</file>
    <file>ScXMLFinalizeElt.cpp</file>
    <file>ScXMLHistoryElt.cpp</file>
    <file>ScXMLIfElt.cpp</file>
    <file>ScXMLInitialElt.cpp</file>
    <file>ScXMLInvokeElt.cpp</file>
    <file>ScXMLLogElt.cpp</file>
    <file>ScXMLMinimumEvaluator.cpp</file>
    <file>ScXMLObject.cpp</file>
    <file>ScXMLOnEntryElt.cpp</file>
    <file>ScXMLOnExitElt.cpp</file>
    <file>ScXMLP.h</file>
    <file>ScXMLParallelElt.cpp</file>
    <file>ScXMLParamElt.cpp</file>
    <file>ScXMLScriptElt.cpp</file>
    <file>ScXMLScxmlElt.cpp</file>
    <file>ScXMLSendElt.cpp</file>
    <file>ScXMLStateElt.cpp</file>
    <file>ScXMLStateMachine.cpp</file>
    <file>ScXMLTransitionElt.cpp</file>
    <file>ScXMLValidateElt.cpp</file>
    <file>ScXMLXPathEvaluator.cpp</file>
  </compound>
  <compound kind="dir">
    <name>sensors</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/sensors/</path>
    <filename>dir_1ae7d0ea3ee5898b25e1351ffa9855ff.html</filename>
    <file>SoAlarmSensor.h</file>
    <file>SoDataSensor.h</file>
    <file>SoDelayQueueSensor.h</file>
    <file>SoFieldSensor.h</file>
    <file>SoIdleSensor.h</file>
    <file>SoNodeSensor.h</file>
    <file>SoOneShotSensor.h</file>
    <file>SoPathSensor.h</file>
    <file>SoSensor.h</file>
    <file>SoSensorManager.h</file>
    <file>SoTimerQueueSensor.h</file>
    <file>SoTimerSensor.h</file>
  </compound>
  <compound kind="dir">
    <name>sensors</name>
    <path>C:/Users/Roy/Documents/coin/src/sensors/</path>
    <filename>dir_b52453e76c65763b68882ba9477908e9.html</filename>
    <file>SoAlarmSensor.cpp</file>
    <file>SoDataSensor.cpp</file>
    <file>SoDelayQueueSensor.cpp</file>
    <file>SoFieldSensor.cpp</file>
    <file>SoIdleSensor.cpp</file>
    <file>SoNodeSensor.cpp</file>
    <file>SoOneShotSensor.cpp</file>
    <file>SoPathSensor.cpp</file>
    <file>SoSensor.cpp</file>
    <file>SoSensorManager.cpp</file>
    <file>SoTimerQueueSensor.cpp</file>
    <file>SoTimerSensor.cpp</file>
  </compound>
  <compound kind="dir">
    <name>shaders</name>
    <path>C:/Users/Roy/Documents/coin/src/shaders/</path>
    <filename>dir_1869307346c0b4f2f7a808130df563a4.html</filename>
    <file>SoFragmentShader.cpp</file>
    <file>SoGeometryShader.cpp</file>
    <file>SoShader.cpp</file>
    <file>SoShader.h</file>
    <file>SoShaderObject.cpp</file>
    <file>SoShaderParameter.cpp</file>
    <file>SoShaderProgram.cpp</file>
    <file>SoVertexShader.cpp</file>
  </compound>
  <compound kind="dir">
    <name>shadows</name>
    <path>C:/Users/Roy/Documents/coin/src/shadows/</path>
    <filename>dir_3cca697935c447262fdd56c38786d92c.html</filename>
    <file>SoGLShadowCullingElement.cpp</file>
    <file>SoShadowCulling.cpp</file>
    <file>SoShadowDirectionalLight.cpp</file>
    <file>SoShadowGroup.cpp</file>
    <file>SoShadowSpotLight.cpp</file>
    <file>SoShadowStyle.cpp</file>
    <file>SoShadowStyleElement.cpp</file>
  </compound>
  <compound kind="dir">
    <name>shapenodes</name>
    <path>C:/Users/Roy/Documents/coin/src/shapenodes/</path>
    <filename>dir_f199164e9537f4690591e1dd60979f96.html</filename>
    <file>SoAsciiText.cpp</file>
    <file>SoCone.cpp</file>
    <file>SoCube.cpp</file>
    <file>SoCylinder.cpp</file>
    <file>SoFaceSet.cpp</file>
    <file>SoImage.cpp</file>
    <file>SoIndexedFaceSet.cpp</file>
    <file>SoIndexedLineSet.cpp</file>
    <file>SoIndexedMarkerSet.cpp</file>
    <file>SoIndexedNurbsCurve.cpp</file>
    <file>SoIndexedNurbsSurface.cpp</file>
    <file>SoIndexedPointSet.cpp</file>
    <file>SoIndexedShape.cpp</file>
    <file>SoIndexedTriangleStripSet.cpp</file>
    <file>SoLineSet.cpp</file>
    <file>SoMarkerSet.cpp</file>
    <file>SoNonIndexedShape.cpp</file>
    <file>SoNurbsCurve.cpp</file>
    <file>SoNurbsSurface.cpp</file>
    <file>SoPointSet.cpp</file>
    <file>SoQuadMesh.cpp</file>
    <file>SoShape.cpp</file>
    <file>SoSphere.cpp</file>
    <file>SoText2.cpp</file>
    <file>SoText3.cpp</file>
    <file>SoTriangleStripSet.cpp</file>
    <file>SoVertexShape.cpp</file>
  </compound>
  <compound kind="dir">
    <name>soscxml</name>
    <path>C:/Users/Roy/Documents/coin/src/soscxml/</path>
    <filename>dir_cc410d270da53d67f5b4b24125aaf916.html</filename>
    <file>ScXMLCoinEvaluator.cpp</file>
    <file>SoScXMLEvent.cpp</file>
    <file>SoScXMLStateMachine.cpp</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>C:/Users/Roy/Documents/coin/src/</path>
    <filename>dir_3804c4075d07cc08f11d92f0f59df7cf.html</filename>
    <dir>actions</dir>
    <dir>base</dir>
    <dir>bundles</dir>
    <dir>caches</dir>
    <dir>collision</dir>
    <dir>details</dir>
    <dir>doc</dir>
    <dir>draggers</dir>
    <dir>elements</dir>
    <dir>engines</dir>
    <dir>errors</dir>
    <dir>events</dir>
    <dir>fields</dir>
    <dir>fonts</dir>
    <dir>foreignfiles</dir>
    <dir>geo</dir>
    <dir>glue</dir>
    <dir>hardcopy</dir>
    <dir>io</dir>
    <dir>lists</dir>
    <dir>manips</dir>
    <dir>misc</dir>
    <dir>navigation</dir>
    <dir>nodekits</dir>
    <dir>nodes</dir>
    <dir>profiler</dir>
    <dir>projectors</dir>
    <dir>rendering</dir>
    <dir>scxml</dir>
    <dir>sensors</dir>
    <dir>shaders</dir>
    <dir>shadows</dir>
    <dir>shapenodes</dir>
    <dir>soscxml</dir>
    <dir>threads</dir>
    <dir>upgraders</dir>
    <dir>vrml97</dir>
    <dir>xml</dir>
    <file>tidbits.cpp</file>
  </compound>
  <compound kind="dir">
    <name>system</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/system/</path>
    <filename>dir_39b9a941aa86c1fbdcd0d17182ac5fcf.html</filename>
    <file>gl.h</file>
  </compound>
  <compound kind="dir">
    <name>threads</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/threads/</path>
    <filename>dir_674cb831d1cb0df0d0ba68ac84a37367.html</filename>
    <file>barrier.h</file>
    <file>common.h</file>
    <file>condvar.h</file>
    <file>fifo.h</file>
    <file>mutex.h</file>
    <file>recmutex.h</file>
    <file>rwmutex.h</file>
    <file>sched.h</file>
    <file>storage.h</file>
    <file>sync.h</file>
    <file>thread.h</file>
    <file>worker.h</file>
    <file>wpool.h</file>
  </compound>
  <compound kind="dir">
    <name>threads</name>
    <path>C:/Users/Roy/Documents/coin/src/threads/</path>
    <filename>dir_6b9b36403a82c5d9e83d98be6ba3e664.html</filename>
    <file>barrier.cpp</file>
    <file>common.cpp</file>
    <file>condvar.cpp</file>
    <file>fifo.cpp</file>
    <file>mutex.cpp</file>
    <file>recmutex.cpp</file>
    <file>rwmutex.cpp</file>
    <file>sched.cpp</file>
    <file>schedp.h</file>
    <file>storage.cpp</file>
    <file>sync.cpp</file>
    <file>thread.cpp</file>
    <file>worker.cpp</file>
    <file>wpool.cpp</file>
  </compound>
  <compound kind="dir">
    <name>upgraders</name>
    <path>C:/Users/Roy/Documents/coin/src/upgraders/</path>
    <filename>dir_6e63e6c3df493353419a6570f11f8e31.html</filename>
    <file>SoPackedColorV20.cpp</file>
    <file>SoPackedColorV20.h</file>
    <file>SoShapeHintsV10.cpp</file>
    <file>SoShapeHintsV10.h</file>
    <file>SoUpgrader.cpp</file>
    <file>SoUpgrader.h</file>
  </compound>
  <compound kind="dir">
    <name>utils</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/annex/Profiler/utils/</path>
    <filename>dir_d8f34f0ce05d5ebafe1e99c2cddde250.html</filename>
    <file>SoProfilingReportGenerator.h</file>
  </compound>
  <compound kind="dir">
    <name>vrml97</name>
    <path>C:/Users/Roy/Documents/coin/src/vrml97/</path>
    <filename>dir_fd986917ba77269e8e6d76a40a695ac1.html</filename>
    <file>Anchor.cpp</file>
    <file>Appearance.cpp</file>
    <file>AudioClip.cpp</file>
    <file>Background.cpp</file>
    <file>Billboard.cpp</file>
    <file>Box.cpp</file>
    <file>Collision.cpp</file>
    <file>Color.cpp</file>
    <file>ColorInterpolator.cpp</file>
    <file>Cone.cpp</file>
    <file>Coordinate.cpp</file>
    <file>CoordinateInterpolator.cpp</file>
    <file>Cylinder.cpp</file>
    <file>CylinderSensor.cpp</file>
    <file>DirectionalLight.cpp</file>
    <file>DragSensor.cpp</file>
    <file>ElevationGrid.cpp</file>
    <file>Extrusion.cpp</file>
    <file>Fog.cpp</file>
    <file>FontStyle.cpp</file>
    <file>Geometry.cpp</file>
    <file>Group.cpp</file>
    <file>ImageTexture.cpp</file>
    <file>IndexedFaceSet.cpp</file>
    <file>IndexedLine.cpp</file>
    <file>IndexedLineSet.cpp</file>
    <file>IndexedShape.cpp</file>
    <file>Inline.cpp</file>
    <file>Interpolator.cpp</file>
    <file>Light.cpp</file>
    <file>LOD.cpp</file>
    <file>Material.cpp</file>
    <file>MovieTexture.cpp</file>
    <file>NavigationInfo.cpp</file>
    <file>Normal.cpp</file>
    <file>NormalInterpolator.cpp</file>
    <file>OrientationInterpolator.cpp</file>
    <file>Parent.cpp</file>
    <file>PixelTexture.cpp</file>
    <file>PlaneSensor.cpp</file>
    <file>PointLight.cpp</file>
    <file>PointSet.cpp</file>
    <file>PositionInterpolator.cpp</file>
    <file>ProximitySensor.cpp</file>
    <file>ScalarInterpolator.cpp</file>
    <file>Script.cpp</file>
    <file>Sensor.cpp</file>
    <file>Shape.cpp</file>
    <file>Sound.cpp</file>
    <file>Sphere.cpp</file>
    <file>SphereSensor.cpp</file>
    <file>SpotLight.cpp</file>
    <file>Switch.cpp</file>
    <file>Text.cpp</file>
    <file>Texture.cpp</file>
    <file>TextureCoordinate.cpp</file>
    <file>TextureTransform.cpp</file>
    <file>TimeSensor.cpp</file>
    <file>TouchSensor.cpp</file>
    <file>Transform.cpp</file>
    <file>VertexLine.cpp</file>
    <file>VertexPoint.cpp</file>
    <file>VertexShape.cpp</file>
    <file>Viewpoint.cpp</file>
    <file>VisibilitySensor.cpp</file>
    <file>WorldInfo.cpp</file>
  </compound>
  <compound kind="dir">
    <name>VRMLnodes</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/VRMLnodes/</path>
    <filename>dir_a833f53ff9d6ce53785ebb3a3f9bcaa3.html</filename>
    <file>SoVRMLAnchor.h</file>
    <file>SoVRMLAppearance.h</file>
    <file>SoVRMLAudioClip.h</file>
    <file>SoVRMLBackground.h</file>
    <file>SoVRMLBillboard.h</file>
    <file>SoVRMLBox.h</file>
    <file>SoVRMLCollision.h</file>
    <file>SoVRMLColor.h</file>
    <file>SoVRMLColorInterpolator.h</file>
    <file>SoVRMLCone.h</file>
    <file>SoVRMLCoordinate.h</file>
    <file>SoVRMLCoordinateInterpolator.h</file>
    <file>SoVRMLCylinder.h</file>
    <file>SoVRMLCylinderSensor.h</file>
    <file>SoVRMLDirectionalLight.h</file>
    <file>SoVRMLDragSensor.h</file>
    <file>SoVRMLElevationGrid.h</file>
    <file>SoVRMLExtrusion.h</file>
    <file>SoVRMLFog.h</file>
    <file>SoVRMLFontStyle.h</file>
    <file>SoVRMLGeometry.h</file>
    <file>SoVRMLGroup.h</file>
    <file>SoVRMLImageTexture.h</file>
    <file>SoVRMLIndexedFaceSet.h</file>
    <file>SoVRMLIndexedLine.h</file>
    <file>SoVRMLIndexedLineSet.h</file>
    <file>SoVRMLIndexedShape.h</file>
    <file>SoVRMLInline.h</file>
    <file>SoVRMLInterpolator.h</file>
    <file>SoVRMLLight.h</file>
    <file>SoVRMLLOD.h</file>
    <file>SoVRMLMaterial.h</file>
    <file>SoVRMLMovieTexture.h</file>
    <file>SoVRMLNavigationInfo.h</file>
    <file>SoVRMLNormal.h</file>
    <file>SoVRMLNormalInterpolator.h</file>
    <file>SoVRMLOrientationInterpolator.h</file>
    <file>SoVRMLParent.h</file>
    <file>SoVRMLPixelTexture.h</file>
    <file>SoVRMLPlaneSensor.h</file>
    <file>SoVRMLPointLight.h</file>
    <file>SoVRMLPointSet.h</file>
    <file>SoVRMLPositionInterpolator.h</file>
    <file>SoVRMLProximitySensor.h</file>
    <file>SoVRMLScalarInterpolator.h</file>
    <file>SoVRMLScript.h</file>
    <file>SoVRMLSensor.h</file>
    <file>SoVRMLShape.h</file>
    <file>SoVRMLSound.h</file>
    <file>SoVRMLSphere.h</file>
    <file>SoVRMLSphereSensor.h</file>
    <file>SoVRMLSpotLight.h</file>
    <file>SoVRMLSwitch.h</file>
    <file>SoVRMLText.h</file>
    <file>SoVRMLTexture.h</file>
    <file>SoVRMLTextureCoordinate.h</file>
    <file>SoVRMLTextureTransform.h</file>
    <file>SoVRMLTimeSensor.h</file>
    <file>SoVRMLTouchSensor.h</file>
    <file>SoVRMLTransform.h</file>
    <file>SoVRMLVertexLine.h</file>
    <file>SoVRMLVertexPoint.h</file>
    <file>SoVRMLVertexShape.h</file>
    <file>SoVRMLViewpoint.h</file>
    <file>SoVRMLVisibilitySensor.h</file>
    <file>SoVRMLWorldInfo.h</file>
  </compound>
  <compound kind="dir">
    <name>XML</name>
    <path>C:/Users/Roy/Documents/coin/include/Inventor/C/XML/</path>
    <filename>dir_c78928a47b4215b43f5fe69bbc3b81b5.html</filename>
    <file>attribute.h</file>
    <file>document.h</file>
    <file>element.h</file>
    <file>types.h</file>
  </compound>
  <compound kind="dir">
    <name>xml</name>
    <path>C:/Users/Roy/Documents/coin/src/xml/</path>
    <filename>dir_f4165dd89a13cd8ebeb72e0d7d8e2467.html</filename>
    <file>attribute.cpp</file>
    <file>document.cpp</file>
    <file>element.cpp</file>
    <file>types.cpp</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
  </compound>
</tagfile>
