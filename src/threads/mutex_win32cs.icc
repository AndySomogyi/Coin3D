/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

/* this file should only be included from mutex.c */

static int
win32_cs_struct_init(cc_mutex * mutex)
{
  InitializeCriticalSection(&mutex->w32thread.critical_section);
  return CC_OK;
}

static int
win32_cs_struct_clean(cc_mutex * mutex)
{
  DeleteCriticalSection(&mutex->w32thread.critical_section);
  /* this function does not have a return value, always return OK */
  return CC_OK;
}

static int
win32_cs_lock(cc_mutex * mutex)
{
  EnterCriticalSection(&mutex->w32thread.critical_section);
  return CC_OK;
}

static int
win32_cs_try_lock(cc_mutex * mutex)
{
  BOOL status;
  status = cc_mutex_TryEnterCriticalSection(&mutex->w32thread.critical_section);
  return status == TRUE ? CC_OK : CC_BUSY;
}

static int
win32_cs_unlock(cc_mutex * mutex)
{
  LeaveCriticalSection(&(mutex->w32thread.critical_section));
  return CC_OK;
}
