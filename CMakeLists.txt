cmake_minimum_required(VERSION 2.8.12)
project(Coin)
set (COIN_MAJOR_VERSION 4)
set (COIN_MINOR_VERSION 0)
set (COIN_MICRO_VERSION 0)
set (COIN_BETA_VERSION "a")
set (COIN_VERSION "${COIN_MAJOR_VERSION}.${COIN_MINOR_VERSION}.${COIN_MICRO_VERSION}${COIN_BETA_VERSION}")

set(CMAKE_DEBUG_POSTFIX "d")
option(COIN_BUILD_SHARED_LIBS "Build shared library when ON, static when OFF." ON)

option(COIN_THREADSAFE "Thread safe traversals." OFF)
option(COIN_HAVE_JAVASCRIPT "Javascript capabilities." ON)
option(HAVE_VRML97 "VRML97 support." ON)
option(HAVE_NODEKITS "Nodekit support." ON)
option(HAVE_DRAGGERS "Dragger support." ON)
option(HAVE_MANIPULATORS "Manipulator support." ON)
option(HAVE_SOUND "Sound support." ON)
option(HAVE_3DS_IMPORT_CAPABILITIES "3ds import capabilities." ON)

# it is assumed that simage library has been installed to same directory as Coin
set(COIN_LINK_LIBSIMAGE "no" CACHE STRING "Use and linkage of simage library.")
set_property(CACHE COIN_LINK_LIBSIMAGE PROPERTY STRINGS no runtime dynamic static)
if(COIN_LINK_LIBSIMAGE STREQUAL "no")
	set(HAVE_LIBSIMAGE OFF)
	set(SIMAGE_RUNTIME_LINKING OFF)
else()
	set(HAVE_LIBSIMAGE ON)
	include_directories(${CMAKE_INSTALL_PREFIX}/include)
	if(COIN_LINK_LIBSIMAGE STREQUAL "runtime")
		set(SIMAGE_RUNTIME_LINKING ON)
		if(WIN32)
			add_definitions(-DSIMAGE_DLL)
		endif()
	else()
		link_directories(${CMAKE_INSTALL_PREFIX}/lib)
		set(SIMAGE_RUNTIME_LINKING OFF)
		if(COIN_LINK_LIBSIMAGE STREQUAL "dynamic")
			link_libraries(debug simage1${CMAKE_DEBUG_POSTFIX})
			link_libraries(optimized simage1)
			if(WIN32)
				add_definitions(-DSIMAGE_DLL)
			endif()
		elseif(COIN_LINK_LIBSIMAGE STREQUAL "static")
			link_libraries(debug simage1s${CMAKE_DEBUG_POSTFIX})
			link_libraries(optimized simage1s)
			if(WIN32)
				add_definitions(-DSIMAGE_NOT_DLL)
				link_libraries(gdiplus)
			endif()
		endif()
	endif()
endif()

if(MSVC)
	option(COIN_BUILD_SINGLE_LIB "Build only one library when ON, multiple when OFF." ON)
	if (MSVC_VERSION GREATER 1500 OR MSVC_VERSION EQUAL 1500)
		option(COIN_BUILD_MSVC_MP "Enable build with multiple processes in Visual Studio" ON)
	else()
		set(COIN_BUILD_MSVC_MP OFF CACHE BOOL "Compiler option /MP requires at least Visual Studio 2008 (VS9) or newer" FORCE)
	endif()
	if(COIN_BUILD_MSVC_MP)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
	endif ()
	if(COIN_BUILD_SHARED_LIBS)
		add_definitions(-DCOIN_MAKE_DLL)
	endif()
else()
	option(COIN_BUILD_SINGLE_LIB "Build only one library when ON, multiple when OFF." OFF)
endif()

if(WIN32)
	add_definitions(-DHAVE_WINDOWS_H)
	set(HAVE_WIN32_API 1)
elseif(APPLE)
  set(CMAKE_SHARED_LINKER_FLAGS "-framework CoreFoundation")
else()
	add_compile_options(-fPIC)
endif()
include_directories(${CMAKE_BINARY_DIR}/include)

include(CheckIncludeFile)
check_include_file(dlfcn.h HAVE_DLFCN_H)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(unistd.h HAVE_UNISTD_H)
check_include_file(sys/time.h HAVE_SYS_TIME_H)
check_include_file(io.h HAVE_IO_H)
check_include_file(libgen.h HAVE_LIBGEN_H)
check_include_file(sys/param.h HAVE_SYS_PARAM_H)

include(CheckLibraryExists)
check_library_exists(dl dlopen "" HAVE_DL_LIB)
check_library_exists(GL glXChooseVisual "" HAVE_GLX)
check_library_exists(pthread pthread_create "" USE_PTHREAD)

include(CheckSymbolExists)
check_symbol_exists(GetEnvironmentVariable windows.h HAVE_GETENVIRONMENTVARIABLE)
if(NOT USE_PTHREAD)
	check_symbol_exists(CreateThread windows.h USE_W32THREAD)
endif()
check_symbol_exists(va_copy stdarg.h HAVE_VA_COPY_MACRO)
check_symbol_exists(strncasecmp string.h HAVE_STRNCASECMP)
check_symbol_exists(gettimeofday sys/time.h HAVE_GETTIMEOFDAY)
check_symbol_exists(getcwd unistd.h HAVE_GETCWD)
check_symbol_exists(isinf math.h HAVE_ISINF)
check_symbol_exists(isnan math.h HAVE_ISNAN)
check_symbol_exists(finite math.h HAVE_FINITE)
check_symbol_exists(__builtin_expect assert.h HAVE___BUILTIN_EXPECT)
check_symbol_exists(ilogb math.h HAVE_ILOGB)

check_symbol_exists(__func__ "" FUNC)
check_symbol_exists(__PRETTY_FUNCTION__ "" PRETTY_FUNCTION)
check_symbol_exists(__FUNCTION__ "" FUNCTION)
if(FUNC)
	set(HAVE_CPP_COMPILER_FUNCTION_NAME_VAR __func__)
elseif(PRETTY_FUNCTION)
	set(HAVE_CPP_COMPILER_FUNCTION_NAME_VAR __PRETTY_FUNCTION__)
elseif(FUNCTION)
	set(HAVE_CPP_COMPILER_FUNCTION_NAME_VAR __FUNCTION__)
endif()

if(NOT HAVE_UNISTD_H)
	add_definitions(-DYY_NO_UNISTD_H)
endif()

set(COIN_DOCUMENTATION_FILES)
add_subdirectory(include)
add_subdirectory(src)
add_subdirectory(data)
